
robo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005398  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005598  08005598  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a0  080055a0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080055a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bdc  20000060  08005608  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c3c  08005608  00024c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014544  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e80  00000000  00000000  00034617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00037498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dab  00000000  00000000  00038658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d1e  00000000  00000000  00039403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012be1  00000000  00000000  0003c121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094aab  00000000  00000000  0004ed02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d38  00000000  00000000  000e37b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e84e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005520 	.word	0x08005520

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005520 	.word	0x08005520

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fb3a 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81c 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8f4 	bl	80006d4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80004ec:	f000 f876 	bl	80005dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  TIM3->CCR2 = 80;
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <main+0x34>)
 80004f2:	2250      	movs	r2, #80	; 0x50
 80004f4:	639a      	str	r2, [r3, #56]	; 0x38


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f6:	f002 f9af 	bl	8002858 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fa:	4a06      	ldr	r2, [pc, #24]	; (8000514 <main+0x38>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	4806      	ldr	r0, [pc, #24]	; (8000518 <main+0x3c>)
 8000500:	f002 f9f4 	bl	80028ec <osThreadNew>
 8000504:	4603      	mov	r3, r0
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <main+0x40>)
 8000508:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800050a:	f002 f9c9 	bl	80028a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050e:	e7fe      	b.n	800050e <main+0x32>
 8000510:	40000400 	.word	0x40000400
 8000514:	0800555c 	.word	0x0800555c
 8000518:	08000801 	.word	0x08000801
 800051c:	200000c4 	.word	0x200000c4

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f004 ff0c 	bl	800534c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <SystemClock_Config+0xb4>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <SystemClock_Config+0xb4>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <SystemClock_Config+0xb4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <SystemClock_Config+0xb8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800056c:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <SystemClock_Config+0xb8>)
 800056e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <SystemClock_Config+0xb8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058a:	2300      	movs	r3, #0
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fde0 	bl	8001158 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059e:	f000 f95f 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f843 	bl	8001648 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005c8:	f000 f94a 	bl	8000860 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005fe:	4b33      	ldr	r3, [pc, #204]	; (80006cc <MX_TIM3_Init+0xf0>)
 8000600:	4a33      	ldr	r2, [pc, #204]	; (80006d0 <MX_TIM3_Init+0xf4>)
 8000602:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250;
 8000604:	4b31      	ldr	r3, [pc, #196]	; (80006cc <MX_TIM3_Init+0xf0>)
 8000606:	22fa      	movs	r2, #250	; 0xfa
 8000608:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <MX_TIM3_Init+0xf0>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <MX_TIM3_Init+0xf0>)
 8000612:	2264      	movs	r2, #100	; 0x64
 8000614:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <MX_TIM3_Init+0xf0>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_TIM3_Init+0xf0>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000622:	482a      	ldr	r0, [pc, #168]	; (80006cc <MX_TIM3_Init+0xf0>)
 8000624:	f001 faca 	bl	8001bbc <HAL_TIM_PWM_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800062e:	f000 f917 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	4619      	mov	r1, r3
 8000640:	4822      	ldr	r0, [pc, #136]	; (80006cc <MX_TIM3_Init+0xf0>)
 8000642:	f002 f843 	bl	80026cc <HAL_TIMEx_MasterConfigSynchronization>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800064c:	f000 f908 	bl	8000860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000650:	2360      	movs	r3, #96	; 0x60
 8000652:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000654:	2332      	movs	r3, #50	; 0x32
 8000656:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	4819      	ldr	r0, [pc, #100]	; (80006cc <MX_TIM3_Init+0xf0>)
 8000668:	f001 fd14 	bl	8002094 <HAL_TIM_PWM_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000672:	f000 f8f5 	bl	8000860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2204      	movs	r2, #4
 800067a:	4619      	mov	r1, r3
 800067c:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_TIM3_Init+0xf0>)
 800067e:	f001 fd09 	bl	8002094 <HAL_TIM_PWM_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000688:	f000 f8ea 	bl	8000860 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2208      	movs	r2, #8
 8000694:	4619      	mov	r1, r3
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_TIM3_Init+0xf0>)
 8000698:	f001 fcfc 	bl	8002094 <HAL_TIM_PWM_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80006a2:	f000 f8dd 	bl	8000860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	220c      	movs	r2, #12
 80006aa:	4619      	mov	r1, r3
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <MX_TIM3_Init+0xf0>)
 80006ae:	f001 fcf1 	bl	8002094 <HAL_TIM_PWM_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80006b8:	f000 f8d2 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <MX_TIM3_Init+0xf0>)
 80006be:	f000 f923 	bl	8000908 <HAL_TIM_MspPostInit>

}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	; 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000007c 	.word	0x2000007c
 80006d0:	40000400 	.word	0x40000400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <MX_GPIO_Init+0xe8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a32      	ldr	r2, [pc, #200]	; (80007bc <MX_GPIO_Init+0xe8>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b30      	ldr	r3, [pc, #192]	; (80007bc <MX_GPIO_Init+0xe8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <MX_GPIO_Init+0xe8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a2b      	ldr	r2, [pc, #172]	; (80007bc <MX_GPIO_Init+0xe8>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_GPIO_Init+0xe8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_GPIO_Init+0xe8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <MX_GPIO_Init+0xe8>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_GPIO_Init+0xe8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_GPIO_Init+0xe8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <MX_GPIO_Init+0xe8>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_GPIO_Init+0xe8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000760:	4817      	ldr	r0, [pc, #92]	; (80007c0 <MX_GPIO_Init+0xec>)
 8000762:	f000 fcc5 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4810      	ldr	r0, [pc, #64]	; (80007c0 <MX_GPIO_Init+0xec>)
 8000780:	f000 fb32 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_Pin */
  GPIO_InitStruct.Pin = Key_Pin;
 8000784:	2301      	movs	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <MX_GPIO_Init+0xf0>)
 8000798:	f000 fb26 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_Pin */
  GPIO_InitStruct.Pin = test_Pin;
 800079c:	2302      	movs	r3, #2
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a4:	2302      	movs	r3, #2
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_GPIO_Init+0xf0>)
 80007b0:	f000 fb1a 	bl	8000de8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	; 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40020000 	.word	0x40020000

080007c8 <RightMotorForward>:

/* USER CODE BEGIN 4 */

void RightMotorForward(){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80007cc:	2104      	movs	r1, #4
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <RightMotorForward+0x18>)
 80007d0:	f001 fa44 	bl	8001c5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 80007d4:	2100      	movs	r1, #0
 80007d6:	4802      	ldr	r0, [pc, #8]	; (80007e0 <RightMotorForward+0x18>)
 80007d8:	f001 faf0 	bl	8001dbc <HAL_TIM_PWM_Stop>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000007c 	.word	0x2000007c

080007e4 <RightMotorStop>:
void RightMotorBackward(){
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
}

void RightMotorStop(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 80007e8:	2100      	movs	r1, #0
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <RightMotorStop+0x18>)
 80007ec:	f001 fae6 	bl	8001dbc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80007f0:	2104      	movs	r1, #4
 80007f2:	4802      	ldr	r0, [pc, #8]	; (80007fc <RightMotorStop+0x18>)
 80007f4:	f001 fae2 	bl	8001dbc <HAL_TIM_PWM_Stop>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000007c 	.word	0x2000007c

08000800 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080c:	480a      	ldr	r0, [pc, #40]	; (8000838 <StartDefaultTask+0x38>)
 800080e:	f000 fc88 	bl	8001122 <HAL_GPIO_TogglePin>
	  RightMotorForward();
 8000812:	f7ff ffd9 	bl	80007c8 <RightMotorForward>
	  HAL_Delay(1000);
 8000816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081a:	f000 f9df 	bl	8000bdc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800081e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <StartDefaultTask+0x38>)
 8000824:	f000 fc7d 	bl	8001122 <HAL_GPIO_TogglePin>
	  RightMotorStop();
 8000828:	f7ff ffdc 	bl	80007e4 <RightMotorStop>
	  osDelay(1000);
 800082c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000830:	f002 f8ee 	bl	8002a10 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000834:	e7e8      	b.n	8000808 <StartDefaultTask+0x8>
 8000836:	bf00      	nop
 8000838:	40020800 	.word	0x40020800

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084e:	f000 f9a5 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40010000 	.word	0x40010000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_MspInit+0x54>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <HAL_MspInit+0x54>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x54>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_MspInit+0x54>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_MspInit+0x54>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_MspInit+0x54>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	210f      	movs	r1, #15
 80008ae:	f06f 0001 	mvn.w	r0, #1
 80008b2:	f000 fa6f 	bl	8000d94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <HAL_TIM_PWM_MspInit+0x3c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d10d      	bne.n	80008f2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_TIM_PWM_MspInit+0x40>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <HAL_TIM_PWM_MspInit+0x40>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <HAL_TIM_PWM_MspInit+0x40>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40000400 	.word	0x40000400
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a21      	ldr	r2, [pc, #132]	; (80009ac <HAL_TIM_MspPostInit+0xa4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d13b      	bne.n	80009a2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <HAL_TIM_MspPostInit+0xa8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <HAL_TIM_MspPostInit+0xa8>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <HAL_TIM_MspPostInit+0xa8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_TIM_MspPostInit+0xa8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <HAL_TIM_MspPostInit+0xa8>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_TIM_MspPostInit+0xa8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000962:	23c0      	movs	r3, #192	; 0xc0
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000972:	2302      	movs	r3, #2
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <HAL_TIM_MspPostInit+0xac>)
 800097e:	f000 fa33 	bl	8000de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000982:	2303      	movs	r3, #3
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000992:	2302      	movs	r3, #2
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <HAL_TIM_MspPostInit+0xb0>)
 800099e:	f000 fa23 	bl	8000de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40000400 	.word	0x40000400
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <HAL_InitTick+0xd0>)
 80009d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d4:	4a2d      	ldr	r2, [pc, #180]	; (8000a8c <HAL_InitTick+0xd0>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6453      	str	r3, [r2, #68]	; 0x44
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <HAL_InitTick+0xd0>)
 80009de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e8:	f107 020c 	add.w	r2, r7, #12
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fff4 	bl	80019e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009f8:	f000 ffde 	bl	80019b8 <HAL_RCC_GetPCLK2Freq>
 80009fc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <HAL_InitTick+0xd4>)
 8000a02:	fba2 2303 	umull	r2, r3, r2, r3
 8000a06:	0c9b      	lsrs	r3, r3, #18
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_InitTick+0xd8>)
 8000a0e:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <HAL_InitTick+0xdc>)
 8000a10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <HAL_InitTick+0xd8>)
 8000a14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <HAL_InitTick+0xd8>)
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_InitTick+0xd8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_InitTick+0xd8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_InitTick+0xd8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <HAL_InitTick+0xd8>)
 8000a34:	f001 f806 	bl	8001a44 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d11b      	bne.n	8000a7e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <HAL_InitTick+0xd8>)
 8000a48:	f001 f856 	bl	8001af8 <HAL_TIM_Base_Start_IT>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d111      	bne.n	8000a7e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a5a:	2019      	movs	r0, #25
 8000a5c:	f000 f9b6 	bl	8000dcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b0f      	cmp	r3, #15
 8000a64:	d808      	bhi.n	8000a78 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a66:	2200      	movs	r2, #0
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	2019      	movs	r0, #25
 8000a6c:	f000 f992 	bl	8000d94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_InitTick+0xe0>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	e002      	b.n	8000a7e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3730      	adds	r7, #48	; 0x30
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	431bde83 	.word	0x431bde83
 8000a94:	200000c8 	.word	0x200000c8
 8000a98:	40010000 	.word	0x40010000
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ad2:	f001 f9d7 	bl	8001e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000c8 	.word	0x200000c8

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f004 fc69 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fcd1 	bl	80004dc <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b48:	080055a8 	.word	0x080055a8
  ldr r2, =_sbss
 8000b4c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b50:	20004c3c 	.word	0x20004c3c

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f8fc 	bl	8000d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f7ff ff18 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fe6e 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000110 	.word	0x20000110

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000110 	.word	0x20000110

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff ffee 	bl	8000bc4 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffde 	bl	8000bc4 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <__NVIC_EnableIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff4c 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da6:	f7ff ff61 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	6978      	ldr	r0, [r7, #20]
 8000db2:	f7ff ffb1 	bl	8000d18 <NVIC_EncodePriority>
 8000db6:	4602      	mov	r2, r0
 8000db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff80 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff54 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e159      	b.n	80010b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 8148 	bne.w	80010b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d005      	beq.n	8000e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d130      	bne.n	8000e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	f003 0201 	and.w	r2, r3, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d017      	beq.n	8000ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d123      	bne.n	8000f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	69b9      	ldr	r1, [r7, #24]
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0203 	and.w	r2, r3, #3
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80a2 	beq.w	80010b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a56      	ldr	r2, [pc, #344]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8a:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_GPIO_Init+0x2ec>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x202>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a48      	ldr	r2, [pc, #288]	; (80010dc <HAL_GPIO_Init+0x2f4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x1fe>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a47      	ldr	r2, [pc, #284]	; (80010e0 <HAL_GPIO_Init+0x2f8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a46      	ldr	r2, [pc, #280]	; (80010e4 <HAL_GPIO_Init+0x2fc>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x1f6>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a45      	ldr	r2, [pc, #276]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x1f2>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e008      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e004      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fea:	2300      	movs	r3, #0
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	f002 0203 	and.w	r2, r2, #3
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4093      	lsls	r3, r2
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ffc:	4935      	ldr	r1, [pc, #212]	; (80010d4 <HAL_GPIO_Init+0x2ec>)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_GPIO_Init+0x304>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800102e:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <HAL_GPIO_Init+0x304>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_GPIO_Init+0x304>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001058:	4a24      	ldr	r2, [pc, #144]	; (80010ec <HAL_GPIO_Init+0x304>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_GPIO_Init+0x304>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001082:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <HAL_GPIO_Init+0x304>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_GPIO_Init+0x304>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ac:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <HAL_GPIO_Init+0x304>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	f67f aea2 	bls.w	8000e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40013800 	.word	0x40013800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	619a      	str	r2, [r3, #24]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001134:	887a      	ldrh	r2, [r7, #2]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	041a      	lsls	r2, r3, #16
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	43d9      	mvns	r1, r3
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	400b      	ands	r3, r1
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e267      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d075      	beq.n	8001262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001176:	4b88      	ldr	r3, [pc, #544]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b04      	cmp	r3, #4
 8001180:	d00c      	beq.n	800119c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001182:	4b85      	ldr	r3, [pc, #532]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118a:	2b08      	cmp	r3, #8
 800118c:	d112      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118e:	4b82      	ldr	r3, [pc, #520]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800119a:	d10b      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	4b7e      	ldr	r3, [pc, #504]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d05b      	beq.n	8001260 <HAL_RCC_OscConfig+0x108>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d157      	bne.n	8001260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e242      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d106      	bne.n	80011cc <HAL_RCC_OscConfig+0x74>
 80011be:	4b76      	ldr	r3, [pc, #472]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a75      	ldr	r2, [pc, #468]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x98>
 80011d6:	4b70      	ldr	r3, [pc, #448]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6f      	ldr	r2, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b6d      	ldr	r3, [pc, #436]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6c      	ldr	r2, [pc, #432]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011f0:	4b69      	ldr	r3, [pc, #420]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a68      	ldr	r2, [pc, #416]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a65      	ldr	r2, [pc, #404]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fcd8 	bl	8000bc4 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fcd4 	bl	8000bc4 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e207      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xc0>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fcc4 	bl	8000bc4 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fcc0 	bl	8000bc4 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1f3      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	4b51      	ldr	r3, [pc, #324]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0xe8>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d063      	beq.n	8001336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126e:	4b4a      	ldr	r3, [pc, #296]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d11c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001286:	4b44      	ldr	r3, [pc, #272]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d116      	bne.n	80012c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x152>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e1c7      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4937      	ldr	r1, [pc, #220]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	e03a      	b.n	8001336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d020      	beq.n	800130a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_RCC_OscConfig+0x244>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff fc79 	bl	8000bc4 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc75 	bl	8000bc4 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e1a8      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4925      	ldr	r1, [pc, #148]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_OscConfig+0x244>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fc58 	bl	8000bc4 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fc54 	bl	8000bc4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e187      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d036      	beq.n	80013b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d016      	beq.n	8001378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_RCC_OscConfig+0x248>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fc38 	bl	8000bc4 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fc34 	bl	8000bc4 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e167      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800136c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x200>
 8001376:	e01b      	b.n	80013b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_OscConfig+0x248>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fc21 	bl	8000bc4 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	e00e      	b.n	80013a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fc1d 	bl	8000bc4 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d907      	bls.n	80013a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e150      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
 8001398:	40023800 	.word	0x40023800
 800139c:	42470000 	.word	0x42470000
 80013a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ea      	bne.n	8001386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8097 	beq.w	80014ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b81      	ldr	r3, [pc, #516]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10f      	bne.n	80013ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b7d      	ldr	r3, [pc, #500]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a7c      	ldr	r2, [pc, #496]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b7a      	ldr	r3, [pc, #488]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	4b77      	ldr	r3, [pc, #476]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d118      	bne.n	800142c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fa:	4b74      	ldr	r3, [pc, #464]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a73      	ldr	r2, [pc, #460]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001406:	f7ff fbdd 	bl	8000bc4 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140e:	f7ff fbd9 	bl	8000bc4 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e10c      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	4b6a      	ldr	r3, [pc, #424]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x2ea>
 8001434:	4b64      	ldr	r3, [pc, #400]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001438:	4a63      	ldr	r2, [pc, #396]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6713      	str	r3, [r2, #112]	; 0x70
 8001440:	e01c      	b.n	800147c <HAL_RCC_OscConfig+0x324>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x30c>
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a5e      	ldr	r2, [pc, #376]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
 8001456:	4b5c      	ldr	r3, [pc, #368]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145a:	4a5b      	ldr	r2, [pc, #364]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6713      	str	r3, [r2, #112]	; 0x70
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0x324>
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a57      	ldr	r2, [pc, #348]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
 8001470:	4b55      	ldr	r3, [pc, #340]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a54      	ldr	r2, [pc, #336]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001476:	f023 0304 	bic.w	r3, r3, #4
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d015      	beq.n	80014b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fb9e 	bl	8000bc4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148c:	f7ff fb9a 	bl	8000bc4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	; 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e0cb      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a2:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0ee      	beq.n	800148c <HAL_RCC_OscConfig+0x334>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff fb88 	bl	8000bc4 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fb84 	bl	8000bc4 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0b5      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ce:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ee      	bne.n	80014b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e0:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80a1 	beq.w	8001638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d05c      	beq.n	80015bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d141      	bne.n	800158e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_RCC_OscConfig+0x478>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb58 	bl	8000bc4 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fb54 	bl	8000bc4 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e087      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	3b01      	subs	r3, #1
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	491b      	ldr	r1, [pc, #108]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_RCC_OscConfig+0x478>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fb2d 	bl	8000bc4 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff fb29 	bl	8000bc4 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e05c      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x416>
 800158c:	e054      	b.n	8001638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_RCC_OscConfig+0x478>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fb16 	bl	8000bc4 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fb12 	bl	8000bc4 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e045      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x444>
 80015ba:	e03d      	b.n	8001638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e038      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000
 80015d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x4ec>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d028      	beq.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d121      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d11a      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001604:	4013      	ands	r3, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800160a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800160c:	4293      	cmp	r3, r2
 800160e:	d111      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	3b01      	subs	r3, #1
 800161e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d107      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0cc      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d90c      	bls.n	8001684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b65      	ldr	r3, [pc, #404]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0b8      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a52      	ldr	r2, [pc, #328]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	494d      	ldr	r1, [pc, #308]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d044      	beq.n	8001768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d119      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e07f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d003      	beq.n	8001706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001702:	2b03      	cmp	r3, #3
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e067      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f023 0203 	bic.w	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4934      	ldr	r1, [pc, #208]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001738:	f7ff fa44 	bl	8000bc4 <HAL_GetTick>
 800173c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	e00a      	b.n	8001756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001740:	f7ff fa40 	bl	8000bc4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e04f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 020c 	and.w	r2, r3, #12
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	429a      	cmp	r2, r3
 8001766:	d1eb      	bne.n	8001740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d20c      	bcs.n	8001790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e032      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4916      	ldr	r1, [pc, #88]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	490e      	ldr	r1, [pc, #56]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ce:	f000 f821 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	490a      	ldr	r1, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	5ccb      	ldrb	r3, [r1, r3]
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f8e4 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00
 8001804:	40023800 	.word	0x40023800
 8001808:	08005580 	.word	0x08005580
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001818:	b090      	sub	sp, #64	; 0x40
 800181a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d00d      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x40>
 8001838:	2b08      	cmp	r3, #8
 800183a:	f200 80a1 	bhi.w	8001980 <HAL_RCC_GetSysClockFreq+0x16c>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x34>
 8001842:	2b04      	cmp	r3, #4
 8001844:	d003      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x3a>
 8001846:	e09b      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_GetSysClockFreq+0x184>)
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800184c:	e09b      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001852:	e098      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d028      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	2200      	movs	r2, #0
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	627a      	str	r2, [r7, #36]	; 0x24
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800187c:	2100      	movs	r1, #0
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 8001880:	fb03 f201 	mul.w	r2, r3, r1
 8001884:	2300      	movs	r3, #0
 8001886:	fb00 f303 	mul.w	r3, r0, r3
 800188a:	4413      	add	r3, r2
 800188c:	4a43      	ldr	r2, [pc, #268]	; (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 800188e:	fba0 1202 	umull	r1, r2, r0, r2
 8001892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001894:	460a      	mov	r2, r1
 8001896:	62ba      	str	r2, [r7, #40]	; 0x28
 8001898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189a:	4413      	add	r3, r2
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a0:	2200      	movs	r2, #0
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	61fa      	str	r2, [r7, #28]
 80018a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ae:	f7fe fc97 	bl	80001e0 <__aeabi_uldivmod>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4613      	mov	r3, r2
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ba:	e053      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	2200      	movs	r2, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	617a      	str	r2, [r7, #20]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ce:	f04f 0b00 	mov.w	fp, #0
 80018d2:	4652      	mov	r2, sl
 80018d4:	465b      	mov	r3, fp
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	0159      	lsls	r1, r3, #5
 80018e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e4:	0150      	lsls	r0, r2, #5
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	ebb2 080a 	subs.w	r8, r2, sl
 80018ee:	eb63 090b 	sbc.w	r9, r3, fp
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001902:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001906:	ebb2 0408 	subs.w	r4, r2, r8
 800190a:	eb63 0509 	sbc.w	r5, r3, r9
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	00eb      	lsls	r3, r5, #3
 8001918:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800191c:	00e2      	lsls	r2, r4, #3
 800191e:	4614      	mov	r4, r2
 8001920:	461d      	mov	r5, r3
 8001922:	eb14 030a 	adds.w	r3, r4, sl
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	eb45 030b 	adc.w	r3, r5, fp
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800193a:	4629      	mov	r1, r5
 800193c:	028b      	lsls	r3, r1, #10
 800193e:	4621      	mov	r1, r4
 8001940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001944:	4621      	mov	r1, r4
 8001946:	028a      	lsls	r2, r1, #10
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194e:	2200      	movs	r2, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	60fa      	str	r2, [r7, #12]
 8001954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001958:	f7fe fc42 	bl	80001e0 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetSysClockFreq+0x184>)
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001988:	4618      	mov	r0, r3
 800198a:	3740      	adds	r7, #64	; 0x40
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	017d7840 	.word	0x017d7840

080019a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019bc:	f7ff fff0 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0b5b      	lsrs	r3, r3, #13
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08005590 	.word	0x08005590

080019e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	220f      	movs	r2, #15
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_RCC_GetClockConfig+0x60>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0207 	and.w	r2, r3, #7
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40023c00 	.word	0x40023c00

08001a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e041      	b.n	8001ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f839 	bl	8001ae2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4610      	mov	r0, r2
 8001a84:	f000 fbf0 	bl	8002268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d001      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e044      	b.n	8001b9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d018      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x6c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3a:	d013      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x6c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <HAL_TIM_Base_Start_IT+0xb4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00e      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x6c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d009      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x6c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d004      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x6c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d111      	bne.n	8001b88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d010      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b86:	e007      	b.n	8001b98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	40000c00 	.word	0x40000c00
 8001bb8:	40014000 	.word	0x40014000

08001bbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fe6e 	bl	80008c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 fb34 	bl	8002268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_TIM_PWM_Start+0x24>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e022      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x6a>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d109      	bne.n	8001c9a <HAL_TIM_PWM_Start+0x3e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	e015      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x6a>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d109      	bne.n	8001cb4 <HAL_TIM_PWM_Start+0x58>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	e008      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x6a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e068      	b.n	8001da0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d104      	bne.n	8001cde <HAL_TIM_PWM_Start+0x82>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cdc:	e013      	b.n	8001d06 <HAL_TIM_PWM_Start+0xaa>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d104      	bne.n	8001cee <HAL_TIM_PWM_Start+0x92>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cec:	e00b      	b.n	8001d06 <HAL_TIM_PWM_Start+0xaa>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d104      	bne.n	8001cfe <HAL_TIM_PWM_Start+0xa2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cfc:	e003      	b.n	8001d06 <HAL_TIM_PWM_Start+0xaa>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2202      	movs	r2, #2
 8001d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fcb6 	bl	8002680 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a23      	ldr	r2, [pc, #140]	; (8001da8 <HAL_TIM_PWM_Start+0x14c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d107      	bne.n	8001d2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_TIM_PWM_Start+0x14c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d018      	beq.n	8001d6a <HAL_TIM_PWM_Start+0x10e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d013      	beq.n	8001d6a <HAL_TIM_PWM_Start+0x10e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_TIM_PWM_Start+0x150>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00e      	beq.n	8001d6a <HAL_TIM_PWM_Start+0x10e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_TIM_PWM_Start+0x154>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_TIM_PWM_Start+0x10e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <HAL_TIM_PWM_Start+0x158>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d004      	beq.n	8001d6a <HAL_TIM_PWM_Start+0x10e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_TIM_PWM_Start+0x15c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d111      	bne.n	8001d8e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b06      	cmp	r3, #6
 8001d7a:	d010      	beq.n	8001d9e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8c:	e007      	b.n	8001d9e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40000800 	.word	0x40000800
 8001db4:	40000c00 	.word	0x40000c00
 8001db8:	40014000 	.word	0x40014000

08001dbc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	6839      	ldr	r1, [r7, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fc56 	bl	8002680 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a29      	ldr	r2, [pc, #164]	; (8001e80 <HAL_TIM_PWM_Stop+0xc4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d117      	bne.n	8001e0e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a1a      	ldr	r2, [r3, #32]
 8001de4:	f241 1311 	movw	r3, #4369	; 0x1111
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <HAL_TIM_PWM_Stop+0x52>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a1a      	ldr	r2, [r3, #32]
 8001df4:	f240 4344 	movw	r3, #1092	; 0x444
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d107      	bne.n	8001e0e <HAL_TIM_PWM_Stop+0x52>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a1a      	ldr	r2, [r3, #32]
 8001e14:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10f      	bne.n	8001e3e <HAL_TIM_PWM_Stop+0x82>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	f240 4344 	movw	r3, #1092	; 0x444
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d107      	bne.n	8001e3e <HAL_TIM_PWM_Stop+0x82>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d104      	bne.n	8001e4e <HAL_TIM_PWM_Stop+0x92>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e4c:	e013      	b.n	8001e76 <HAL_TIM_PWM_Stop+0xba>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d104      	bne.n	8001e5e <HAL_TIM_PWM_Stop+0xa2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e5c:	e00b      	b.n	8001e76 <HAL_TIM_PWM_Stop+0xba>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d104      	bne.n	8001e6e <HAL_TIM_PWM_Stop+0xb2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e6c:	e003      	b.n	8001e76 <HAL_TIM_PWM_Stop+0xba>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40010000 	.word	0x40010000

08001e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d122      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0202 	mvn.w	r2, #2
 8001eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f9b0 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f9a2 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f9b3 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d122      	bne.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d11b      	bne.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0204 	mvn.w	r2, #4
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f986 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f978 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f989 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d122      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d11b      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0208 	mvn.w	r2, #8
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f95c 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f94e 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f95f 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d122      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d11b      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0210 	mvn.w	r2, #16
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f932 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f924 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f935 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0201 	mvn.w	r2, #1
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fc1a 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b80      	cmp	r3, #128	; 0x80
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fbc4 	bl	80027bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8fa 	bl	8002254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b20      	cmp	r3, #32
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b20      	cmp	r3, #32
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0220 	mvn.w	r2, #32
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fb8e 	bl	80027a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e0ae      	b.n	8002210 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	f200 809f 	bhi.w	8002200 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	080020fd 	.word	0x080020fd
 80020cc:	08002201 	.word	0x08002201
 80020d0:	08002201 	.word	0x08002201
 80020d4:	08002201 	.word	0x08002201
 80020d8:	0800213d 	.word	0x0800213d
 80020dc:	08002201 	.word	0x08002201
 80020e0:	08002201 	.word	0x08002201
 80020e4:	08002201 	.word	0x08002201
 80020e8:	0800217f 	.word	0x0800217f
 80020ec:	08002201 	.word	0x08002201
 80020f0:	08002201 	.word	0x08002201
 80020f4:	08002201 	.word	0x08002201
 80020f8:	080021bf 	.word	0x080021bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f930 	bl	8002368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0208 	orr.w	r2, r2, #8
 8002116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0204 	bic.w	r2, r2, #4
 8002126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6999      	ldr	r1, [r3, #24]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	619a      	str	r2, [r3, #24]
      break;
 800213a:	e064      	b.n	8002206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f976 	bl	8002434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6999      	ldr	r1, [r3, #24]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	021a      	lsls	r2, r3, #8
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	619a      	str	r2, [r3, #24]
      break;
 800217c:	e043      	b.n	8002206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	4618      	mov	r0, r3
 8002186:	f000 f9c1 	bl	800250c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0208 	orr.w	r2, r2, #8
 8002198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0204 	bic.w	r2, r2, #4
 80021a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69d9      	ldr	r1, [r3, #28]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	61da      	str	r2, [r3, #28]
      break;
 80021bc:	e023      	b.n	8002206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fa0b 	bl	80025e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69d9      	ldr	r1, [r3, #28]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	021a      	lsls	r2, r3, #8
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	61da      	str	r2, [r3, #28]
      break;
 80021fe:	e002      	b.n	8002206 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	75fb      	strb	r3, [r7, #23]
      break;
 8002204:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a34      	ldr	r2, [pc, #208]	; (800234c <TIM_Base_SetConfig+0xe4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00f      	beq.n	80022a0 <TIM_Base_SetConfig+0x38>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002286:	d00b      	beq.n	80022a0 <TIM_Base_SetConfig+0x38>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a31      	ldr	r2, [pc, #196]	; (8002350 <TIM_Base_SetConfig+0xe8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d007      	beq.n	80022a0 <TIM_Base_SetConfig+0x38>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a30      	ldr	r2, [pc, #192]	; (8002354 <TIM_Base_SetConfig+0xec>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d003      	beq.n	80022a0 <TIM_Base_SetConfig+0x38>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <TIM_Base_SetConfig+0xf0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d108      	bne.n	80022b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a25      	ldr	r2, [pc, #148]	; (800234c <TIM_Base_SetConfig+0xe4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01b      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d017      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a22      	ldr	r2, [pc, #136]	; (8002350 <TIM_Base_SetConfig+0xe8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a21      	ldr	r2, [pc, #132]	; (8002354 <TIM_Base_SetConfig+0xec>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00f      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a20      	ldr	r2, [pc, #128]	; (8002358 <TIM_Base_SetConfig+0xf0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00b      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	; (800235c <TIM_Base_SetConfig+0xf4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <TIM_Base_SetConfig+0xf8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d003      	beq.n	80022f2 <TIM_Base_SetConfig+0x8a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <TIM_Base_SetConfig+0xfc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d108      	bne.n	8002304 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a08      	ldr	r2, [pc, #32]	; (800234c <TIM_Base_SetConfig+0xe4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d103      	bne.n	8002338 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	615a      	str	r2, [r3, #20]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40010000 	.word	0x40010000
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800
 8002358:	40000c00 	.word	0x40000c00
 800235c:	40014000 	.word	0x40014000
 8002360:	40014400 	.word	0x40014400
 8002364:	40014800 	.word	0x40014800

08002368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	f023 0201 	bic.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f023 0302 	bic.w	r3, r3, #2
 80023b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <TIM_OC1_SetConfig+0xc8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d10c      	bne.n	80023de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0308 	bic.w	r3, r3, #8
 80023ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a13      	ldr	r2, [pc, #76]	; (8002430 <TIM_OC1_SetConfig+0xc8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d111      	bne.n	800240a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	621a      	str	r2, [r3, #32]
}
 8002424:	bf00      	nop
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40010000 	.word	0x40010000

08002434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	f023 0210 	bic.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 0320 	bic.w	r3, r3, #32
 800247e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <TIM_OC2_SetConfig+0xd4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d10d      	bne.n	80024b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800249a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a15      	ldr	r2, [pc, #84]	; (8002508 <TIM_OC2_SetConfig+0xd4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d113      	bne.n	80024e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	621a      	str	r2, [r3, #32]
}
 80024fa:	bf00      	nop
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000

0800250c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f023 0303 	bic.w	r3, r3, #3
 8002542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <TIM_OC3_SetConfig+0xd0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10d      	bne.n	8002586 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a14      	ldr	r2, [pc, #80]	; (80025dc <TIM_OC3_SetConfig+0xd0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d113      	bne.n	80025b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800259c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	621a      	str	r2, [r3, #32]
}
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40010000 	.word	0x40010000

080025e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800260e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800262a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	031b      	lsls	r3, r3, #12
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <TIM_OC4_SetConfig+0x9c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d109      	bne.n	8002654 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	621a      	str	r2, [r3, #32]
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40010000 	.word	0x40010000

08002680 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2201      	movs	r2, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	401a      	ands	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	431a      	orrs	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	621a      	str	r2, [r3, #32]
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e050      	b.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d018      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002730:	d013      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a18      	ldr	r2, [pc, #96]	; (8002798 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00e      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d004      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d10c      	bne.n	8002774 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	4313      	orrs	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40010000 	.word	0x40010000
 8002798:	40000400 	.word	0x40000400
 800279c:	40000800 	.word	0x40000800
 80027a0:	40000c00 	.word	0x40000c00
 80027a4:	40014000 	.word	0x40014000

080027a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <__NVIC_SetPriority>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	db0a      	blt.n	80027fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	490c      	ldr	r1, [pc, #48]	; (800281c <__NVIC_SetPriority+0x4c>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	0112      	lsls	r2, r2, #4
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	440b      	add	r3, r1
 80027f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027f8:	e00a      	b.n	8002810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4908      	ldr	r1, [pc, #32]	; (8002820 <__NVIC_SetPriority+0x50>)
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	3b04      	subs	r3, #4
 8002808:	0112      	lsls	r2, r2, #4
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	440b      	add	r3, r1
 800280e:	761a      	strb	r2, [r3, #24]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000e100 	.word	0xe000e100
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <SysTick_Handler+0x1c>)
 800282a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800282c:	f001 fd28 	bl	8004280 <xTaskGetSchedulerState>
 8002830:	4603      	mov	r3, r0
 8002832:	2b01      	cmp	r3, #1
 8002834:	d001      	beq.n	800283a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002836:	f002 fb0f 	bl	8004e58 <xPortSysTickHandler>
  }
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002848:	2100      	movs	r1, #0
 800284a:	f06f 0004 	mvn.w	r0, #4
 800284e:	f7ff ffbf 	bl	80027d0 <__NVIC_SetPriority>
#endif
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800285e:	f3ef 8305 	mrs	r3, IPSR
 8002862:	603b      	str	r3, [r7, #0]
  return(result);
 8002864:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800286a:	f06f 0305 	mvn.w	r3, #5
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	e00c      	b.n	800288c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <osKernelInitialize+0x44>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <osKernelInitialize+0x44>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	e002      	b.n	800288c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800288c:	687b      	ldr	r3, [r7, #4]
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000114 	.word	0x20000114

080028a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028a6:	f3ef 8305 	mrs	r3, IPSR
 80028aa:	603b      	str	r3, [r7, #0]
  return(result);
 80028ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80028b2:	f06f 0305 	mvn.w	r3, #5
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	e010      	b.n	80028dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <osKernelStart+0x48>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d109      	bne.n	80028d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028c2:	f7ff ffbf 	bl	8002844 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <osKernelStart+0x48>)
 80028c8:	2202      	movs	r2, #2
 80028ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80028cc:	f001 f87c 	bl	80039c8 <vTaskStartScheduler>
      stat = osOK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	e002      	b.n	80028dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028dc:	687b      	ldr	r3, [r7, #4]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000114 	.word	0x20000114

080028ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08e      	sub	sp, #56	; 0x38
 80028f0:	af04      	add	r7, sp, #16
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028fc:	f3ef 8305 	mrs	r3, IPSR
 8002900:	617b      	str	r3, [r7, #20]
  return(result);
 8002902:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002904:	2b00      	cmp	r3, #0
 8002906:	d17e      	bne.n	8002a06 <osThreadNew+0x11a>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d07b      	beq.n	8002a06 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002912:	2318      	movs	r3, #24
 8002914:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d045      	beq.n	80029b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <osThreadNew+0x48>
        name = attr->name;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <osThreadNew+0x6e>
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b38      	cmp	r3, #56	; 0x38
 800294c:	d805      	bhi.n	800295a <osThreadNew+0x6e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <osThreadNew+0x72>
        return (NULL);
 800295a:	2300      	movs	r3, #0
 800295c:	e054      	b.n	8002a08 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00e      	beq.n	8002994 <osThreadNew+0xa8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2ba7      	cmp	r3, #167	; 0xa7
 800297c:	d90a      	bls.n	8002994 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <osThreadNew+0xa8>
        mem = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	e010      	b.n	80029b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10c      	bne.n	80029b6 <osThreadNew+0xca>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d108      	bne.n	80029b6 <osThreadNew+0xca>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <osThreadNew+0xca>
          mem = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	e001      	b.n	80029b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d110      	bne.n	80029de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029c4:	9202      	str	r2, [sp, #8]
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	6a3a      	ldr	r2, [r7, #32]
 80029d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fe0c 	bl	80035f0 <xTaskCreateStatic>
 80029d8:	4603      	mov	r3, r0
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	e013      	b.n	8002a06 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d110      	bne.n	8002a06 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fe57 	bl	80036aa <xTaskCreate>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d001      	beq.n	8002a06 <osThreadNew+0x11a>
            hTask = NULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a06:	693b      	ldr	r3, [r7, #16]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3728      	adds	r7, #40	; 0x28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a18:	f3ef 8305 	mrs	r3, IPSR
 8002a1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <osDelay+0x1c>
    stat = osErrorISR;
 8002a24:	f06f 0305 	mvn.w	r3, #5
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e007      	b.n	8002a3c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 ff92 	bl	8003960 <vTaskDelay>
    }
  }

  return (stat);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <vApplicationGetIdleTaskMemory+0x30>)
 8002a5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2280      	movs	r2, #128	; 0x80
 8002a64:	601a      	str	r2, [r3, #0]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000118 	.word	0x20000118
 8002a78:	200001c0 	.word	0x200001c0

08002a7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4a06      	ldr	r2, [pc, #24]	; (8002aac <vApplicationGetTimerTaskMemory+0x30>)
 8002a92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a9a:	601a      	str	r2, [r3, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	200003c0 	.word	0x200003c0
 8002aac:	20000468 	.word	0x20000468

08002ab0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f103 0208 	add.w	r2, r3, #8
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f103 0208 	add.w	r2, r3, #8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f103 0208 	add.w	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	601a      	str	r2, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d103      	bne.n	8002b72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e00c      	b.n	8002b8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3308      	adds	r3, #8
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e002      	b.n	8002b80 <vListInsert+0x2e>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d2f6      	bcs.n	8002b7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	601a      	str	r2, [r3, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6892      	ldr	r2, [r2, #8]
 8002bda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6852      	ldr	r2, [r2, #4]
 8002be4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d103      	bne.n	8002bf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	1e5a      	subs	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c42:	f002 f877 	bl	8004d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	68f9      	ldr	r1, [r7, #12]
 8002c50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	441a      	add	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	3b01      	subs	r3, #1
 8002c74:	68f9      	ldr	r1, [r7, #12]
 8002c76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	441a      	add	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	22ff      	movs	r2, #255	; 0xff
 8002c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d114      	bne.n	8002cc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01a      	beq.n	8002cd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3310      	adds	r3, #16
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f001 f929 	bl	8003efc <xTaskRemoveFromEventList>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d012      	beq.n	8002cd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <xQueueGenericReset+0xcc>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	e009      	b.n	8002cd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3310      	adds	r3, #16
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fef2 	bl	8002ab0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3324      	adds	r3, #36	; 0x24
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff feed 	bl	8002ab0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cd6:	f002 f85d 	bl	8004d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <xQueueGenericCreateStatic+0x52>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <xQueueGenericCreateStatic+0x56>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <xQueueGenericCreateStatic+0x58>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	623b      	str	r3, [r7, #32]
}
 8002d56:	bf00      	nop
 8002d58:	e7fe      	b.n	8002d58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <xQueueGenericCreateStatic+0x7e>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <xQueueGenericCreateStatic+0x82>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <xQueueGenericCreateStatic+0x84>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	61fb      	str	r3, [r7, #28]
}
 8002d82:	bf00      	nop
 8002d84:	e7fe      	b.n	8002d84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d86:	2350      	movs	r3, #80	; 0x50
 8002d88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b50      	cmp	r3, #80	; 0x50
 8002d8e:	d00a      	beq.n	8002da6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61bb      	str	r3, [r7, #24]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002da6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f805 	bl	8002dd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3730      	adds	r7, #48	; 0x30
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e002      	b.n	8002dfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e06:	2101      	movs	r1, #1
 8002e08:	69b8      	ldr	r0, [r7, #24]
 8002e0a:	f7ff ff05 	bl	8002c18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08e      	sub	sp, #56	; 0x38
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <xQueueGenericSend+0x32>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e4e:	bf00      	nop
 8002e50:	e7fe      	b.n	8002e50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d103      	bne.n	8002e60 <xQueueGenericSend+0x40>
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <xQueueGenericSend+0x44>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <xQueueGenericSend+0x46>
 8002e64:	2300      	movs	r3, #0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10a      	bne.n	8002e80 <xQueueGenericSend+0x60>
	__asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e7c:	bf00      	nop
 8002e7e:	e7fe      	b.n	8002e7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d103      	bne.n	8002e8e <xQueueGenericSend+0x6e>
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <xQueueGenericSend+0x72>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <xQueueGenericSend+0x74>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10a      	bne.n	8002eae <xQueueGenericSend+0x8e>
	__asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	623b      	str	r3, [r7, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eae:	f001 f9e7 	bl	8004280 <xTaskGetSchedulerState>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <xQueueGenericSend+0x9e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <xQueueGenericSend+0xa2>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <xQueueGenericSend+0xa4>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <xQueueGenericSend+0xbe>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	61fb      	str	r3, [r7, #28]
}
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ede:	f001 ff29 	bl	8004d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <xQueueGenericSend+0xd4>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d129      	bne.n	8002f48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002efa:	f000 fa0b 	bl	8003314 <prvCopyDataToQueue>
 8002efe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	3324      	adds	r3, #36	; 0x24
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fff5 	bl	8003efc <xTaskRemoveFromEventList>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f18:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <xQueueGenericSend+0x1f8>)
 8002f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	e00a      	b.n	8002f40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f30:	4b39      	ldr	r3, [pc, #228]	; (8003018 <xQueueGenericSend+0x1f8>)
 8002f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f40:	f001 ff28 	bl	8004d94 <vPortExitCritical>
				return pdPASS;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e063      	b.n	8003010 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f4e:	f001 ff21 	bl	8004d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e05c      	b.n	8003010 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d106      	bne.n	8002f6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	4618      	mov	r0, r3
 8002f62:	f001 f82f 	bl	8003fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f6a:	f001 ff13 	bl	8004d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f6e:	f000 fd9b 	bl	8003aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f72:	f001 fedf 	bl	8004d34 <vPortEnterCritical>
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f7c:	b25b      	sxtb	r3, r3
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d103      	bne.n	8002f8c <xQueueGenericSend+0x16c>
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f92:	b25b      	sxtb	r3, r3
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d103      	bne.n	8002fa2 <xQueueGenericSend+0x182>
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fa2:	f001 fef7 	bl	8004d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fa6:	1d3a      	adds	r2, r7, #4
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f001 f81e 	bl	8003ff0 <xTaskCheckForTimeOut>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d124      	bne.n	8003004 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fbc:	f000 faa2 	bl	8003504 <prvIsQueueFull>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d018      	beq.n	8002ff8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	3310      	adds	r3, #16
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 ff44 	bl	8003e5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd6:	f000 fa2d 	bl	8003434 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fda:	f000 fd73 	bl	8003ac4 <xTaskResumeAll>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f47f af7c 	bne.w	8002ede <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <xQueueGenericSend+0x1f8>)
 8002fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	e772      	b.n	8002ede <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ffa:	f000 fa1b 	bl	8003434 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ffe:	f000 fd61 	bl	8003ac4 <xTaskResumeAll>
 8003002:	e76c      	b.n	8002ede <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003006:	f000 fa15 	bl	8003434 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800300a:	f000 fd5b 	bl	8003ac4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800300e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003010:	4618      	mov	r0, r3
 8003012:	3738      	adds	r7, #56	; 0x38
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b090      	sub	sp, #64	; 0x40
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d103      	bne.n	8003058 <xQueueGenericSendFromISR+0x3c>
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <xQueueGenericSendFromISR+0x40>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <xQueueGenericSendFromISR+0x42>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003074:	bf00      	nop
 8003076:	e7fe      	b.n	8003076 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d103      	bne.n	8003086 <xQueueGenericSendFromISR+0x6a>
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <xQueueGenericSendFromISR+0x6e>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <xQueueGenericSendFromISR+0x70>
 800308a:	2300      	movs	r3, #0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	623b      	str	r3, [r7, #32]
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030a6:	f001 ff27 	bl	8004ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030aa:	f3ef 8211 	mrs	r2, BASEPRI
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	61fa      	str	r2, [r7, #28]
 80030c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <xQueueGenericSendFromISR+0xbc>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d12f      	bne.n	8003138 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030ee:	f000 f911 	bl	8003314 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d112      	bne.n	8003122 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d016      	beq.n	8003132 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	3324      	adds	r3, #36	; 0x24
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fef7 	bl	8003efc <xTaskRemoveFromEventList>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00e      	beq.n	8003132 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	e007      	b.n	8003132 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003122:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003126:	3301      	adds	r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	b25a      	sxtb	r2, r3
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003132:	2301      	movs	r3, #1
 8003134:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003136:	e001      	b.n	800313c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003138:	2300      	movs	r3, #0
 800313a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003146:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800314a:	4618      	mov	r0, r3
 800314c:	3740      	adds	r7, #64	; 0x40
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08c      	sub	sp, #48	; 0x30
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003160:	2300      	movs	r3, #0
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <xQueueReceive+0x30>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	623b      	str	r3, [r7, #32]
}
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <xQueueReceive+0x3e>
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <xQueueReceive+0x42>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <xQueueReceive+0x44>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <xQueueReceive+0x5e>
	__asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	61fb      	str	r3, [r7, #28]
}
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031b2:	f001 f865 	bl	8004280 <xTaskGetSchedulerState>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <xQueueReceive+0x6e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <xQueueReceive+0x72>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <xQueueReceive+0x74>
 80031c6:	2300      	movs	r3, #0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <xQueueReceive+0x8e>
	__asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	61bb      	str	r3, [r7, #24]
}
 80031de:	bf00      	nop
 80031e0:	e7fe      	b.n	80031e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031e2:	f001 fda7 	bl	8004d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01f      	beq.n	8003232 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f6:	f000 f8f7 	bl	80033e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	1e5a      	subs	r2, r3, #1
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00f      	beq.n	800322a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	3310      	adds	r3, #16
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fe74 	bl	8003efc <xTaskRemoveFromEventList>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <xQueueReceive+0x1bc>)
 800321c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800322a:	f001 fdb3 	bl	8004d94 <vPortExitCritical>
				return pdPASS;
 800322e:	2301      	movs	r3, #1
 8003230:	e069      	b.n	8003306 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003238:	f001 fdac 	bl	8004d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800323c:	2300      	movs	r3, #0
 800323e:	e062      	b.n	8003306 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003246:	f107 0310 	add.w	r3, r7, #16
 800324a:	4618      	mov	r0, r3
 800324c:	f000 feba 	bl	8003fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003250:	2301      	movs	r3, #1
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003254:	f001 fd9e 	bl	8004d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003258:	f000 fc26 	bl	8003aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800325c:	f001 fd6a 	bl	8004d34 <vPortEnterCritical>
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003266:	b25b      	sxtb	r3, r3
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d103      	bne.n	8003276 <xQueueReceive+0x122>
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800327c:	b25b      	sxtb	r3, r3
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d103      	bne.n	800328c <xQueueReceive+0x138>
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800328c:	f001 fd82 	bl	8004d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003290:	1d3a      	adds	r2, r7, #4
 8003292:	f107 0310 	add.w	r3, r7, #16
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fea9 	bl	8003ff0 <xTaskCheckForTimeOut>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d123      	bne.n	80032ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032a6:	f000 f917 	bl	80034d8 <prvIsQueueEmpty>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d017      	beq.n	80032e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	3324      	adds	r3, #36	; 0x24
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fdcf 	bl	8003e5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c0:	f000 f8b8 	bl	8003434 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032c4:	f000 fbfe 	bl	8003ac4 <xTaskResumeAll>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d189      	bne.n	80031e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <xQueueReceive+0x1bc>)
 80032d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	e780      	b.n	80031e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e2:	f000 f8a7 	bl	8003434 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032e6:	f000 fbed 	bl	8003ac4 <xTaskResumeAll>
 80032ea:	e77a      	b.n	80031e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ee:	f000 f8a1 	bl	8003434 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032f2:	f000 fbe7 	bl	8003ac4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f8:	f000 f8ee 	bl	80034d8 <prvIsQueueEmpty>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f43f af6f 	beq.w	80031e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003306:	4618      	mov	r0, r3
 8003308:	3730      	adds	r7, #48	; 0x30
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	e000ed04 	.word	0xe000ed04

08003314 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d14d      	bne.n	80033d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 ffbc 	bl	80042bc <xTaskPriorityDisinherit>
 8003344:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	e043      	b.n	80033d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d119      	bne.n	8003388 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6858      	ldr	r0, [r3, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	461a      	mov	r2, r3
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	f002 f878 	bl	8005454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	441a      	add	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	d32b      	bcc.n	80033d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	e026      	b.n	80033d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68d8      	ldr	r0, [r3, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	461a      	mov	r2, r3
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	f002 f85e 	bl	8005454 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	425b      	negs	r3, r3
 80033a2:	441a      	add	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d207      	bcs.n	80033c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	425b      	negs	r3, r3
 80033be:	441a      	add	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d105      	bne.n	80033d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033de:	697b      	ldr	r3, [r7, #20]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d018      	beq.n	800342c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	441a      	add	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	d303      	bcc.n	800341c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68d9      	ldr	r1, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	461a      	mov	r2, r3
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	f002 f814 	bl	8005454 <memcpy>
	}
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800343c:	f001 fc7a 	bl	8004d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003446:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003448:	e011      	b.n	800346e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3324      	adds	r3, #36	; 0x24
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fd50 	bl	8003efc <xTaskRemoveFromEventList>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003462:	f000 fe27 	bl	80040b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	3b01      	subs	r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	dce9      	bgt.n	800344a <prvUnlockQueue+0x16>
 8003476:	e000      	b.n	800347a <prvUnlockQueue+0x46>
					break;
 8003478:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003482:	f001 fc87 	bl	8004d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003486:	f001 fc55 	bl	8004d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003490:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003492:	e011      	b.n	80034b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d012      	beq.n	80034c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3310      	adds	r3, #16
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fd2b 	bl	8003efc <xTaskRemoveFromEventList>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034ac:	f000 fe02 	bl	80040b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034b0:	7bbb      	ldrb	r3, [r7, #14]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	dce9      	bgt.n	8003494 <prvUnlockQueue+0x60>
 80034c0:	e000      	b.n	80034c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	22ff      	movs	r2, #255	; 0xff
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034cc:	f001 fc62 	bl	8004d94 <vPortExitCritical>
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034e0:	f001 fc28 	bl	8004d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034ec:	2301      	movs	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e001      	b.n	80034f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034f6:	f001 fc4d 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 80034fa:	68fb      	ldr	r3, [r7, #12]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800350c:	f001 fc12 	bl	8004d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	429a      	cmp	r2, r3
 800351a:	d102      	bne.n	8003522 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800351c:	2301      	movs	r3, #1
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e001      	b.n	8003526 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003526:	f001 fc35 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 800352a:	68fb      	ldr	r3, [r7, #12]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e014      	b.n	800356e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <vQueueAddToRegistry+0x50>)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003550:	490c      	ldr	r1, [pc, #48]	; (8003584 <vQueueAddToRegistry+0x50>)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <vQueueAddToRegistry+0x50>)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003566:	e006      	b.n	8003576 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3301      	adds	r3, #1
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b07      	cmp	r3, #7
 8003572:	d9e7      	bls.n	8003544 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000868 	.word	0x20000868

08003588 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003598:	f001 fbcc 	bl	8004d34 <vPortEnterCritical>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a2:	b25b      	sxtb	r3, r3
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d103      	bne.n	80035b2 <vQueueWaitForMessageRestricted+0x2a>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b8:	b25b      	sxtb	r3, r3
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d103      	bne.n	80035c8 <vQueueWaitForMessageRestricted+0x40>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c8:	f001 fbe4 	bl	8004d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d106      	bne.n	80035e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3324      	adds	r3, #36	; 0x24
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fc61 	bl	8003ea4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035e2:	6978      	ldr	r0, [r7, #20]
 80035e4:	f7ff ff26 	bl	8003434 <prvUnlockQueue>
	}
 80035e8:	bf00      	nop
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08e      	sub	sp, #56	; 0x38
 80035f4:	af04      	add	r7, sp, #16
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	623b      	str	r3, [r7, #32]
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <xTaskCreateStatic+0x46>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	61fb      	str	r3, [r7, #28]
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003636:	23a8      	movs	r3, #168	; 0xa8
 8003638:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2ba8      	cmp	r3, #168	; 0xa8
 800363e:	d00a      	beq.n	8003656 <xTaskCreateStatic+0x66>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	61bb      	str	r3, [r7, #24]
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003656:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01e      	beq.n	800369c <xTaskCreateStatic+0xac>
 800365e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800366c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	2202      	movs	r2, #2
 8003672:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003676:	2300      	movs	r3, #0
 8003678:	9303      	str	r3, [sp, #12]
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	9302      	str	r3, [sp, #8]
 800367e:	f107 0314 	add.w	r3, r7, #20
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f850 	bl	8003734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003696:	f000 f8f3 	bl	8003880 <prvAddNewTaskToReadyList>
 800369a:	e001      	b.n	80036a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036a0:	697b      	ldr	r3, [r7, #20]
	}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b08c      	sub	sp, #48	; 0x30
 80036ae:	af04      	add	r7, sp, #16
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 fc5a 	bl	8004f78 <pvPortMalloc>
 80036c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036cc:	20a8      	movs	r0, #168	; 0xa8
 80036ce:	f001 fc53 	bl	8004f78 <pvPortMalloc>
 80036d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
 80036e0:	e005      	b.n	80036ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f001 fd14 	bl	8005110 <vPortFree>
 80036e8:	e001      	b.n	80036ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d017      	beq.n	8003724 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036fc:	88fa      	ldrh	r2, [r7, #6]
 80036fe:	2300      	movs	r3, #0
 8003700:	9303      	str	r3, [sp, #12]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f80e 	bl	8003734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003718:	69f8      	ldr	r0, [r7, #28]
 800371a:	f000 f8b1 	bl	8003880 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800371e:	2301      	movs	r3, #1
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e002      	b.n	800372a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800372a:	69bb      	ldr	r3, [r7, #24]
	}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	461a      	mov	r2, r3
 800374c:	21a5      	movs	r1, #165	; 0xa5
 800374e:	f001 fdfd 	bl	800534c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800375c:	3b01      	subs	r3, #1
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f023 0307 	bic.w	r3, r3, #7
 800376a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	617b      	str	r3, [r7, #20]
}
 8003788:	bf00      	nop
 800378a:	e7fe      	b.n	800378a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01f      	beq.n	80037d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e012      	b.n	80037be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	7819      	ldrb	r1, [r3, #0]
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	3334      	adds	r3, #52	; 0x34
 80037a8:	460a      	mov	r2, r1
 80037aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3301      	adds	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d9e9      	bls.n	8003798 <prvInitialiseNewTask+0x64>
 80037c4:	e000      	b.n	80037c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80037c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d0:	e003      	b.n	80037da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	2b37      	cmp	r3, #55	; 0x37
 80037de:	d901      	bls.n	80037e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037e0:	2337      	movs	r3, #55	; 0x37
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	2200      	movs	r2, #0
 80037f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	3304      	adds	r3, #4
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f978 	bl	8002af0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	3318      	adds	r3, #24
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f973 	bl	8002af0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	2200      	movs	r2, #0
 8003824:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	2200      	movs	r2, #0
 800382c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	3354      	adds	r3, #84	; 0x54
 8003834:	224c      	movs	r2, #76	; 0x4c
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f001 fd87 	bl	800534c <memset>
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <prvInitialiseNewTask+0x140>)
 8003842:	659a      	str	r2, [r3, #88]	; 0x58
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <prvInitialiseNewTask+0x144>)
 8003848:	65da      	str	r2, [r3, #92]	; 0x5c
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	4a0b      	ldr	r2, [pc, #44]	; (800387c <prvInitialiseNewTask+0x148>)
 800384e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	68f9      	ldr	r1, [r7, #12]
 8003854:	69b8      	ldr	r0, [r7, #24]
 8003856:	f001 f941 	bl	8004adc <pxPortInitialiseStack>
 800385a:	4602      	mov	r2, r0
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800386c:	bf00      	nop
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20004afc 	.word	0x20004afc
 8003878:	20004b64 	.word	0x20004b64
 800387c:	20004bcc 	.word	0x20004bcc

08003880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003888:	f001 fa54 	bl	8004d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800388c:	4b2d      	ldr	r3, [pc, #180]	; (8003944 <prvAddNewTaskToReadyList+0xc4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	4a2c      	ldr	r2, [pc, #176]	; (8003944 <prvAddNewTaskToReadyList+0xc4>)
 8003894:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003896:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <prvAddNewTaskToReadyList+0xc8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800389e:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <prvAddNewTaskToReadyList+0xc8>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a4:	4b27      	ldr	r3, [pc, #156]	; (8003944 <prvAddNewTaskToReadyList+0xc4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d110      	bne.n	80038ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038ac:	f000 fc26 	bl	80040fc <prvInitialiseTaskLists>
 80038b0:	e00d      	b.n	80038ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038b2:	4b26      	ldr	r3, [pc, #152]	; (800394c <prvAddNewTaskToReadyList+0xcc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <prvAddNewTaskToReadyList+0xc8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d802      	bhi.n	80038ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038c8:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <prvAddNewTaskToReadyList+0xc8>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <prvAddNewTaskToReadyList+0xd0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <prvAddNewTaskToReadyList+0xd0>)
 80038d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <prvAddNewTaskToReadyList+0xd0>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <prvAddNewTaskToReadyList+0xd4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d903      	bls.n	80038f4 <prvAddNewTaskToReadyList+0x74>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	4a18      	ldr	r2, [pc, #96]	; (8003954 <prvAddNewTaskToReadyList+0xd4>)
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <prvAddNewTaskToReadyList+0xd8>)
 8003902:	441a      	add	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f7ff f8fd 	bl	8002b0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003910:	f001 fa40 	bl	8004d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <prvAddNewTaskToReadyList+0xcc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00e      	beq.n	800393a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <prvAddNewTaskToReadyList+0xc8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	429a      	cmp	r2, r3
 8003928:	d207      	bcs.n	800393a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <prvAddNewTaskToReadyList+0xdc>)
 800392c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000d7c 	.word	0x20000d7c
 8003948:	200008a8 	.word	0x200008a8
 800394c:	20000d88 	.word	0x20000d88
 8003950:	20000d98 	.word	0x20000d98
 8003954:	20000d84 	.word	0x20000d84
 8003958:	200008ac 	.word	0x200008ac
 800395c:	e000ed04 	.word	0xe000ed04

08003960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d017      	beq.n	80039a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003972:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <vTaskDelay+0x60>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <vTaskDelay+0x30>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	60bb      	str	r3, [r7, #8]
}
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003990:	f000 f88a 	bl	8003aa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003994:	2100      	movs	r1, #0
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fcfe 	bl	8004398 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800399c:	f000 f892 	bl	8003ac4 <xTaskResumeAll>
 80039a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d107      	bne.n	80039b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <vTaskDelay+0x64>)
 80039aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000da4 	.word	0x20000da4
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039d6:	463a      	mov	r2, r7
 80039d8:	1d39      	adds	r1, r7, #4
 80039da:	f107 0308 	add.w	r3, r7, #8
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff f832 	bl	8002a48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039e4:	6839      	ldr	r1, [r7, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	9202      	str	r2, [sp, #8]
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	460a      	mov	r2, r1
 80039f6:	4924      	ldr	r1, [pc, #144]	; (8003a88 <vTaskStartScheduler+0xc0>)
 80039f8:	4824      	ldr	r0, [pc, #144]	; (8003a8c <vTaskStartScheduler+0xc4>)
 80039fa:	f7ff fdf9 	bl	80035f0 <xTaskCreateStatic>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <vTaskStartScheduler+0xc8>)
 8003a02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a04:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <vTaskStartScheduler+0xc8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	e001      	b.n	8003a16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d102      	bne.n	8003a22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a1c:	f000 fd10 	bl	8004440 <xTimerCreateTimerTask>
 8003a20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d11b      	bne.n	8003a60 <vTaskStartScheduler+0x98>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	613b      	str	r3, [r7, #16]
}
 8003a3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a3c:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <vTaskStartScheduler+0xcc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3354      	adds	r3, #84	; 0x54
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <vTaskStartScheduler+0xd0>)
 8003a44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <vTaskStartScheduler+0xd4>)
 8003a48:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <vTaskStartScheduler+0xd8>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <vTaskStartScheduler+0xdc>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a5a:	f001 f8c9 	bl	8004bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a5e:	e00e      	b.n	8003a7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d10a      	bne.n	8003a7e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	60fb      	str	r3, [r7, #12]
}
 8003a7a:	bf00      	nop
 8003a7c:	e7fe      	b.n	8003a7c <vTaskStartScheduler+0xb4>
}
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	08005544 	.word	0x08005544
 8003a8c:	080040cd 	.word	0x080040cd
 8003a90:	20000da0 	.word	0x20000da0
 8003a94:	200008a8 	.word	0x200008a8
 8003a98:	2000005c 	.word	0x2000005c
 8003a9c:	20000d9c 	.word	0x20000d9c
 8003aa0:	20000d88 	.word	0x20000d88
 8003aa4:	20000d80 	.word	0x20000d80

08003aa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <vTaskSuspendAll+0x18>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	4a03      	ldr	r2, [pc, #12]	; (8003ac0 <vTaskSuspendAll+0x18>)
 8003ab4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	20000da4 	.word	0x20000da4

08003ac4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ad2:	4b42      	ldr	r3, [pc, #264]	; (8003bdc <xTaskResumeAll+0x118>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	603b      	str	r3, [r7, #0]
}
 8003aec:	bf00      	nop
 8003aee:	e7fe      	b.n	8003aee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003af0:	f001 f920 	bl	8004d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <xTaskResumeAll+0x118>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	4a38      	ldr	r2, [pc, #224]	; (8003bdc <xTaskResumeAll+0x118>)
 8003afc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003afe:	4b37      	ldr	r3, [pc, #220]	; (8003bdc <xTaskResumeAll+0x118>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d162      	bne.n	8003bcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b06:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <xTaskResumeAll+0x11c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d05e      	beq.n	8003bcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b0e:	e02f      	b.n	8003b70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <xTaskResumeAll+0x120>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3318      	adds	r3, #24
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff f851 	bl	8002bc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3304      	adds	r3, #4
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff f84c 	bl	8002bc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <xTaskResumeAll+0x124>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d903      	bls.n	8003b40 <xTaskResumeAll+0x7c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	4a2a      	ldr	r2, [pc, #168]	; (8003be8 <xTaskResumeAll+0x124>)
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4a27      	ldr	r2, [pc, #156]	; (8003bec <xTaskResumeAll+0x128>)
 8003b4e:	441a      	add	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4619      	mov	r1, r3
 8003b56:	4610      	mov	r0, r2
 8003b58:	f7fe ffd7 	bl	8002b0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <xTaskResumeAll+0x12c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <xTaskResumeAll+0x130>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b70:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <xTaskResumeAll+0x120>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1cb      	bne.n	8003b10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b7e:	f000 fb5f 	bl	8004240 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b82:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <xTaskResumeAll+0x134>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d010      	beq.n	8003bb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b8e:	f000 f847 	bl	8003c20 <xTaskIncrementTick>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b98:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <xTaskResumeAll+0x130>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f1      	bne.n	8003b8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <xTaskResumeAll+0x134>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bb0:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <xTaskResumeAll+0x130>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <xTaskResumeAll+0x138>)
 8003bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bcc:	f001 f8e2 	bl	8004d94 <vPortExitCritical>

	return xAlreadyYielded;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000da4 	.word	0x20000da4
 8003be0:	20000d7c 	.word	0x20000d7c
 8003be4:	20000d3c 	.word	0x20000d3c
 8003be8:	20000d84 	.word	0x20000d84
 8003bec:	200008ac 	.word	0x200008ac
 8003bf0:	200008a8 	.word	0x200008a8
 8003bf4:	20000d90 	.word	0x20000d90
 8003bf8:	20000d8c 	.word	0x20000d8c
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <xTaskGetTickCount+0x1c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c0c:	687b      	ldr	r3, [r7, #4]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000d80 	.word	0x20000d80

08003c20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c2a:	4b4f      	ldr	r3, [pc, #316]	; (8003d68 <xTaskIncrementTick+0x148>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 808f 	bne.w	8003d52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c34:	4b4d      	ldr	r3, [pc, #308]	; (8003d6c <xTaskIncrementTick+0x14c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c3c:	4a4b      	ldr	r2, [pc, #300]	; (8003d6c <xTaskIncrementTick+0x14c>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d120      	bne.n	8003c8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c48:	4b49      	ldr	r3, [pc, #292]	; (8003d70 <xTaskIncrementTick+0x150>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	603b      	str	r3, [r7, #0]
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <xTaskIncrementTick+0x46>
 8003c68:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <xTaskIncrementTick+0x150>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <xTaskIncrementTick+0x154>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a3f      	ldr	r2, [pc, #252]	; (8003d70 <xTaskIncrementTick+0x150>)
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4a3f      	ldr	r2, [pc, #252]	; (8003d74 <xTaskIncrementTick+0x154>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <xTaskIncrementTick+0x158>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	4a3d      	ldr	r2, [pc, #244]	; (8003d78 <xTaskIncrementTick+0x158>)
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	f000 fadb 	bl	8004240 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c8a:	4b3c      	ldr	r3, [pc, #240]	; (8003d7c <xTaskIncrementTick+0x15c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d349      	bcc.n	8003d28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c94:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <xTaskIncrementTick+0x150>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c9e:	4b37      	ldr	r3, [pc, #220]	; (8003d7c <xTaskIncrementTick+0x15c>)
 8003ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca4:	601a      	str	r2, [r3, #0]
					break;
 8003ca6:	e03f      	b.n	8003d28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca8:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <xTaskIncrementTick+0x150>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d203      	bcs.n	8003cc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cc0:	4a2e      	ldr	r2, [pc, #184]	; (8003d7c <xTaskIncrementTick+0x15c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cc6:	e02f      	b.n	8003d28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe ff79 	bl	8002bc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	3318      	adds	r3, #24
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe ff70 	bl	8002bc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <xTaskIncrementTick+0x160>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d903      	bls.n	8003cf8 <xTaskIncrementTick+0xd8>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <xTaskIncrementTick+0x160>)
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <xTaskIncrementTick+0x164>)
 8003d06:	441a      	add	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f7fe fefb 	bl	8002b0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <xTaskIncrementTick+0x168>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d3b8      	bcc.n	8003c94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d22:	2301      	movs	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d26:	e7b5      	b.n	8003c94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d28:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <xTaskIncrementTick+0x168>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	4915      	ldr	r1, [pc, #84]	; (8003d84 <xTaskIncrementTick+0x164>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d901      	bls.n	8003d44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <xTaskIncrementTick+0x16c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e004      	b.n	8003d5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <xTaskIncrementTick+0x170>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <xTaskIncrementTick+0x170>)
 8003d5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d5c:	697b      	ldr	r3, [r7, #20]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000da4 	.word	0x20000da4
 8003d6c:	20000d80 	.word	0x20000d80
 8003d70:	20000d34 	.word	0x20000d34
 8003d74:	20000d38 	.word	0x20000d38
 8003d78:	20000d94 	.word	0x20000d94
 8003d7c:	20000d9c 	.word	0x20000d9c
 8003d80:	20000d84 	.word	0x20000d84
 8003d84:	200008ac 	.word	0x200008ac
 8003d88:	200008a8 	.word	0x200008a8
 8003d8c:	20000d90 	.word	0x20000d90
 8003d90:	20000d8c 	.word	0x20000d8c

08003d94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d9a:	4b2a      	ldr	r3, [pc, #168]	; (8003e44 <vTaskSwitchContext+0xb0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003da2:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <vTaskSwitchContext+0xb4>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003da8:	e046      	b.n	8003e38 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003daa:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <vTaskSwitchContext+0xb4>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db0:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <vTaskSwitchContext+0xb8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	e010      	b.n	8003dda <vTaskSwitchContext+0x46>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	607b      	str	r3, [r7, #4]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <vTaskSwitchContext+0x3e>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	491d      	ldr	r1, [pc, #116]	; (8003e50 <vTaskSwitchContext+0xbc>)
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0e4      	beq.n	8003db8 <vTaskSwitchContext+0x24>
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <vTaskSwitchContext+0xbc>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	3308      	adds	r3, #8
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d104      	bne.n	8003e1e <vTaskSwitchContext+0x8a>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a0b      	ldr	r2, [pc, #44]	; (8003e54 <vTaskSwitchContext+0xc0>)
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <vTaskSwitchContext+0xb8>)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <vTaskSwitchContext+0xc0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3354      	adds	r3, #84	; 0x54
 8003e34:	4a08      	ldr	r2, [pc, #32]	; (8003e58 <vTaskSwitchContext+0xc4>)
 8003e36:	6013      	str	r3, [r2, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	20000da4 	.word	0x20000da4
 8003e48:	20000d90 	.word	0x20000d90
 8003e4c:	20000d84 	.word	0x20000d84
 8003e50:	200008ac 	.word	0x200008ac
 8003e54:	200008a8 	.word	0x200008a8
 8003e58:	2000005c 	.word	0x2000005c

08003e5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	60fb      	str	r3, [r7, #12]
}
 8003e7e:	bf00      	nop
 8003e80:	e7fe      	b.n	8003e80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <vTaskPlaceOnEventList+0x44>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3318      	adds	r3, #24
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fe fe61 	bl	8002b52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e90:	2101      	movs	r1, #1
 8003e92:	6838      	ldr	r0, [r7, #0]
 8003e94:	f000 fa80 	bl	8004398 <prvAddCurrentTaskToDelayedList>
}
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	200008a8 	.word	0x200008a8

08003ea4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	617b      	str	r3, [r7, #20]
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3318      	adds	r3, #24
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7fe fe18 	bl	8002b0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	68b8      	ldr	r0, [r7, #8]
 8003eea:	f000 fa55 	bl	8004398 <prvAddCurrentTaskToDelayedList>
	}
 8003eee:	bf00      	nop
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200008a8 	.word	0x200008a8

08003efc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	60fb      	str	r3, [r7, #12]
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	3318      	adds	r3, #24
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe fe49 	bl	8002bc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f32:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <xTaskRemoveFromEventList+0xb0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11d      	bne.n	8003f76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe fe40 	bl	8002bc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <xTaskRemoveFromEventList+0xb4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d903      	bls.n	8003f58 <xTaskRemoveFromEventList+0x5c>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <xTaskRemoveFromEventList+0xb4>)
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <xTaskRemoveFromEventList+0xb8>)
 8003f66:	441a      	add	r2, r3
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f7fe fdcb 	bl	8002b0a <vListInsertEnd>
 8003f74:	e005      	b.n	8003f82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	3318      	adds	r3, #24
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	480e      	ldr	r0, [pc, #56]	; (8003fb8 <xTaskRemoveFromEventList+0xbc>)
 8003f7e:	f7fe fdc4 	bl	8002b0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <xTaskRemoveFromEventList+0xc0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d905      	bls.n	8003f9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <xTaskRemoveFromEventList+0xc4>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e001      	b.n	8003fa0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fa0:	697b      	ldr	r3, [r7, #20]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000da4 	.word	0x20000da4
 8003fb0:	20000d84 	.word	0x20000d84
 8003fb4:	200008ac 	.word	0x200008ac
 8003fb8:	20000d3c 	.word	0x20000d3c
 8003fbc:	200008a8 	.word	0x200008a8
 8003fc0:	20000d90 	.word	0x20000d90

08003fc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <vTaskInternalSetTimeOutState+0x24>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <vTaskInternalSetTimeOutState+0x28>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	605a      	str	r2, [r3, #4]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	20000d94 	.word	0x20000d94
 8003fec:	20000d80 	.word	0x20000d80

08003ff0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	613b      	str	r3, [r7, #16]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	60fb      	str	r3, [r7, #12]
}
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004032:	f000 fe7f 	bl	8004d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <xTaskCheckForTimeOut+0xbc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d102      	bne.n	8004056 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	e023      	b.n	800409e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <xTaskCheckForTimeOut+0xc0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d007      	beq.n	8004072 <xTaskCheckForTimeOut+0x82>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	e015      	b.n	800409e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	429a      	cmp	r2, r3
 800407a:	d20b      	bcs.n	8004094 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	1ad2      	subs	r2, r2, r3
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff ff9b 	bl	8003fc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e004      	b.n	800409e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800409a:	2301      	movs	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800409e:	f000 fe79 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 80040a2:	69fb      	ldr	r3, [r7, #28]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000d80 	.word	0x20000d80
 80040b0:	20000d94 	.word	0x20000d94

080040b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <vTaskMissedYield+0x14>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
}
 80040be:	bf00      	nop
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	20000d90 	.word	0x20000d90

080040cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040d4:	f000 f852 	bl	800417c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040d8:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <prvIdleTask+0x28>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d9f9      	bls.n	80040d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <prvIdleTask+0x2c>)
 80040e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040f0:	e7f0      	b.n	80040d4 <prvIdleTask+0x8>
 80040f2:	bf00      	nop
 80040f4:	200008ac 	.word	0x200008ac
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	e00c      	b.n	8004122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4a12      	ldr	r2, [pc, #72]	; (800415c <prvInitialiseTaskLists+0x60>)
 8004114:	4413      	add	r3, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fcca 	bl	8002ab0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3301      	adds	r3, #1
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b37      	cmp	r3, #55	; 0x37
 8004126:	d9ef      	bls.n	8004108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004128:	480d      	ldr	r0, [pc, #52]	; (8004160 <prvInitialiseTaskLists+0x64>)
 800412a:	f7fe fcc1 	bl	8002ab0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800412e:	480d      	ldr	r0, [pc, #52]	; (8004164 <prvInitialiseTaskLists+0x68>)
 8004130:	f7fe fcbe 	bl	8002ab0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004134:	480c      	ldr	r0, [pc, #48]	; (8004168 <prvInitialiseTaskLists+0x6c>)
 8004136:	f7fe fcbb 	bl	8002ab0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800413a:	480c      	ldr	r0, [pc, #48]	; (800416c <prvInitialiseTaskLists+0x70>)
 800413c:	f7fe fcb8 	bl	8002ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004140:	480b      	ldr	r0, [pc, #44]	; (8004170 <prvInitialiseTaskLists+0x74>)
 8004142:	f7fe fcb5 	bl	8002ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <prvInitialiseTaskLists+0x78>)
 8004148:	4a05      	ldr	r2, [pc, #20]	; (8004160 <prvInitialiseTaskLists+0x64>)
 800414a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <prvInitialiseTaskLists+0x7c>)
 800414e:	4a05      	ldr	r2, [pc, #20]	; (8004164 <prvInitialiseTaskLists+0x68>)
 8004150:	601a      	str	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	200008ac 	.word	0x200008ac
 8004160:	20000d0c 	.word	0x20000d0c
 8004164:	20000d20 	.word	0x20000d20
 8004168:	20000d3c 	.word	0x20000d3c
 800416c:	20000d50 	.word	0x20000d50
 8004170:	20000d68 	.word	0x20000d68
 8004174:	20000d34 	.word	0x20000d34
 8004178:	20000d38 	.word	0x20000d38

0800417c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004182:	e019      	b.n	80041b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004184:	f000 fdd6 	bl	8004d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004188:	4b10      	ldr	r3, [pc, #64]	; (80041cc <prvCheckTasksWaitingTermination+0x50>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fd15 	bl	8002bc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <prvCheckTasksWaitingTermination+0x54>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3b01      	subs	r3, #1
 80041a0:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <prvCheckTasksWaitingTermination+0x54>)
 80041a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <prvCheckTasksWaitingTermination+0x58>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <prvCheckTasksWaitingTermination+0x58>)
 80041ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041ae:	f000 fdf1 	bl	8004d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f810 	bl	80041d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <prvCheckTasksWaitingTermination+0x58>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e1      	bne.n	8004184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000d50 	.word	0x20000d50
 80041d0:	20000d7c 	.word	0x20000d7c
 80041d4:	20000d64 	.word	0x20000d64

080041d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3354      	adds	r3, #84	; 0x54
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 f8b9 	bl	800535c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d108      	bne.n	8004206 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 ff89 	bl	8005110 <vPortFree>
				vPortFree( pxTCB );
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 ff86 	bl	8005110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004204:	e018      	b.n	8004238 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800420c:	2b01      	cmp	r3, #1
 800420e:	d103      	bne.n	8004218 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 ff7d 	bl	8005110 <vPortFree>
	}
 8004216:	e00f      	b.n	8004238 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800421e:	2b02      	cmp	r3, #2
 8004220:	d00a      	beq.n	8004238 <prvDeleteTCB+0x60>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60fb      	str	r3, [r7, #12]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <prvDeleteTCB+0x5e>
	}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <prvResetNextTaskUnblockTime+0x38>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <prvResetNextTaskUnblockTime+0x3c>)
 8004252:	f04f 32ff 	mov.w	r2, #4294967295
 8004256:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004258:	e008      	b.n	800426c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <prvResetNextTaskUnblockTime+0x38>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <prvResetNextTaskUnblockTime+0x3c>)
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	20000d34 	.word	0x20000d34
 800427c:	20000d9c 	.word	0x20000d9c

08004280 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <xTaskGetSchedulerState+0x34>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800428e:	2301      	movs	r3, #1
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	e008      	b.n	80042a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <xTaskGetSchedulerState+0x38>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800429c:	2302      	movs	r3, #2
 800429e:	607b      	str	r3, [r7, #4]
 80042a0:	e001      	b.n	80042a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042a6:	687b      	ldr	r3, [r7, #4]
	}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	20000d88 	.word	0x20000d88
 80042b8:	20000da4 	.word	0x20000da4

080042bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d056      	beq.n	8004380 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042d2:	4b2e      	ldr	r3, [pc, #184]	; (800438c <xTaskPriorityDisinherit+0xd0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d00a      	beq.n	80042f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	60fb      	str	r3, [r7, #12]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60bb      	str	r3, [r7, #8]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004314:	1e5a      	subs	r2, r3, #1
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	429a      	cmp	r2, r3
 8004324:	d02c      	beq.n	8004380 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432a:	2b00      	cmp	r3, #0
 800432c:	d128      	bne.n	8004380 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3304      	adds	r3, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fc46 	bl	8002bc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <xTaskPriorityDisinherit+0xd4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d903      	bls.n	8004360 <xTaskPriorityDisinherit+0xa4>
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	4a0c      	ldr	r2, [pc, #48]	; (8004390 <xTaskPriorityDisinherit+0xd4>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4a09      	ldr	r2, [pc, #36]	; (8004394 <xTaskPriorityDisinherit+0xd8>)
 800436e:	441a      	add	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f7fe fbc7 	bl	8002b0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800437c:	2301      	movs	r3, #1
 800437e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004380:	697b      	ldr	r3, [r7, #20]
	}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200008a8 	.word	0x200008a8
 8004390:	20000d84 	.word	0x20000d84
 8004394:	200008ac 	.word	0x200008ac

08004398 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043a2:	4b21      	ldr	r3, [pc, #132]	; (8004428 <prvAddCurrentTaskToDelayedList+0x90>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043a8:	4b20      	ldr	r3, [pc, #128]	; (800442c <prvAddCurrentTaskToDelayedList+0x94>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe fc08 	bl	8002bc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d10a      	bne.n	80043d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c2:	4b1a      	ldr	r3, [pc, #104]	; (800442c <prvAddCurrentTaskToDelayedList+0x94>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4819      	ldr	r0, [pc, #100]	; (8004430 <prvAddCurrentTaskToDelayedList+0x98>)
 80043cc:	f7fe fb9d 	bl	8002b0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043d0:	e026      	b.n	8004420 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <prvAddCurrentTaskToDelayedList+0x94>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d209      	bcs.n	80043fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <prvAddCurrentTaskToDelayedList+0x94>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f7fe fbab 	bl	8002b52 <vListInsert>
}
 80043fc:	e010      	b.n	8004420 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <prvAddCurrentTaskToDelayedList+0x94>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f7fe fba1 	bl	8002b52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d202      	bcs.n	8004420 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <prvAddCurrentTaskToDelayedList+0xa4>)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6013      	str	r3, [r2, #0]
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000d80 	.word	0x20000d80
 800442c:	200008a8 	.word	0x200008a8
 8004430:	20000d68 	.word	0x20000d68
 8004434:	20000d38 	.word	0x20000d38
 8004438:	20000d34 	.word	0x20000d34
 800443c:	20000d9c 	.word	0x20000d9c

08004440 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800444a:	f000 fb07 	bl	8004a5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800444e:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <xTimerCreateTimerTask+0x80>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d021      	beq.n	800449a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800445e:	1d3a      	adds	r2, r7, #4
 8004460:	f107 0108 	add.w	r1, r7, #8
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe fb07 	bl	8002a7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	9202      	str	r2, [sp, #8]
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	2302      	movs	r3, #2
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2300      	movs	r3, #0
 800447e:	460a      	mov	r2, r1
 8004480:	4910      	ldr	r1, [pc, #64]	; (80044c4 <xTimerCreateTimerTask+0x84>)
 8004482:	4811      	ldr	r0, [pc, #68]	; (80044c8 <xTimerCreateTimerTask+0x88>)
 8004484:	f7ff f8b4 	bl	80035f0 <xTaskCreateStatic>
 8004488:	4603      	mov	r3, r0
 800448a:	4a10      	ldr	r2, [pc, #64]	; (80044cc <xTimerCreateTimerTask+0x8c>)
 800448c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800448e:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <xTimerCreateTimerTask+0x8c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004496:	2301      	movs	r3, #1
 8004498:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	613b      	str	r3, [r7, #16]
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044b6:	697b      	ldr	r3, [r7, #20]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000dd8 	.word	0x20000dd8
 80044c4:	0800554c 	.word	0x0800554c
 80044c8:	08004605 	.word	0x08004605
 80044cc:	20000ddc 	.word	0x20000ddc

080044d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	; 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	623b      	str	r3, [r7, #32]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044fe:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <xTimerGenericCommand+0x98>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d02a      	beq.n	800455c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b05      	cmp	r3, #5
 8004516:	dc18      	bgt.n	800454a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004518:	f7ff feb2 	bl	8004280 <xTaskGetSchedulerState>
 800451c:	4603      	mov	r3, r0
 800451e:	2b02      	cmp	r3, #2
 8004520:	d109      	bne.n	8004536 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <xTimerGenericCommand+0x98>)
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	f107 0110 	add.w	r1, r7, #16
 800452a:	2300      	movs	r3, #0
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	f7fe fc77 	bl	8002e20 <xQueueGenericSend>
 8004532:	6278      	str	r0, [r7, #36]	; 0x24
 8004534:	e012      	b.n	800455c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <xTimerGenericCommand+0x98>)
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f107 0110 	add.w	r1, r7, #16
 800453e:	2300      	movs	r3, #0
 8004540:	2200      	movs	r2, #0
 8004542:	f7fe fc6d 	bl	8002e20 <xQueueGenericSend>
 8004546:	6278      	str	r0, [r7, #36]	; 0x24
 8004548:	e008      	b.n	800455c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <xTimerGenericCommand+0x98>)
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f107 0110 	add.w	r1, r7, #16
 8004552:	2300      	movs	r3, #0
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	f7fe fd61 	bl	800301c <xQueueGenericSendFromISR>
 800455a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800455e:	4618      	mov	r0, r3
 8004560:	3728      	adds	r7, #40	; 0x28
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000dd8 	.word	0x20000dd8

0800456c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af02      	add	r7, sp, #8
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <prvProcessExpiredTimer+0x94>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	3304      	adds	r3, #4
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe fb1d 	bl	8002bc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d022      	beq.n	80045de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	18d1      	adds	r1, r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	6978      	ldr	r0, [r7, #20]
 80045a6:	f000 f8d1 	bl	800474c <prvInsertTimerInActiveList>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01f      	beq.n	80045f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045b0:	2300      	movs	r3, #0
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	2300      	movs	r3, #0
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	2100      	movs	r1, #0
 80045ba:	6978      	ldr	r0, [r7, #20]
 80045bc:	f7ff ff88 	bl	80044d0 <xTimerGenericCommand>
 80045c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d113      	bne.n	80045f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	60fb      	str	r3, [r7, #12]
}
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	6978      	ldr	r0, [r7, #20]
 80045f6:	4798      	blx	r3
}
 80045f8:	bf00      	nop
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000dd0 	.word	0x20000dd0

08004604 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800460c:	f107 0308 	add.w	r3, r7, #8
 8004610:	4618      	mov	r0, r3
 8004612:	f000 f857 	bl	80046c4 <prvGetNextExpireTime>
 8004616:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4619      	mov	r1, r3
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f803 	bl	8004628 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004622:	f000 f8d5 	bl	80047d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004626:	e7f1      	b.n	800460c <prvTimerTask+0x8>

08004628 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004632:	f7ff fa39 	bl	8003aa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004636:	f107 0308 	add.w	r3, r7, #8
 800463a:	4618      	mov	r0, r3
 800463c:	f000 f866 	bl	800470c <prvSampleTimeNow>
 8004640:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d130      	bne.n	80046aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <prvProcessTimerOrBlockTask+0x3c>
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	429a      	cmp	r2, r3
 8004654:	d806      	bhi.n	8004664 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004656:	f7ff fa35 	bl	8003ac4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ff85 	bl	800456c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004662:	e024      	b.n	80046ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <prvProcessTimerOrBlockTask+0x90>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <prvProcessTimerOrBlockTask+0x50>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <prvProcessTimerOrBlockTask+0x52>
 8004678:	2300      	movs	r3, #0
 800467a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <prvProcessTimerOrBlockTask+0x94>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	4619      	mov	r1, r3
 800468a:	f7fe ff7d 	bl	8003588 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800468e:	f7ff fa19 	bl	8003ac4 <xTaskResumeAll>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <prvProcessTimerOrBlockTask+0x98>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy
}
 80046a8:	e001      	b.n	80046ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046aa:	f7ff fa0b 	bl	8003ac4 <xTaskResumeAll>
}
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000dd4 	.word	0x20000dd4
 80046bc:	20000dd8 	.word	0x20000dd8
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <prvGetNextExpireTime+0x44>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <prvGetNextExpireTime+0x16>
 80046d6:	2201      	movs	r2, #1
 80046d8:	e000      	b.n	80046dc <prvGetNextExpireTime+0x18>
 80046da:	2200      	movs	r2, #0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046e8:	4b07      	ldr	r3, [pc, #28]	; (8004708 <prvGetNextExpireTime+0x44>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	e001      	b.n	80046f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046f8:	68fb      	ldr	r3, [r7, #12]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000dd0 	.word	0x20000dd0

0800470c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004714:	f7ff fa74 	bl	8003c00 <xTaskGetTickCount>
 8004718:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <prvSampleTimeNow+0x3c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	429a      	cmp	r2, r3
 8004722:	d205      	bcs.n	8004730 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004724:	f000 f936 	bl	8004994 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e002      	b.n	8004736 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004736:	4a04      	ldr	r2, [pc, #16]	; (8004748 <prvSampleTimeNow+0x3c>)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800473c:	68fb      	ldr	r3, [r7, #12]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000de0 	.word	0x20000de0

0800474c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	429a      	cmp	r2, r3
 8004770:	d812      	bhi.n	8004798 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	1ad2      	subs	r2, r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	429a      	cmp	r2, r3
 800477e:	d302      	bcc.n	8004786 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e01b      	b.n	80047be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <prvInsertTimerInActiveList+0x7c>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3304      	adds	r3, #4
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f7fe f9de 	bl	8002b52 <vListInsert>
 8004796:	e012      	b.n	80047be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d206      	bcs.n	80047ae <prvInsertTimerInActiveList+0x62>
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e007      	b.n	80047be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <prvInsertTimerInActiveList+0x80>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7fe f9ca 	bl	8002b52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047be:	697b      	ldr	r3, [r7, #20]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000dd4 	.word	0x20000dd4
 80047cc:	20000dd0 	.word	0x20000dd0

080047d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08e      	sub	sp, #56	; 0x38
 80047d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047d6:	e0ca      	b.n	800496e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da18      	bge.n	8004810 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	3304      	adds	r3, #4
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	61fb      	str	r3, [r7, #28]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004806:	6850      	ldr	r0, [r2, #4]
 8004808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480a:	6892      	ldr	r2, [r2, #8]
 800480c:	4611      	mov	r1, r2
 800480e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f2c0 80ab 	blt.w	800496e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	3304      	adds	r3, #4
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe f9cb 	bl	8002bc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800482e:	463b      	mov	r3, r7
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff6b 	bl	800470c <prvSampleTimeNow>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b09      	cmp	r3, #9
 800483c:	f200 8096 	bhi.w	800496c <prvProcessReceivedCommands+0x19c>
 8004840:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <prvProcessReceivedCommands+0x78>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	08004871 	.word	0x08004871
 800484c:	08004871 	.word	0x08004871
 8004850:	08004871 	.word	0x08004871
 8004854:	080048e5 	.word	0x080048e5
 8004858:	080048f9 	.word	0x080048f9
 800485c:	08004943 	.word	0x08004943
 8004860:	08004871 	.word	0x08004871
 8004864:	08004871 	.word	0x08004871
 8004868:	080048e5 	.word	0x080048e5
 800486c:	080048f9 	.word	0x080048f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	b2da      	uxtb	r2, r3
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	18d1      	adds	r1, r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004890:	f7ff ff5c 	bl	800474c <prvInsertTimerInActiveList>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d069      	beq.n	800496e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d05e      	beq.n	800496e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	441a      	add	r2, r3
 80048b8:	2300      	movs	r3, #0
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	2100      	movs	r1, #0
 80048c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048c2:	f7ff fe05 	bl	80044d0 <xTimerGenericCommand>
 80048c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d14f      	bne.n	800496e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	61bb      	str	r3, [r7, #24]
}
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80048f6:	e03a      	b.n	800496e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	b2da      	uxtb	r2, r3
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	617b      	str	r3, [r7, #20]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	18d1      	adds	r1, r2, r3
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800493c:	f7ff ff06 	bl	800474c <prvInsertTimerInActiveList>
					break;
 8004940:	e015      	b.n	800496e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d103      	bne.n	8004958 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004952:	f000 fbdd 	bl	8005110 <vPortFree>
 8004956:	e00a      	b.n	800496e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800496a:	e000      	b.n	800496e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800496c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <prvProcessReceivedCommands+0x1c0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	1d39      	adds	r1, r7, #4
 8004974:	2200      	movs	r2, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fbec 	bl	8003154 <xQueueReceive>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	f47f af2a 	bne.w	80047d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	3730      	adds	r7, #48	; 0x30
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000dd8 	.word	0x20000dd8

08004994 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800499a:	e048      	b.n	8004a2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800499c:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a6:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fe f905 	bl	8002bc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02e      	beq.n	8004a2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4413      	add	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d90e      	bls.n	8004a00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ee:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f7fe f8aa 	bl	8002b52 <vListInsert>
 80049fe:	e016      	b.n	8004a2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a00:	2300      	movs	r3, #0
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2300      	movs	r3, #0
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	2100      	movs	r1, #0
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff fd60 	bl	80044d0 <xTimerGenericCommand>
 8004a10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	603b      	str	r3, [r7, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1b1      	bne.n	800499c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a3e:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <prvSwitchTimerLists+0xc4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <prvSwitchTimerLists+0xc0>)
 8004a44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a46:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <prvSwitchTimerLists+0xc4>)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	6013      	str	r3, [r2, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000dd0 	.word	0x20000dd0
 8004a58:	20000dd4 	.word	0x20000dd4

08004a5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a62:	f000 f967 	bl	8004d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a66:	4b15      	ldr	r3, [pc, #84]	; (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d120      	bne.n	8004ab0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a6e:	4814      	ldr	r0, [pc, #80]	; (8004ac0 <prvCheckForValidListAndQueue+0x64>)
 8004a70:	f7fe f81e 	bl	8002ab0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a74:	4813      	ldr	r0, [pc, #76]	; (8004ac4 <prvCheckForValidListAndQueue+0x68>)
 8004a76:	f7fe f81b 	bl	8002ab0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <prvCheckForValidListAndQueue+0x6c>)
 8004a7c:	4a10      	ldr	r2, [pc, #64]	; (8004ac0 <prvCheckForValidListAndQueue+0x64>)
 8004a7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a80:	4b12      	ldr	r3, [pc, #72]	; (8004acc <prvCheckForValidListAndQueue+0x70>)
 8004a82:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <prvCheckForValidListAndQueue+0x68>)
 8004a84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a86:	2300      	movs	r3, #0
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <prvCheckForValidListAndQueue+0x74>)
 8004a8c:	4a11      	ldr	r2, [pc, #68]	; (8004ad4 <prvCheckForValidListAndQueue+0x78>)
 8004a8e:	2110      	movs	r1, #16
 8004a90:	200a      	movs	r0, #10
 8004a92:	f7fe f929 	bl	8002ce8 <xQueueGenericCreateStatic>
 8004a96:	4603      	mov	r3, r0
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004a9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	490b      	ldr	r1, [pc, #44]	; (8004ad8 <prvCheckForValidListAndQueue+0x7c>)
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fd42 	bl	8003534 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ab0:	f000 f970 	bl	8004d94 <vPortExitCritical>
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000dd8 	.word	0x20000dd8
 8004ac0:	20000da8 	.word	0x20000da8
 8004ac4:	20000dbc 	.word	0x20000dbc
 8004ac8:	20000dd0 	.word	0x20000dd0
 8004acc:	20000dd4 	.word	0x20000dd4
 8004ad0:	20000e84 	.word	0x20000e84
 8004ad4:	20000de4 	.word	0x20000de4
 8004ad8:	08005554 	.word	0x08005554

08004adc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3b04      	subs	r3, #4
 8004aec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3b04      	subs	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <pxPortInitialiseStack+0x64>)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3b14      	subs	r3, #20
 8004b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b04      	subs	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f06f 0202 	mvn.w	r2, #2
 8004b2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3b20      	subs	r3, #32
 8004b30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	08004b45 	.word	0x08004b45

08004b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b4e:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <prvTaskExitError+0x54>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d00a      	beq.n	8004b6e <prvTaskExitError+0x2a>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	60fb      	str	r3, [r7, #12]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <prvTaskExitError+0x28>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60bb      	str	r3, [r7, #8]
}
 8004b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b82:	bf00      	nop
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0fc      	beq.n	8004b84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	2000000c 	.word	0x2000000c
 8004b9c:	00000000 	.word	0x00000000

08004ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <pxCurrentTCBConst2>)
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	6808      	ldr	r0, [r1, #0]
 8004ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	f380 8809 	msr	PSP, r0
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8811 	msr	BASEPRI, r0
 8004bba:	4770      	bx	lr
 8004bbc:	f3af 8000 	nop.w

08004bc0 <pxCurrentTCBConst2>:
 8004bc0:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop

08004bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <prvPortStartFirstTask+0x24>)
 8004bca:	6800      	ldr	r0, [r0, #0]
 8004bcc:	6800      	ldr	r0, [r0, #0]
 8004bce:	f380 8808 	msr	MSP, r0
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8814 	msr	CONTROL, r0
 8004bda:	b662      	cpsie	i
 8004bdc:	b661      	cpsie	f
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	df00      	svc	0
 8004be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bea:	bf00      	nop
 8004bec:	e000ed08 	.word	0xe000ed08

08004bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <xPortStartScheduler+0x120>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a46      	ldr	r2, [pc, #280]	; (8004d14 <xPortStartScheduler+0x124>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10a      	bne.n	8004c16 <xPortStartScheduler+0x26>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <xPortStartScheduler+0x120>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3f      	ldr	r2, [pc, #252]	; (8004d18 <xPortStartScheduler+0x128>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10a      	bne.n	8004c36 <xPortStartScheduler+0x46>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <xPortStartScheduler+0x12c>)
 8004c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <xPortStartScheduler+0x130>)
 8004c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c64:	e009      	b.n	8004c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c66:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	4a2d      	ldr	r2, [pc, #180]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d0ef      	beq.n	8004c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1c3 0307 	rsb	r3, r3, #7
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d00a      	beq.n	8004ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	60bb      	str	r3, [r7, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <xPortStartScheduler+0x134>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cba:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cc6:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <xPortStartScheduler+0x138>)
 8004ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cde:	f000 f8dd 	bl	8004e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <xPortStartScheduler+0x13c>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ce8:	f000 f8fc 	bl	8004ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <xPortStartScheduler+0x140>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0f      	ldr	r2, [pc, #60]	; (8004d30 <xPortStartScheduler+0x140>)
 8004cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cf8:	f7ff ff66 	bl	8004bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cfc:	f7ff f84a 	bl	8003d94 <vTaskSwitchContext>
	prvTaskExitError();
 8004d00:	f7ff ff20 	bl	8004b44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	e000ed00 	.word	0xe000ed00
 8004d14:	410fc271 	.word	0x410fc271
 8004d18:	410fc270 	.word	0x410fc270
 8004d1c:	e000e400 	.word	0xe000e400
 8004d20:	20000ed4 	.word	0x20000ed4
 8004d24:	20000ed8 	.word	0x20000ed8
 8004d28:	e000ed20 	.word	0xe000ed20
 8004d2c:	2000000c 	.word	0x2000000c
 8004d30:	e000ef34 	.word	0xe000ef34

08004d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	607b      	str	r3, [r7, #4]
}
 8004d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10f      	bne.n	8004d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <vPortEnterCritical+0x5c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	603b      	str	r3, [r7, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <vPortEnterCritical+0x4a>
	}
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	2000000c 	.word	0x2000000c
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <vPortExitCritical+0x50>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <vPortExitCritical+0x24>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	607b      	str	r3, [r7, #4]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <vPortExitCritical+0x50>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <vPortExitCritical+0x50>)
 8004dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <vPortExitCritical+0x50>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <vPortExitCritical+0x42>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f383 8811 	msr	BASEPRI, r3
}
 8004dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000000c 	.word	0x2000000c
	...

08004df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004df0:	f3ef 8009 	mrs	r0, PSP
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <pxCurrentTCBConst>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f01e 0f10 	tst.w	lr, #16
 8004e00:	bf08      	it	eq
 8004e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	6010      	str	r0, [r2, #0]
 8004e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e14:	f380 8811 	msr	BASEPRI, r0
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f7fe ffb8 	bl	8003d94 <vTaskSwitchContext>
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f380 8811 	msr	BASEPRI, r0
 8004e2c:	bc09      	pop	{r0, r3}
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	6808      	ldr	r0, [r1, #0]
 8004e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e36:	f01e 0f10 	tst.w	lr, #16
 8004e3a:	bf08      	it	eq
 8004e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e40:	f380 8809 	msr	PSP, r0
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst>:
 8004e50:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
}
 8004e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e72:	f7fe fed5 	bl	8003c20 <xTaskIncrementTick>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <xPortSysTickHandler+0x40>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f383 8811 	msr	BASEPRI, r3
}
 8004e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <vPortSetupTimerInterrupt+0x38>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <vPortSetupTimerInterrupt+0x3c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <vPortSetupTimerInterrupt+0x40>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <vPortSetupTimerInterrupt+0x44>)
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e010 	.word	0xe000e010
 8004ed4:	e000e018 	.word	0xe000e018
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	10624dd3 	.word	0x10624dd3
 8004ee0:	e000e014 	.word	0xe000e014

08004ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ef4 <vPortEnableVFP+0x10>
 8004ee8:	6801      	ldr	r1, [r0, #0]
 8004eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eee:	6001      	str	r1, [r0, #0]
 8004ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed88 	.word	0xe000ed88

08004ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004efe:	f3ef 8305 	mrs	r3, IPSR
 8004f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b0f      	cmp	r3, #15
 8004f08:	d914      	bls.n	8004f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f0a:	4a17      	ldr	r2, [pc, #92]	; (8004f68 <vPortValidateInterruptPriority+0x70>)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f14:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <vPortValidateInterruptPriority+0x74>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	7afa      	ldrb	r2, [r7, #11]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20a      	bcs.n	8004f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f34:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <vPortValidateInterruptPriority+0x78>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f3c:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <vPortValidateInterruptPriority+0x7c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d90a      	bls.n	8004f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	603b      	str	r3, [r7, #0]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <vPortValidateInterruptPriority+0x60>
	}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000e3f0 	.word	0xe000e3f0
 8004f6c:	20000ed4 	.word	0x20000ed4
 8004f70:	e000ed0c 	.word	0xe000ed0c
 8004f74:	20000ed8 	.word	0x20000ed8

08004f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f84:	f7fe fd90 	bl	8003aa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f88:	4b5b      	ldr	r3, [pc, #364]	; (80050f8 <pvPortMalloc+0x180>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f90:	f000 f920 	bl	80051d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f94:	4b59      	ldr	r3, [pc, #356]	; (80050fc <pvPortMalloc+0x184>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 8093 	bne.w	80050c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01d      	beq.n	8004fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fa8:	2208      	movs	r2, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d014      	beq.n	8004fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f023 0307 	bic.w	r3, r3, #7
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	617b      	str	r3, [r7, #20]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d06e      	beq.n	80050c8 <pvPortMalloc+0x150>
 8004fea:	4b45      	ldr	r3, [pc, #276]	; (8005100 <pvPortMalloc+0x188>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d869      	bhi.n	80050c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ff4:	4b43      	ldr	r3, [pc, #268]	; (8005104 <pvPortMalloc+0x18c>)
 8004ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ff8:	4b42      	ldr	r3, [pc, #264]	; (8005104 <pvPortMalloc+0x18c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ffe:	e004      	b.n	800500a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d903      	bls.n	800501c <pvPortMalloc+0xa4>
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f1      	bne.n	8005000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800501c:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <pvPortMalloc+0x180>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005022:	429a      	cmp	r2, r3
 8005024:	d050      	beq.n	80050c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2208      	movs	r2, #8
 800502c:	4413      	add	r3, r2
 800502e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	2308      	movs	r3, #8
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	429a      	cmp	r2, r3
 8005046:	d91f      	bls.n	8005088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <pvPortMalloc+0xf8>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	613b      	str	r3, [r7, #16]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005082:	69b8      	ldr	r0, [r7, #24]
 8005084:	f000 f908 	bl	8005298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <pvPortMalloc+0x188>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <pvPortMalloc+0x188>)
 8005094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005096:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <pvPortMalloc+0x188>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <pvPortMalloc+0x190>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d203      	bcs.n	80050aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050a2:	4b17      	ldr	r3, [pc, #92]	; (8005100 <pvPortMalloc+0x188>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <pvPortMalloc+0x190>)
 80050a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <pvPortMalloc+0x184>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <pvPortMalloc+0x194>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3301      	adds	r3, #1
 80050c4:	4a11      	ldr	r2, [pc, #68]	; (800510c <pvPortMalloc+0x194>)
 80050c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050c8:	f7fe fcfc 	bl	8003ac4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <pvPortMalloc+0x174>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60fb      	str	r3, [r7, #12]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <pvPortMalloc+0x172>
	return pvReturn;
 80050ec:	69fb      	ldr	r3, [r7, #28]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20004ae4 	.word	0x20004ae4
 80050fc:	20004af8 	.word	0x20004af8
 8005100:	20004ae8 	.word	0x20004ae8
 8005104:	20004adc 	.word	0x20004adc
 8005108:	20004aec 	.word	0x20004aec
 800510c:	20004af0 	.word	0x20004af0

08005110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04d      	beq.n	80051be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005122:	2308      	movs	r3, #8
 8005124:	425b      	negs	r3, r3
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4413      	add	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <vPortFree+0xb8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <vPortFree+0x44>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	60fb      	str	r3, [r7, #12]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <vPortFree+0x62>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	60bb      	str	r3, [r7, #8]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <vPortFree+0xb8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01e      	beq.n	80051be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d11a      	bne.n	80051be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <vPortFree+0xb8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	43db      	mvns	r3, r3
 8005192:	401a      	ands	r2, r3
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005198:	f7fe fc86 	bl	8003aa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <vPortFree+0xbc>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <vPortFree+0xbc>)
 80051a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051aa:	6938      	ldr	r0, [r7, #16]
 80051ac:	f000 f874 	bl	8005298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <vPortFree+0xc0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	4a06      	ldr	r2, [pc, #24]	; (80051d0 <vPortFree+0xc0>)
 80051b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051ba:	f7fe fc83 	bl	8003ac4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051be:	bf00      	nop
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20004af8 	.word	0x20004af8
 80051cc:	20004ae8 	.word	0x20004ae8
 80051d0:	20004af4 	.word	0x20004af4

080051d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80051de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051e0:	4b27      	ldr	r3, [pc, #156]	; (8005280 <prvHeapInit+0xac>)
 80051e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3307      	adds	r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <prvHeapInit+0xac>)
 8005204:	4413      	add	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <prvHeapInit+0xb0>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <prvHeapInit+0xb0>)
 8005214:	2200      	movs	r2, #0
 8005216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005220:	2208      	movs	r2, #8
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a15      	ldr	r2, [pc, #84]	; (8005288 <prvHeapInit+0xb4>)
 8005234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <prvHeapInit+0xb4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <prvHeapInit+0xb4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <prvHeapInit+0xb4>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	4a0a      	ldr	r2, [pc, #40]	; (800528c <prvHeapInit+0xb8>)
 8005262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a09      	ldr	r2, [pc, #36]	; (8005290 <prvHeapInit+0xbc>)
 800526a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <prvHeapInit+0xc0>)
 800526e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	20000edc 	.word	0x20000edc
 8005284:	20004adc 	.word	0x20004adc
 8005288:	20004ae4 	.word	0x20004ae4
 800528c:	20004aec 	.word	0x20004aec
 8005290:	20004ae8 	.word	0x20004ae8
 8005294:	20004af8 	.word	0x20004af8

08005298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052a0:	4b28      	ldr	r3, [pc, #160]	; (8005344 <prvInsertBlockIntoFreeList+0xac>)
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e002      	b.n	80052ac <prvInsertBlockIntoFreeList+0x14>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d8f7      	bhi.n	80052a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4413      	add	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d108      	bne.n	80052da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	441a      	add	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d118      	bne.n	8005320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <prvInsertBlockIntoFreeList+0xb0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d00d      	beq.n	8005316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	441a      	add	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e008      	b.n	8005328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <prvInsertBlockIntoFreeList+0xb0>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e003      	b.n	8005328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d002      	beq.n	8005336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20004adc 	.word	0x20004adc
 8005348:	20004ae4 	.word	0x20004ae4

0800534c <memset>:
 800534c:	4402      	add	r2, r0
 800534e:	4603      	mov	r3, r0
 8005350:	4293      	cmp	r3, r2
 8005352:	d100      	bne.n	8005356 <memset+0xa>
 8005354:	4770      	bx	lr
 8005356:	f803 1b01 	strb.w	r1, [r3], #1
 800535a:	e7f9      	b.n	8005350 <memset+0x4>

0800535c <_reclaim_reent>:
 800535c:	4b29      	ldr	r3, [pc, #164]	; (8005404 <_reclaim_reent+0xa8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4283      	cmp	r3, r0
 8005362:	b570      	push	{r4, r5, r6, lr}
 8005364:	4604      	mov	r4, r0
 8005366:	d04b      	beq.n	8005400 <_reclaim_reent+0xa4>
 8005368:	69c3      	ldr	r3, [r0, #28]
 800536a:	b143      	cbz	r3, 800537e <_reclaim_reent+0x22>
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d144      	bne.n	80053fc <_reclaim_reent+0xa0>
 8005372:	69e3      	ldr	r3, [r4, #28]
 8005374:	6819      	ldr	r1, [r3, #0]
 8005376:	b111      	cbz	r1, 800537e <_reclaim_reent+0x22>
 8005378:	4620      	mov	r0, r4
 800537a:	f000 f879 	bl	8005470 <_free_r>
 800537e:	6961      	ldr	r1, [r4, #20]
 8005380:	b111      	cbz	r1, 8005388 <_reclaim_reent+0x2c>
 8005382:	4620      	mov	r0, r4
 8005384:	f000 f874 	bl	8005470 <_free_r>
 8005388:	69e1      	ldr	r1, [r4, #28]
 800538a:	b111      	cbz	r1, 8005392 <_reclaim_reent+0x36>
 800538c:	4620      	mov	r0, r4
 800538e:	f000 f86f 	bl	8005470 <_free_r>
 8005392:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005394:	b111      	cbz	r1, 800539c <_reclaim_reent+0x40>
 8005396:	4620      	mov	r0, r4
 8005398:	f000 f86a 	bl	8005470 <_free_r>
 800539c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800539e:	b111      	cbz	r1, 80053a6 <_reclaim_reent+0x4a>
 80053a0:	4620      	mov	r0, r4
 80053a2:	f000 f865 	bl	8005470 <_free_r>
 80053a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053a8:	b111      	cbz	r1, 80053b0 <_reclaim_reent+0x54>
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 f860 	bl	8005470 <_free_r>
 80053b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80053b2:	b111      	cbz	r1, 80053ba <_reclaim_reent+0x5e>
 80053b4:	4620      	mov	r0, r4
 80053b6:	f000 f85b 	bl	8005470 <_free_r>
 80053ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80053bc:	b111      	cbz	r1, 80053c4 <_reclaim_reent+0x68>
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 f856 	bl	8005470 <_free_r>
 80053c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80053c6:	b111      	cbz	r1, 80053ce <_reclaim_reent+0x72>
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 f851 	bl	8005470 <_free_r>
 80053ce:	6a23      	ldr	r3, [r4, #32]
 80053d0:	b1b3      	cbz	r3, 8005400 <_reclaim_reent+0xa4>
 80053d2:	4620      	mov	r0, r4
 80053d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053d8:	4718      	bx	r3
 80053da:	5949      	ldr	r1, [r1, r5]
 80053dc:	b941      	cbnz	r1, 80053f0 <_reclaim_reent+0x94>
 80053de:	3504      	adds	r5, #4
 80053e0:	69e3      	ldr	r3, [r4, #28]
 80053e2:	2d80      	cmp	r5, #128	; 0x80
 80053e4:	68d9      	ldr	r1, [r3, #12]
 80053e6:	d1f8      	bne.n	80053da <_reclaim_reent+0x7e>
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 f841 	bl	8005470 <_free_r>
 80053ee:	e7c0      	b.n	8005372 <_reclaim_reent+0x16>
 80053f0:	680e      	ldr	r6, [r1, #0]
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 f83c 	bl	8005470 <_free_r>
 80053f8:	4631      	mov	r1, r6
 80053fa:	e7ef      	b.n	80053dc <_reclaim_reent+0x80>
 80053fc:	2500      	movs	r5, #0
 80053fe:	e7ef      	b.n	80053e0 <_reclaim_reent+0x84>
 8005400:	bd70      	pop	{r4, r5, r6, pc}
 8005402:	bf00      	nop
 8005404:	2000005c 	.word	0x2000005c

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4d0d      	ldr	r5, [pc, #52]	; (8005440 <__libc_init_array+0x38>)
 800540c:	4c0d      	ldr	r4, [pc, #52]	; (8005444 <__libc_init_array+0x3c>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	2600      	movs	r6, #0
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	4d0b      	ldr	r5, [pc, #44]	; (8005448 <__libc_init_array+0x40>)
 800541a:	4c0c      	ldr	r4, [pc, #48]	; (800544c <__libc_init_array+0x44>)
 800541c:	f000 f880 	bl	8005520 <_init>
 8005420:	1b64      	subs	r4, r4, r5
 8005422:	10a4      	asrs	r4, r4, #2
 8005424:	2600      	movs	r6, #0
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f855 3b04 	ldr.w	r3, [r5], #4
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	080055a0 	.word	0x080055a0
 8005444:	080055a0 	.word	0x080055a0
 8005448:	080055a0 	.word	0x080055a0
 800544c:	080055a4 	.word	0x080055a4

08005450 <__retarget_lock_acquire_recursive>:
 8005450:	4770      	bx	lr

08005452 <__retarget_lock_release_recursive>:
 8005452:	4770      	bx	lr

08005454 <memcpy>:
 8005454:	440a      	add	r2, r1
 8005456:	4291      	cmp	r1, r2
 8005458:	f100 33ff 	add.w	r3, r0, #4294967295
 800545c:	d100      	bne.n	8005460 <memcpy+0xc>
 800545e:	4770      	bx	lr
 8005460:	b510      	push	{r4, lr}
 8005462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800546a:	4291      	cmp	r1, r2
 800546c:	d1f9      	bne.n	8005462 <memcpy+0xe>
 800546e:	bd10      	pop	{r4, pc}

08005470 <_free_r>:
 8005470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005472:	2900      	cmp	r1, #0
 8005474:	d044      	beq.n	8005500 <_free_r+0x90>
 8005476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800547a:	9001      	str	r0, [sp, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f1a1 0404 	sub.w	r4, r1, #4
 8005482:	bfb8      	it	lt
 8005484:	18e4      	addlt	r4, r4, r3
 8005486:	f000 f83f 	bl	8005508 <__malloc_lock>
 800548a:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <_free_r+0x94>)
 800548c:	9801      	ldr	r0, [sp, #4]
 800548e:	6813      	ldr	r3, [r2, #0]
 8005490:	b933      	cbnz	r3, 80054a0 <_free_r+0x30>
 8005492:	6063      	str	r3, [r4, #4]
 8005494:	6014      	str	r4, [r2, #0]
 8005496:	b003      	add	sp, #12
 8005498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800549c:	f000 b83a 	b.w	8005514 <__malloc_unlock>
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d908      	bls.n	80054b6 <_free_r+0x46>
 80054a4:	6825      	ldr	r5, [r4, #0]
 80054a6:	1961      	adds	r1, r4, r5
 80054a8:	428b      	cmp	r3, r1
 80054aa:	bf01      	itttt	eq
 80054ac:	6819      	ldreq	r1, [r3, #0]
 80054ae:	685b      	ldreq	r3, [r3, #4]
 80054b0:	1949      	addeq	r1, r1, r5
 80054b2:	6021      	streq	r1, [r4, #0]
 80054b4:	e7ed      	b.n	8005492 <_free_r+0x22>
 80054b6:	461a      	mov	r2, r3
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	b10b      	cbz	r3, 80054c0 <_free_r+0x50>
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d9fa      	bls.n	80054b6 <_free_r+0x46>
 80054c0:	6811      	ldr	r1, [r2, #0]
 80054c2:	1855      	adds	r5, r2, r1
 80054c4:	42a5      	cmp	r5, r4
 80054c6:	d10b      	bne.n	80054e0 <_free_r+0x70>
 80054c8:	6824      	ldr	r4, [r4, #0]
 80054ca:	4421      	add	r1, r4
 80054cc:	1854      	adds	r4, r2, r1
 80054ce:	42a3      	cmp	r3, r4
 80054d0:	6011      	str	r1, [r2, #0]
 80054d2:	d1e0      	bne.n	8005496 <_free_r+0x26>
 80054d4:	681c      	ldr	r4, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	6053      	str	r3, [r2, #4]
 80054da:	440c      	add	r4, r1
 80054dc:	6014      	str	r4, [r2, #0]
 80054de:	e7da      	b.n	8005496 <_free_r+0x26>
 80054e0:	d902      	bls.n	80054e8 <_free_r+0x78>
 80054e2:	230c      	movs	r3, #12
 80054e4:	6003      	str	r3, [r0, #0]
 80054e6:	e7d6      	b.n	8005496 <_free_r+0x26>
 80054e8:	6825      	ldr	r5, [r4, #0]
 80054ea:	1961      	adds	r1, r4, r5
 80054ec:	428b      	cmp	r3, r1
 80054ee:	bf04      	itt	eq
 80054f0:	6819      	ldreq	r1, [r3, #0]
 80054f2:	685b      	ldreq	r3, [r3, #4]
 80054f4:	6063      	str	r3, [r4, #4]
 80054f6:	bf04      	itt	eq
 80054f8:	1949      	addeq	r1, r1, r5
 80054fa:	6021      	streq	r1, [r4, #0]
 80054fc:	6054      	str	r4, [r2, #4]
 80054fe:	e7ca      	b.n	8005496 <_free_r+0x26>
 8005500:	b003      	add	sp, #12
 8005502:	bd30      	pop	{r4, r5, pc}
 8005504:	20004c38 	.word	0x20004c38

08005508 <__malloc_lock>:
 8005508:	4801      	ldr	r0, [pc, #4]	; (8005510 <__malloc_lock+0x8>)
 800550a:	f7ff bfa1 	b.w	8005450 <__retarget_lock_acquire_recursive>
 800550e:	bf00      	nop
 8005510:	20004c34 	.word	0x20004c34

08005514 <__malloc_unlock>:
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <__malloc_unlock+0x8>)
 8005516:	f7ff bf9c 	b.w	8005452 <__retarget_lock_release_recursive>
 800551a:	bf00      	nop
 800551c:	20004c34 	.word	0x20004c34

08005520 <_init>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr

0800552c <_fini>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr
