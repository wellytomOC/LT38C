
robo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005488  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005688  08005688  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005690  08005690  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bdc  20000060  080056f8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c3c  080056f8  00024c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014778  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eae  00000000  00000000  0003484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00037700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dbd  00000000  00000000  000388d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d1e  00000000  00000000  00039695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c4c  00000000  00000000  0003c3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094b82  00000000  00000000  0004efff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d94  00000000  00000000  000e3b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e8918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005610 	.word	0x08005610

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005610 	.word	0x08005610

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fb98 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f826 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8fe 	bl	80006e8 <MX_GPIO_Init>
  MX_TIM3_Init();
 80004ec:	f000 f880 	bl	80005f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  TIM3->CCR2 = 20;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <main+0x48>)
 80004f2:	2214      	movs	r2, #20
 80004f4:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR1 = 20;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <main+0x48>)
 80004f8:	2214      	movs	r2, #20
 80004fa:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR3 = 20;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <main+0x48>)
 80004fe:	2214      	movs	r2, #20
 8000500:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR4 = 20;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <main+0x48>)
 8000504:	2214      	movs	r2, #20
 8000506:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000508:	f002 fa1c 	bl	8002944 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800050c:	4a06      	ldr	r2, [pc, #24]	; (8000528 <main+0x4c>)
 800050e:	2100      	movs	r1, #0
 8000510:	4806      	ldr	r0, [pc, #24]	; (800052c <main+0x50>)
 8000512:	f002 fa61 	bl	80029d8 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a05      	ldr	r2, [pc, #20]	; (8000530 <main+0x54>)
 800051a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051c:	f002 fa36 	bl	800298c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x44>
 8000522:	bf00      	nop
 8000524:	40000400 	.word	0x40000400
 8000528:	0800564c 	.word	0x0800564c
 800052c:	080008b1 	.word	0x080008b1
 8000530:	200000c4 	.word	0x200000c4

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f004 ff7a 	bl	800543c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xb4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xb4>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xb4>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <SystemClock_Config+0xb8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <SystemClock_Config+0xb8>)
 8000582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <SystemClock_Config+0xb8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059e:	2300      	movs	r3, #0
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fe4c 	bl	8001244 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005b2:	f000 f9a5 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005ba:	2301      	movs	r3, #1
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f8af 	bl	8001734 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005dc:	f000 f990 	bl	8000900 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <MX_TIM3_Init+0xf0>)
 8000614:	4a33      	ldr	r2, [pc, #204]	; (80006e4 <MX_TIM3_Init+0xf4>)
 8000616:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <MX_TIM3_Init+0xf0>)
 800061a:	22fa      	movs	r2, #250	; 0xfa
 800061c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <MX_TIM3_Init+0xf0>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <MX_TIM3_Init+0xf0>)
 8000626:	2264      	movs	r2, #100	; 0x64
 8000628:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_TIM3_Init+0xf0>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000630:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <MX_TIM3_Init+0xf0>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000636:	482a      	ldr	r0, [pc, #168]	; (80006e0 <MX_TIM3_Init+0xf0>)
 8000638:	f001 fb36 	bl	8001ca8 <HAL_TIM_PWM_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000642:	f000 f95d 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4619      	mov	r1, r3
 8000654:	4822      	ldr	r0, [pc, #136]	; (80006e0 <MX_TIM3_Init+0xf0>)
 8000656:	f002 f8af 	bl	80027b8 <HAL_TIMEx_MasterConfigSynchronization>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000660:	f000 f94e 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000668:	2332      	movs	r3, #50	; 0x32
 800066a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	4619      	mov	r1, r3
 800067a:	4819      	ldr	r0, [pc, #100]	; (80006e0 <MX_TIM3_Init+0xf0>)
 800067c:	f001 fd80 	bl	8002180 <HAL_TIM_PWM_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000686:	f000 f93b 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2204      	movs	r2, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <MX_TIM3_Init+0xf0>)
 8000692:	f001 fd75 	bl	8002180 <HAL_TIM_PWM_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800069c:	f000 f930 	bl	8000900 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2208      	movs	r2, #8
 80006a8:	4619      	mov	r1, r3
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_TIM3_Init+0xf0>)
 80006ac:	f001 fd68 	bl	8002180 <HAL_TIM_PWM_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80006b6:	f000 f923 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	220c      	movs	r2, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <MX_TIM3_Init+0xf0>)
 80006c2:	f001 fd5d 	bl	8002180 <HAL_TIM_PWM_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80006cc:	f000 f918 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <MX_TIM3_Init+0xf0>)
 80006d2:	f000 f969 	bl	80009a8 <HAL_TIM_MspPostInit>

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000007c 	.word	0x2000007c
 80006e4:	40000400 	.word	0x40000400

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b42      	ldr	r3, [pc, #264]	; (800080c <MX_GPIO_Init+0x124>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a41      	ldr	r2, [pc, #260]	; (800080c <MX_GPIO_Init+0x124>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b3f      	ldr	r3, [pc, #252]	; (800080c <MX_GPIO_Init+0x124>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	4b3b      	ldr	r3, [pc, #236]	; (800080c <MX_GPIO_Init+0x124>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a3a      	ldr	r2, [pc, #232]	; (800080c <MX_GPIO_Init+0x124>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <MX_GPIO_Init+0x124>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <MX_GPIO_Init+0x124>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a33      	ldr	r2, [pc, #204]	; (800080c <MX_GPIO_Init+0x124>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_GPIO_Init+0x124>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_GPIO_Init+0x124>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a2c      	ldr	r2, [pc, #176]	; (800080c <MX_GPIO_Init+0x124>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0x124>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4826      	ldr	r0, [pc, #152]	; (8000810 <MX_GPIO_Init+0x128>)
 8000776:	f000 fd19 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 800077a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	481f      	ldr	r0, [pc, #124]	; (8000810 <MX_GPIO_Init+0x128>)
 8000794:	f000 fb86 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_Pin */
  GPIO_InitStruct.Pin = Key_Pin;
 8000798:	2301      	movs	r3, #1
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	481a      	ldr	r0, [pc, #104]	; (8000814 <MX_GPIO_Init+0x12c>)
 80007ac:	f000 fb7a 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_Pin */
  GPIO_InitStruct.Pin = test_Pin;
 80007b0:	2302      	movs	r3, #2
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4814      	ldr	r0, [pc, #80]	; (8000814 <MX_GPIO_Init+0x12c>)
 80007c4:	f000 fb6e 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_Direito_Pin Encoder_Esquerdo_Pin */
  GPIO_InitStruct.Pin = Encoder_Direito_Pin|Encoder_Esquerdo_Pin;
 80007c8:	2318      	movs	r3, #24
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_GPIO_Init+0x12c>)
 80007de:	f000 fb61 	bl	8000ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2105      	movs	r1, #5
 80007e6:	2009      	movs	r0, #9
 80007e8:	f000 fb32 	bl	8000e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007ec:	2009      	movs	r0, #9
 80007ee:	f000 fb4b 	bl	8000e88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2105      	movs	r1, #5
 80007f6:	200a      	movs	r0, #10
 80007f8:	f000 fb2a 	bl	8000e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f000 fb43 	bl	8000e88 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000

08000818 <RightMotorForward>:

/* USER CODE BEGIN 4 */

void RightMotorForward(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800081c:	2104      	movs	r1, #4
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <RightMotorForward+0x18>)
 8000820:	f001 fa92 	bl	8001d48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 8000824:	2100      	movs	r1, #0
 8000826:	4802      	ldr	r0, [pc, #8]	; (8000830 <RightMotorForward+0x18>)
 8000828:	f001 fb3e 	bl	8001ea8 <HAL_TIM_PWM_Stop>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000007c 	.word	0x2000007c

08000834 <RightMotorStop>:
void RightMotorBackward(){
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
}

void RightMotorStop(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 8000838:	2100      	movs	r1, #0
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <RightMotorStop+0x18>)
 800083c:	f001 fb34 	bl	8001ea8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 8000840:	2104      	movs	r1, #4
 8000842:	4802      	ldr	r0, [pc, #8]	; (800084c <RightMotorStop+0x18>)
 8000844:	f001 fb30 	bl	8001ea8 <HAL_TIM_PWM_Stop>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000007c 	.word	0x2000007c

08000850 <LeftMotorForward>:

void LeftMotorForward(){
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000854:	2108      	movs	r1, #8
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <LeftMotorForward+0x18>)
 8000858:	f001 fa76 	bl	8001d48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_4);
 800085c:	210c      	movs	r1, #12
 800085e:	4802      	ldr	r0, [pc, #8]	; (8000868 <LeftMotorForward+0x18>)
 8000860:	f001 fb22 	bl	8001ea8 <HAL_TIM_PWM_Stop>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000007c 	.word	0x2000007c

0800086c <LeftMotorStop>:
void LeftMotorBackward(){
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
}

void LeftMotorStop(){
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8000870:	2108      	movs	r1, #8
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <LeftMotorStop+0x18>)
 8000874:	f001 fb18 	bl	8001ea8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_4);
 8000878:	210c      	movs	r1, #12
 800087a:	4802      	ldr	r0, [pc, #8]	; (8000884 <LeftMotorStop+0x18>)
 800087c:	f001 fb14 	bl	8001ea8 <HAL_TIM_PWM_Stop>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000007c 	.word	0x2000007c

08000888 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3){
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	2b08      	cmp	r3, #8
 8000896:	d104      	bne.n	80008a2 <HAL_GPIO_EXTI_Callback+0x1a>
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <HAL_GPIO_EXTI_Callback+0x24>)
 800089e:	f000 fc9e 	bl	80011de <HAL_GPIO_TogglePin>
		}
	if(GPIO_Pin == GPIO_PIN_4){
		}

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40020800 	.word	0x40020800

080008b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  LeftMotorForward();
 80008b8:	f7ff ffca 	bl	8000850 <LeftMotorForward>
	  RightMotorForward();
 80008bc:	f7ff ffac 	bl	8000818 <RightMotorForward>
	  HAL_Delay(1000);
 80008c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c4:	f000 f9e8 	bl	8000c98 <HAL_Delay>
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  RightMotorStop();
 80008c8:	f7ff ffb4 	bl	8000834 <RightMotorStop>
	  LeftMotorStop();
 80008cc:	f7ff ffce 	bl	800086c <LeftMotorStop>
	  osDelay(1000);
 80008d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d4:	f002 f912 	bl	8002afc <osDelay>
	  LeftMotorForward();
 80008d8:	e7ee      	b.n	80008b8 <StartDefaultTask+0x8>
	...

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ee:	f000 f9b3 	bl	8000c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010000 	.word	0x40010000

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_MspInit+0x54>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <HAL_MspInit+0x54>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_MspInit+0x54>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_MspInit+0x54>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	f06f 0001 	mvn.w	r0, #1
 8000952:	f000 fa7d 	bl	8000e50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10d      	bne.n	8000992 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_TIM_PWM_MspInit+0x40>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_TIM_PWM_MspInit+0x40>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <HAL_TIM_PWM_MspInit+0x40>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40000400 	.word	0x40000400
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <HAL_TIM_MspPostInit+0xa4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d13b      	bne.n	8000a42 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <HAL_TIM_MspPostInit+0xa8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <HAL_TIM_MspPostInit+0xa8>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <HAL_TIM_MspPostInit+0xa8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_TIM_MspPostInit+0xa8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <HAL_TIM_MspPostInit+0xa8>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_TIM_MspPostInit+0xa8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a02:	23c0      	movs	r3, #192	; 0xc0
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a12:	2302      	movs	r3, #2
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <HAL_TIM_MspPostInit+0xac>)
 8000a1e:	f000 fa41 	bl	8000ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a22:	2303      	movs	r3, #3
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a32:	2302      	movs	r3, #2
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <HAL_TIM_MspPostInit+0xb0>)
 8000a3e:	f000 fa31 	bl	8000ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40000400 	.word	0x40000400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020400 	.word	0x40020400

08000a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <HAL_InitTick+0xd0>)
 8000a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a74:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <HAL_InitTick+0xd0>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <HAL_InitTick+0xd0>)
 8000a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a88:	f107 020c 	add.w	r2, r7, #12
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f81a 	bl	8001acc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a98:	f001 f804 	bl	8001aa4 <HAL_RCC_GetPCLK2Freq>
 8000a9c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa0:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <HAL_InitTick+0xd4>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	0c9b      	lsrs	r3, r3, #18
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <HAL_InitTick+0xd8>)
 8000aae:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <HAL_InitTick+0xdc>)
 8000ab0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <HAL_InitTick+0xd8>)
 8000ab4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aba:	4a1e      	ldr	r2, [pc, #120]	; (8000b34 <HAL_InitTick+0xd8>)
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_InitTick+0xd8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <HAL_InitTick+0xd8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_InitTick+0xd8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ad2:	4818      	ldr	r0, [pc, #96]	; (8000b34 <HAL_InitTick+0xd8>)
 8000ad4:	f001 f82c 	bl	8001b30 <HAL_TIM_Base_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d11b      	bne.n	8000b1e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ae6:	4813      	ldr	r0, [pc, #76]	; (8000b34 <HAL_InitTick+0xd8>)
 8000ae8:	f001 f87c 	bl	8001be4 <HAL_TIM_Base_Start_IT>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d111      	bne.n	8000b1e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000afa:	2019      	movs	r0, #25
 8000afc:	f000 f9c4 	bl	8000e88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	d808      	bhi.n	8000b18 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b06:	2200      	movs	r2, #0
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	2019      	movs	r0, #25
 8000b0c:	f000 f9a0 	bl	8000e50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_InitTick+0xe0>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e002      	b.n	8000b1e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3730      	adds	r7, #48	; 0x30
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	431bde83 	.word	0x431bde83
 8000b34:	200000c8 	.word	0x200000c8
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	20000004 	.word	0x20000004

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Direito_Pin);
 8000b70:	2008      	movs	r0, #8
 8000b72:	f000 fb4f 	bl	8001214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Esquerdo_Pin);
 8000b7e:	2010      	movs	r0, #16
 8000b80:	f000 fb48 	bl	8001214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b8e:	f001 f9ef 	bl	8001f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200000c8 	.word	0x200000c8

08000b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bea:	f7ff ffd7 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f004 fc83 	bl	80054f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fc73 	bl	80004dc <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c04:	08005698 	.word	0x08005698
  ldr r2, =_sbss
 8000c08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c0c:	20004c3c 	.word	0x20004c3c

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <HAL_Init+0x40>)
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_Init+0x40>)
 8000c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_Init+0x40>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f8fc 	bl	8000e3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	200f      	movs	r0, #15
 8000c44:	f7ff ff0a 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff fe60 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023c00 	.word	0x40023c00

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000110 	.word	0x20000110

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000110 	.word	0x20000110

08000c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca0:	f7ff ffee 	bl	8000c80 <HAL_GetTick>
 8000ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb0:	d005      	beq.n	8000cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_Delay+0x44>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cbe:	bf00      	nop
 8000cc0:	f7ff ffde 	bl	8000c80 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d8f7      	bhi.n	8000cc0 <HAL_Delay+0x28>
  {
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60d3      	str	r3, [r2, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0b      	blt.n	8000d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <__NVIC_EnableIRQ+0x38>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff4c 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e62:	f7ff ff61 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000e66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f7ff ffb1 	bl	8000dd4 <NVIC_EncodePriority>
 8000e72:	4602      	mov	r2, r0
 8000e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff80 	bl	8000d80 <__NVIC_SetPriority>
}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff54 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	e159      	b.n	8001174 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f040 8148 	bne.w	800116e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d005      	beq.n	8000ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d130      	bne.n	8000f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	f003 0201 	and.w	r2, r3, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d017      	beq.n	8000f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d123      	bne.n	8000fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	69b9      	ldr	r1, [r7, #24]
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0203 	and.w	r2, r3, #3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80a2 	beq.w	800116e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b57      	ldr	r3, [pc, #348]	; (800118c <HAL_GPIO_Init+0x2e8>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a56      	ldr	r2, [pc, #344]	; (800118c <HAL_GPIO_Init+0x2e8>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b54      	ldr	r3, [pc, #336]	; (800118c <HAL_GPIO_Init+0x2e8>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001046:	4a52      	ldr	r2, [pc, #328]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a49      	ldr	r2, [pc, #292]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x202>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a48      	ldr	r2, [pc, #288]	; (8001198 <HAL_GPIO_Init+0x2f4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x1fe>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a47      	ldr	r2, [pc, #284]	; (800119c <HAL_GPIO_Init+0x2f8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x1fa>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <HAL_GPIO_Init+0x2fc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x1f6>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a45      	ldr	r2, [pc, #276]	; (80011a4 <HAL_GPIO_Init+0x300>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x1f2>
 8001092:	2304      	movs	r3, #4
 8001094:	e008      	b.n	80010a8 <HAL_GPIO_Init+0x204>
 8001096:	2307      	movs	r3, #7
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x204>
 800109a:	2303      	movs	r3, #3
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x204>
 800109e:	2302      	movs	r3, #2
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x204>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x204>
 80010a6:	2300      	movs	r3, #0
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	f002 0203 	and.w	r2, r2, #3
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	4093      	lsls	r3, r2
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b8:	4935      	ldr	r1, [pc, #212]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <HAL_GPIO_Init+0x304>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ea:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <HAL_GPIO_Init+0x304>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_GPIO_Init+0x304>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001114:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <HAL_GPIO_Init+0x304>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_GPIO_Init+0x304>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113e:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <HAL_GPIO_Init+0x304>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_GPIO_Init+0x304>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001168:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_GPIO_Init+0x304>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3301      	adds	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	f67f aea2 	bls.w	8000ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40013800 	.word	0x40013800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40013c00 	.word	0x40013c00

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f0:	887a      	ldrh	r2, [r7, #2]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4013      	ands	r3, r2
 80011f6:	041a      	lsls	r2, r3, #16
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	400b      	ands	r3, r1
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	619a      	str	r2, [r3, #24]
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	4013      	ands	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fb28 	bl	8000888 <HAL_GPIO_EXTI_Callback>
  }
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e267      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d075      	beq.n	800134e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	4b88      	ldr	r3, [pc, #544]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d00c      	beq.n	8001288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b85      	ldr	r3, [pc, #532]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d112      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b82      	ldr	r3, [pc, #520]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b7e      	ldr	r3, [pc, #504]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05b      	beq.n	800134c <HAL_RCC_OscConfig+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d157      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e242      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x74>
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a75      	ldr	r2, [pc, #468]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b70      	ldr	r3, [pc, #448]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6f      	ldr	r2, [pc, #444]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6c      	ldr	r2, [pc, #432]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012dc:	4b69      	ldr	r3, [pc, #420]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a68      	ldr	r2, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b66      	ldr	r3, [pc, #408]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a65      	ldr	r2, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fcc0 	bl	8000c80 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fcbc 	bl	8000c80 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e207      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xc0>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fcac 	bl	8000c80 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fca8 	bl	8000c80 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1f3      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b51      	ldr	r3, [pc, #324]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0xe8>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b44      	ldr	r3, [pc, #272]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1c7      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4937      	ldr	r1, [pc, #220]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e03a      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HAL_RCC_OscConfig+0x244>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fc61 	bl	8000c80 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc5d 	bl	8000c80 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1a8      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4925      	ldr	r1, [pc, #148]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_RCC_OscConfig+0x244>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc40 	bl	8000c80 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fc3c 	bl	8000c80 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e187      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d036      	beq.n	800149c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_RCC_OscConfig+0x248>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fc20 	bl	8000c80 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc1c 	bl	8000c80 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e167      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x200>
 8001462:	e01b      	b.n	800149c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_RCC_OscConfig+0x248>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fc09 	bl	8000c80 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e00e      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fc05 	bl	8000c80 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d907      	bls.n	8001490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e150      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 8001484:	40023800 	.word	0x40023800
 8001488:	42470000 	.word	0x42470000
 800148c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b88      	ldr	r3, [pc, #544]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ea      	bne.n	8001472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8097 	beq.w	80015d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b7d      	ldr	r3, [pc, #500]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a7c      	ldr	r2, [pc, #496]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b7a      	ldr	r3, [pc, #488]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b77      	ldr	r3, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b74      	ldr	r3, [pc, #464]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a73      	ldr	r2, [pc, #460]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fbc5 	bl	8000c80 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff fbc1 	bl	8000c80 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e10c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x2ea>
 8001520:	4b64      	ldr	r3, [pc, #400]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	4a63      	ldr	r2, [pc, #396]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6713      	str	r3, [r2, #112]	; 0x70
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x30c>
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a5e      	ldr	r2, [pc, #376]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
 8001542:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a5b      	ldr	r2, [pc, #364]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 8001550:	4b58      	ldr	r3, [pc, #352]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a57      	ldr	r2, [pc, #348]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
 800155c:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d015      	beq.n	800159c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fb86 	bl	8000c80 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fb82 	bl	8000c80 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0cb      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158e:	4b49      	ldr	r3, [pc, #292]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0ee      	beq.n	8001578 <HAL_RCC_OscConfig+0x334>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fb70 	bl	8000c80 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff fb6c 	bl	8000c80 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0b5      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ee      	bne.n	80015a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015cc:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a38      	ldr	r2, [pc, #224]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a1 	beq.w	8001724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e2:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d05c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d141      	bne.n	800167a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_RCC_OscConfig+0x478>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fb40 	bl	8000c80 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fb3c 	bl	8000c80 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e087      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	3b01      	subs	r3, #1
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	491b      	ldr	r1, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x478>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb15 	bl	8000c80 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb11 	bl	8000c80 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e05c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x416>
 8001678:	e054      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fafe 	bl	8000c80 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fafa 	bl	8000c80 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e045      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x444>
 80016a6:	e03d      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e038      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000
 80016bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_RCC_OscConfig+0x4ec>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d028      	beq.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d121      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d11a      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d111      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	3b01      	subs	r3, #1
 800170a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0cc      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d90c      	bls.n	8001770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d044      	beq.n	8001854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e067      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4934      	ldr	r1, [pc, #208]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001824:	f7ff fa2c 	bl	8000c80 <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7ff fa28 	bl	8000c80 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e04f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d20c      	bcs.n	800187c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f8be 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08005670 	.word	0x08005670
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b090      	sub	sp, #64	; 0x40
 8001906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001910:	2300      	movs	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d00d      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x40>
 8001924:	2b08      	cmp	r3, #8
 8001926:	f200 80a1 	bhi.w	8001a6c <HAL_RCC_GetSysClockFreq+0x16c>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x34>
 800192e:	2b04      	cmp	r3, #4
 8001930:	d003      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x3a>
 8001932:	e09b      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001938:	e09b      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193a:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800193e:	e098      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001940:	4b4f      	ldr	r3, [pc, #316]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194a:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d028      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	2200      	movs	r2, #0
 800195e:	623b      	str	r3, [r7, #32]
 8001960:	627a      	str	r2, [r7, #36]	; 0x24
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001968:	2100      	movs	r1, #0
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800196c:	fb03 f201 	mul.w	r2, r3, r1
 8001970:	2300      	movs	r3, #0
 8001972:	fb00 f303 	mul.w	r3, r0, r3
 8001976:	4413      	add	r3, r2
 8001978:	4a43      	ldr	r2, [pc, #268]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800197a:	fba0 1202 	umull	r1, r2, r0, r2
 800197e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001980:	460a      	mov	r2, r1
 8001982:	62ba      	str	r2, [r7, #40]	; 0x28
 8001984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001986:	4413      	add	r3, r2
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	2200      	movs	r2, #0
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	61fa      	str	r2, [r7, #28]
 8001992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001996:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800199a:	f7fe fc21 	bl	80001e0 <__aeabi_uldivmod>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4613      	mov	r3, r2
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a6:	e053      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a8:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	2200      	movs	r2, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	617a      	str	r2, [r7, #20]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019ba:	f04f 0b00 	mov.w	fp, #0
 80019be:	4652      	mov	r2, sl
 80019c0:	465b      	mov	r3, fp
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	0159      	lsls	r1, r3, #5
 80019cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d0:	0150      	lsls	r0, r2, #5
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	ebb2 080a 	subs.w	r8, r2, sl
 80019da:	eb63 090b 	sbc.w	r9, r3, fp
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019f2:	ebb2 0408 	subs.w	r4, r2, r8
 80019f6:	eb63 0509 	sbc.w	r5, r3, r9
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	00eb      	lsls	r3, r5, #3
 8001a04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a08:	00e2      	lsls	r2, r4, #3
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	eb14 030a 	adds.w	r3, r4, sl
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	eb45 030b 	adc.w	r3, r5, fp
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a26:	4629      	mov	r1, r5
 8001a28:	028b      	lsls	r3, r1, #10
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a30:	4621      	mov	r1, r4
 8001a32:	028a      	lsls	r2, r1, #10
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	60fa      	str	r2, [r7, #12]
 8001a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a44:	f7fe fbcc 	bl	80001e0 <__aeabi_uldivmod>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3740      	adds	r7, #64	; 0x40
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	00f42400 	.word	0x00f42400
 8001a88:	017d7840 	.word	0x017d7840

08001a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000

08001aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aa8:	f7ff fff0 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0b5b      	lsrs	r3, r3, #13
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08005680 	.word	0x08005680

08001acc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	220f      	movs	r2, #15
 8001ada:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_RCC_GetClockConfig+0x60>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0207 	and.w	r2, r3, #7
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e041      	b.n	8001bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f839 	bl	8001bce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f000 fbf0 	bl	8002354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d001      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e044      	b.n	8001c86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d018      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c26:	d013      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1a      	ldr	r2, [pc, #104]	; (8001c98 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00e      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_TIM_Base_Start_IT+0xb8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d111      	bne.n	8001c74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d010      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c72:	e007      	b.n	8001c84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40010000 	.word	0x40010000
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40000800 	.word	0x40000800
 8001ca0:	40000c00 	.word	0x40000c00
 8001ca4:	40014000 	.word	0x40014000

08001ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e041      	b.n	8001d3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fe48 	bl	8000964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 fb34 	bl	8002354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_TIM_PWM_Start+0x24>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	e022      	b.n	8001db2 <HAL_TIM_PWM_Start+0x6a>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d109      	bne.n	8001d86 <HAL_TIM_PWM_Start+0x3e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	e015      	b.n	8001db2 <HAL_TIM_PWM_Start+0x6a>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d109      	bne.n	8001da0 <HAL_TIM_PWM_Start+0x58>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	bf14      	ite	ne
 8001d98:	2301      	movne	r3, #1
 8001d9a:	2300      	moveq	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e008      	b.n	8001db2 <HAL_TIM_PWM_Start+0x6a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e068      	b.n	8001e8c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d104      	bne.n	8001dca <HAL_TIM_PWM_Start+0x82>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc8:	e013      	b.n	8001df2 <HAL_TIM_PWM_Start+0xaa>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d104      	bne.n	8001dda <HAL_TIM_PWM_Start+0x92>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd8:	e00b      	b.n	8001df2 <HAL_TIM_PWM_Start+0xaa>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d104      	bne.n	8001dea <HAL_TIM_PWM_Start+0xa2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de8:	e003      	b.n	8001df2 <HAL_TIM_PWM_Start+0xaa>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fcb6 	bl	800276c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <HAL_TIM_PWM_Start+0x14c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d107      	bne.n	8001e1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <HAL_TIM_PWM_Start+0x14c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d018      	beq.n	8001e56 <HAL_TIM_PWM_Start+0x10e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d013      	beq.n	8001e56 <HAL_TIM_PWM_Start+0x10e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <HAL_TIM_PWM_Start+0x150>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00e      	beq.n	8001e56 <HAL_TIM_PWM_Start+0x10e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_TIM_PWM_Start+0x154>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_TIM_PWM_Start+0x10e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_TIM_PWM_Start+0x158>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d004      	beq.n	8001e56 <HAL_TIM_PWM_Start+0x10e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <HAL_TIM_PWM_Start+0x15c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d111      	bne.n	8001e7a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d010      	beq.n	8001e8a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e78:	e007      	b.n	8001e8a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40010000 	.word	0x40010000
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	40000c00 	.word	0x40000c00
 8001ea4:	40014000 	.word	0x40014000

08001ea8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	6839      	ldr	r1, [r7, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fc56 	bl	800276c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a29      	ldr	r2, [pc, #164]	; (8001f6c <HAL_TIM_PWM_Stop+0xc4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d117      	bne.n	8001efa <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10f      	bne.n	8001efa <HAL_TIM_PWM_Stop+0x52>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6a1a      	ldr	r2, [r3, #32]
 8001ee0:	f240 4344 	movw	r3, #1092	; 0x444
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d107      	bne.n	8001efa <HAL_TIM_PWM_Stop+0x52>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10f      	bne.n	8001f2a <HAL_TIM_PWM_Stop+0x82>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	f240 4344 	movw	r3, #1092	; 0x444
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d107      	bne.n	8001f2a <HAL_TIM_PWM_Stop+0x82>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d104      	bne.n	8001f3a <HAL_TIM_PWM_Stop+0x92>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f38:	e013      	b.n	8001f62 <HAL_TIM_PWM_Stop+0xba>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d104      	bne.n	8001f4a <HAL_TIM_PWM_Stop+0xa2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f48:	e00b      	b.n	8001f62 <HAL_TIM_PWM_Stop+0xba>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d104      	bne.n	8001f5a <HAL_TIM_PWM_Stop+0xb2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f58:	e003      	b.n	8001f62 <HAL_TIM_PWM_Stop+0xba>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40010000 	.word	0x40010000

08001f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d122      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d11b      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0202 	mvn.w	r2, #2
 8001f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f9b0 	bl	8002318 <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f9a2 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f9b3 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d122      	bne.n	8002020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d11b      	bne.n	8002020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0204 	mvn.w	r2, #4
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f986 	bl	8002318 <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f978 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f989 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b08      	cmp	r3, #8
 800202c:	d122      	bne.n	8002074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b08      	cmp	r3, #8
 800203a:	d11b      	bne.n	8002074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0208 	mvn.w	r2, #8
 8002044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2204      	movs	r2, #4
 800204a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f95c 	bl	8002318 <HAL_TIM_IC_CaptureCallback>
 8002060:	e005      	b.n	800206e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f94e 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f95f 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b10      	cmp	r3, #16
 8002080:	d122      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b10      	cmp	r3, #16
 800208e:	d11b      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0210 	mvn.w	r2, #16
 8002098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2208      	movs	r2, #8
 800209e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f932 	bl	8002318 <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f924 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f935 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10e      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d107      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0201 	mvn.w	r2, #1
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fbf4 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fe:	2b80      	cmp	r3, #128	; 0x80
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fbc4 	bl	80028a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d10e      	bne.n	800214c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	2b40      	cmp	r3, #64	; 0x40
 800213a:	d107      	bne.n	800214c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8fa 	bl	8002340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b20      	cmp	r3, #32
 8002158:	d10e      	bne.n	8002178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b20      	cmp	r3, #32
 8002166:	d107      	bne.n	8002178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0220 	mvn.w	r2, #32
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fb8e 	bl	8002894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800219a:	2302      	movs	r3, #2
 800219c:	e0ae      	b.n	80022fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b0c      	cmp	r3, #12
 80021aa:	f200 809f 	bhi.w	80022ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021ae:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b4:	080021e9 	.word	0x080021e9
 80021b8:	080022ed 	.word	0x080022ed
 80021bc:	080022ed 	.word	0x080022ed
 80021c0:	080022ed 	.word	0x080022ed
 80021c4:	08002229 	.word	0x08002229
 80021c8:	080022ed 	.word	0x080022ed
 80021cc:	080022ed 	.word	0x080022ed
 80021d0:	080022ed 	.word	0x080022ed
 80021d4:	0800226b 	.word	0x0800226b
 80021d8:	080022ed 	.word	0x080022ed
 80021dc:	080022ed 	.word	0x080022ed
 80021e0:	080022ed 	.word	0x080022ed
 80021e4:	080022ab 	.word	0x080022ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f930 	bl	8002454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0208 	orr.w	r2, r2, #8
 8002202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0204 	bic.w	r2, r2, #4
 8002212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6999      	ldr	r1, [r3, #24]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	619a      	str	r2, [r3, #24]
      break;
 8002226:	e064      	b.n	80022f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f976 	bl	8002520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6999      	ldr	r1, [r3, #24]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	021a      	lsls	r2, r3, #8
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	619a      	str	r2, [r3, #24]
      break;
 8002268:	e043      	b.n	80022f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f9c1 	bl	80025f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0208 	orr.w	r2, r2, #8
 8002284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0204 	bic.w	r2, r2, #4
 8002294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69d9      	ldr	r1, [r3, #28]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	61da      	str	r2, [r3, #28]
      break;
 80022a8:	e023      	b.n	80022f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fa0b 	bl	80026cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69da      	ldr	r2, [r3, #28]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69d9      	ldr	r1, [r3, #28]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	021a      	lsls	r2, r3, #8
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	61da      	str	r2, [r3, #28]
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	75fb      	strb	r3, [r7, #23]
      break;
 80022f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a34      	ldr	r2, [pc, #208]	; (8002438 <TIM_Base_SetConfig+0xe4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00f      	beq.n	800238c <TIM_Base_SetConfig+0x38>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002372:	d00b      	beq.n	800238c <TIM_Base_SetConfig+0x38>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a31      	ldr	r2, [pc, #196]	; (800243c <TIM_Base_SetConfig+0xe8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <TIM_Base_SetConfig+0x38>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a30      	ldr	r2, [pc, #192]	; (8002440 <TIM_Base_SetConfig+0xec>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d003      	beq.n	800238c <TIM_Base_SetConfig+0x38>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a2f      	ldr	r2, [pc, #188]	; (8002444 <TIM_Base_SetConfig+0xf0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d108      	bne.n	800239e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a25      	ldr	r2, [pc, #148]	; (8002438 <TIM_Base_SetConfig+0xe4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d01b      	beq.n	80023de <TIM_Base_SetConfig+0x8a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d017      	beq.n	80023de <TIM_Base_SetConfig+0x8a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a22      	ldr	r2, [pc, #136]	; (800243c <TIM_Base_SetConfig+0xe8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <TIM_Base_SetConfig+0x8a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a21      	ldr	r2, [pc, #132]	; (8002440 <TIM_Base_SetConfig+0xec>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00f      	beq.n	80023de <TIM_Base_SetConfig+0x8a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a20      	ldr	r2, [pc, #128]	; (8002444 <TIM_Base_SetConfig+0xf0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00b      	beq.n	80023de <TIM_Base_SetConfig+0x8a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <TIM_Base_SetConfig+0xf4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <TIM_Base_SetConfig+0x8a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1e      	ldr	r2, [pc, #120]	; (800244c <TIM_Base_SetConfig+0xf8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d003      	beq.n	80023de <TIM_Base_SetConfig+0x8a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <TIM_Base_SetConfig+0xfc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d108      	bne.n	80023f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <TIM_Base_SetConfig+0xe4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d103      	bne.n	8002424 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	615a      	str	r2, [r3, #20]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40010000 	.word	0x40010000
 800243c:	40000400 	.word	0x40000400
 8002440:	40000800 	.word	0x40000800
 8002444:	40000c00 	.word	0x40000c00
 8002448:	40014000 	.word	0x40014000
 800244c:	40014400 	.word	0x40014400
 8002450:	40014800 	.word	0x40014800

08002454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	f023 0201 	bic.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f023 0302 	bic.w	r3, r3, #2
 800249c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <TIM_OC1_SetConfig+0xc8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d10c      	bne.n	80024ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f023 0308 	bic.w	r3, r3, #8
 80024b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <TIM_OC1_SetConfig+0xc8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d111      	bne.n	80024f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	621a      	str	r2, [r3, #32]
}
 8002510:	bf00      	nop
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40010000 	.word	0x40010000

08002520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	f023 0210 	bic.w	r2, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800254e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f023 0320 	bic.w	r3, r3, #32
 800256a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <TIM_OC2_SetConfig+0xd4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d10d      	bne.n	800259c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800259a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <TIM_OC2_SetConfig+0xd4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d113      	bne.n	80025cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	621a      	str	r2, [r3, #32]
}
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40010000 	.word	0x40010000

080025f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <TIM_OC3_SetConfig+0xd0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10d      	bne.n	8002672 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800265c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <TIM_OC3_SetConfig+0xd0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d113      	bne.n	80026a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	621a      	str	r2, [r3, #32]
}
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40010000 	.word	0x40010000

080026cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	031b      	lsls	r3, r3, #12
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <TIM_OC4_SetConfig+0x9c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d109      	bne.n	8002740 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	621a      	str	r2, [r3, #32]
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40010000 	.word	0x40010000

0800276c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2201      	movs	r2, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	43db      	mvns	r3, r3
 800278e:	401a      	ands	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1a      	ldr	r2, [r3, #32]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	621a      	str	r2, [r3, #32]
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e050      	b.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d018      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d013      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00e      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10c      	bne.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800284c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	4313      	orrs	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800
 800288c:	40000c00 	.word	0x40000c00
 8002890:	40014000 	.word	0x40014000

08002894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <__NVIC_SetPriority>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Handler+0x1c>)
 8002916:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002918:	f001 fd28 	bl	800436c <xTaskGetSchedulerState>
 800291c:	4603      	mov	r3, r0
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002922:	f002 fb11 	bl	8004f48 <xPortSysTickHandler>
  }
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002934:	2100      	movs	r1, #0
 8002936:	f06f 0004 	mvn.w	r0, #4
 800293a:	f7ff ffbf 	bl	80028bc <__NVIC_SetPriority>
#endif
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800294a:	f3ef 8305 	mrs	r3, IPSR
 800294e:	603b      	str	r3, [r7, #0]
  return(result);
 8002950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002956:	f06f 0305 	mvn.w	r3, #5
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	e00c      	b.n	8002978 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <osKernelInitialize+0x44>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <osKernelInitialize+0x44>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800296c:	2300      	movs	r3, #0
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	e002      	b.n	8002978 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002978:	687b      	ldr	r3, [r7, #4]
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000114 	.word	0x20000114

0800298c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002992:	f3ef 8305 	mrs	r3, IPSR
 8002996:	603b      	str	r3, [r7, #0]
  return(result);
 8002998:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800299e:	f06f 0305 	mvn.w	r3, #5
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	e010      	b.n	80029c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <osKernelStart+0x48>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d109      	bne.n	80029c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80029ae:	f7ff ffbf 	bl	8002930 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <osKernelStart+0x48>)
 80029b4:	2202      	movs	r2, #2
 80029b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80029b8:	f001 f87c 	bl	8003ab4 <vTaskStartScheduler>
      stat = osOK;
 80029bc:	2300      	movs	r3, #0
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	e002      	b.n	80029c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029c8:	687b      	ldr	r3, [r7, #4]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000114 	.word	0x20000114

080029d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08e      	sub	sp, #56	; 0x38
 80029dc:	af04      	add	r7, sp, #16
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029e8:	f3ef 8305 	mrs	r3, IPSR
 80029ec:	617b      	str	r3, [r7, #20]
  return(result);
 80029ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d17e      	bne.n	8002af2 <osThreadNew+0x11a>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d07b      	beq.n	8002af2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80029fe:	2318      	movs	r3, #24
 8002a00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d045      	beq.n	8002a9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <osThreadNew+0x48>
        name = attr->name;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <osThreadNew+0x6e>
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b38      	cmp	r3, #56	; 0x38
 8002a38:	d805      	bhi.n	8002a46 <osThreadNew+0x6e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <osThreadNew+0x72>
        return (NULL);
 8002a46:	2300      	movs	r3, #0
 8002a48:	e054      	b.n	8002af4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00e      	beq.n	8002a80 <osThreadNew+0xa8>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2ba7      	cmp	r3, #167	; 0xa7
 8002a68:	d90a      	bls.n	8002a80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d006      	beq.n	8002a80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <osThreadNew+0xa8>
        mem = 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e010      	b.n	8002aa2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10c      	bne.n	8002aa2 <osThreadNew+0xca>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d108      	bne.n	8002aa2 <osThreadNew+0xca>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <osThreadNew+0xca>
          mem = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	e001      	b.n	8002aa2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d110      	bne.n	8002aca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ab0:	9202      	str	r2, [sp, #8]
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	6a3a      	ldr	r2, [r7, #32]
 8002abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fe0c 	bl	80036dc <xTaskCreateStatic>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e013      	b.n	8002af2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d110      	bne.n	8002af2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fe57 	bl	8003796 <xTaskCreate>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d001      	beq.n	8002af2 <osThreadNew+0x11a>
            hTask = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002af2:	693b      	ldr	r3, [r7, #16]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3728      	adds	r7, #40	; 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b04:	f3ef 8305 	mrs	r3, IPSR
 8002b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <osDelay+0x1c>
    stat = osErrorISR;
 8002b10:	f06f 0305 	mvn.w	r3, #5
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	e007      	b.n	8002b28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 ff92 	bl	8003a4c <vTaskDelay>
    }
  }

  return (stat);
 8002b28:	68fb      	ldr	r3, [r7, #12]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <vApplicationGetIdleTaskMemory+0x30>)
 8002b4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	601a      	str	r2, [r3, #0]
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000118 	.word	0x20000118
 8002b64:	200001c0 	.word	0x200001c0

08002b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a07      	ldr	r2, [pc, #28]	; (8002b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <vApplicationGetTimerTaskMemory+0x30>)
 8002b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b86:	601a      	str	r2, [r3, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	200003c0 	.word	0x200003c0
 8002b98:	20000468 	.word	0x20000468

08002b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f103 0208 	add.w	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f103 0208 	add.w	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f103 0208 	add.w	r2, r3, #8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	601a      	str	r2, [r3, #0]
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d103      	bne.n	8002c5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	e00c      	b.n	8002c78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3308      	adds	r3, #8
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e002      	b.n	8002c6c <vListInsert+0x2e>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d2f6      	bcs.n	8002c66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	601a      	str	r2, [r3, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6852      	ldr	r2, [r2, #4]
 8002cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d103      	bne.n	8002ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	1e5a      	subs	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d2e:	f002 f879 	bl	8004e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	441a      	add	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	68f9      	ldr	r1, [r7, #12]
 8002d62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	441a      	add	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	22ff      	movs	r2, #255	; 0xff
 8002d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	22ff      	movs	r2, #255	; 0xff
 8002d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d114      	bne.n	8002dae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01a      	beq.n	8002dc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3310      	adds	r3, #16
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 f929 	bl	8003fe8 <xTaskRemoveFromEventList>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <xQueueGenericReset+0xcc>)
 8002d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	e009      	b.n	8002dc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3310      	adds	r3, #16
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fef2 	bl	8002b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3324      	adds	r3, #36	; 0x24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff feed 	bl	8002b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dc2:	f002 f85f 	bl	8004e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dc6:	2301      	movs	r3, #1
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	e000ed04 	.word	0xe000ed04

08002dd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08e      	sub	sp, #56	; 0x38
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <xQueueGenericCreateStatic+0x52>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <xQueueGenericCreateStatic+0x56>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <xQueueGenericCreateStatic+0x58>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	623b      	str	r3, [r7, #32]
}
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <xQueueGenericCreateStatic+0x7e>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <xQueueGenericCreateStatic+0x82>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <xQueueGenericCreateStatic+0x84>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	61fb      	str	r3, [r7, #28]
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e72:	2350      	movs	r3, #80	; 0x50
 8002e74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b50      	cmp	r3, #80	; 0x50
 8002e7a:	d00a      	beq.n	8002e92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	61bb      	str	r3, [r7, #24]
}
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ea6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f805 	bl	8002ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3730      	adds	r7, #48	; 0x30
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e002      	b.n	8002ee6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	69b8      	ldr	r0, [r7, #24]
 8002ef6:	f7ff ff05 	bl	8002d04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08e      	sub	sp, #56	; 0x38
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xQueueGenericSend+0x32>
	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <xQueueGenericSend+0x40>
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <xQueueGenericSend+0x44>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <xQueueGenericSend+0x46>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <xQueueGenericSend+0x60>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f68:	bf00      	nop
 8002f6a:	e7fe      	b.n	8002f6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d103      	bne.n	8002f7a <xQueueGenericSend+0x6e>
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <xQueueGenericSend+0x72>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <xQueueGenericSend+0x74>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <xQueueGenericSend+0x8e>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	623b      	str	r3, [r7, #32]
}
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f9a:	f001 f9e7 	bl	800436c <xTaskGetSchedulerState>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <xQueueGenericSend+0x9e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <xQueueGenericSend+0xa2>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <xQueueGenericSend+0xa4>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <xQueueGenericSend+0xbe>
	__asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	61fb      	str	r3, [r7, #28]
}
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fca:	f001 ff2b 	bl	8004e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d302      	bcc.n	8002fe0 <xQueueGenericSend+0xd4>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d129      	bne.n	8003034 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe6:	f000 fa0b 	bl	8003400 <prvCopyDataToQueue>
 8002fea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d010      	beq.n	8003016 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	3324      	adds	r3, #36	; 0x24
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fff5 	bl	8003fe8 <xTaskRemoveFromEventList>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d013      	beq.n	800302c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003004:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <xQueueGenericSend+0x1f8>)
 8003006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	e00a      	b.n	800302c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800301c:	4b39      	ldr	r3, [pc, #228]	; (8003104 <xQueueGenericSend+0x1f8>)
 800301e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800302c:	f001 ff2a 	bl	8004e84 <vPortExitCritical>
				return pdPASS;
 8003030:	2301      	movs	r3, #1
 8003032:	e063      	b.n	80030fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800303a:	f001 ff23 	bl	8004e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800303e:	2300      	movs	r3, #0
 8003040:	e05c      	b.n	80030fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4618      	mov	r0, r3
 800304e:	f001 f82f 	bl	80040b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003052:	2301      	movs	r3, #1
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003056:	f001 ff15 	bl	8004e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800305a:	f000 fd9b 	bl	8003b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800305e:	f001 fee1 	bl	8004e24 <vPortEnterCritical>
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003068:	b25b      	sxtb	r3, r3
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d103      	bne.n	8003078 <xQueueGenericSend+0x16c>
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800307e:	b25b      	sxtb	r3, r3
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d103      	bne.n	800308e <xQueueGenericSend+0x182>
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800308e:	f001 fef9 	bl	8004e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003092:	1d3a      	adds	r2, r7, #4
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f81e 	bl	80040dc <xTaskCheckForTimeOut>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d124      	bne.n	80030f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a8:	f000 faa2 	bl	80035f0 <prvIsQueueFull>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d018      	beq.n	80030e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	3310      	adds	r3, #16
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 ff44 	bl	8003f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c2:	f000 fa2d 	bl	8003520 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030c6:	f000 fd73 	bl	8003bb0 <xTaskResumeAll>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f47f af7c 	bne.w	8002fca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <xQueueGenericSend+0x1f8>)
 80030d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	e772      	b.n	8002fca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030e6:	f000 fa1b 	bl	8003520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030ea:	f000 fd61 	bl	8003bb0 <xTaskResumeAll>
 80030ee:	e76c      	b.n	8002fca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030f2:	f000 fa15 	bl	8003520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030f6:	f000 fd5b 	bl	8003bb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3738      	adds	r7, #56	; 0x38
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b090      	sub	sp, #64	; 0x40
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003132:	bf00      	nop
 8003134:	e7fe      	b.n	8003134 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <xQueueGenericSendFromISR+0x3c>
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <xQueueGenericSendFromISR+0x40>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <xQueueGenericSendFromISR+0x42>
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003160:	bf00      	nop
 8003162:	e7fe      	b.n	8003162 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d103      	bne.n	8003172 <xQueueGenericSendFromISR+0x6a>
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <xQueueGenericSendFromISR+0x6e>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <xQueueGenericSendFromISR+0x70>
 8003176:	2300      	movs	r3, #0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	623b      	str	r3, [r7, #32]
}
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003192:	f001 ff29 	bl	8004fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003196:	f3ef 8211 	mrs	r2, BASEPRI
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	61fa      	str	r2, [r7, #28]
 80031ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <xQueueGenericSendFromISR+0xbc>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d12f      	bne.n	8003224 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80031da:	f000 f911 	bl	8003400 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d112      	bne.n	800320e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d016      	beq.n	800321e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	3324      	adds	r3, #36	; 0x24
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fef7 	bl	8003fe8 <xTaskRemoveFromEventList>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00e      	beq.n	800321e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e007      	b.n	800321e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800320e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003212:	3301      	adds	r3, #1
 8003214:	b2db      	uxtb	r3, r3
 8003216:	b25a      	sxtb	r2, r3
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800321e:	2301      	movs	r3, #1
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003222:	e001      	b.n	8003228 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003224:	2300      	movs	r3, #0
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003232:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003236:	4618      	mov	r0, r3
 8003238:	3740      	adds	r7, #64	; 0x40
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08c      	sub	sp, #48	; 0x30
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800324c:	2300      	movs	r3, #0
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <xQueueReceive+0x30>
	__asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	623b      	str	r3, [r7, #32]
}
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <xQueueReceive+0x3e>
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <xQueueReceive+0x42>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <xQueueReceive+0x44>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <xQueueReceive+0x5e>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	61fb      	str	r3, [r7, #28]
}
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800329e:	f001 f865 	bl	800436c <xTaskGetSchedulerState>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <xQueueReceive+0x6e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <xQueueReceive+0x72>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <xQueueReceive+0x74>
 80032b2:	2300      	movs	r3, #0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <xQueueReceive+0x8e>
	__asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	61bb      	str	r3, [r7, #24]
}
 80032ca:	bf00      	nop
 80032cc:	e7fe      	b.n	80032cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032ce:	f001 fda9 	bl	8004e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d01f      	beq.n	800331e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e2:	f000 f8f7 	bl	80034d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00f      	beq.n	8003316 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	3310      	adds	r3, #16
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fe74 	bl	8003fe8 <xTaskRemoveFromEventList>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003306:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <xQueueReceive+0x1bc>)
 8003308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003316:	f001 fdb5 	bl	8004e84 <vPortExitCritical>
				return pdPASS;
 800331a:	2301      	movs	r3, #1
 800331c:	e069      	b.n	80033f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d103      	bne.n	800332c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003324:	f001 fdae 	bl	8004e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003328:	2300      	movs	r3, #0
 800332a:	e062      	b.n	80033f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003332:	f107 0310 	add.w	r3, r7, #16
 8003336:	4618      	mov	r0, r3
 8003338:	f000 feba 	bl	80040b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800333c:	2301      	movs	r3, #1
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003340:	f001 fda0 	bl	8004e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003344:	f000 fc26 	bl	8003b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003348:	f001 fd6c 	bl	8004e24 <vPortEnterCritical>
 800334c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003352:	b25b      	sxtb	r3, r3
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d103      	bne.n	8003362 <xQueueReceive+0x122>
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003368:	b25b      	sxtb	r3, r3
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d103      	bne.n	8003378 <xQueueReceive+0x138>
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003378:	f001 fd84 	bl	8004e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800337c:	1d3a      	adds	r2, r7, #4
 800337e:	f107 0310 	add.w	r3, r7, #16
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fea9 	bl	80040dc <xTaskCheckForTimeOut>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d123      	bne.n	80033d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003392:	f000 f917 	bl	80035c4 <prvIsQueueEmpty>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d017      	beq.n	80033cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	3324      	adds	r3, #36	; 0x24
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fdcf 	bl	8003f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ac:	f000 f8b8 	bl	8003520 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033b0:	f000 fbfe 	bl	8003bb0 <xTaskResumeAll>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d189      	bne.n	80032ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <xQueueReceive+0x1bc>)
 80033bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	e780      	b.n	80032ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ce:	f000 f8a7 	bl	8003520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033d2:	f000 fbed 	bl	8003bb0 <xTaskResumeAll>
 80033d6:	e77a      	b.n	80032ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033da:	f000 f8a1 	bl	8003520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033de:	f000 fbe7 	bl	8003bb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033e4:	f000 f8ee 	bl	80035c4 <prvIsQueueEmpty>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f43f af6f 	beq.w	80032ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3730      	adds	r7, #48	; 0x30
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000ed04 	.word	0xe000ed04

08003400 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d14d      	bne.n	80034c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 ffbc 	bl	80043a8 <xTaskPriorityDisinherit>
 8003430:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	e043      	b.n	80034c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d119      	bne.n	8003474 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6858      	ldr	r0, [r3, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	461a      	mov	r2, r3
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	f002 f87a 	bl	8005544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	441a      	add	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	d32b      	bcc.n	80034c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	e026      	b.n	80034c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68d8      	ldr	r0, [r3, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	461a      	mov	r2, r3
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	f002 f860 	bl	8005544 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	425b      	negs	r3, r3
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	425b      	negs	r3, r3
 80034aa:	441a      	add	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d105      	bne.n	80034c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3b01      	subs	r3, #1
 80034c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034ca:	697b      	ldr	r3, [r7, #20]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d018      	beq.n	8003518 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	441a      	add	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d303      	bcc.n	8003508 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68d9      	ldr	r1, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	461a      	mov	r2, r3
 8003512:	6838      	ldr	r0, [r7, #0]
 8003514:	f002 f816 	bl	8005544 <memcpy>
	}
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003528:	f001 fc7c 	bl	8004e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003532:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003534:	e011      	b.n	800355a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b00      	cmp	r3, #0
 800353c:	d012      	beq.n	8003564 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3324      	adds	r3, #36	; 0x24
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fd50 	bl	8003fe8 <xTaskRemoveFromEventList>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800354e:	f000 fe27 	bl	80041a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	3b01      	subs	r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	dce9      	bgt.n	8003536 <prvUnlockQueue+0x16>
 8003562:	e000      	b.n	8003566 <prvUnlockQueue+0x46>
					break;
 8003564:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800356e:	f001 fc89 	bl	8004e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003572:	f001 fc57 	bl	8004e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800357c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800357e:	e011      	b.n	80035a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d012      	beq.n	80035ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3310      	adds	r3, #16
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fd2b 	bl	8003fe8 <xTaskRemoveFromEventList>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003598:	f000 fe02 	bl	80041a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800359c:	7bbb      	ldrb	r3, [r7, #14]
 800359e:	3b01      	subs	r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	dce9      	bgt.n	8003580 <prvUnlockQueue+0x60>
 80035ac:	e000      	b.n	80035b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	22ff      	movs	r2, #255	; 0xff
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035b8:	f001 fc64 	bl	8004e84 <vPortExitCritical>
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035cc:	f001 fc2a 	bl	8004e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035d8:	2301      	movs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e001      	b.n	80035e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035e2:	f001 fc4f 	bl	8004e84 <vPortExitCritical>

	return xReturn;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035f8:	f001 fc14 	bl	8004e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	429a      	cmp	r2, r3
 8003606:	d102      	bne.n	800360e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003608:	2301      	movs	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e001      	b.n	8003612 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003612:	f001 fc37 	bl	8004e84 <vPortExitCritical>

	return xReturn;
 8003616:	68fb      	ldr	r3, [r7, #12]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	e014      	b.n	800365a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003630:	4a0f      	ldr	r2, [pc, #60]	; (8003670 <vQueueAddToRegistry+0x50>)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800363c:	490c      	ldr	r1, [pc, #48]	; (8003670 <vQueueAddToRegistry+0x50>)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003646:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <vQueueAddToRegistry+0x50>)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003652:	e006      	b.n	8003662 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b07      	cmp	r3, #7
 800365e:	d9e7      	bls.n	8003630 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000868 	.word	0x20000868

08003674 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003684:	f001 fbce 	bl	8004e24 <vPortEnterCritical>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800368e:	b25b      	sxtb	r3, r3
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d103      	bne.n	800369e <vQueueWaitForMessageRestricted+0x2a>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036aa:	d103      	bne.n	80036b4 <vQueueWaitForMessageRestricted+0x40>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b4:	f001 fbe6 	bl	8004e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3324      	adds	r3, #36	; 0x24
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fc61 	bl	8003f90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036ce:	6978      	ldr	r0, [r7, #20]
 80036d0:	f7ff ff26 	bl	8003520 <prvUnlockQueue>
	}
 80036d4:	bf00      	nop
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	; 0x38
 80036e0:	af04      	add	r7, sp, #16
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <xTaskCreateStatic+0x2a>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	623b      	str	r3, [r7, #32]
}
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <xTaskCreateStatic+0x46>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	61fb      	str	r3, [r7, #28]
}
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003722:	23a8      	movs	r3, #168	; 0xa8
 8003724:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2ba8      	cmp	r3, #168	; 0xa8
 800372a:	d00a      	beq.n	8003742 <xTaskCreateStatic+0x66>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	61bb      	str	r3, [r7, #24]
}
 800373e:	bf00      	nop
 8003740:	e7fe      	b.n	8003740 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003742:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01e      	beq.n	8003788 <xTaskCreateStatic+0xac>
 800374a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01b      	beq.n	8003788 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003758:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	2202      	movs	r2, #2
 800375e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003762:	2300      	movs	r3, #0
 8003764:	9303      	str	r3, [sp, #12]
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	9302      	str	r3, [sp, #8]
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f850 	bl	8003820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003782:	f000 f8f3 	bl	800396c <prvAddNewTaskToReadyList>
 8003786:	e001      	b.n	800378c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800378c:	697b      	ldr	r3, [r7, #20]
	}
 800378e:	4618      	mov	r0, r3
 8003790:	3728      	adds	r7, #40	; 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003796:	b580      	push	{r7, lr}
 8003798:	b08c      	sub	sp, #48	; 0x30
 800379a:	af04      	add	r7, sp, #16
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fc5c 	bl	8005068 <pvPortMalloc>
 80037b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00e      	beq.n	80037d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037b8:	20a8      	movs	r0, #168	; 0xa8
 80037ba:	f001 fc55 	bl	8005068 <pvPortMalloc>
 80037be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
 80037cc:	e005      	b.n	80037da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037ce:	6978      	ldr	r0, [r7, #20]
 80037d0:	f001 fd16 	bl	8005200 <vPortFree>
 80037d4:	e001      	b.n	80037da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d017      	beq.n	8003810 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	2300      	movs	r3, #0
 80037ec:	9303      	str	r3, [sp, #12]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	9302      	str	r3, [sp, #8]
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f80e 	bl	8003820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003804:	69f8      	ldr	r0, [r7, #28]
 8003806:	f000 f8b1 	bl	800396c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800380a:	2301      	movs	r3, #1
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e002      	b.n	8003816 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003810:	f04f 33ff 	mov.w	r3, #4294967295
 8003814:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003816:	69bb      	ldr	r3, [r7, #24]
	}
 8003818:	4618      	mov	r0, r3
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	461a      	mov	r2, r3
 8003838:	21a5      	movs	r1, #165	; 0xa5
 800383a:	f001 fdff 	bl	800543c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003848:	3b01      	subs	r3, #1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f023 0307 	bic.w	r3, r3, #7
 8003856:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	617b      	str	r3, [r7, #20]
}
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01f      	beq.n	80038be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e012      	b.n	80038aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	7819      	ldrb	r1, [r3, #0]
 800388c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	3334      	adds	r3, #52	; 0x34
 8003894:	460a      	mov	r2, r1
 8003896:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d006      	beq.n	80038b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2b0f      	cmp	r3, #15
 80038ae:	d9e9      	bls.n	8003884 <prvInitialiseNewTask+0x64>
 80038b0:	e000      	b.n	80038b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80038b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038bc:	e003      	b.n	80038c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	2b37      	cmp	r3, #55	; 0x37
 80038ca:	d901      	bls.n	80038d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038cc:	2337      	movs	r3, #55	; 0x37
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	2200      	movs	r2, #0
 80038e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	3304      	adds	r3, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f978 	bl	8002bdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	3318      	adds	r3, #24
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff f973 	bl	8002bdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	2200      	movs	r2, #0
 8003910:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	2200      	movs	r2, #0
 8003918:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	3354      	adds	r3, #84	; 0x54
 8003920:	224c      	movs	r2, #76	; 0x4c
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f001 fd89 	bl	800543c <memset>
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	4a0c      	ldr	r2, [pc, #48]	; (8003960 <prvInitialiseNewTask+0x140>)
 800392e:	659a      	str	r2, [r3, #88]	; 0x58
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <prvInitialiseNewTask+0x144>)
 8003934:	65da      	str	r2, [r3, #92]	; 0x5c
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <prvInitialiseNewTask+0x148>)
 800393a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	69b8      	ldr	r0, [r7, #24]
 8003942:	f001 f941 	bl	8004bc8 <pxPortInitialiseStack>
 8003946:	4602      	mov	r2, r0
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003956:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003958:	bf00      	nop
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20004afc 	.word	0x20004afc
 8003964:	20004b64 	.word	0x20004b64
 8003968:	20004bcc 	.word	0x20004bcc

0800396c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003974:	f001 fa56 	bl	8004e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <prvAddNewTaskToReadyList+0xc4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <prvAddNewTaskToReadyList+0xc4>)
 8003980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <prvAddNewTaskToReadyList+0xc8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800398a:	4a2a      	ldr	r2, [pc, #168]	; (8003a34 <prvAddNewTaskToReadyList+0xc8>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003990:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <prvAddNewTaskToReadyList+0xc4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d110      	bne.n	80039ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003998:	f000 fc26 	bl	80041e8 <prvInitialiseTaskLists>
 800399c:	e00d      	b.n	80039ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <prvAddNewTaskToReadyList+0xcc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039a6:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <prvAddNewTaskToReadyList+0xc8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d802      	bhi.n	80039ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039b4:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <prvAddNewTaskToReadyList+0xc8>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039ba:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <prvAddNewTaskToReadyList+0xd0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <prvAddNewTaskToReadyList+0xd0>)
 80039c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039c4:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <prvAddNewTaskToReadyList+0xd0>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <prvAddNewTaskToReadyList+0xd4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d903      	bls.n	80039e0 <prvAddNewTaskToReadyList+0x74>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <prvAddNewTaskToReadyList+0xd4>)
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <prvAddNewTaskToReadyList+0xd8>)
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f7ff f8fd 	bl	8002bf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039fc:	f001 fa42 	bl	8004e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <prvAddNewTaskToReadyList+0xcc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00e      	beq.n	8003a26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <prvAddNewTaskToReadyList+0xc8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d207      	bcs.n	8003a26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <prvAddNewTaskToReadyList+0xdc>)
 8003a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000d7c 	.word	0x20000d7c
 8003a34:	200008a8 	.word	0x200008a8
 8003a38:	20000d88 	.word	0x20000d88
 8003a3c:	20000d98 	.word	0x20000d98
 8003a40:	20000d84 	.word	0x20000d84
 8003a44:	200008ac 	.word	0x200008ac
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d017      	beq.n	8003a8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <vTaskDelay+0x60>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <vTaskDelay+0x30>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	60bb      	str	r3, [r7, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a7c:	f000 f88a 	bl	8003b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a80:	2100      	movs	r1, #0
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fcfe 	bl	8004484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a88:	f000 f892 	bl	8003bb0 <xTaskResumeAll>
 8003a8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <vTaskDelay+0x64>)
 8003a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000da4 	.word	0x20000da4
 8003ab0:	e000ed04 	.word	0xe000ed04

08003ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ac2:	463a      	mov	r2, r7
 8003ac4:	1d39      	adds	r1, r7, #4
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f832 	bl	8002b34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	9202      	str	r2, [sp, #8]
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	4924      	ldr	r1, [pc, #144]	; (8003b74 <vTaskStartScheduler+0xc0>)
 8003ae4:	4824      	ldr	r0, [pc, #144]	; (8003b78 <vTaskStartScheduler+0xc4>)
 8003ae6:	f7ff fdf9 	bl	80036dc <xTaskCreateStatic>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <vTaskStartScheduler+0xc8>)
 8003aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003af0:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <vTaskStartScheduler+0xc8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003af8:	2301      	movs	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e001      	b.n	8003b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d102      	bne.n	8003b0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b08:	f000 fd10 	bl	800452c <xTimerCreateTimerTask>
 8003b0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d11b      	bne.n	8003b4c <vTaskStartScheduler+0x98>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	613b      	str	r3, [r7, #16]
}
 8003b26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b28:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <vTaskStartScheduler+0xcc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3354      	adds	r3, #84	; 0x54
 8003b2e:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <vTaskStartScheduler+0xd0>)
 8003b30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <vTaskStartScheduler+0xd4>)
 8003b34:	f04f 32ff 	mov.w	r2, #4294967295
 8003b38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <vTaskStartScheduler+0xd8>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b40:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <vTaskStartScheduler+0xdc>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b46:	f001 f8cb 	bl	8004ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b4a:	e00e      	b.n	8003b6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d10a      	bne.n	8003b6a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	60fb      	str	r3, [r7, #12]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <vTaskStartScheduler+0xb4>
}
 8003b6a:	bf00      	nop
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	08005634 	.word	0x08005634
 8003b78:	080041b9 	.word	0x080041b9
 8003b7c:	20000da0 	.word	0x20000da0
 8003b80:	200008a8 	.word	0x200008a8
 8003b84:	2000005c 	.word	0x2000005c
 8003b88:	20000d9c 	.word	0x20000d9c
 8003b8c:	20000d88 	.word	0x20000d88
 8003b90:	20000d80 	.word	0x20000d80

08003b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <vTaskSuspendAll+0x18>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	4a03      	ldr	r2, [pc, #12]	; (8003bac <vTaskSuspendAll+0x18>)
 8003ba0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	20000da4 	.word	0x20000da4

08003bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bbe:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <xTaskResumeAll+0x118>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <xTaskResumeAll+0x2c>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	603b      	str	r3, [r7, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bdc:	f001 f922 	bl	8004e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003be0:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <xTaskResumeAll+0x118>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	4a38      	ldr	r2, [pc, #224]	; (8003cc8 <xTaskResumeAll+0x118>)
 8003be8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <xTaskResumeAll+0x118>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d162      	bne.n	8003cb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <xTaskResumeAll+0x11c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d05e      	beq.n	8003cb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bfa:	e02f      	b.n	8003c5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bfc:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <xTaskResumeAll+0x120>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3318      	adds	r3, #24
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff f851 	bl	8002cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f84c 	bl	8002cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <xTaskResumeAll+0x124>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d903      	bls.n	8003c2c <xTaskResumeAll+0x7c>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	4a2a      	ldr	r2, [pc, #168]	; (8003cd4 <xTaskResumeAll+0x124>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <xTaskResumeAll+0x128>)
 8003c3a:	441a      	add	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f7fe ffd7 	bl	8002bf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <xTaskResumeAll+0x12c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d302      	bcc.n	8003c5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c56:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <xTaskResumeAll+0x130>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <xTaskResumeAll+0x120>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1cb      	bne.n	8003bfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c6a:	f000 fb5f 	bl	800432c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <xTaskResumeAll+0x134>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d010      	beq.n	8003c9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c7a:	f000 f847 	bl	8003d0c <xTaskIncrementTick>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c84:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <xTaskResumeAll+0x130>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f1      	bne.n	8003c7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <xTaskResumeAll+0x134>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c9c:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <xTaskResumeAll+0x130>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <xTaskResumeAll+0x138>)
 8003caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cb8:	f001 f8e4 	bl	8004e84 <vPortExitCritical>

	return xAlreadyYielded;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000da4 	.word	0x20000da4
 8003ccc:	20000d7c 	.word	0x20000d7c
 8003cd0:	20000d3c 	.word	0x20000d3c
 8003cd4:	20000d84 	.word	0x20000d84
 8003cd8:	200008ac 	.word	0x200008ac
 8003cdc:	200008a8 	.word	0x200008a8
 8003ce0:	20000d90 	.word	0x20000d90
 8003ce4:	20000d8c 	.word	0x20000d8c
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <xTaskGetTickCount+0x1c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003cf8:	687b      	ldr	r3, [r7, #4]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000d80 	.word	0x20000d80

08003d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d16:	4b4f      	ldr	r3, [pc, #316]	; (8003e54 <xTaskIncrementTick+0x148>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f040 808f 	bne.w	8003e3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d20:	4b4d      	ldr	r3, [pc, #308]	; (8003e58 <xTaskIncrementTick+0x14c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d28:	4a4b      	ldr	r2, [pc, #300]	; (8003e58 <xTaskIncrementTick+0x14c>)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d120      	bne.n	8003d76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d34:	4b49      	ldr	r3, [pc, #292]	; (8003e5c <xTaskIncrementTick+0x150>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	603b      	str	r3, [r7, #0]
}
 8003d50:	bf00      	nop
 8003d52:	e7fe      	b.n	8003d52 <xTaskIncrementTick+0x46>
 8003d54:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <xTaskIncrementTick+0x150>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <xTaskIncrementTick+0x154>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a3f      	ldr	r2, [pc, #252]	; (8003e5c <xTaskIncrementTick+0x150>)
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4a3f      	ldr	r2, [pc, #252]	; (8003e60 <xTaskIncrementTick+0x154>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <xTaskIncrementTick+0x158>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	4a3d      	ldr	r2, [pc, #244]	; (8003e64 <xTaskIncrementTick+0x158>)
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	f000 fadb 	bl	800432c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d76:	4b3c      	ldr	r3, [pc, #240]	; (8003e68 <xTaskIncrementTick+0x15c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d349      	bcc.n	8003e14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d80:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <xTaskIncrementTick+0x150>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d8a:	4b37      	ldr	r3, [pc, #220]	; (8003e68 <xTaskIncrementTick+0x15c>)
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d90:	601a      	str	r2, [r3, #0]
					break;
 8003d92:	e03f      	b.n	8003e14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d94:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <xTaskIncrementTick+0x150>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d203      	bcs.n	8003db4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dac:	4a2e      	ldr	r2, [pc, #184]	; (8003e68 <xTaskIncrementTick+0x15c>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003db2:	e02f      	b.n	8003e14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe ff79 	bl	8002cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3318      	adds	r3, #24
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe ff70 	bl	8002cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <xTaskIncrementTick+0x160>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d903      	bls.n	8003de4 <xTaskIncrementTick+0xd8>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <xTaskIncrementTick+0x160>)
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4a1f      	ldr	r2, [pc, #124]	; (8003e70 <xTaskIncrementTick+0x164>)
 8003df2:	441a      	add	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f7fe fefb 	bl	8002bf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e04:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <xTaskIncrementTick+0x168>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d3b8      	bcc.n	8003d80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e12:	e7b5      	b.n	8003d80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e14:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <xTaskIncrementTick+0x168>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1a:	4915      	ldr	r1, [pc, #84]	; (8003e70 <xTaskIncrementTick+0x164>)
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d901      	bls.n	8003e30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <xTaskIncrementTick+0x16c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e004      	b.n	8003e48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <xTaskIncrementTick+0x170>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <xTaskIncrementTick+0x170>)
 8003e46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e48:	697b      	ldr	r3, [r7, #20]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000da4 	.word	0x20000da4
 8003e58:	20000d80 	.word	0x20000d80
 8003e5c:	20000d34 	.word	0x20000d34
 8003e60:	20000d38 	.word	0x20000d38
 8003e64:	20000d94 	.word	0x20000d94
 8003e68:	20000d9c 	.word	0x20000d9c
 8003e6c:	20000d84 	.word	0x20000d84
 8003e70:	200008ac 	.word	0x200008ac
 8003e74:	200008a8 	.word	0x200008a8
 8003e78:	20000d90 	.word	0x20000d90
 8003e7c:	20000d8c 	.word	0x20000d8c

08003e80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e86:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <vTaskSwitchContext+0xb0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e8e:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <vTaskSwitchContext+0xb4>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e94:	e046      	b.n	8003f24 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <vTaskSwitchContext+0xb4>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e9c:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <vTaskSwitchContext+0xb8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e010      	b.n	8003ec6 <vTaskSwitchContext+0x46>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	607b      	str	r3, [r7, #4]
}
 8003ebc:	bf00      	nop
 8003ebe:	e7fe      	b.n	8003ebe <vTaskSwitchContext+0x3e>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	491d      	ldr	r1, [pc, #116]	; (8003f3c <vTaskSwitchContext+0xbc>)
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0e4      	beq.n	8003ea4 <vTaskSwitchContext+0x24>
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <vTaskSwitchContext+0xbc>)
 8003ee6:	4413      	add	r3, r2
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	3308      	adds	r3, #8
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d104      	bne.n	8003f0a <vTaskSwitchContext+0x8a>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <vTaskSwitchContext+0xc0>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <vTaskSwitchContext+0xb8>)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <vTaskSwitchContext+0xc0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3354      	adds	r3, #84	; 0x54
 8003f20:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <vTaskSwitchContext+0xc4>)
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	20000da4 	.word	0x20000da4
 8003f34:	20000d90 	.word	0x20000d90
 8003f38:	20000d84 	.word	0x20000d84
 8003f3c:	200008ac 	.word	0x200008ac
 8003f40:	200008a8 	.word	0x200008a8
 8003f44:	2000005c 	.word	0x2000005c

08003f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	60fb      	str	r3, [r7, #12]
}
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <vTaskPlaceOnEventList+0x44>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3318      	adds	r3, #24
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fe fe61 	bl	8002c3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	6838      	ldr	r0, [r7, #0]
 8003f80:	f000 fa80 	bl	8004484 <prvAddCurrentTaskToDelayedList>
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	200008a8 	.word	0x200008a8

08003f90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	617b      	str	r3, [r7, #20]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3318      	adds	r3, #24
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7fe fe18 	bl	8002bf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	f000 fa55 	bl	8004484 <prvAddCurrentTaskToDelayedList>
	}
 8003fda:	bf00      	nop
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200008a8 	.word	0x200008a8

08003fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	60fb      	str	r3, [r7, #12]
}
 8004010:	bf00      	nop
 8004012:	e7fe      	b.n	8004012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	3318      	adds	r3, #24
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe fe49 	bl	8002cb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <xTaskRemoveFromEventList+0xb0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11d      	bne.n	8004062 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	3304      	adds	r3, #4
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fe40 	bl	8002cb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <xTaskRemoveFromEventList+0xb4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d903      	bls.n	8004044 <xTaskRemoveFromEventList+0x5c>
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	4a16      	ldr	r2, [pc, #88]	; (800409c <xTaskRemoveFromEventList+0xb4>)
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <xTaskRemoveFromEventList+0xb8>)
 8004052:	441a      	add	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	3304      	adds	r3, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f7fe fdcb 	bl	8002bf6 <vListInsertEnd>
 8004060:	e005      	b.n	800406e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3318      	adds	r3, #24
 8004066:	4619      	mov	r1, r3
 8004068:	480e      	ldr	r0, [pc, #56]	; (80040a4 <xTaskRemoveFromEventList+0xbc>)
 800406a:	f7fe fdc4 	bl	8002bf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <xTaskRemoveFromEventList+0xc0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	429a      	cmp	r2, r3
 800407a:	d905      	bls.n	8004088 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800407c:	2301      	movs	r3, #1
 800407e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <xTaskRemoveFromEventList+0xc4>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e001      	b.n	800408c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800408c:	697b      	ldr	r3, [r7, #20]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000da4 	.word	0x20000da4
 800409c:	20000d84 	.word	0x20000d84
 80040a0:	200008ac 	.word	0x200008ac
 80040a4:	20000d3c 	.word	0x20000d3c
 80040a8:	200008a8 	.word	0x200008a8
 80040ac:	20000d90 	.word	0x20000d90

080040b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <vTaskInternalSetTimeOutState+0x24>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <vTaskInternalSetTimeOutState+0x28>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	605a      	str	r2, [r3, #4]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	20000d94 	.word	0x20000d94
 80040d8:	20000d80 	.word	0x20000d80

080040dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	613b      	str	r3, [r7, #16]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60fb      	str	r3, [r7, #12]
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800411e:	f000 fe81 	bl	8004e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <xTaskCheckForTimeOut+0xbc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d102      	bne.n	8004142 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	e023      	b.n	800418a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <xTaskCheckForTimeOut+0xc0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d007      	beq.n	800415e <xTaskCheckForTimeOut+0x82>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	e015      	b.n	800418a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	429a      	cmp	r2, r3
 8004166:	d20b      	bcs.n	8004180 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	1ad2      	subs	r2, r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ff9b 	bl	80040b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e004      	b.n	800418a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004186:	2301      	movs	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800418a:	f000 fe7b 	bl	8004e84 <vPortExitCritical>

	return xReturn;
 800418e:	69fb      	ldr	r3, [r7, #28]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000d80 	.word	0x20000d80
 800419c:	20000d94 	.word	0x20000d94

080041a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <vTaskMissedYield+0x14>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	20000d90 	.word	0x20000d90

080041b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041c0:	f000 f852 	bl	8004268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <prvIdleTask+0x28>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d9f9      	bls.n	80041c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <prvIdleTask+0x2c>)
 80041ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041dc:	e7f0      	b.n	80041c0 <prvIdleTask+0x8>
 80041de:	bf00      	nop
 80041e0:	200008ac 	.word	0x200008ac
 80041e4:	e000ed04 	.word	0xe000ed04

080041e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	e00c      	b.n	800420e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4a12      	ldr	r2, [pc, #72]	; (8004248 <prvInitialiseTaskLists+0x60>)
 8004200:	4413      	add	r3, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fcca 	bl	8002b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3301      	adds	r3, #1
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b37      	cmp	r3, #55	; 0x37
 8004212:	d9ef      	bls.n	80041f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004214:	480d      	ldr	r0, [pc, #52]	; (800424c <prvInitialiseTaskLists+0x64>)
 8004216:	f7fe fcc1 	bl	8002b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800421a:	480d      	ldr	r0, [pc, #52]	; (8004250 <prvInitialiseTaskLists+0x68>)
 800421c:	f7fe fcbe 	bl	8002b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004220:	480c      	ldr	r0, [pc, #48]	; (8004254 <prvInitialiseTaskLists+0x6c>)
 8004222:	f7fe fcbb 	bl	8002b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004226:	480c      	ldr	r0, [pc, #48]	; (8004258 <prvInitialiseTaskLists+0x70>)
 8004228:	f7fe fcb8 	bl	8002b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800422c:	480b      	ldr	r0, [pc, #44]	; (800425c <prvInitialiseTaskLists+0x74>)
 800422e:	f7fe fcb5 	bl	8002b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <prvInitialiseTaskLists+0x78>)
 8004234:	4a05      	ldr	r2, [pc, #20]	; (800424c <prvInitialiseTaskLists+0x64>)
 8004236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <prvInitialiseTaskLists+0x7c>)
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <prvInitialiseTaskLists+0x68>)
 800423c:	601a      	str	r2, [r3, #0]
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200008ac 	.word	0x200008ac
 800424c:	20000d0c 	.word	0x20000d0c
 8004250:	20000d20 	.word	0x20000d20
 8004254:	20000d3c 	.word	0x20000d3c
 8004258:	20000d50 	.word	0x20000d50
 800425c:	20000d68 	.word	0x20000d68
 8004260:	20000d34 	.word	0x20000d34
 8004264:	20000d38 	.word	0x20000d38

08004268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800426e:	e019      	b.n	80042a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004270:	f000 fdd8 	bl	8004e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <prvCheckTasksWaitingTermination+0x50>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe fd15 	bl	8002cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <prvCheckTasksWaitingTermination+0x54>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3b01      	subs	r3, #1
 800428c:	4a0b      	ldr	r2, [pc, #44]	; (80042bc <prvCheckTasksWaitingTermination+0x54>)
 800428e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <prvCheckTasksWaitingTermination+0x58>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3b01      	subs	r3, #1
 8004296:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <prvCheckTasksWaitingTermination+0x58>)
 8004298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800429a:	f000 fdf3 	bl	8004e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f810 	bl	80042c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <prvCheckTasksWaitingTermination+0x58>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e1      	bne.n	8004270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000d50 	.word	0x20000d50
 80042bc:	20000d7c 	.word	0x20000d7c
 80042c0:	20000d64 	.word	0x20000d64

080042c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3354      	adds	r3, #84	; 0x54
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 f8bb 	bl	800544c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d108      	bne.n	80042f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 ff8b 	bl	8005200 <vPortFree>
				vPortFree( pxTCB );
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 ff88 	bl	8005200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042f0:	e018      	b.n	8004324 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d103      	bne.n	8004304 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 ff7f 	bl	8005200 <vPortFree>
	}
 8004302:	e00f      	b.n	8004324 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800430a:	2b02      	cmp	r3, #2
 800430c:	d00a      	beq.n	8004324 <prvDeleteTCB+0x60>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	60fb      	str	r3, [r7, #12]
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <prvDeleteTCB+0x5e>
	}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <prvResetNextTaskUnblockTime+0x38>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d104      	bne.n	8004346 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <prvResetNextTaskUnblockTime+0x3c>)
 800433e:	f04f 32ff 	mov.w	r2, #4294967295
 8004342:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004344:	e008      	b.n	8004358 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <prvResetNextTaskUnblockTime+0x38>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <prvResetNextTaskUnblockTime+0x3c>)
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	20000d34 	.word	0x20000d34
 8004368:	20000d9c 	.word	0x20000d9c

0800436c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <xTaskGetSchedulerState+0x34>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800437a:	2301      	movs	r3, #1
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	e008      	b.n	8004392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004380:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <xTaskGetSchedulerState+0x38>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004388:	2302      	movs	r3, #2
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	e001      	b.n	8004392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800438e:	2300      	movs	r3, #0
 8004390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004392:	687b      	ldr	r3, [r7, #4]
	}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	20000d88 	.word	0x20000d88
 80043a4:	20000da4 	.word	0x20000da4

080043a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d056      	beq.n	800446c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043be:	4b2e      	ldr	r3, [pc, #184]	; (8004478 <xTaskPriorityDisinherit+0xd0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d00a      	beq.n	80043de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	60fb      	str	r3, [r7, #12]
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	60bb      	str	r3, [r7, #8]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	1e5a      	subs	r2, r3, #1
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440e:	429a      	cmp	r2, r3
 8004410:	d02c      	beq.n	800446c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	2b00      	cmp	r3, #0
 8004418:	d128      	bne.n	800446c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	3304      	adds	r3, #4
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe fc46 	bl	8002cb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <xTaskPriorityDisinherit+0xd4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d903      	bls.n	800444c <xTaskPriorityDisinherit+0xa4>
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	4a0c      	ldr	r2, [pc, #48]	; (800447c <xTaskPriorityDisinherit+0xd4>)
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4a09      	ldr	r2, [pc, #36]	; (8004480 <xTaskPriorityDisinherit+0xd8>)
 800445a:	441a      	add	r2, r3
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	3304      	adds	r3, #4
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f7fe fbc7 	bl	8002bf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004468:	2301      	movs	r3, #1
 800446a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800446c:	697b      	ldr	r3, [r7, #20]
	}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	200008a8 	.word	0x200008a8
 800447c:	20000d84 	.word	0x20000d84
 8004480:	200008ac 	.word	0x200008ac

08004484 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800448e:	4b21      	ldr	r3, [pc, #132]	; (8004514 <prvAddCurrentTaskToDelayedList+0x90>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004494:	4b20      	ldr	r3, [pc, #128]	; (8004518 <prvAddCurrentTaskToDelayedList+0x94>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3304      	adds	r3, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fc08 	bl	8002cb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d10a      	bne.n	80044be <prvAddCurrentTaskToDelayedList+0x3a>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ae:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <prvAddCurrentTaskToDelayedList+0x94>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4819      	ldr	r0, [pc, #100]	; (800451c <prvAddCurrentTaskToDelayedList+0x98>)
 80044b8:	f7fe fb9d 	bl	8002bf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044bc:	e026      	b.n	800450c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044c6:	4b14      	ldr	r3, [pc, #80]	; (8004518 <prvAddCurrentTaskToDelayedList+0x94>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d209      	bcs.n	80044ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <prvAddCurrentTaskToDelayedList+0x9c>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <prvAddCurrentTaskToDelayedList+0x94>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3304      	adds	r3, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f7fe fbab 	bl	8002c3e <vListInsert>
}
 80044e8:	e010      	b.n	800450c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ea:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <prvAddCurrentTaskToDelayedList+0xa0>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <prvAddCurrentTaskToDelayedList+0x94>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f7fe fba1 	bl	8002c3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	d202      	bcs.n	800450c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004506:	4a08      	ldr	r2, [pc, #32]	; (8004528 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	6013      	str	r3, [r2, #0]
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000d80 	.word	0x20000d80
 8004518:	200008a8 	.word	0x200008a8
 800451c:	20000d68 	.word	0x20000d68
 8004520:	20000d38 	.word	0x20000d38
 8004524:	20000d34 	.word	0x20000d34
 8004528:	20000d9c 	.word	0x20000d9c

0800452c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004536:	f000 fb07 	bl	8004b48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800453a:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <xTimerCreateTimerTask+0x80>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d021      	beq.n	8004586 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800454a:	1d3a      	adds	r2, r7, #4
 800454c:	f107 0108 	add.w	r1, r7, #8
 8004550:	f107 030c 	add.w	r3, r7, #12
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe fb07 	bl	8002b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	9202      	str	r2, [sp, #8]
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	2302      	movs	r3, #2
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2300      	movs	r3, #0
 800456a:	460a      	mov	r2, r1
 800456c:	4910      	ldr	r1, [pc, #64]	; (80045b0 <xTimerCreateTimerTask+0x84>)
 800456e:	4811      	ldr	r0, [pc, #68]	; (80045b4 <xTimerCreateTimerTask+0x88>)
 8004570:	f7ff f8b4 	bl	80036dc <xTaskCreateStatic>
 8004574:	4603      	mov	r3, r0
 8004576:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <xTimerCreateTimerTask+0x8c>)
 8004578:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <xTimerCreateTimerTask+0x8c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004582:	2301      	movs	r3, #1
 8004584:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	613b      	str	r3, [r7, #16]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045a2:	697b      	ldr	r3, [r7, #20]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000dd8 	.word	0x20000dd8
 80045b0:	0800563c 	.word	0x0800563c
 80045b4:	080046f1 	.word	0x080046f1
 80045b8:	20000ddc 	.word	0x20000ddc

080045bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	623b      	str	r3, [r7, #32]
}
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045ea:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <xTimerGenericCommand+0x98>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d02a      	beq.n	8004648 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b05      	cmp	r3, #5
 8004602:	dc18      	bgt.n	8004636 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004604:	f7ff feb2 	bl	800436c <xTaskGetSchedulerState>
 8004608:	4603      	mov	r3, r0
 800460a:	2b02      	cmp	r3, #2
 800460c:	d109      	bne.n	8004622 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <xTimerGenericCommand+0x98>)
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	f107 0110 	add.w	r1, r7, #16
 8004616:	2300      	movs	r3, #0
 8004618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461a:	f7fe fc77 	bl	8002f0c <xQueueGenericSend>
 800461e:	6278      	str	r0, [r7, #36]	; 0x24
 8004620:	e012      	b.n	8004648 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <xTimerGenericCommand+0x98>)
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f107 0110 	add.w	r1, r7, #16
 800462a:	2300      	movs	r3, #0
 800462c:	2200      	movs	r2, #0
 800462e:	f7fe fc6d 	bl	8002f0c <xQueueGenericSend>
 8004632:	6278      	str	r0, [r7, #36]	; 0x24
 8004634:	e008      	b.n	8004648 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <xTimerGenericCommand+0x98>)
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	f107 0110 	add.w	r1, r7, #16
 800463e:	2300      	movs	r3, #0
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	f7fe fd61 	bl	8003108 <xQueueGenericSendFromISR>
 8004646:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800464a:	4618      	mov	r0, r3
 800464c:	3728      	adds	r7, #40	; 0x28
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000dd8 	.word	0x20000dd8

08004658 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af02      	add	r7, sp, #8
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <prvProcessExpiredTimer+0x94>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3304      	adds	r3, #4
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe fb1d 	bl	8002cb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d022      	beq.n	80046ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	18d1      	adds	r1, r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	6978      	ldr	r0, [r7, #20]
 8004692:	f000 f8d1 	bl	8004838 <prvInsertTimerInActiveList>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01f      	beq.n	80046dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800469c:	2300      	movs	r3, #0
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2300      	movs	r3, #0
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	2100      	movs	r1, #0
 80046a6:	6978      	ldr	r0, [r7, #20]
 80046a8:	f7ff ff88 	bl	80045bc <xTimerGenericCommand>
 80046ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d113      	bne.n	80046dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	60fb      	str	r3, [r7, #12]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	6978      	ldr	r0, [r7, #20]
 80046e2:	4798      	blx	r3
}
 80046e4:	bf00      	nop
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000dd0 	.word	0x20000dd0

080046f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046f8:	f107 0308 	add.w	r3, r7, #8
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f857 	bl	80047b0 <prvGetNextExpireTime>
 8004702:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4619      	mov	r1, r3
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f803 	bl	8004714 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800470e:	f000 f8d5 	bl	80048bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004712:	e7f1      	b.n	80046f8 <prvTimerTask+0x8>

08004714 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800471e:	f7ff fa39 	bl	8003b94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004722:	f107 0308 	add.w	r3, r7, #8
 8004726:	4618      	mov	r0, r3
 8004728:	f000 f866 	bl	80047f8 <prvSampleTimeNow>
 800472c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d130      	bne.n	8004796 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <prvProcessTimerOrBlockTask+0x3c>
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	429a      	cmp	r2, r3
 8004740:	d806      	bhi.n	8004750 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004742:	f7ff fa35 	bl	8003bb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff85 	bl	8004658 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800474e:	e024      	b.n	800479a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004756:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <prvProcessTimerOrBlockTask+0x90>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <prvProcessTimerOrBlockTask+0x50>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <prvProcessTimerOrBlockTask+0x52>
 8004764:	2300      	movs	r3, #0
 8004766:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004768:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <prvProcessTimerOrBlockTask+0x94>)
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	f7fe ff7d 	bl	8003674 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800477a:	f7ff fa19 	bl	8003bb0 <xTaskResumeAll>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004784:	4b09      	ldr	r3, [pc, #36]	; (80047ac <prvProcessTimerOrBlockTask+0x98>)
 8004786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	f3bf 8f6f 	isb	sy
}
 8004794:	e001      	b.n	800479a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004796:	f7ff fa0b 	bl	8003bb0 <xTaskResumeAll>
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000dd4 	.word	0x20000dd4
 80047a8:	20000dd8 	.word	0x20000dd8
 80047ac:	e000ed04 	.word	0xe000ed04

080047b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <prvGetNextExpireTime+0x44>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <prvGetNextExpireTime+0x16>
 80047c2:	2201      	movs	r2, #1
 80047c4:	e000      	b.n	80047c8 <prvGetNextExpireTime+0x18>
 80047c6:	2200      	movs	r2, #0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047d4:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <prvGetNextExpireTime+0x44>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	e001      	b.n	80047e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047e4:	68fb      	ldr	r3, [r7, #12]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000dd0 	.word	0x20000dd0

080047f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004800:	f7ff fa74 	bl	8003cec <xTaskGetTickCount>
 8004804:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <prvSampleTimeNow+0x3c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	429a      	cmp	r2, r3
 800480e:	d205      	bcs.n	800481c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004810:	f000 f936 	bl	8004a80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e002      	b.n	8004822 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004822:	4a04      	ldr	r2, [pc, #16]	; (8004834 <prvSampleTimeNow+0x3c>)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004828:	68fb      	ldr	r3, [r7, #12]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000de0 	.word	0x20000de0

08004838 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	d812      	bhi.n	8004884 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	429a      	cmp	r2, r3
 800486a:	d302      	bcc.n	8004872 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800486c:	2301      	movs	r3, #1
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	e01b      	b.n	80048aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <prvInsertTimerInActiveList+0x7c>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3304      	adds	r3, #4
 800487a:	4619      	mov	r1, r3
 800487c:	4610      	mov	r0, r2
 800487e:	f7fe f9de 	bl	8002c3e <vListInsert>
 8004882:	e012      	b.n	80048aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d206      	bcs.n	800489a <prvInsertTimerInActiveList+0x62>
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d302      	bcc.n	800489a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004894:	2301      	movs	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e007      	b.n	80048aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <prvInsertTimerInActiveList+0x80>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f7fe f9ca 	bl	8002c3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048aa:	697b      	ldr	r3, [r7, #20]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000dd4 	.word	0x20000dd4
 80048b8:	20000dd0 	.word	0x20000dd0

080048bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08e      	sub	sp, #56	; 0x38
 80048c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048c2:	e0ca      	b.n	8004a5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	da18      	bge.n	80048fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80048ca:	1d3b      	adds	r3, r7, #4
 80048cc:	3304      	adds	r3, #4
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	61fb      	str	r3, [r7, #28]
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f2:	6850      	ldr	r0, [r2, #4]
 80048f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f6:	6892      	ldr	r2, [r2, #8]
 80048f8:	4611      	mov	r1, r2
 80048fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f2c0 80ab 	blt.w	8004a5a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe f9cb 	bl	8002cb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800491a:	463b      	mov	r3, r7
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff6b 	bl	80047f8 <prvSampleTimeNow>
 8004922:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b09      	cmp	r3, #9
 8004928:	f200 8096 	bhi.w	8004a58 <prvProcessReceivedCommands+0x19c>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <prvProcessReceivedCommands+0x78>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	0800495d 	.word	0x0800495d
 8004938:	0800495d 	.word	0x0800495d
 800493c:	0800495d 	.word	0x0800495d
 8004940:	080049d1 	.word	0x080049d1
 8004944:	080049e5 	.word	0x080049e5
 8004948:	08004a2f 	.word	0x08004a2f
 800494c:	0800495d 	.word	0x0800495d
 8004950:	0800495d 	.word	0x0800495d
 8004954:	080049d1 	.word	0x080049d1
 8004958:	080049e5 	.word	0x080049e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	b2da      	uxtb	r2, r3
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	18d1      	adds	r1, r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800497c:	f7ff ff5c 	bl	8004838 <prvInsertTimerInActiveList>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d069      	beq.n	8004a5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800498c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d05e      	beq.n	8004a5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	441a      	add	r2, r3
 80049a4:	2300      	movs	r3, #0
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	2300      	movs	r3, #0
 80049aa:	2100      	movs	r1, #0
 80049ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ae:	f7ff fe05 	bl	80045bc <xTimerGenericCommand>
 80049b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d14f      	bne.n	8004a5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	61bb      	str	r3, [r7, #24]
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80049e2:	e03a      	b.n	8004a5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	617b      	str	r3, [r7, #20]
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	18d1      	adds	r1, r2, r3
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a28:	f7ff ff06 	bl	8004838 <prvInsertTimerInActiveList>
					break;
 8004a2c:	e015      	b.n	8004a5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d103      	bne.n	8004a44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3e:	f000 fbdf 	bl	8005200 <vPortFree>
 8004a42:	e00a      	b.n	8004a5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a56:	e000      	b.n	8004a5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004a58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <prvProcessReceivedCommands+0x1c0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	1d39      	adds	r1, r7, #4
 8004a60:	2200      	movs	r2, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe fbec 	bl	8003240 <xQueueReceive>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f47f af2a 	bne.w	80048c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3730      	adds	r7, #48	; 0x30
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000dd8 	.word	0x20000dd8

08004a80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a86:	e048      	b.n	8004b1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a88:	4b2d      	ldr	r3, [pc, #180]	; (8004b40 <prvSwitchTimerLists+0xc0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a92:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <prvSwitchTimerLists+0xc0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fe f905 	bl	8002cb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d02e      	beq.n	8004b1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d90e      	bls.n	8004aec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ada:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <prvSwitchTimerLists+0xc0>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f7fe f8aa 	bl	8002c3e <vListInsert>
 8004aea:	e016      	b.n	8004b1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004aec:	2300      	movs	r3, #0
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	2300      	movs	r3, #0
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	2100      	movs	r1, #0
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff fd60 	bl	80045bc <xTimerGenericCommand>
 8004afc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10a      	bne.n	8004b1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	603b      	str	r3, [r7, #0]
}
 8004b16:	bf00      	nop
 8004b18:	e7fe      	b.n	8004b18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <prvSwitchTimerLists+0xc0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1b1      	bne.n	8004a88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <prvSwitchTimerLists+0xc0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <prvSwitchTimerLists+0xc4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <prvSwitchTimerLists+0xc0>)
 8004b30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b32:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <prvSwitchTimerLists+0xc4>)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000dd0 	.word	0x20000dd0
 8004b44:	20000dd4 	.word	0x20000dd4

08004b48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b4e:	f000 f969 	bl	8004e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <prvCheckForValidListAndQueue+0x60>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d120      	bne.n	8004b9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b5a:	4814      	ldr	r0, [pc, #80]	; (8004bac <prvCheckForValidListAndQueue+0x64>)
 8004b5c:	f7fe f81e 	bl	8002b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b60:	4813      	ldr	r0, [pc, #76]	; (8004bb0 <prvCheckForValidListAndQueue+0x68>)
 8004b62:	f7fe f81b 	bl	8002b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b66:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <prvCheckForValidListAndQueue+0x6c>)
 8004b68:	4a10      	ldr	r2, [pc, #64]	; (8004bac <prvCheckForValidListAndQueue+0x64>)
 8004b6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b6c:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <prvCheckForValidListAndQueue+0x70>)
 8004b6e:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <prvCheckForValidListAndQueue+0x68>)
 8004b70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b72:	2300      	movs	r3, #0
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	4b11      	ldr	r3, [pc, #68]	; (8004bbc <prvCheckForValidListAndQueue+0x74>)
 8004b78:	4a11      	ldr	r2, [pc, #68]	; (8004bc0 <prvCheckForValidListAndQueue+0x78>)
 8004b7a:	2110      	movs	r1, #16
 8004b7c:	200a      	movs	r0, #10
 8004b7e:	f7fe f929 	bl	8002dd4 <xQueueGenericCreateStatic>
 8004b82:	4603      	mov	r3, r0
 8004b84:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <prvCheckForValidListAndQueue+0x60>)
 8004b86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <prvCheckForValidListAndQueue+0x60>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <prvCheckForValidListAndQueue+0x60>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	490b      	ldr	r1, [pc, #44]	; (8004bc4 <prvCheckForValidListAndQueue+0x7c>)
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe fd42 	bl	8003620 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b9c:	f000 f972 	bl	8004e84 <vPortExitCritical>
}
 8004ba0:	bf00      	nop
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000dd8 	.word	0x20000dd8
 8004bac:	20000da8 	.word	0x20000da8
 8004bb0:	20000dbc 	.word	0x20000dbc
 8004bb4:	20000dd0 	.word	0x20000dd0
 8004bb8:	20000dd4 	.word	0x20000dd4
 8004bbc:	20000e84 	.word	0x20000e84
 8004bc0:	20000de4 	.word	0x20000de4
 8004bc4:	08005644 	.word	0x08005644

08004bc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3b04      	subs	r3, #4
 8004bd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3b04      	subs	r3, #4
 8004be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f023 0201 	bic.w	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3b04      	subs	r3, #4
 8004bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bf8:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <pxPortInitialiseStack+0x64>)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3b14      	subs	r3, #20
 8004c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3b04      	subs	r3, #4
 8004c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f06f 0202 	mvn.w	r2, #2
 8004c16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3b20      	subs	r3, #32
 8004c1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	08004c31 	.word	0x08004c31

08004c30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <prvTaskExitError+0x54>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d00a      	beq.n	8004c5a <prvTaskExitError+0x2a>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	60fb      	str	r3, [r7, #12]
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <prvTaskExitError+0x28>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	60bb      	str	r3, [r7, #8]
}
 8004c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c6e:	bf00      	nop
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0fc      	beq.n	8004c70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	2000000c 	.word	0x2000000c
	...

08004c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <pxCurrentTCBConst2>)
 8004c92:	6819      	ldr	r1, [r3, #0]
 8004c94:	6808      	ldr	r0, [r1, #0]
 8004c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	f380 8809 	msr	PSP, r0
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8811 	msr	BASEPRI, r0
 8004caa:	4770      	bx	lr
 8004cac:	f3af 8000 	nop.w

08004cb0 <pxCurrentTCBConst2>:
 8004cb0:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004cb8:	4808      	ldr	r0, [pc, #32]	; (8004cdc <prvPortStartFirstTask+0x24>)
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	6800      	ldr	r0, [r0, #0]
 8004cbe:	f380 8808 	msr	MSP, r0
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f380 8814 	msr	CONTROL, r0
 8004cca:	b662      	cpsie	i
 8004ccc:	b661      	cpsie	f
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	df00      	svc	0
 8004cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cda:	bf00      	nop
 8004cdc:	e000ed08 	.word	0xe000ed08

08004ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ce6:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <xPortStartScheduler+0x120>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a46      	ldr	r2, [pc, #280]	; (8004e04 <xPortStartScheduler+0x124>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10a      	bne.n	8004d06 <xPortStartScheduler+0x26>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <xPortStartScheduler+0x120>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a3f      	ldr	r2, [pc, #252]	; (8004e08 <xPortStartScheduler+0x128>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10a      	bne.n	8004d26 <xPortStartScheduler+0x46>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	60fb      	str	r3, [r7, #12]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d26:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	22ff      	movs	r2, #255	; 0xff
 8004d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	4b31      	ldr	r3, [pc, #196]	; (8004e10 <xPortStartScheduler+0x130>)
 8004d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d4e:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <xPortStartScheduler+0x134>)
 8004d50:	2207      	movs	r2, #7
 8004d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d54:	e009      	b.n	8004d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d56:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <xPortStartScheduler+0x134>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	4a2d      	ldr	r2, [pc, #180]	; (8004e14 <xPortStartScheduler+0x134>)
 8004d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d0ef      	beq.n	8004d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d76:	4b27      	ldr	r3, [pc, #156]	; (8004e14 <xPortStartScheduler+0x134>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1c3 0307 	rsb	r3, r3, #7
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d00a      	beq.n	8004d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	60bb      	str	r3, [r7, #8]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <xPortStartScheduler+0x134>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <xPortStartScheduler+0x134>)
 8004da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <xPortStartScheduler+0x134>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004daa:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <xPortStartScheduler+0x134>)
 8004dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004db6:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <xPortStartScheduler+0x138>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <xPortStartScheduler+0x138>)
 8004dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <xPortStartScheduler+0x138>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <xPortStartScheduler+0x138>)
 8004dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dce:	f000 f8dd 	bl	8004f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <xPortStartScheduler+0x13c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004dd8:	f000 f8fc 	bl	8004fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ddc:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <xPortStartScheduler+0x140>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0f      	ldr	r2, [pc, #60]	; (8004e20 <xPortStartScheduler+0x140>)
 8004de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004de8:	f7ff ff66 	bl	8004cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dec:	f7ff f848 	bl	8003e80 <vTaskSwitchContext>
	prvTaskExitError();
 8004df0:	f7ff ff1e 	bl	8004c30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	e000ed00 	.word	0xe000ed00
 8004e04:	410fc271 	.word	0x410fc271
 8004e08:	410fc270 	.word	0x410fc270
 8004e0c:	e000e400 	.word	0xe000e400
 8004e10:	20000ed4 	.word	0x20000ed4
 8004e14:	20000ed8 	.word	0x20000ed8
 8004e18:	e000ed20 	.word	0xe000ed20
 8004e1c:	2000000c 	.word	0x2000000c
 8004e20:	e000ef34 	.word	0xe000ef34

08004e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	607b      	str	r3, [r7, #4]
}
 8004e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <vPortEnterCritical+0x58>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3301      	adds	r3, #1
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <vPortEnterCritical+0x58>)
 8004e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <vPortEnterCritical+0x58>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d10f      	bne.n	8004e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <vPortEnterCritical+0x5c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	603b      	str	r3, [r7, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <vPortEnterCritical+0x4a>
	}
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	2000000c 	.word	0x2000000c
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e8a:	4b12      	ldr	r3, [pc, #72]	; (8004ed4 <vPortExitCritical+0x50>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <vPortExitCritical+0x24>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	607b      	str	r3, [r7, #4]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <vPortExitCritical+0x50>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <vPortExitCritical+0x50>)
 8004eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004eb2:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <vPortExitCritical+0x50>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d105      	bne.n	8004ec6 <vPortExitCritical+0x42>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f383 8811 	msr	BASEPRI, r3
}
 8004ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	2000000c 	.word	0x2000000c
	...

08004ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ee0:	f3ef 8009 	mrs	r0, PSP
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	4b15      	ldr	r3, [pc, #84]	; (8004f40 <pxCurrentTCBConst>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	f01e 0f10 	tst.w	lr, #16
 8004ef0:	bf08      	it	eq
 8004ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	6010      	str	r0, [r2, #0]
 8004efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f04:	f380 8811 	msr	BASEPRI, r0
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f7fe ffb6 	bl	8003e80 <vTaskSwitchContext>
 8004f14:	f04f 0000 	mov.w	r0, #0
 8004f18:	f380 8811 	msr	BASEPRI, r0
 8004f1c:	bc09      	pop	{r0, r3}
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	6808      	ldr	r0, [r1, #0]
 8004f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f26:	f01e 0f10 	tst.w	lr, #16
 8004f2a:	bf08      	it	eq
 8004f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f30:	f380 8809 	msr	PSP, r0
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	f3af 8000 	nop.w

08004f40 <pxCurrentTCBConst>:
 8004f40:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	607b      	str	r3, [r7, #4]
}
 8004f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f62:	f7fe fed3 	bl	8003d0c <xTaskIncrementTick>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <xPortSysTickHandler+0x40>)
 8004f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	2300      	movs	r3, #0
 8004f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f383 8811 	msr	BASEPRI, r3
}
 8004f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <vPortSetupTimerInterrupt+0x34>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <vPortSetupTimerInterrupt+0x38>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <vPortSetupTimerInterrupt+0x3c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <vPortSetupTimerInterrupt+0x40>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	099b      	lsrs	r3, r3, #6
 8004fa8:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <vPortSetupTimerInterrupt+0x44>)
 8004faa:	3b01      	subs	r3, #1
 8004fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fae:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <vPortSetupTimerInterrupt+0x34>)
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	601a      	str	r2, [r3, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	e000e010 	.word	0xe000e010
 8004fc4:	e000e018 	.word	0xe000e018
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	10624dd3 	.word	0x10624dd3
 8004fd0:	e000e014 	.word	0xe000e014

08004fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fe4 <vPortEnableVFP+0x10>
 8004fd8:	6801      	ldr	r1, [r0, #0]
 8004fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004fde:	6001      	str	r1, [r0, #0]
 8004fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fe2:	bf00      	nop
 8004fe4:	e000ed88 	.word	0xe000ed88

08004fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fee:	f3ef 8305 	mrs	r3, IPSR
 8004ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	d914      	bls.n	8005024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <vPortValidateInterruptPriority+0x70>)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005004:	4b15      	ldr	r3, [pc, #84]	; (800505c <vPortValidateInterruptPriority+0x74>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	7afa      	ldrb	r2, [r7, #11]
 800500a:	429a      	cmp	r2, r3
 800500c:	d20a      	bcs.n	8005024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	607b      	str	r3, [r7, #4]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <vPortValidateInterruptPriority+0x78>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <vPortValidateInterruptPriority+0x7c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d90a      	bls.n	800504a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	603b      	str	r3, [r7, #0]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <vPortValidateInterruptPriority+0x60>
	}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	e000e3f0 	.word	0xe000e3f0
 800505c:	20000ed4 	.word	0x20000ed4
 8005060:	e000ed0c 	.word	0xe000ed0c
 8005064:	20000ed8 	.word	0x20000ed8

08005068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005074:	f7fe fd8e 	bl	8003b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005078:	4b5b      	ldr	r3, [pc, #364]	; (80051e8 <pvPortMalloc+0x180>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005080:	f000 f920 	bl	80052c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005084:	4b59      	ldr	r3, [pc, #356]	; (80051ec <pvPortMalloc+0x184>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 8093 	bne.w	80051b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01d      	beq.n	80050d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005098:	2208      	movs	r2, #8
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d014      	beq.n	80050d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f023 0307 	bic.w	r3, r3, #7
 80050b0:	3308      	adds	r3, #8
 80050b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <pvPortMalloc+0x6c>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	617b      	str	r3, [r7, #20]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d06e      	beq.n	80051b8 <pvPortMalloc+0x150>
 80050da:	4b45      	ldr	r3, [pc, #276]	; (80051f0 <pvPortMalloc+0x188>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d869      	bhi.n	80051b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050e4:	4b43      	ldr	r3, [pc, #268]	; (80051f4 <pvPortMalloc+0x18c>)
 80050e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050e8:	4b42      	ldr	r3, [pc, #264]	; (80051f4 <pvPortMalloc+0x18c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ee:	e004      	b.n	80050fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d903      	bls.n	800510c <pvPortMalloc+0xa4>
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f1      	bne.n	80050f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800510c:	4b36      	ldr	r3, [pc, #216]	; (80051e8 <pvPortMalloc+0x180>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005112:	429a      	cmp	r2, r3
 8005114:	d050      	beq.n	80051b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2208      	movs	r2, #8
 800511c:	4413      	add	r3, r2
 800511e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	2308      	movs	r3, #8
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	429a      	cmp	r2, r3
 8005136:	d91f      	bls.n	8005178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <pvPortMalloc+0xf8>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	613b      	str	r3, [r7, #16]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	1ad2      	subs	r2, r2, r3
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005172:	69b8      	ldr	r0, [r7, #24]
 8005174:	f000 f908 	bl	8005388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <pvPortMalloc+0x188>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <pvPortMalloc+0x188>)
 8005184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005186:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <pvPortMalloc+0x188>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <pvPortMalloc+0x190>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d203      	bcs.n	800519a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005192:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <pvPortMalloc+0x188>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <pvPortMalloc+0x190>)
 8005198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <pvPortMalloc+0x184>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <pvPortMalloc+0x194>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3301      	adds	r3, #1
 80051b4:	4a11      	ldr	r2, [pc, #68]	; (80051fc <pvPortMalloc+0x194>)
 80051b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051b8:	f7fe fcfa 	bl	8003bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <pvPortMalloc+0x174>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60fb      	str	r3, [r7, #12]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <pvPortMalloc+0x172>
	return pvReturn;
 80051dc:	69fb      	ldr	r3, [r7, #28]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3728      	adds	r7, #40	; 0x28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20004ae4 	.word	0x20004ae4
 80051ec:	20004af8 	.word	0x20004af8
 80051f0:	20004ae8 	.word	0x20004ae8
 80051f4:	20004adc 	.word	0x20004adc
 80051f8:	20004aec 	.word	0x20004aec
 80051fc:	20004af0 	.word	0x20004af0

08005200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d04d      	beq.n	80052ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005212:	2308      	movs	r3, #8
 8005214:	425b      	negs	r3, r3
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4413      	add	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <vPortFree+0xb8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <vPortFree+0x44>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	60fb      	str	r3, [r7, #12]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <vPortFree+0x62>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60bb      	str	r3, [r7, #8]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <vPortFree+0xb8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01e      	beq.n	80052ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11a      	bne.n	80052ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <vPortFree+0xb8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	43db      	mvns	r3, r3
 8005282:	401a      	ands	r2, r3
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005288:	f7fe fc84 	bl	8003b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <vPortFree+0xbc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4413      	add	r3, r2
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <vPortFree+0xbc>)
 8005298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800529a:	6938      	ldr	r0, [r7, #16]
 800529c:	f000 f874 	bl	8005388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <vPortFree+0xc0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3301      	adds	r3, #1
 80052a6:	4a06      	ldr	r2, [pc, #24]	; (80052c0 <vPortFree+0xc0>)
 80052a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052aa:	f7fe fc81 	bl	8003bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052ae:	bf00      	nop
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20004af8 	.word	0x20004af8
 80052bc:	20004ae8 	.word	0x20004ae8
 80052c0:	20004af4 	.word	0x20004af4

080052c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <prvHeapInit+0xac>)
 80052d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00c      	beq.n	80052f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3307      	adds	r3, #7
 80052e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0307 	bic.w	r3, r3, #7
 80052ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	4a1f      	ldr	r2, [pc, #124]	; (8005370 <prvHeapInit+0xac>)
 80052f4:	4413      	add	r3, r2
 80052f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052fc:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <prvHeapInit+0xb0>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <prvHeapInit+0xb0>)
 8005304:	2200      	movs	r2, #0
 8005306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4413      	add	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005310:	2208      	movs	r2, #8
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a15      	ldr	r2, [pc, #84]	; (8005378 <prvHeapInit+0xb4>)
 8005324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <prvHeapInit+0xb4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <prvHeapInit+0xb4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <prvHeapInit+0xb4>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4a0a      	ldr	r2, [pc, #40]	; (800537c <prvHeapInit+0xb8>)
 8005352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4a09      	ldr	r2, [pc, #36]	; (8005380 <prvHeapInit+0xbc>)
 800535a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <prvHeapInit+0xc0>)
 800535e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005362:	601a      	str	r2, [r3, #0]
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	20000edc 	.word	0x20000edc
 8005374:	20004adc 	.word	0x20004adc
 8005378:	20004ae4 	.word	0x20004ae4
 800537c:	20004aec 	.word	0x20004aec
 8005380:	20004ae8 	.word	0x20004ae8
 8005384:	20004af8 	.word	0x20004af8

08005388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005390:	4b28      	ldr	r3, [pc, #160]	; (8005434 <prvInsertBlockIntoFreeList+0xac>)
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e002      	b.n	800539c <prvInsertBlockIntoFreeList+0x14>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d8f7      	bhi.n	8005396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4413      	add	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d108      	bne.n	80053ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	441a      	add	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	441a      	add	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d118      	bne.n	8005410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <prvInsertBlockIntoFreeList+0xb0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d00d      	beq.n	8005406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	441a      	add	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e008      	b.n	8005418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <prvInsertBlockIntoFreeList+0xb0>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e003      	b.n	8005418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d002      	beq.n	8005426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20004adc 	.word	0x20004adc
 8005438:	20004ae4 	.word	0x20004ae4

0800543c <memset>:
 800543c:	4402      	add	r2, r0
 800543e:	4603      	mov	r3, r0
 8005440:	4293      	cmp	r3, r2
 8005442:	d100      	bne.n	8005446 <memset+0xa>
 8005444:	4770      	bx	lr
 8005446:	f803 1b01 	strb.w	r1, [r3], #1
 800544a:	e7f9      	b.n	8005440 <memset+0x4>

0800544c <_reclaim_reent>:
 800544c:	4b29      	ldr	r3, [pc, #164]	; (80054f4 <_reclaim_reent+0xa8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4283      	cmp	r3, r0
 8005452:	b570      	push	{r4, r5, r6, lr}
 8005454:	4604      	mov	r4, r0
 8005456:	d04b      	beq.n	80054f0 <_reclaim_reent+0xa4>
 8005458:	69c3      	ldr	r3, [r0, #28]
 800545a:	b143      	cbz	r3, 800546e <_reclaim_reent+0x22>
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d144      	bne.n	80054ec <_reclaim_reent+0xa0>
 8005462:	69e3      	ldr	r3, [r4, #28]
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	b111      	cbz	r1, 800546e <_reclaim_reent+0x22>
 8005468:	4620      	mov	r0, r4
 800546a:	f000 f879 	bl	8005560 <_free_r>
 800546e:	6961      	ldr	r1, [r4, #20]
 8005470:	b111      	cbz	r1, 8005478 <_reclaim_reent+0x2c>
 8005472:	4620      	mov	r0, r4
 8005474:	f000 f874 	bl	8005560 <_free_r>
 8005478:	69e1      	ldr	r1, [r4, #28]
 800547a:	b111      	cbz	r1, 8005482 <_reclaim_reent+0x36>
 800547c:	4620      	mov	r0, r4
 800547e:	f000 f86f 	bl	8005560 <_free_r>
 8005482:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005484:	b111      	cbz	r1, 800548c <_reclaim_reent+0x40>
 8005486:	4620      	mov	r0, r4
 8005488:	f000 f86a 	bl	8005560 <_free_r>
 800548c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800548e:	b111      	cbz	r1, 8005496 <_reclaim_reent+0x4a>
 8005490:	4620      	mov	r0, r4
 8005492:	f000 f865 	bl	8005560 <_free_r>
 8005496:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005498:	b111      	cbz	r1, 80054a0 <_reclaim_reent+0x54>
 800549a:	4620      	mov	r0, r4
 800549c:	f000 f860 	bl	8005560 <_free_r>
 80054a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054a2:	b111      	cbz	r1, 80054aa <_reclaim_reent+0x5e>
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 f85b 	bl	8005560 <_free_r>
 80054aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80054ac:	b111      	cbz	r1, 80054b4 <_reclaim_reent+0x68>
 80054ae:	4620      	mov	r0, r4
 80054b0:	f000 f856 	bl	8005560 <_free_r>
 80054b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80054b6:	b111      	cbz	r1, 80054be <_reclaim_reent+0x72>
 80054b8:	4620      	mov	r0, r4
 80054ba:	f000 f851 	bl	8005560 <_free_r>
 80054be:	6a23      	ldr	r3, [r4, #32]
 80054c0:	b1b3      	cbz	r3, 80054f0 <_reclaim_reent+0xa4>
 80054c2:	4620      	mov	r0, r4
 80054c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80054c8:	4718      	bx	r3
 80054ca:	5949      	ldr	r1, [r1, r5]
 80054cc:	b941      	cbnz	r1, 80054e0 <_reclaim_reent+0x94>
 80054ce:	3504      	adds	r5, #4
 80054d0:	69e3      	ldr	r3, [r4, #28]
 80054d2:	2d80      	cmp	r5, #128	; 0x80
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	d1f8      	bne.n	80054ca <_reclaim_reent+0x7e>
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 f841 	bl	8005560 <_free_r>
 80054de:	e7c0      	b.n	8005462 <_reclaim_reent+0x16>
 80054e0:	680e      	ldr	r6, [r1, #0]
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 f83c 	bl	8005560 <_free_r>
 80054e8:	4631      	mov	r1, r6
 80054ea:	e7ef      	b.n	80054cc <_reclaim_reent+0x80>
 80054ec:	2500      	movs	r5, #0
 80054ee:	e7ef      	b.n	80054d0 <_reclaim_reent+0x84>
 80054f0:	bd70      	pop	{r4, r5, r6, pc}
 80054f2:	bf00      	nop
 80054f4:	2000005c 	.word	0x2000005c

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	4d0d      	ldr	r5, [pc, #52]	; (8005530 <__libc_init_array+0x38>)
 80054fc:	4c0d      	ldr	r4, [pc, #52]	; (8005534 <__libc_init_array+0x3c>)
 80054fe:	1b64      	subs	r4, r4, r5
 8005500:	10a4      	asrs	r4, r4, #2
 8005502:	2600      	movs	r6, #0
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	4d0b      	ldr	r5, [pc, #44]	; (8005538 <__libc_init_array+0x40>)
 800550a:	4c0c      	ldr	r4, [pc, #48]	; (800553c <__libc_init_array+0x44>)
 800550c:	f000 f880 	bl	8005610 <_init>
 8005510:	1b64      	subs	r4, r4, r5
 8005512:	10a4      	asrs	r4, r4, #2
 8005514:	2600      	movs	r6, #0
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	f855 3b04 	ldr.w	r3, [r5], #4
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	08005690 	.word	0x08005690
 8005534:	08005690 	.word	0x08005690
 8005538:	08005690 	.word	0x08005690
 800553c:	08005694 	.word	0x08005694

08005540 <__retarget_lock_acquire_recursive>:
 8005540:	4770      	bx	lr

08005542 <__retarget_lock_release_recursive>:
 8005542:	4770      	bx	lr

08005544 <memcpy>:
 8005544:	440a      	add	r2, r1
 8005546:	4291      	cmp	r1, r2
 8005548:	f100 33ff 	add.w	r3, r0, #4294967295
 800554c:	d100      	bne.n	8005550 <memcpy+0xc>
 800554e:	4770      	bx	lr
 8005550:	b510      	push	{r4, lr}
 8005552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800555a:	4291      	cmp	r1, r2
 800555c:	d1f9      	bne.n	8005552 <memcpy+0xe>
 800555e:	bd10      	pop	{r4, pc}

08005560 <_free_r>:
 8005560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005562:	2900      	cmp	r1, #0
 8005564:	d044      	beq.n	80055f0 <_free_r+0x90>
 8005566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800556a:	9001      	str	r0, [sp, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f1a1 0404 	sub.w	r4, r1, #4
 8005572:	bfb8      	it	lt
 8005574:	18e4      	addlt	r4, r4, r3
 8005576:	f000 f83f 	bl	80055f8 <__malloc_lock>
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <_free_r+0x94>)
 800557c:	9801      	ldr	r0, [sp, #4]
 800557e:	6813      	ldr	r3, [r2, #0]
 8005580:	b933      	cbnz	r3, 8005590 <_free_r+0x30>
 8005582:	6063      	str	r3, [r4, #4]
 8005584:	6014      	str	r4, [r2, #0]
 8005586:	b003      	add	sp, #12
 8005588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800558c:	f000 b83a 	b.w	8005604 <__malloc_unlock>
 8005590:	42a3      	cmp	r3, r4
 8005592:	d908      	bls.n	80055a6 <_free_r+0x46>
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	1961      	adds	r1, r4, r5
 8005598:	428b      	cmp	r3, r1
 800559a:	bf01      	itttt	eq
 800559c:	6819      	ldreq	r1, [r3, #0]
 800559e:	685b      	ldreq	r3, [r3, #4]
 80055a0:	1949      	addeq	r1, r1, r5
 80055a2:	6021      	streq	r1, [r4, #0]
 80055a4:	e7ed      	b.n	8005582 <_free_r+0x22>
 80055a6:	461a      	mov	r2, r3
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	b10b      	cbz	r3, 80055b0 <_free_r+0x50>
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	d9fa      	bls.n	80055a6 <_free_r+0x46>
 80055b0:	6811      	ldr	r1, [r2, #0]
 80055b2:	1855      	adds	r5, r2, r1
 80055b4:	42a5      	cmp	r5, r4
 80055b6:	d10b      	bne.n	80055d0 <_free_r+0x70>
 80055b8:	6824      	ldr	r4, [r4, #0]
 80055ba:	4421      	add	r1, r4
 80055bc:	1854      	adds	r4, r2, r1
 80055be:	42a3      	cmp	r3, r4
 80055c0:	6011      	str	r1, [r2, #0]
 80055c2:	d1e0      	bne.n	8005586 <_free_r+0x26>
 80055c4:	681c      	ldr	r4, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	6053      	str	r3, [r2, #4]
 80055ca:	440c      	add	r4, r1
 80055cc:	6014      	str	r4, [r2, #0]
 80055ce:	e7da      	b.n	8005586 <_free_r+0x26>
 80055d0:	d902      	bls.n	80055d8 <_free_r+0x78>
 80055d2:	230c      	movs	r3, #12
 80055d4:	6003      	str	r3, [r0, #0]
 80055d6:	e7d6      	b.n	8005586 <_free_r+0x26>
 80055d8:	6825      	ldr	r5, [r4, #0]
 80055da:	1961      	adds	r1, r4, r5
 80055dc:	428b      	cmp	r3, r1
 80055de:	bf04      	itt	eq
 80055e0:	6819      	ldreq	r1, [r3, #0]
 80055e2:	685b      	ldreq	r3, [r3, #4]
 80055e4:	6063      	str	r3, [r4, #4]
 80055e6:	bf04      	itt	eq
 80055e8:	1949      	addeq	r1, r1, r5
 80055ea:	6021      	streq	r1, [r4, #0]
 80055ec:	6054      	str	r4, [r2, #4]
 80055ee:	e7ca      	b.n	8005586 <_free_r+0x26>
 80055f0:	b003      	add	sp, #12
 80055f2:	bd30      	pop	{r4, r5, pc}
 80055f4:	20004c38 	.word	0x20004c38

080055f8 <__malloc_lock>:
 80055f8:	4801      	ldr	r0, [pc, #4]	; (8005600 <__malloc_lock+0x8>)
 80055fa:	f7ff bfa1 	b.w	8005540 <__retarget_lock_acquire_recursive>
 80055fe:	bf00      	nop
 8005600:	20004c34 	.word	0x20004c34

08005604 <__malloc_unlock>:
 8005604:	4801      	ldr	r0, [pc, #4]	; (800560c <__malloc_unlock+0x8>)
 8005606:	f7ff bf9c 	b.w	8005542 <__retarget_lock_release_recursive>
 800560a:	bf00      	nop
 800560c:	20004c34 	.word	0x20004c34

08005610 <_init>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	bf00      	nop
 8005614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005616:	bc08      	pop	{r3}
 8005618:	469e      	mov	lr, r3
 800561a:	4770      	bx	lr

0800561c <_fini>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr
