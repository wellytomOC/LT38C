
robo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005408  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005668  08005668  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005670  08005670  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf0  20000064  080056dc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  080056dc  00024c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000148ed  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002edd  00000000  00000000  000349c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  000378a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de2  00000000  00000000  00038ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d49  00000000  00000000  00039892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e20  00000000  00000000  0003c5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094d9d  00000000  00000000  0004f3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e64  00000000  00000000  000e4198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e8ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005590 	.word	0x08005590

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08005590 	.word	0x08005590

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fc98 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f842 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f918 	bl	800071c <MX_GPIO_Init>
  MX_TIM4_Init();
 80004ec:	f000 f89c 	bl	8000628 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  TIM4->CCR1 = 5;
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <main+0x68>)
 80004f2:	2205      	movs	r2, #5
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 5;
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <main+0x68>)
 80004f8:	2205      	movs	r2, #5
 80004fa:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3 = 5;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <main+0x68>)
 80004fe:	2205      	movs	r2, #5
 8000500:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 5;
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <main+0x68>)
 8000504:	2205      	movs	r2, #5
 8000506:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000508:	f002 f9e0 	bl	80028cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <main+0x6c>)
 800050e:	2100      	movs	r1, #0
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <main+0x70>)
 8000512:	f002 fa25 	bl	8002960 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <main+0x74>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of RightMotor */
  RightMotorHandle = osThreadNew(StartRightMotor, NULL, &RightMotor_attributes);
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <main+0x78>)
 800051e:	2100      	movs	r1, #0
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <main+0x7c>)
 8000522:	f002 fa1d 	bl	8002960 <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <main+0x80>)
 800052a:	6013      	str	r3, [r2, #0]

  /* creation of LeftMotor */
  LeftMotorHandle = osThreadNew(StartLeftMotor, NULL, &LeftMotor_attributes);
 800052c:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <main+0x84>)
 800052e:	2100      	movs	r1, #0
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <main+0x88>)
 8000532:	f002 fa15 	bl	8002960 <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <main+0x8c>)
 800053a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053c:	f002 f9ea 	bl	8002914 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x64>
 8000542:	bf00      	nop
 8000544:	40000800 	.word	0x40000800
 8000548:	080055e4 	.word	0x080055e4
 800054c:	080009f5 	.word	0x080009f5
 8000550:	200000c8 	.word	0x200000c8
 8000554:	08005608 	.word	0x08005608
 8000558:	08000a99 	.word	0x08000a99
 800055c:	200000cc 	.word	0x200000cc
 8000560:	0800562c 	.word	0x0800562c
 8000564:	08000acd 	.word	0x08000acd
 8000568:	200000d0 	.word	0x200000d0

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f004 ff1e 	bl	80053bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xb4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xb4>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xb4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <SystemClock_Config+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b8:	4a1a      	ldr	r2, [pc, #104]	; (8000624 <SystemClock_Config+0xb8>)
 80005ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <SystemClock_Config+0xb8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 ff2e 	bl	8001440 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ea:	f000 faa9 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f991 	bl	8001930 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000614:	f000 fa94 	bl	8000b40 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800064a:	4b32      	ldr	r3, [pc, #200]	; (8000714 <MX_TIM4_Init+0xec>)
 800064c:	4a32      	ldr	r2, [pc, #200]	; (8000718 <MX_TIM4_Init+0xf0>)
 800064e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 250;
 8000650:	4b30      	ldr	r3, [pc, #192]	; (8000714 <MX_TIM4_Init+0xec>)
 8000652:	22fa      	movs	r2, #250	; 0xfa
 8000654:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <MX_TIM4_Init+0xec>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <MX_TIM4_Init+0xec>)
 800065e:	2263      	movs	r2, #99	; 0x63
 8000660:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <MX_TIM4_Init+0xec>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <MX_TIM4_Init+0xec>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800066e:	4829      	ldr	r0, [pc, #164]	; (8000714 <MX_TIM4_Init+0xec>)
 8000670:	f001 fc18 	bl	8001ea4 <HAL_TIM_PWM_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800067a:	f000 fa61 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4619      	mov	r1, r3
 800068c:	4821      	ldr	r0, [pc, #132]	; (8000714 <MX_TIM4_Init+0xec>)
 800068e:	f002 f857 	bl	8002740 <HAL_TIMEx_MasterConfigSynchronization>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000698:	f000 fa52 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800069c:	2360      	movs	r3, #96	; 0x60
 800069e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 80006a0:	2331      	movs	r3, #49	; 0x31
 80006a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	4619      	mov	r1, r3
 80006b2:	4818      	ldr	r0, [pc, #96]	; (8000714 <MX_TIM4_Init+0xec>)
 80006b4:	f001 fd4e 	bl	8002154 <HAL_TIM_PWM_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80006be:	f000 fa3f 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2204      	movs	r2, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	4812      	ldr	r0, [pc, #72]	; (8000714 <MX_TIM4_Init+0xec>)
 80006ca:	f001 fd43 	bl	8002154 <HAL_TIM_PWM_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80006d4:	f000 fa34 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2208      	movs	r2, #8
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_TIM4_Init+0xec>)
 80006e0:	f001 fd38 	bl	8002154 <HAL_TIM_PWM_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80006ea:	f000 fa29 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	220c      	movs	r2, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	4807      	ldr	r0, [pc, #28]	; (8000714 <MX_TIM4_Init+0xec>)
 80006f6:	f001 fd2d 	bl	8002154 <HAL_TIM_PWM_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000700:	f000 fa1e 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <MX_TIM4_Init+0xec>)
 8000706:	f000 fa6f 	bl	8000be8 <HAL_TIM_MspPostInit>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	; 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000080 	.word	0x20000080
 8000718:	40000800 	.word	0x40000800

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b48      	ldr	r3, [pc, #288]	; (8000858 <MX_GPIO_Init+0x13c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a47      	ldr	r2, [pc, #284]	; (8000858 <MX_GPIO_Init+0x13c>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b45      	ldr	r3, [pc, #276]	; (8000858 <MX_GPIO_Init+0x13c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <MX_GPIO_Init+0x13c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a40      	ldr	r2, [pc, #256]	; (8000858 <MX_GPIO_Init+0x13c>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <MX_GPIO_Init+0x13c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <MX_GPIO_Init+0x13c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a39      	ldr	r2, [pc, #228]	; (8000858 <MX_GPIO_Init+0x13c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_GPIO_Init+0x13c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <MX_GPIO_Init+0x13c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a32      	ldr	r2, [pc, #200]	; (8000858 <MX_GPIO_Init+0x13c>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <MX_GPIO_Init+0x13c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <MX_GPIO_Init+0x140>)
 80007aa:	f000 fe17 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80007ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4825      	ldr	r0, [pc, #148]	; (800085c <MX_GPIO_Init+0x140>)
 80007c8:	f000 fc6c 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key_Pin Sensor_Direita_Pin */
  GPIO_InitStruct.Pin = Key_Pin|Sensor_Direita_Pin;
 80007cc:	2305      	movs	r3, #5
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4820      	ldr	r0, [pc, #128]	; (8000860 <MX_GPIO_Init+0x144>)
 80007e0:	f000 fc60 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_Pin */
  GPIO_InitStruct.Pin = test_Pin;
 80007e4:	2302      	movs	r3, #2
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	481a      	ldr	r0, [pc, #104]	; (8000860 <MX_GPIO_Init+0x144>)
 80007f8:	f000 fc54 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_Direito_Pin Encoder_Esquerdo_Pin */
  GPIO_InitStruct.Pin = Encoder_Direito_Pin|Encoder_Esquerdo_Pin;
 80007fc:	2318      	movs	r3, #24
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000800:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4813      	ldr	r0, [pc, #76]	; (8000860 <MX_GPIO_Init+0x144>)
 8000812:	f000 fc47 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Esquerda_Pin */
  GPIO_InitStruct.Pin = Sensor_Esquerda_Pin;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sensor_Esquerda_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_GPIO_Init+0x148>)
 800082c:	f000 fc3a 	bl	80010a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2105      	movs	r1, #5
 8000834:	2009      	movs	r0, #9
 8000836:	f000 fc0b 	bl	8001050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800083a:	2009      	movs	r0, #9
 800083c:	f000 fc24 	bl	8001088 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2105      	movs	r1, #5
 8000844:	200a      	movs	r0, #10
 8000846:	f000 fc03 	bl	8001050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800084a:	200a      	movs	r0, #10
 800084c:	f000 fc1c 	bl	8001088 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020800 	.word	0x40020800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020400 	.word	0x40020400

08000868 <RightMotorForward>:

	  TIM4->CCR3 = speed-1;
	  TIM4->CCR4 = speed-1;
 }

void RightMotorForward(){
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

	TIM4->CCR1 = 0;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <RightMotorForward+0x40>)
 800086e:	2200      	movs	r2, #0
 8000870:	635a      	str	r2, [r3, #52]	; 0x34

	while(TIM4->CCR2 < MaxPWM){
 8000872:	e004      	b.n	800087e <RightMotorForward+0x16>
		TIM4->CCR2 += 5;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <RightMotorForward+0x40>)
 8000876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <RightMotorForward+0x40>)
 800087a:	3305      	adds	r3, #5
 800087c:	6393      	str	r3, [r2, #56]	; 0x38
	while(TIM4->CCR2 < MaxPWM){
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <RightMotorForward+0x40>)
 8000880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <RightMotorForward+0x44>)
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	4293      	cmp	r3, r2
 8000888:	d3f4      	bcc.n	8000874 <RightMotorForward+0xc>

	}

	if(TIM4->CCR2>MaxPWM)
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <RightMotorForward+0x40>)
 800088c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800088e:	4a07      	ldr	r2, [pc, #28]	; (80008ac <RightMotorForward+0x44>)
 8000890:	6812      	ldr	r2, [r2, #0]
 8000892:	4293      	cmp	r3, r2
 8000894:	d903      	bls.n	800089e <RightMotorForward+0x36>
		TIM4->CCR2=MaxPWM;
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <RightMotorForward+0x44>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <RightMotorForward+0x40>)
 800089c:	639a      	str	r2, [r3, #56]	; 0x38

}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	40000800 	.word	0x40000800
 80008ac:	20000000 	.word	0x20000000

080008b0 <RightMotorStop>:
void RightMotorBackward(){
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);
}

void RightMotorStop(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

	while(TIM4->CCR1 >= 0 || TIM4->CCR2 >=0 ){
 80008b4:	e00c      	b.n	80008d0 <RightMotorStop+0x20>
		TIM4->CCR1 -= 5;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <RightMotorStop+0x28>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ba:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <RightMotorStop+0x28>)
 80008bc:	3b05      	subs	r3, #5
 80008be:	6353      	str	r3, [r2, #52]	; 0x34
		TIM4->CCR2 -= 5;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <RightMotorStop+0x28>)
 80008c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <RightMotorStop+0x28>)
 80008c6:	3b05      	subs	r3, #5
 80008c8:	6393      	str	r3, [r2, #56]	; 0x38
		osDelay(2);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f002 f8da 	bl	8002a84 <osDelay>
	while(TIM4->CCR1 >= 0 || TIM4->CCR2 >=0 ){
 80008d0:	4b01      	ldr	r3, [pc, #4]	; (80008d8 <RightMotorStop+0x28>)
 80008d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d4:	e7ef      	b.n	80008b6 <RightMotorStop+0x6>
 80008d6:	bf00      	nop
 80008d8:	40000800 	.word	0x40000800

080008dc <LeftMotorForward>:
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);
	*/
}

void LeftMotorForward(){
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

	TIM4->CCR4=0;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <LeftMotorForward+0x40>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	641a      	str	r2, [r3, #64]	; 0x40
	while(TIM4->CCR3 < MaxPWM){
 80008e6:	e007      	b.n	80008f8 <LeftMotorForward+0x1c>
		TIM4->CCR3 += 5;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <LeftMotorForward+0x40>)
 80008ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <LeftMotorForward+0x40>)
 80008ee:	3305      	adds	r3, #5
 80008f0:	63d3      	str	r3, [r2, #60]	; 0x3c
		osDelay(2);
 80008f2:	2002      	movs	r0, #2
 80008f4:	f002 f8c6 	bl	8002a84 <osDelay>
	while(TIM4->CCR3 < MaxPWM){
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <LeftMotorForward+0x40>)
 80008fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fc:	4a08      	ldr	r2, [pc, #32]	; (8000920 <LeftMotorForward+0x44>)
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	4293      	cmp	r3, r2
 8000902:	d3f1      	bcc.n	80008e8 <LeftMotorForward+0xc>
	}

	if(TIM4->CCR3>MaxPWM)
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <LeftMotorForward+0x40>)
 8000906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000908:	4a05      	ldr	r2, [pc, #20]	; (8000920 <LeftMotorForward+0x44>)
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	4293      	cmp	r3, r2
 800090e:	d903      	bls.n	8000918 <LeftMotorForward+0x3c>
		TIM4->CCR3=MaxPWM;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <LeftMotorForward+0x44>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b01      	ldr	r3, [pc, #4]	; (800091c <LeftMotorForward+0x40>)
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40000800 	.word	0x40000800
 8000920:	20000000 	.word	0x20000000

08000924 <LeftMotorStop>:
void LeftMotorBackward(){
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_3);
}

void LeftMotorStop(){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0


	while(TIM4->CCR3 >= 0 || TIM4->CCR4 >= 0){
 8000928:	e00c      	b.n	8000944 <LeftMotorStop+0x20>
		TIM4->CCR3 -= 5;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <LeftMotorStop+0x28>)
 800092c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <LeftMotorStop+0x28>)
 8000930:	3b05      	subs	r3, #5
 8000932:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM4->CCR4 -= 5;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <LeftMotorStop+0x28>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <LeftMotorStop+0x28>)
 800093a:	3b05      	subs	r3, #5
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
		osDelay(2);
 800093e:	2002      	movs	r0, #2
 8000940:	f002 f8a0 	bl	8002a84 <osDelay>
	while(TIM4->CCR3 >= 0 || TIM4->CCR4 >= 0){
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <LeftMotorStop+0x28>)
 8000946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000948:	e7ef      	b.n	800092a <LeftMotorStop+0x6>
 800094a:	bf00      	nop
 800094c:	40000800 	.word	0x40000800

08000950 <moveFoward>:
		TIM4->CCR4=0;

}


void moveFoward(){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

	RightEncoderCount=0;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <moveFoward+0x28>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <moveFoward+0x2c>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
	Flag_RightMotor_MoveFoward=true;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <moveFoward+0x30>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
	Flag_LeftMotor_MoveFoward=true;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <moveFoward+0x34>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
	RightMotorForward();
 800096c:	f7ff ff7c 	bl	8000868 <RightMotorForward>
	LeftMotorForward();
 8000970:	f7ff ffb4 	bl	80008dc <LeftMotorForward>

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000d8 	.word	0x200000d8
 800097c:	200000d4 	.word	0x200000d4
 8000980:	200000dc 	.word	0x200000dc
 8000984:	200000dd 	.word	0x200000dd

08000988 <RotateRight>:

void RotateRight(){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

	RightEncoderCount=0;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <RotateRight+0x20>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <RotateRight+0x24>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]

	LeftMotorForward();
 8000998:	f7ff ffa0 	bl	80008dc <LeftMotorForward>
	Flag_LeftMotor_RotateRight=true;
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <RotateRight+0x28>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
	//Flag_RightMotor_RotateRight=true;

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000d8 	.word	0x200000d8
 80009ac:	200000d4 	.word	0x200000d4
 80009b0:	200000de 	.word	0x200000de

080009b4 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_4){
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	2b10      	cmp	r3, #16
 80009c2:	d104      	bne.n	80009ce <HAL_GPIO_EXTI_Callback+0x1a>
		LeftEncoderCount++;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_GPIO_EXTI_Callback+0x38>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_GPIO_EXTI_Callback+0x38>)
 80009cc:	6013      	str	r3, [r2, #0]
		}
	if(GPIO_Pin == GPIO_PIN_3){
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d104      	bne.n	80009de <HAL_GPIO_EXTI_Callback+0x2a>
		RightEncoderCount++;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80009dc:	6013      	str	r3, [r2, #0]
		}

}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	200000d4 	.word	0x200000d4
 80009f0:	200000d8 	.word	0x200000d8

080009f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  if(!HAL_GPIO_ReadPin(Key_GPIO_Port, Key_Pin)){
 80009fc:	2101      	movs	r1, #1
 80009fe:	4821      	ldr	r0, [pc, #132]	; (8000a84 <StartDefaultTask+0x90>)
 8000a00:	f000 fcd4 	bl	80013ac <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d137      	bne.n	8000a7a <StartDefaultTask+0x86>

		  	  moveFoward();
 8000a0a:	f7ff ffa1 	bl	8000950 <moveFoward>
		  	  while(Flag_LeftMotor_MoveFoward || Flag_RightMotor_MoveFoward);
 8000a0e:	bf00      	nop
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <StartDefaultTask+0x94>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1fb      	bne.n	8000a10 <StartDefaultTask+0x1c>
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <StartDefaultTask+0x98>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f7      	bne.n	8000a10 <StartDefaultTask+0x1c>
		  	  HAL_Delay(500);
 8000a20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a24:	f000 fa38 	bl	8000e98 <HAL_Delay>
		  	  RotateRight();
 8000a28:	f7ff ffae 	bl	8000988 <RotateRight>
		  	  while(Flag_LeftMotor_RotateRight || Flag_RightMotor_RotateRight);
 8000a2c:	bf00      	nop
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <StartDefaultTask+0x9c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1fb      	bne.n	8000a2e <StartDefaultTask+0x3a>
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <StartDefaultTask+0xa0>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1f7      	bne.n	8000a2e <StartDefaultTask+0x3a>
		  	  HAL_Delay(500);
 8000a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a42:	f000 fa29 	bl	8000e98 <HAL_Delay>
			  RotateRight();
 8000a46:	f7ff ff9f 	bl	8000988 <RotateRight>
			  while(Flag_LeftMotor_RotateRight || Flag_RightMotor_RotateRight);
 8000a4a:	bf00      	nop
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <StartDefaultTask+0x9c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1fb      	bne.n	8000a4c <StartDefaultTask+0x58>
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <StartDefaultTask+0xa0>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f7      	bne.n	8000a4c <StartDefaultTask+0x58>
			  HAL_Delay(500);
 8000a5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a60:	f000 fa1a 	bl	8000e98 <HAL_Delay>
			  moveFoward();
 8000a64:	f7ff ff74 	bl	8000950 <moveFoward>
			  while(Flag_LeftMotor_MoveFoward || Flag_RightMotor_MoveFoward);
 8000a68:	bf00      	nop
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <StartDefaultTask+0x94>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1fb      	bne.n	8000a6a <StartDefaultTask+0x76>
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <StartDefaultTask+0x98>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1f7      	bne.n	8000a6a <StartDefaultTask+0x76>
	  if(LeftEncoderCount>=5){
		  LeftEncoderCount=0;
		  HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
	  }*/

	  osDelay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f002 f802 	bl	8002a84 <osDelay>
	  if(!HAL_GPIO_ReadPin(Key_GPIO_Port, Key_Pin)){
 8000a80:	e7bc      	b.n	80009fc <StartDefaultTask+0x8>
 8000a82:	bf00      	nop
 8000a84:	40020000 	.word	0x40020000
 8000a88:	200000dd 	.word	0x200000dd
 8000a8c:	200000dc 	.word	0x200000dc
 8000a90:	200000de 	.word	0x200000de
 8000a94:	200000df 	.word	0x200000df

08000a98 <StartRightMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightMotor */
void StartRightMotor(void *argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightMotor */
  /* Infinite loop */
  for(;;)
  {
	if(Flag_RightMotor_MoveFoward){
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <StartRightMotor+0x2c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d008      	beq.n	8000aba <StartRightMotor+0x22>
		if(RightEncoderCount >=15){
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <StartRightMotor+0x30>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b0e      	cmp	r3, #14
 8000aae:	dd04      	ble.n	8000aba <StartRightMotor+0x22>
			RightMotorStop();
 8000ab0:	f7ff fefe 	bl	80008b0 <RightMotorStop>
			Flag_RightMotor_MoveFoward=false;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <StartRightMotor+0x2c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
		}
	}

    osDelay(1);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f001 ffe2 	bl	8002a84 <osDelay>
	if(Flag_RightMotor_MoveFoward){
 8000ac0:	e7ee      	b.n	8000aa0 <StartRightMotor+0x8>
 8000ac2:	bf00      	nop
 8000ac4:	200000dc 	.word	0x200000dc
 8000ac8:	200000d8 	.word	0x200000d8

08000acc <StartLeftMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftMotor */
void StartLeftMotor(void *argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftMotor */
  /* Infinite loop */
  for(;;)
  {
	if(Flag_LeftMotor_MoveFoward){
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <StartLeftMotor+0x44>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d008      	beq.n	8000aee <StartLeftMotor+0x22>
		if(LeftEncoderCount >=15){
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <StartLeftMotor+0x48>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b0e      	cmp	r3, #14
 8000ae2:	dd04      	ble.n	8000aee <StartLeftMotor+0x22>
			LeftMotorStop();
 8000ae4:	f7ff ff1e 	bl	8000924 <LeftMotorStop>
			Flag_LeftMotor_MoveFoward=false;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <StartLeftMotor+0x44>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
		}
	}

	if(Flag_LeftMotor_RotateRight){
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <StartLeftMotor+0x4c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d008      	beq.n	8000b08 <StartLeftMotor+0x3c>
		if(LeftEncoderCount >=10){
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <StartLeftMotor+0x48>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b09      	cmp	r3, #9
 8000afc:	dd04      	ble.n	8000b08 <StartLeftMotor+0x3c>
			LeftMotorStop();
 8000afe:	f7ff ff11 	bl	8000924 <LeftMotorStop>
			Flag_LeftMotor_RotateRight=false;
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <StartLeftMotor+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		}
	}
    osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f001 ffbb 	bl	8002a84 <osDelay>
	if(Flag_LeftMotor_MoveFoward){
 8000b0e:	e7e1      	b.n	8000ad4 <StartLeftMotor+0x8>
 8000b10:	200000dd 	.word	0x200000dd
 8000b14:	200000d4 	.word	0x200000d4
 8000b18:	200000de 	.word	0x200000de

08000b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d101      	bne.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2e:	f000 f993 	bl	8000e58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40010000 	.word	0x40010000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	f06f 0001 	mvn.w	r0, #1
 8000b92:	f000 fa5d 	bl	8001050 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10d      	bne.n	8000bd2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_TIM_PWM_MspInit+0x40>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <HAL_TIM_PWM_MspInit+0x40>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_TIM_PWM_MspInit+0x40>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40000800 	.word	0x40000800
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <HAL_TIM_MspPostInit+0x68>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d11e      	bne.n	8000c48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_TIM_MspPostInit+0x6c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_TIM_MspPostInit+0x6c>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_TIM_MspPostInit+0x6c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c26:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000c2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	4619      	mov	r1, r3
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <HAL_TIM_MspPostInit+0x70>)
 8000c44:	f000 fa2e 	bl	80010a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40000800 	.word	0x40000800
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020400 	.word	0x40020400

08000c5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <HAL_InitTick+0xd0>)
 8000c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c74:	4a2d      	ldr	r2, [pc, #180]	; (8000d2c <HAL_InitTick+0xd0>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <HAL_InitTick+0xd0>)
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c88:	f107 020c 	add.w	r2, r7, #12
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 f818 	bl	8001cc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c98:	f001 f802 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8000c9c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <HAL_InitTick+0xd4>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	0c9b      	lsrs	r3, r3, #18
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cac:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <HAL_InitTick+0xd8>)
 8000cae:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <HAL_InitTick+0xdc>)
 8000cb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <HAL_InitTick+0xd8>)
 8000cb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cba:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <HAL_InitTick+0xd8>)
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_InitTick+0xd8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_InitTick+0xd8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_InitTick+0xd8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cd2:	4818      	ldr	r0, [pc, #96]	; (8000d34 <HAL_InitTick+0xd8>)
 8000cd4:	f001 f82a 	bl	8001d2c <HAL_TIM_Base_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d11b      	bne.n	8000d1e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ce6:	4813      	ldr	r0, [pc, #76]	; (8000d34 <HAL_InitTick+0xd8>)
 8000ce8:	f001 f87a 	bl	8001de0 <HAL_TIM_Base_Start_IT>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d111      	bne.n	8000d1e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f000 f9c4 	bl	8001088 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b0f      	cmp	r3, #15
 8000d04:	d808      	bhi.n	8000d18 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d06:	2200      	movs	r2, #0
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	2019      	movs	r0, #25
 8000d0c:	f000 f9a0 	bl	8001050 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_InitTick+0xe0>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e002      	b.n	8000d1e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3730      	adds	r7, #48	; 0x30
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	431bde83 	.word	0x431bde83
 8000d34:	200000e0 	.word	0x200000e0
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	20000008 	.word	0x20000008

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Direito_Pin);
 8000d70:	2008      	movs	r0, #8
 8000d72:	f000 fb4d 	bl	8001410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Esquerdo_Pin);
 8000d7e:	2010      	movs	r0, #16
 8000d80:	f000 fb46 	bl	8001410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d8e:	f001 f8d8 	bl	8001f42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000e0 	.word	0x200000e0

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ffd7 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f004 fb43 	bl	8005478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fb73 	bl	80004dc <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e04:	08005678 	.word	0x08005678
  ldr r2, =_sbss
 8000e08:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e0c:	20004c54 	.word	0x20004c54

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f8fc 	bl	800103a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	200f      	movs	r0, #15
 8000e44:	f7ff ff0a 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fe80 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	2000000c 	.word	0x2000000c
 8000e7c:	20000128 	.word	0x20000128

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000128 	.word	0x20000128

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000000c 	.word	0x2000000c

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff4c 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001062:	f7ff ff61 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 8001066:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	6978      	ldr	r0, [r7, #20]
 800106e:	f7ff ffb1 	bl	8000fd4 <NVIC_EncodePriority>
 8001072:	4602      	mov	r2, r0
 8001074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff80 	bl	8000f80 <__NVIC_SetPriority>
}
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff54 	bl	8000f44 <__NVIC_EnableIRQ>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e159      	b.n	8001374 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 8148 	bne.w	800136e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d005      	beq.n	80010f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d130      	bne.n	8001158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 0201 	and.w	r2, r3, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b03      	cmp	r3, #3
 8001162:	d017      	beq.n	8001194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a2 	beq.w	800136e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b57      	ldr	r3, [pc, #348]	; (800138c <HAL_GPIO_Init+0x2e8>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a56      	ldr	r2, [pc, #344]	; (800138c <HAL_GPIO_Init+0x2e8>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b54      	ldr	r3, [pc, #336]	; (800138c <HAL_GPIO_Init+0x2e8>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001246:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_GPIO_Init+0x2ec>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <HAL_GPIO_Init+0x2f0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x202>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a48      	ldr	r2, [pc, #288]	; (8001398 <HAL_GPIO_Init+0x2f4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x1fe>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a47      	ldr	r2, [pc, #284]	; (800139c <HAL_GPIO_Init+0x2f8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x1fa>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a46      	ldr	r2, [pc, #280]	; (80013a0 <HAL_GPIO_Init+0x2fc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x1f6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <HAL_GPIO_Init+0x300>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x1f2>
 8001292:	2304      	movs	r3, #4
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 8001296:	2307      	movs	r3, #7
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	; (8001390 <HAL_GPIO_Init+0x2ec>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001314:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133e:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001368:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f aea2 	bls.w	80010c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e001      	b.n	80013ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f8:	e003      	b.n	8001402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fac0 	bl	80009b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e267      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d075      	beq.n	800154a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145e:	4b88      	ldr	r3, [pc, #544]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d00c      	beq.n	8001484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b85      	ldr	r3, [pc, #532]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001472:	2b08      	cmp	r3, #8
 8001474:	d112      	bne.n	800149c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001476:	4b82      	ldr	r3, [pc, #520]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001482:	d10b      	bne.n	800149c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d05b      	beq.n	8001548 <HAL_RCC_OscConfig+0x108>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d157      	bne.n	8001548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e242      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a4:	d106      	bne.n	80014b4 <HAL_RCC_OscConfig+0x74>
 80014a6:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a75      	ldr	r2, [pc, #468]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e01d      	b.n	80014f0 <HAL_RCC_OscConfig+0xb0>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x98>
 80014be:	4b70      	ldr	r3, [pc, #448]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6f      	ldr	r2, [pc, #444]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6c      	ldr	r2, [pc, #432]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0xb0>
 80014d8:	4b69      	ldr	r3, [pc, #420]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a68      	ldr	r2, [pc, #416]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b66      	ldr	r3, [pc, #408]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a65      	ldr	r2, [pc, #404]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fcc2 	bl	8000e80 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fcbe 	bl	8000e80 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e207      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b5b      	ldr	r3, [pc, #364]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0xc0>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fcae 	bl	8000e80 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fcaa 	bl	8000e80 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1f3      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	4b51      	ldr	r3, [pc, #324]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0xe8>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001556:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b47      	ldr	r3, [pc, #284]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156a:	2b08      	cmp	r3, #8
 800156c:	d11c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156e:	4b44      	ldr	r3, [pc, #272]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d116      	bne.n	80015a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	4b41      	ldr	r3, [pc, #260]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x152>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e1c7      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4937      	ldr	r1, [pc, #220]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	e03a      	b.n	800161e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <HAL_RCC_OscConfig+0x244>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fc63 	bl	8000e80 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fc5f 	bl	8000e80 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1a8      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4925      	ldr	r1, [pc, #148]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_RCC_OscConfig+0x244>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc42 	bl	8000e80 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fc3e 	bl	8000e80 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e187      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d036      	beq.n	8001698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d016      	beq.n	8001660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_RCC_OscConfig+0x248>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff fc22 	bl	8000e80 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fc1e 	bl	8000e80 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e167      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x200>
 800165e:	e01b      	b.n	8001698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_RCC_OscConfig+0x248>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001666:	f7ff fc0b 	bl	8000e80 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	e00e      	b.n	800168c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fc07 	bl	8000e80 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d907      	bls.n	800168c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e150      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
 8001680:	40023800 	.word	0x40023800
 8001684:	42470000 	.word	0x42470000
 8001688:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ea      	bne.n	800166e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 8097 	beq.w	80017d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b7d      	ldr	r3, [pc, #500]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a7c      	ldr	r2, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b7a      	ldr	r3, [pc, #488]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d2:	2301      	movs	r3, #1
 80016d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b77      	ldr	r3, [pc, #476]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d118      	bne.n	8001714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e2:	4b74      	ldr	r3, [pc, #464]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a73      	ldr	r2, [pc, #460]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fbc7 	bl	8000e80 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff fbc3 	bl	8000e80 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e10c      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x2ea>
 800171c:	4b64      	ldr	r3, [pc, #400]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a63      	ldr	r2, [pc, #396]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
 8001728:	e01c      	b.n	8001764 <HAL_RCC_OscConfig+0x324>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x30c>
 8001732:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	4a5b      	ldr	r2, [pc, #364]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6713      	str	r3, [r2, #112]	; 0x70
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0x324>
 800174c:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
 8001758:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a54      	ldr	r2, [pc, #336]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800175e:	f023 0304 	bic.w	r3, r3, #4
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d015      	beq.n	8001798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff fb88 	bl	8000e80 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff fb84 	bl	8000e80 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e0cb      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178a:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0ee      	beq.n	8001774 <HAL_RCC_OscConfig+0x334>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff fb72 	bl	8000e80 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7ff fb6e 	bl	8000e80 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e0b5      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b6:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ee      	bne.n	80017a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a38      	ldr	r2, [pc, #224]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80a1 	beq.w	8001920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d05c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d141      	bne.n	8001876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <HAL_RCC_OscConfig+0x478>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb42 	bl	8000e80 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fb3e 	bl	8000e80 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e087      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	491b      	ldr	r1, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_RCC_OscConfig+0x478>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fb17 	bl	8000e80 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff fb13 	bl	8000e80 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e05c      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x416>
 8001874:	e054      	b.n	8001920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_RCC_OscConfig+0x478>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fb00 	bl	8000e80 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fafc 	bl	8000e80 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e045      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x444>
 80018a2:	e03d      	b.n	8001920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e038      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000
 80018b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x4ec>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d028      	beq.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d121      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d11a      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018ec:	4013      	ands	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d111      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0cc      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b68      	ldr	r3, [pc, #416]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d90c      	bls.n	800196c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b65      	ldr	r3, [pc, #404]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b63      	ldr	r3, [pc, #396]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0b8      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d020      	beq.n	80019ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a58      	ldr	r2, [pc, #352]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800198e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4a52      	ldr	r2, [pc, #328]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	494d      	ldr	r1, [pc, #308]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d044      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d119      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e07f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ee:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e06f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e067      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	4b37      	ldr	r3, [pc, #220]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 0203 	bic.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4934      	ldr	r1, [pc, #208]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a20:	f7ff fa2e 	bl	8000e80 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff fa2a 	bl	8000e80 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e04f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 020c 	and.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1eb      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d20c      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e032      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4916      	ldr	r1, [pc, #88]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	490e      	ldr	r1, [pc, #56]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ab6:	f000 f821 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	490a      	ldr	r1, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f8c0 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00
 8001aec:	40023800 	.word	0x40023800
 8001af0:	08005650 	.word	0x08005650
 8001af4:	20000004 	.word	0x20000004
 8001af8:	20000008 	.word	0x20000008

08001afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b00:	b090      	sub	sp, #64	; 0x40
 8001b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b14:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d00d      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x40>
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	f200 80a1 	bhi.w	8001c68 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b2e:	e09b      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b34:	e09b      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b36:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b3a:	e098      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b3c:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b46:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d028      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	2200      	movs	r2, #0
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	627a      	str	r2, [r7, #36]	; 0x24
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b64:	2100      	movs	r1, #0
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b68:	fb03 f201 	mul.w	r2, r3, r1
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	fb00 f303 	mul.w	r3, r0, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	4a43      	ldr	r2, [pc, #268]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b76:	fba0 1202 	umull	r1, r2, r0, r2
 8001b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b82:	4413      	add	r3, r2
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	61fa      	str	r2, [r7, #28]
 8001b8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b96:	f7fe fb23 	bl	80001e0 <__aeabi_uldivmod>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba2:	e053      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	2200      	movs	r2, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	617a      	str	r2, [r7, #20]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bb6:	f04f 0b00 	mov.w	fp, #0
 8001bba:	4652      	mov	r2, sl
 8001bbc:	465b      	mov	r3, fp
 8001bbe:	f04f 0000 	mov.w	r0, #0
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	0159      	lsls	r1, r3, #5
 8001bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bcc:	0150      	lsls	r0, r2, #5
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ebb2 080a 	subs.w	r8, r2, sl
 8001bd6:	eb63 090b 	sbc.w	r9, r3, fp
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001be6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bee:	ebb2 0408 	subs.w	r4, r2, r8
 8001bf2:	eb63 0509 	sbc.w	r5, r3, r9
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	00eb      	lsls	r3, r5, #3
 8001c00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c04:	00e2      	lsls	r2, r4, #3
 8001c06:	4614      	mov	r4, r2
 8001c08:	461d      	mov	r5, r3
 8001c0a:	eb14 030a 	adds.w	r3, r4, sl
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	eb45 030b 	adc.w	r3, r5, fp
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c22:	4629      	mov	r1, r5
 8001c24:	028b      	lsls	r3, r1, #10
 8001c26:	4621      	mov	r1, r4
 8001c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	028a      	lsls	r2, r1, #10
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c36:	2200      	movs	r2, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	60fa      	str	r2, [r7, #12]
 8001c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c40:	f7fe face 	bl	80001e0 <__aeabi_uldivmod>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4613      	mov	r3, r2
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	3301      	adds	r3, #1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c66:	e002      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3740      	adds	r7, #64	; 0x40
 8001c74:	46bd      	mov	sp, r7
 8001c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	00f42400 	.word	0x00f42400
 8001c84:	017d7840 	.word	0x017d7840

08001c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0b5b      	lsrs	r3, r3, #13
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08005660 	.word	0x08005660

08001cc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_RCC_GetClockConfig+0x60>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0207 	and.w	r2, r3, #7
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40023c00 	.word	0x40023c00

08001d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e041      	b.n	8001dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f839 	bl	8001dca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3304      	adds	r3, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f000 fadc 	bl	8002328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d001      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e044      	b.n	8001e82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1e      	ldr	r2, [pc, #120]	; (8001e90 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d018      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x6c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e22:	d013      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x6c>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00e      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x6c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x6c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_TIM_Base_Start_IT+0xbc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x6c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d111      	bne.n	8001e70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d010      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	e007      	b.n	8001e80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40000c00 	.word	0x40000c00
 8001ea0:	40014000 	.word	0x40014000

08001ea4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e041      	b.n	8001f3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fe6a 	bl	8000ba4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f000 fa20 	bl	8002328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d122      	bne.n	8001f9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d11b      	bne.n	8001f9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f06f 0202 	mvn.w	r2, #2
 8001f6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f9b1 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 8001f8a:	e005      	b.n	8001f98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f9a3 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f9b4 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d122      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d11b      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 0204 	mvn.w	r2, #4
 8001fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f987 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 8001fde:	e005      	b.n	8001fec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f979 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f98a 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d122      	bne.n	8002046 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b08      	cmp	r3, #8
 800200c:	d11b      	bne.n	8002046 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f06f 0208 	mvn.w	r2, #8
 8002016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2204      	movs	r2, #4
 800201c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f95d 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 8002032:	e005      	b.n	8002040 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f94f 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f960 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b10      	cmp	r3, #16
 8002052:	d122      	bne.n	800209a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b10      	cmp	r3, #16
 8002060:	d11b      	bne.n	800209a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f06f 0210 	mvn.w	r2, #16
 800206a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2208      	movs	r2, #8
 8002070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f933 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 8002086:	e005      	b.n	8002094 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f925 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f936 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10e      	bne.n	80020c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d107      	bne.n	80020c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f06f 0201 	mvn.w	r2, #1
 80020be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe fd2b 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d10e      	bne.n	80020f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b80      	cmp	r3, #128	; 0x80
 80020e0:	d107      	bne.n	80020f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fb9f 	bl	8002830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fc:	2b40      	cmp	r3, #64	; 0x40
 80020fe:	d10e      	bne.n	800211e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d107      	bne.n	800211e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f8fb 	bl	8002314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b20      	cmp	r3, #32
 800212a:	d10e      	bne.n	800214a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b20      	cmp	r3, #32
 8002138:	d107      	bne.n	800214a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f06f 0220 	mvn.w	r2, #32
 8002142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fb69 	bl	800281c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800216e:	2302      	movs	r3, #2
 8002170:	e0ae      	b.n	80022d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0c      	cmp	r3, #12
 800217e:	f200 809f 	bhi.w	80022c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002182:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	080021bd 	.word	0x080021bd
 800218c:	080022c1 	.word	0x080022c1
 8002190:	080022c1 	.word	0x080022c1
 8002194:	080022c1 	.word	0x080022c1
 8002198:	080021fd 	.word	0x080021fd
 800219c:	080022c1 	.word	0x080022c1
 80021a0:	080022c1 	.word	0x080022c1
 80021a4:	080022c1 	.word	0x080022c1
 80021a8:	0800223f 	.word	0x0800223f
 80021ac:	080022c1 	.word	0x080022c1
 80021b0:	080022c1 	.word	0x080022c1
 80021b4:	080022c1 	.word	0x080022c1
 80021b8:	0800227f 	.word	0x0800227f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f930 	bl	8002428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0208 	orr.w	r2, r2, #8
 80021d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0204 	bic.w	r2, r2, #4
 80021e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6999      	ldr	r1, [r3, #24]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	619a      	str	r2, [r3, #24]
      break;
 80021fa:	e064      	b.n	80022c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f976 	bl	80024f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6999      	ldr	r1, [r3, #24]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	021a      	lsls	r2, r3, #8
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	619a      	str	r2, [r3, #24]
      break;
 800223c:	e043      	b.n	80022c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f9c1 	bl	80025cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0208 	orr.w	r2, r2, #8
 8002258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0204 	bic.w	r2, r2, #4
 8002268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69d9      	ldr	r1, [r3, #28]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	61da      	str	r2, [r3, #28]
      break;
 800227c:	e023      	b.n	80022c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fa0b 	bl	80026a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69d9      	ldr	r1, [r3, #28]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	021a      	lsls	r2, r3, #8
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	61da      	str	r2, [r3, #28]
      break;
 80022be:	e002      	b.n	80022c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	75fb      	strb	r3, [r7, #23]
      break;
 80022c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a34      	ldr	r2, [pc, #208]	; (800240c <TIM_Base_SetConfig+0xe4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00f      	beq.n	8002360 <TIM_Base_SetConfig+0x38>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002346:	d00b      	beq.n	8002360 <TIM_Base_SetConfig+0x38>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a31      	ldr	r2, [pc, #196]	; (8002410 <TIM_Base_SetConfig+0xe8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <TIM_Base_SetConfig+0x38>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a30      	ldr	r2, [pc, #192]	; (8002414 <TIM_Base_SetConfig+0xec>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d003      	beq.n	8002360 <TIM_Base_SetConfig+0x38>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <TIM_Base_SetConfig+0xf0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d108      	bne.n	8002372 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a25      	ldr	r2, [pc, #148]	; (800240c <TIM_Base_SetConfig+0xe4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01b      	beq.n	80023b2 <TIM_Base_SetConfig+0x8a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d017      	beq.n	80023b2 <TIM_Base_SetConfig+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a22      	ldr	r2, [pc, #136]	; (8002410 <TIM_Base_SetConfig+0xe8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <TIM_Base_SetConfig+0x8a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a21      	ldr	r2, [pc, #132]	; (8002414 <TIM_Base_SetConfig+0xec>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00f      	beq.n	80023b2 <TIM_Base_SetConfig+0x8a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a20      	ldr	r2, [pc, #128]	; (8002418 <TIM_Base_SetConfig+0xf0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00b      	beq.n	80023b2 <TIM_Base_SetConfig+0x8a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1f      	ldr	r2, [pc, #124]	; (800241c <TIM_Base_SetConfig+0xf4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <TIM_Base_SetConfig+0x8a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1e      	ldr	r2, [pc, #120]	; (8002420 <TIM_Base_SetConfig+0xf8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <TIM_Base_SetConfig+0x8a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <TIM_Base_SetConfig+0xfc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d108      	bne.n	80023c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a08      	ldr	r2, [pc, #32]	; (800240c <TIM_Base_SetConfig+0xe4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d103      	bne.n	80023f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	615a      	str	r2, [r3, #20]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40010000 	.word	0x40010000
 8002410:	40000400 	.word	0x40000400
 8002414:	40000800 	.word	0x40000800
 8002418:	40000c00 	.word	0x40000c00
 800241c:	40014000 	.word	0x40014000
 8002420:	40014400 	.word	0x40014400
 8002424:	40014800 	.word	0x40014800

08002428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f023 0302 	bic.w	r3, r3, #2
 8002470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <TIM_OC1_SetConfig+0xc8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10c      	bne.n	800249e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0308 	bic.w	r3, r3, #8
 800248a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <TIM_OC1_SetConfig+0xc8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d111      	bne.n	80024ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	621a      	str	r2, [r3, #32]
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40010000 	.word	0x40010000

080024f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f023 0210 	bic.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f023 0320 	bic.w	r3, r3, #32
 800253e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a1e      	ldr	r2, [pc, #120]	; (80025c8 <TIM_OC2_SetConfig+0xd4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10d      	bne.n	8002570 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800255a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <TIM_OC2_SetConfig+0xd4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d113      	bne.n	80025a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800257e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	621a      	str	r2, [r3, #32]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000

080025cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <TIM_OC3_SetConfig+0xd0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10d      	bne.n	8002646 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <TIM_OC3_SetConfig+0xd0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d113      	bne.n	8002676 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800265c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	621a      	str	r2, [r3, #32]
}
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40010000 	.word	0x40010000

080026a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	031b      	lsls	r3, r3, #12
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a10      	ldr	r2, [pc, #64]	; (800273c <TIM_OC4_SetConfig+0x9c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d109      	bne.n	8002714 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	621a      	str	r2, [r3, #32]
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40010000 	.word	0x40010000

08002740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002754:	2302      	movs	r3, #2
 8002756:	e050      	b.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d018      	beq.n	80027ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a4:	d013      	beq.n	80027ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00e      	beq.n	80027ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a16      	ldr	r2, [pc, #88]	; (8002810 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a15      	ldr	r2, [pc, #84]	; (8002814 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a13      	ldr	r2, [pc, #76]	; (8002818 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10c      	bne.n	80027e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40010000 	.word	0x40010000
 800280c:	40000400 	.word	0x40000400
 8002810:	40000800 	.word	0x40000800
 8002814:	40000c00 	.word	0x40000c00
 8002818:	40014000 	.word	0x40014000

0800281c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <__NVIC_SetPriority>:
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <SysTick_Handler+0x1c>)
 800289e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028a0:	f001 fd28 	bl	80042f4 <xTaskGetSchedulerState>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028aa:	f002 fb0d 	bl	8004ec8 <xPortSysTickHandler>
  }
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80028bc:	2100      	movs	r1, #0
 80028be:	f06f 0004 	mvn.w	r0, #4
 80028c2:	f7ff ffbf 	bl	8002844 <__NVIC_SetPriority>
#endif
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028d2:	f3ef 8305 	mrs	r3, IPSR
 80028d6:	603b      	str	r3, [r7, #0]
  return(result);
 80028d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80028de:	f06f 0305 	mvn.w	r3, #5
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	e00c      	b.n	8002900 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <osKernelInitialize+0x44>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d105      	bne.n	80028fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <osKernelInitialize+0x44>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	607b      	str	r3, [r7, #4]
 80028f8:	e002      	b.n	8002900 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002900:	687b      	ldr	r3, [r7, #4]
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	2000012c 	.word	0x2000012c

08002914 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800291a:	f3ef 8305 	mrs	r3, IPSR
 800291e:	603b      	str	r3, [r7, #0]
  return(result);
 8002920:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002926:	f06f 0305 	mvn.w	r3, #5
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	e010      	b.n	8002950 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <osKernelStart+0x48>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d109      	bne.n	800294a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002936:	f7ff ffbf 	bl	80028b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <osKernelStart+0x48>)
 800293c:	2202      	movs	r2, #2
 800293e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002940:	f001 f87c 	bl	8003a3c <vTaskStartScheduler>
      stat = osOK;
 8002944:	2300      	movs	r3, #0
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	e002      	b.n	8002950 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002950:	687b      	ldr	r3, [r7, #4]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000012c 	.word	0x2000012c

08002960 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b08e      	sub	sp, #56	; 0x38
 8002964:	af04      	add	r7, sp, #16
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002970:	f3ef 8305 	mrs	r3, IPSR
 8002974:	617b      	str	r3, [r7, #20]
  return(result);
 8002976:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002978:	2b00      	cmp	r3, #0
 800297a:	d17e      	bne.n	8002a7a <osThreadNew+0x11a>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d07b      	beq.n	8002a7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002986:	2318      	movs	r3, #24
 8002988:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d045      	beq.n	8002a26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <osThreadNew+0x48>
        name = attr->name;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <osThreadNew+0x6e>
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b38      	cmp	r3, #56	; 0x38
 80029c0:	d805      	bhi.n	80029ce <osThreadNew+0x6e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <osThreadNew+0x72>
        return (NULL);
 80029ce:	2300      	movs	r3, #0
 80029d0:	e054      	b.n	8002a7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00e      	beq.n	8002a08 <osThreadNew+0xa8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2ba7      	cmp	r3, #167	; 0xa7
 80029f0:	d90a      	bls.n	8002a08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <osThreadNew+0xa8>
        mem = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	e010      	b.n	8002a2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10c      	bne.n	8002a2a <osThreadNew+0xca>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d108      	bne.n	8002a2a <osThreadNew+0xca>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d104      	bne.n	8002a2a <osThreadNew+0xca>
          mem = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	e001      	b.n	8002a2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d110      	bne.n	8002a52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a38:	9202      	str	r2, [sp, #8]
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	6a3a      	ldr	r2, [r7, #32]
 8002a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fe0c 	bl	8003664 <xTaskCreateStatic>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e013      	b.n	8002a7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d110      	bne.n	8002a7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	f107 0310 	add.w	r3, r7, #16
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fe57 	bl	800371e <xTaskCreate>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d001      	beq.n	8002a7a <osThreadNew+0x11a>
            hTask = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a7a:	693b      	ldr	r3, [r7, #16]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3728      	adds	r7, #40	; 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a8c:	f3ef 8305 	mrs	r3, IPSR
 8002a90:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <osDelay+0x1c>
    stat = osErrorISR;
 8002a98:	f06f 0305 	mvn.w	r3, #5
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	e007      	b.n	8002ab0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 ff92 	bl	80039d4 <vTaskDelay>
    }
  }

  return (stat);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002acc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4a06      	ldr	r2, [pc, #24]	; (8002aec <vApplicationGetIdleTaskMemory+0x30>)
 8002ad2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	601a      	str	r2, [r3, #0]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000130 	.word	0x20000130
 8002aec:	200001d8 	.word	0x200001d8

08002af0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <vApplicationGetTimerTaskMemory+0x2c>)
 8002b00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4a06      	ldr	r2, [pc, #24]	; (8002b20 <vApplicationGetTimerTaskMemory+0x30>)
 8002b06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	200003d8 	.word	0x200003d8
 8002b20:	20000480 	.word	0x20000480

08002b24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f103 0208 	add.w	r2, r3, #8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f103 0208 	add.w	r2, r3, #8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f103 0208 	add.w	r2, r3, #8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d103      	bne.n	8002be6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e00c      	b.n	8002c00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3308      	adds	r3, #8
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e002      	b.n	8002bf4 <vListInsert+0x2e>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d2f6      	bcs.n	8002bee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	601a      	str	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6892      	ldr	r2, [r2, #8]
 8002c4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6852      	ldr	r2, [r2, #4]
 8002c58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d103      	bne.n	8002c6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	1e5a      	subs	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cb2:	bf00      	nop
 8002cb4:	e7fe      	b.n	8002cb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cb6:	f002 f875 	bl	8004da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	68f9      	ldr	r1, [r7, #12]
 8002cc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	441a      	add	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	441a      	add	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	22ff      	movs	r2, #255	; 0xff
 8002cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	22ff      	movs	r2, #255	; 0xff
 8002d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d114      	bne.n	8002d36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01a      	beq.n	8002d4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3310      	adds	r3, #16
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 f929 	bl	8003f70 <xTaskRemoveFromEventList>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d012      	beq.n	8002d4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <xQueueGenericReset+0xcc>)
 8002d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	e009      	b.n	8002d4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3310      	adds	r3, #16
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fef2 	bl	8002b24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3324      	adds	r3, #36	; 0x24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff feed 	bl	8002b24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d4a:	f002 f85b 	bl	8004e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	e000ed04 	.word	0xe000ed04

08002d5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08e      	sub	sp, #56	; 0x38
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d82:	bf00      	nop
 8002d84:	e7fe      	b.n	8002d84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <xQueueGenericCreateStatic+0x52>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <xQueueGenericCreateStatic+0x56>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueGenericCreateStatic+0x58>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	623b      	str	r3, [r7, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <xQueueGenericCreateStatic+0x7e>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <xQueueGenericCreateStatic+0x82>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <xQueueGenericCreateStatic+0x84>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	61fb      	str	r3, [r7, #28]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dfa:	2350      	movs	r3, #80	; 0x50
 8002dfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b50      	cmp	r3, #80	; 0x50
 8002e02:	d00a      	beq.n	8002e1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	61bb      	str	r3, [r7, #24]
}
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f805 	bl	8002e4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3730      	adds	r7, #48	; 0x30
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e002      	b.n	8002e6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	69b8      	ldr	r0, [r7, #24]
 8002e7e:	f7ff ff05 	bl	8002c8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08e      	sub	sp, #56	; 0x38
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <xQueueGenericSend+0x32>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <xQueueGenericSend+0x40>
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <xQueueGenericSend+0x44>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <xQueueGenericSend+0x46>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <xQueueGenericSend+0x60>
	__asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d103      	bne.n	8002f02 <xQueueGenericSend+0x6e>
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <xQueueGenericSend+0x72>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <xQueueGenericSend+0x74>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <xQueueGenericSend+0x8e>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	623b      	str	r3, [r7, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	e7fe      	b.n	8002f20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f22:	f001 f9e7 	bl	80042f4 <xTaskGetSchedulerState>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <xQueueGenericSend+0x9e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <xQueueGenericSend+0xa2>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <xQueueGenericSend+0xa4>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <xQueueGenericSend+0xbe>
	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	61fb      	str	r3, [r7, #28]
}
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f52:	f001 ff27 	bl	8004da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <xQueueGenericSend+0xd4>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d129      	bne.n	8002fbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6e:	f000 fa0b 	bl	8003388 <prvCopyDataToQueue>
 8002f72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	3324      	adds	r3, #36	; 0x24
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fff5 	bl	8003f70 <xTaskRemoveFromEventList>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f8c:	4b3f      	ldr	r3, [pc, #252]	; (800308c <xQueueGenericSend+0x1f8>)
 8002f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	e00a      	b.n	8002fb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fa4:	4b39      	ldr	r3, [pc, #228]	; (800308c <xQueueGenericSend+0x1f8>)
 8002fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fb4:	f001 ff26 	bl	8004e04 <vPortExitCritical>
				return pdPASS;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e063      	b.n	8003084 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fc2:	f001 ff1f 	bl	8004e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e05c      	b.n	8003084 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f001 f82f 	bl	8004038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fde:	f001 ff11 	bl	8004e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fe2:	f000 fd9b 	bl	8003b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fe6:	f001 fedd 	bl	8004da4 <vPortEnterCritical>
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d103      	bne.n	8003000 <xQueueGenericSend+0x16c>
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003006:	b25b      	sxtb	r3, r3
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d103      	bne.n	8003016 <xQueueGenericSend+0x182>
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003016:	f001 fef5 	bl	8004e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800301a:	1d3a      	adds	r2, r7, #4
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f001 f81e 	bl	8004064 <xTaskCheckForTimeOut>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d124      	bne.n	8003078 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800302e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003030:	f000 faa2 	bl	8003578 <prvIsQueueFull>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d018      	beq.n	800306c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	3310      	adds	r3, #16
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f000 ff44 	bl	8003ed0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800304a:	f000 fa2d 	bl	80034a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800304e:	f000 fd73 	bl	8003b38 <xTaskResumeAll>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	f47f af7c 	bne.w	8002f52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <xQueueGenericSend+0x1f8>)
 800305c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	e772      	b.n	8002f52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800306c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800306e:	f000 fa1b 	bl	80034a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003072:	f000 fd61 	bl	8003b38 <xTaskResumeAll>
 8003076:	e76c      	b.n	8002f52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800307a:	f000 fa15 	bl	80034a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800307e:	f000 fd5b 	bl	8003b38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003082:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003084:	4618      	mov	r0, r3
 8003086:	3738      	adds	r7, #56	; 0x38
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b090      	sub	sp, #64	; 0x40
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030ba:	bf00      	nop
 80030bc:	e7fe      	b.n	80030bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d103      	bne.n	80030cc <xQueueGenericSendFromISR+0x3c>
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <xQueueGenericSendFromISR+0x40>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <xQueueGenericSendFromISR+0x42>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d103      	bne.n	80030fa <xQueueGenericSendFromISR+0x6a>
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <xQueueGenericSendFromISR+0x6e>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <xQueueGenericSendFromISR+0x70>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	623b      	str	r3, [r7, #32]
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800311a:	f001 ff25 	bl	8004f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800311e:	f3ef 8211 	mrs	r2, BASEPRI
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	61fa      	str	r2, [r7, #28]
 8003134:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003136:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003138:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <xQueueGenericSendFromISR+0xbc>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d12f      	bne.n	80031ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003162:	f000 f911 	bl	8003388 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003166:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d112      	bne.n	8003196 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	2b00      	cmp	r3, #0
 8003176:	d016      	beq.n	80031a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	3324      	adds	r3, #36	; 0x24
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fef7 	bl	8003f70 <xTaskRemoveFromEventList>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00e      	beq.n	80031a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e007      	b.n	80031a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003196:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800319a:	3301      	adds	r3, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	b25a      	sxtb	r2, r3
 80031a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031a6:	2301      	movs	r3, #1
 80031a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80031aa:	e001      	b.n	80031b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3740      	adds	r7, #64	; 0x40
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <xQueueReceive+0x30>
	__asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	623b      	str	r3, [r7, #32]
}
 80031f4:	bf00      	nop
 80031f6:	e7fe      	b.n	80031f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d103      	bne.n	8003206 <xQueueReceive+0x3e>
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <xQueueReceive+0x42>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <xQueueReceive+0x44>
 800320a:	2300      	movs	r3, #0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <xQueueReceive+0x5e>
	__asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	61fb      	str	r3, [r7, #28]
}
 8003222:	bf00      	nop
 8003224:	e7fe      	b.n	8003224 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003226:	f001 f865 	bl	80042f4 <xTaskGetSchedulerState>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <xQueueReceive+0x6e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <xQueueReceive+0x72>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <xQueueReceive+0x74>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xQueueReceive+0x8e>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	61bb      	str	r3, [r7, #24]
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003256:	f001 fda5 	bl	8004da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01f      	beq.n	80032a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800326a:	f000 f8f7 	bl	800345c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	1e5a      	subs	r2, r3, #1
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00f      	beq.n	800329e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	3310      	adds	r3, #16
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fe74 	bl	8003f70 <xTaskRemoveFromEventList>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800328e:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <xQueueReceive+0x1bc>)
 8003290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800329e:	f001 fdb1 	bl	8004e04 <vPortExitCritical>
				return pdPASS;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e069      	b.n	800337a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d103      	bne.n	80032b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ac:	f001 fdaa 	bl	8004e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e062      	b.n	800337a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032ba:	f107 0310 	add.w	r3, r7, #16
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 feba 	bl	8004038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032c8:	f001 fd9c 	bl	8004e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032cc:	f000 fc26 	bl	8003b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032d0:	f001 fd68 	bl	8004da4 <vPortEnterCritical>
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032da:	b25b      	sxtb	r3, r3
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d103      	bne.n	80032ea <xQueueReceive+0x122>
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032f0:	b25b      	sxtb	r3, r3
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d103      	bne.n	8003300 <xQueueReceive+0x138>
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003300:	f001 fd80 	bl	8004e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003304:	1d3a      	adds	r2, r7, #4
 8003306:	f107 0310 	add.w	r3, r7, #16
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fea9 	bl	8004064 <xTaskCheckForTimeOut>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d123      	bne.n	8003360 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800331a:	f000 f917 	bl	800354c <prvIsQueueEmpty>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d017      	beq.n	8003354 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	3324      	adds	r3, #36	; 0x24
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fdcf 	bl	8003ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003334:	f000 f8b8 	bl	80034a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003338:	f000 fbfe 	bl	8003b38 <xTaskResumeAll>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d189      	bne.n	8003256 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <xQueueReceive+0x1bc>)
 8003344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	e780      	b.n	8003256 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003356:	f000 f8a7 	bl	80034a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800335a:	f000 fbed 	bl	8003b38 <xTaskResumeAll>
 800335e:	e77a      	b.n	8003256 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003362:	f000 f8a1 	bl	80034a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003366:	f000 fbe7 	bl	8003b38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800336a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800336c:	f000 f8ee 	bl	800354c <prvIsQueueEmpty>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f43f af6f 	beq.w	8003256 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003378:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800337a:	4618      	mov	r0, r3
 800337c:	3730      	adds	r7, #48	; 0x30
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	e000ed04 	.word	0xe000ed04

08003388 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d14d      	bne.n	800344a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 ffbc 	bl	8004330 <xTaskPriorityDisinherit>
 80033b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	e043      	b.n	800344a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d119      	bne.n	80033fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6858      	ldr	r0, [r3, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	461a      	mov	r2, r3
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	f002 f876 	bl	80054c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	441a      	add	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d32b      	bcc.n	800344a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	e026      	b.n	800344a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	68d8      	ldr	r0, [r3, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	461a      	mov	r2, r3
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	f002 f85c 	bl	80054c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	425b      	negs	r3, r3
 8003416:	441a      	add	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d207      	bcs.n	8003438 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	425b      	negs	r3, r3
 8003432:	441a      	add	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d105      	bne.n	800344a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	3b01      	subs	r3, #1
 8003448:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003452:	697b      	ldr	r3, [r7, #20]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d018      	beq.n	80034a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	441a      	add	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	429a      	cmp	r2, r3
 8003486:	d303      	bcc.n	8003490 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68d9      	ldr	r1, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	461a      	mov	r2, r3
 800349a:	6838      	ldr	r0, [r7, #0]
 800349c:	f002 f812 	bl	80054c4 <memcpy>
	}
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034b0:	f001 fc78 	bl	8004da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034bc:	e011      	b.n	80034e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3324      	adds	r3, #36	; 0x24
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fd50 	bl	8003f70 <xTaskRemoveFromEventList>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034d6:	f000 fe27 	bl	8004128 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	3b01      	subs	r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	dce9      	bgt.n	80034be <prvUnlockQueue+0x16>
 80034ea:	e000      	b.n	80034ee <prvUnlockQueue+0x46>
					break;
 80034ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	22ff      	movs	r2, #255	; 0xff
 80034f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034f6:	f001 fc85 	bl	8004e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034fa:	f001 fc53 	bl	8004da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003504:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003506:	e011      	b.n	800352c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3310      	adds	r3, #16
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fd2b 	bl	8003f70 <xTaskRemoveFromEventList>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003520:	f000 fe02 	bl	8004128 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003524:	7bbb      	ldrb	r3, [r7, #14]
 8003526:	3b01      	subs	r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800352c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003530:	2b00      	cmp	r3, #0
 8003532:	dce9      	bgt.n	8003508 <prvUnlockQueue+0x60>
 8003534:	e000      	b.n	8003538 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003536:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003540:	f001 fc60 	bl	8004e04 <vPortExitCritical>
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003554:	f001 fc26 	bl	8004da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003560:	2301      	movs	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e001      	b.n	800356a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800356a:	f001 fc4b 	bl	8004e04 <vPortExitCritical>

	return xReturn;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003580:	f001 fc10 	bl	8004da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	429a      	cmp	r2, r3
 800358e:	d102      	bne.n	8003596 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003590:	2301      	movs	r3, #1
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e001      	b.n	800359a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800359a:	f001 fc33 	bl	8004e04 <vPortExitCritical>

	return xReturn;
 800359e:	68fb      	ldr	r3, [r7, #12]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	e014      	b.n	80035e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035b8:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <vQueueAddToRegistry+0x50>)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10b      	bne.n	80035dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035c4:	490c      	ldr	r1, [pc, #48]	; (80035f8 <vQueueAddToRegistry+0x50>)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <vQueueAddToRegistry+0x50>)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035da:	e006      	b.n	80035ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3301      	adds	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b07      	cmp	r3, #7
 80035e6:	d9e7      	bls.n	80035b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000880 	.word	0x20000880

080035fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800360c:	f001 fbca 	bl	8004da4 <vPortEnterCritical>
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003616:	b25b      	sxtb	r3, r3
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d103      	bne.n	8003626 <vQueueWaitForMessageRestricted+0x2a>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800362c:	b25b      	sxtb	r3, r3
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d103      	bne.n	800363c <vQueueWaitForMessageRestricted+0x40>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800363c:	f001 fbe2 	bl	8004e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3324      	adds	r3, #36	; 0x24
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fc61 	bl	8003f18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff26 	bl	80034a8 <prvUnlockQueue>
	}
 800365c:	bf00      	nop
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af04      	add	r7, sp, #16
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	623b      	str	r3, [r7, #32]
}
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <xTaskCreateStatic+0x46>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	61fb      	str	r3, [r7, #28]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036aa:	23a8      	movs	r3, #168	; 0xa8
 80036ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2ba8      	cmp	r3, #168	; 0xa8
 80036b2:	d00a      	beq.n	80036ca <xTaskCreateStatic+0x66>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	61bb      	str	r3, [r7, #24]
}
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d01e      	beq.n	8003710 <xTaskCreateStatic+0xac>
 80036d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01b      	beq.n	8003710 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036ea:	2300      	movs	r3, #0
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	9302      	str	r3, [sp, #8]
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f850 	bl	80037a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800370a:	f000 f8f3 	bl	80038f4 <prvAddNewTaskToReadyList>
 800370e:	e001      	b.n	8003714 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003714:	697b      	ldr	r3, [r7, #20]
	}
 8003716:	4618      	mov	r0, r3
 8003718:	3728      	adds	r7, #40	; 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800371e:	b580      	push	{r7, lr}
 8003720:	b08c      	sub	sp, #48	; 0x30
 8003722:	af04      	add	r7, sp, #16
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fc58 	bl	8004fe8 <pvPortMalloc>
 8003738:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00e      	beq.n	800375e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003740:	20a8      	movs	r0, #168	; 0xa8
 8003742:	f001 fc51 	bl	8004fe8 <pvPortMalloc>
 8003746:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
 8003754:	e005      	b.n	8003762 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003756:	6978      	ldr	r0, [r7, #20]
 8003758:	f001 fd12 	bl	8005180 <vPortFree>
 800375c:	e001      	b.n	8003762 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d017      	beq.n	8003798 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	2300      	movs	r3, #0
 8003774:	9303      	str	r3, [sp, #12]
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	9302      	str	r3, [sp, #8]
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f80e 	bl	80037a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800378c:	69f8      	ldr	r0, [r7, #28]
 800378e:	f000 f8b1 	bl	80038f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003792:	2301      	movs	r3, #1
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e002      	b.n	800379e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800379e:	69bb      	ldr	r3, [r7, #24]
	}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	461a      	mov	r2, r3
 80037c0:	21a5      	movs	r1, #165	; 0xa5
 80037c2:	f001 fdfb 	bl	80053bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037d0:	3b01      	subs	r3, #1
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f023 0307 	bic.w	r3, r3, #7
 80037de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <prvInitialiseNewTask+0x58>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	617b      	str	r3, [r7, #20]
}
 80037fc:	bf00      	nop
 80037fe:	e7fe      	b.n	80037fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01f      	beq.n	8003846 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e012      	b.n	8003832 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	7819      	ldrb	r1, [r3, #0]
 8003814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	3334      	adds	r3, #52	; 0x34
 800381c:	460a      	mov	r2, r1
 800381e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d006      	beq.n	800383a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	3301      	adds	r3, #1
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2b0f      	cmp	r3, #15
 8003836:	d9e9      	bls.n	800380c <prvInitialiseNewTask+0x64>
 8003838:	e000      	b.n	800383c <prvInitialiseNewTask+0x94>
			{
				break;
 800383a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003844:	e003      	b.n	800384e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	2b37      	cmp	r3, #55	; 0x37
 8003852:	d901      	bls.n	8003858 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003854:	2337      	movs	r3, #55	; 0x37
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003862:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	2200      	movs	r2, #0
 8003868:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	3304      	adds	r3, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff f978 	bl	8002b64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	3318      	adds	r3, #24
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff f973 	bl	8002b64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003882:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	2200      	movs	r2, #0
 8003898:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	3354      	adds	r3, #84	; 0x54
 80038a8:	224c      	movs	r2, #76	; 0x4c
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 fd85 	bl	80053bc <memset>
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <prvInitialiseNewTask+0x140>)
 80038b6:	659a      	str	r2, [r3, #88]	; 0x58
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <prvInitialiseNewTask+0x144>)
 80038bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <prvInitialiseNewTask+0x148>)
 80038c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	69b8      	ldr	r0, [r7, #24]
 80038ca:	f001 f941 	bl	8004b50 <pxPortInitialiseStack>
 80038ce:	4602      	mov	r2, r0
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038e0:	bf00      	nop
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20004b14 	.word	0x20004b14
 80038ec:	20004b7c 	.word	0x20004b7c
 80038f0:	20004be4 	.word	0x20004be4

080038f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038fc:	f001 fa52 	bl	8004da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003900:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <prvAddNewTaskToReadyList+0xc4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	4a2c      	ldr	r2, [pc, #176]	; (80039b8 <prvAddNewTaskToReadyList+0xc4>)
 8003908:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800390a:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <prvAddNewTaskToReadyList+0xc8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003912:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <prvAddNewTaskToReadyList+0xc8>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003918:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <prvAddNewTaskToReadyList+0xc4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d110      	bne.n	8003942 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003920:	f000 fc26 	bl	8004170 <prvInitialiseTaskLists>
 8003924:	e00d      	b.n	8003942 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003926:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <prvAddNewTaskToReadyList+0xcc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <prvAddNewTaskToReadyList+0xc8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	429a      	cmp	r2, r3
 800393a:	d802      	bhi.n	8003942 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <prvAddNewTaskToReadyList+0xc8>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <prvAddNewTaskToReadyList+0xd0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3301      	adds	r3, #1
 8003948:	4a1e      	ldr	r2, [pc, #120]	; (80039c4 <prvAddNewTaskToReadyList+0xd0>)
 800394a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <prvAddNewTaskToReadyList+0xd0>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <prvAddNewTaskToReadyList+0xd4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d903      	bls.n	8003968 <prvAddNewTaskToReadyList+0x74>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <prvAddNewTaskToReadyList+0xd4>)
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <prvAddNewTaskToReadyList+0xd8>)
 8003976:	441a      	add	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f7ff f8fd 	bl	8002b7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003984:	f001 fa3e 	bl	8004e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003988:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <prvAddNewTaskToReadyList+0xcc>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00e      	beq.n	80039ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <prvAddNewTaskToReadyList+0xc8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	429a      	cmp	r2, r3
 800399c:	d207      	bcs.n	80039ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <prvAddNewTaskToReadyList+0xdc>)
 80039a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000d94 	.word	0x20000d94
 80039bc:	200008c0 	.word	0x200008c0
 80039c0:	20000da0 	.word	0x20000da0
 80039c4:	20000db0 	.word	0x20000db0
 80039c8:	20000d9c 	.word	0x20000d9c
 80039cc:	200008c4 	.word	0x200008c4
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d017      	beq.n	8003a16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039e6:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <vTaskDelay+0x60>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <vTaskDelay+0x30>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	60bb      	str	r3, [r7, #8]
}
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a04:	f000 f88a 	bl	8003b1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a08:	2100      	movs	r1, #0
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fcfe 	bl	800440c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a10:	f000 f892 	bl	8003b38 <xTaskResumeAll>
 8003a14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <vTaskDelay+0x64>)
 8003a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000dbc 	.word	0x20000dbc
 8003a38:	e000ed04 	.word	0xe000ed04

08003a3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a4a:	463a      	mov	r2, r7
 8003a4c:	1d39      	adds	r1, r7, #4
 8003a4e:	f107 0308 	add.w	r3, r7, #8
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff f832 	bl	8002abc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	9202      	str	r2, [sp, #8]
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	460a      	mov	r2, r1
 8003a6a:	4924      	ldr	r1, [pc, #144]	; (8003afc <vTaskStartScheduler+0xc0>)
 8003a6c:	4824      	ldr	r0, [pc, #144]	; (8003b00 <vTaskStartScheduler+0xc4>)
 8003a6e:	f7ff fdf9 	bl	8003664 <xTaskCreateStatic>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4a23      	ldr	r2, [pc, #140]	; (8003b04 <vTaskStartScheduler+0xc8>)
 8003a76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a78:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <vTaskStartScheduler+0xc8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a80:	2301      	movs	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	e001      	b.n	8003a8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d102      	bne.n	8003a96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a90:	f000 fd10 	bl	80044b4 <xTimerCreateTimerTask>
 8003a94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d11b      	bne.n	8003ad4 <vTaskStartScheduler+0x98>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	613b      	str	r3, [r7, #16]
}
 8003aae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <vTaskStartScheduler+0xcc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3354      	adds	r3, #84	; 0x54
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <vTaskStartScheduler+0xd0>)
 8003ab8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <vTaskStartScheduler+0xd4>)
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <vTaskStartScheduler+0xd8>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <vTaskStartScheduler+0xdc>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ace:	f001 f8c7 	bl	8004c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ad2:	e00e      	b.n	8003af2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d10a      	bne.n	8003af2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	60fb      	str	r3, [r7, #12]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <vTaskStartScheduler+0xb4>
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	080055cc 	.word	0x080055cc
 8003b00:	08004141 	.word	0x08004141
 8003b04:	20000db8 	.word	0x20000db8
 8003b08:	200008c0 	.word	0x200008c0
 8003b0c:	20000060 	.word	0x20000060
 8003b10:	20000db4 	.word	0x20000db4
 8003b14:	20000da0 	.word	0x20000da0
 8003b18:	20000d98 	.word	0x20000d98

08003b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <vTaskSuspendAll+0x18>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a03      	ldr	r2, [pc, #12]	; (8003b34 <vTaskSuspendAll+0x18>)
 8003b28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	20000dbc 	.word	0x20000dbc

08003b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b46:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <xTaskResumeAll+0x118>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	603b      	str	r3, [r7, #0]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b64:	f001 f91e 	bl	8004da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b68:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <xTaskResumeAll+0x118>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	4a38      	ldr	r2, [pc, #224]	; (8003c50 <xTaskResumeAll+0x118>)
 8003b70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b72:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <xTaskResumeAll+0x118>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d162      	bne.n	8003c40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b7a:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <xTaskResumeAll+0x11c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d05e      	beq.n	8003c40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b82:	e02f      	b.n	8003be4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b84:	4b34      	ldr	r3, [pc, #208]	; (8003c58 <xTaskResumeAll+0x120>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3318      	adds	r3, #24
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff f851 	bl	8002c38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f84c 	bl	8002c38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <xTaskResumeAll+0x124>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d903      	bls.n	8003bb4 <xTaskResumeAll+0x7c>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	4a2a      	ldr	r2, [pc, #168]	; (8003c5c <xTaskResumeAll+0x124>)
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <xTaskResumeAll+0x128>)
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f7fe ffd7 	bl	8002b7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <xTaskResumeAll+0x12c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003bde:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <xTaskResumeAll+0x130>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003be4:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <xTaskResumeAll+0x120>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1cb      	bne.n	8003b84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bf2:	f000 fb5f 	bl	80042b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <xTaskResumeAll+0x134>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d010      	beq.n	8003c24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c02:	f000 f847 	bl	8003c94 <xTaskIncrementTick>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c0c:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <xTaskResumeAll+0x130>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f1      	bne.n	8003c02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <xTaskResumeAll+0x134>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c24:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <xTaskResumeAll+0x130>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d009      	beq.n	8003c40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <xTaskResumeAll+0x138>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c40:	f001 f8e0 	bl	8004e04 <vPortExitCritical>

	return xAlreadyYielded;
 8003c44:	68bb      	ldr	r3, [r7, #8]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000dbc 	.word	0x20000dbc
 8003c54:	20000d94 	.word	0x20000d94
 8003c58:	20000d54 	.word	0x20000d54
 8003c5c:	20000d9c 	.word	0x20000d9c
 8003c60:	200008c4 	.word	0x200008c4
 8003c64:	200008c0 	.word	0x200008c0
 8003c68:	20000da8 	.word	0x20000da8
 8003c6c:	20000da4 	.word	0x20000da4
 8003c70:	e000ed04 	.word	0xe000ed04

08003c74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <xTaskGetTickCount+0x1c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c80:	687b      	ldr	r3, [r7, #4]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20000d98 	.word	0x20000d98

08003c94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c9e:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <xTaskIncrementTick+0x148>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 808f 	bne.w	8003dc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ca8:	4b4d      	ldr	r3, [pc, #308]	; (8003de0 <xTaskIncrementTick+0x14c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cb0:	4a4b      	ldr	r2, [pc, #300]	; (8003de0 <xTaskIncrementTick+0x14c>)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d120      	bne.n	8003cfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cbc:	4b49      	ldr	r3, [pc, #292]	; (8003de4 <xTaskIncrementTick+0x150>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <xTaskIncrementTick+0x48>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	603b      	str	r3, [r7, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <xTaskIncrementTick+0x46>
 8003cdc:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <xTaskIncrementTick+0x150>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	4b41      	ldr	r3, [pc, #260]	; (8003de8 <xTaskIncrementTick+0x154>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a3f      	ldr	r2, [pc, #252]	; (8003de4 <xTaskIncrementTick+0x150>)
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4a3f      	ldr	r2, [pc, #252]	; (8003de8 <xTaskIncrementTick+0x154>)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b3e      	ldr	r3, [pc, #248]	; (8003dec <xTaskIncrementTick+0x158>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	4a3d      	ldr	r2, [pc, #244]	; (8003dec <xTaskIncrementTick+0x158>)
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	f000 fadb 	bl	80042b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cfe:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <xTaskIncrementTick+0x15c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d349      	bcc.n	8003d9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d08:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <xTaskIncrementTick+0x150>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d12:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <xTaskIncrementTick+0x15c>)
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295
 8003d18:	601a      	str	r2, [r3, #0]
					break;
 8003d1a:	e03f      	b.n	8003d9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d1c:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <xTaskIncrementTick+0x150>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d203      	bcs.n	8003d3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d34:	4a2e      	ldr	r2, [pc, #184]	; (8003df0 <xTaskIncrementTick+0x15c>)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d3a:	e02f      	b.n	8003d9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe ff79 	bl	8002c38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	3318      	adds	r3, #24
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe ff70 	bl	8002c38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <xTaskIncrementTick+0x160>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d903      	bls.n	8003d6c <xTaskIncrementTick+0xd8>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <xTaskIncrementTick+0x160>)
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <xTaskIncrementTick+0x164>)
 8003d7a:	441a      	add	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f7fe fefb 	bl	8002b7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <xTaskIncrementTick+0x168>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d3b8      	bcc.n	8003d08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d96:	2301      	movs	r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9a:	e7b5      	b.n	8003d08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d9c:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <xTaskIncrementTick+0x168>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da2:	4915      	ldr	r1, [pc, #84]	; (8003df8 <xTaskIncrementTick+0x164>)
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d901      	bls.n	8003db8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <xTaskIncrementTick+0x16c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e004      	b.n	8003dd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <xTaskIncrementTick+0x170>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <xTaskIncrementTick+0x170>)
 8003dce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003dd0:	697b      	ldr	r3, [r7, #20]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000dbc 	.word	0x20000dbc
 8003de0:	20000d98 	.word	0x20000d98
 8003de4:	20000d4c 	.word	0x20000d4c
 8003de8:	20000d50 	.word	0x20000d50
 8003dec:	20000dac 	.word	0x20000dac
 8003df0:	20000db4 	.word	0x20000db4
 8003df4:	20000d9c 	.word	0x20000d9c
 8003df8:	200008c4 	.word	0x200008c4
 8003dfc:	200008c0 	.word	0x200008c0
 8003e00:	20000da8 	.word	0x20000da8
 8003e04:	20000da4 	.word	0x20000da4

08003e08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <vTaskSwitchContext+0xb0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e16:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <vTaskSwitchContext+0xb4>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e1c:	e046      	b.n	8003eac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003e1e:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <vTaskSwitchContext+0xb4>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e24:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <vTaskSwitchContext+0xb8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e010      	b.n	8003e4e <vTaskSwitchContext+0x46>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <vTaskSwitchContext+0x40>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	607b      	str	r3, [r7, #4]
}
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <vTaskSwitchContext+0x3e>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	491d      	ldr	r1, [pc, #116]	; (8003ec4 <vTaskSwitchContext+0xbc>)
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0e4      	beq.n	8003e2c <vTaskSwitchContext+0x24>
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <vTaskSwitchContext+0xbc>)
 8003e6e:	4413      	add	r3, r2
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	3308      	adds	r3, #8
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d104      	bne.n	8003e92 <vTaskSwitchContext+0x8a>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <vTaskSwitchContext+0xc0>)
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <vTaskSwitchContext+0xb8>)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <vTaskSwitchContext+0xc0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3354      	adds	r3, #84	; 0x54
 8003ea8:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <vTaskSwitchContext+0xc4>)
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	20000dbc 	.word	0x20000dbc
 8003ebc:	20000da8 	.word	0x20000da8
 8003ec0:	20000d9c 	.word	0x20000d9c
 8003ec4:	200008c4 	.word	0x200008c4
 8003ec8:	200008c0 	.word	0x200008c0
 8003ecc:	20000060 	.word	0x20000060

08003ed0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	60fb      	str	r3, [r7, #12]
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <vTaskPlaceOnEventList+0x44>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3318      	adds	r3, #24
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe fe61 	bl	8002bc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f04:	2101      	movs	r1, #1
 8003f06:	6838      	ldr	r0, [r7, #0]
 8003f08:	f000 fa80 	bl	800440c <prvAddCurrentTaskToDelayedList>
}
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200008c0 	.word	0x200008c0

08003f18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	617b      	str	r3, [r7, #20]
}
 8003f3c:	bf00      	nop
 8003f3e:	e7fe      	b.n	8003f3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <vTaskPlaceOnEventListRestricted+0x54>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3318      	adds	r3, #24
 8003f46:	4619      	mov	r1, r3
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7fe fe18 	bl	8002b7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295
 8003f58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	68b8      	ldr	r0, [r7, #8]
 8003f5e:	f000 fa55 	bl	800440c <prvAddCurrentTaskToDelayedList>
	}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	200008c0 	.word	0x200008c0

08003f70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60fb      	str	r3, [r7, #12]
}
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	3318      	adds	r3, #24
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fe49 	bl	8002c38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <xTaskRemoveFromEventList+0xb0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11d      	bne.n	8003fea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fe40 	bl	8002c38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <xTaskRemoveFromEventList+0xb4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d903      	bls.n	8003fcc <xTaskRemoveFromEventList+0x5c>
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	4a16      	ldr	r2, [pc, #88]	; (8004024 <xTaskRemoveFromEventList+0xb4>)
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4a13      	ldr	r2, [pc, #76]	; (8004028 <xTaskRemoveFromEventList+0xb8>)
 8003fda:	441a      	add	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f7fe fdcb 	bl	8002b7e <vListInsertEnd>
 8003fe8:	e005      	b.n	8003ff6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	3318      	adds	r3, #24
 8003fee:	4619      	mov	r1, r3
 8003ff0:	480e      	ldr	r0, [pc, #56]	; (800402c <xTaskRemoveFromEventList+0xbc>)
 8003ff2:	f7fe fdc4 	bl	8002b7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <xTaskRemoveFromEventList+0xc0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	429a      	cmp	r2, r3
 8004002:	d905      	bls.n	8004010 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <xTaskRemoveFromEventList+0xc4>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e001      	b.n	8004014 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004014:	697b      	ldr	r3, [r7, #20]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000dbc 	.word	0x20000dbc
 8004024:	20000d9c 	.word	0x20000d9c
 8004028:	200008c4 	.word	0x200008c4
 800402c:	20000d54 	.word	0x20000d54
 8004030:	200008c0 	.word	0x200008c0
 8004034:	20000da8 	.word	0x20000da8

08004038 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <vTaskInternalSetTimeOutState+0x24>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <vTaskInternalSetTimeOutState+0x28>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	605a      	str	r2, [r3, #4]
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	20000dac 	.word	0x20000dac
 8004060:	20000d98 	.word	0x20000d98

08004064 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	613b      	str	r3, [r7, #16]
}
 8004086:	bf00      	nop
 8004088:	e7fe      	b.n	8004088 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040a6:	f000 fe7d 	bl	8004da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <xTaskCheckForTimeOut+0xbc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d102      	bne.n	80040ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	e023      	b.n	8004112 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <xTaskCheckForTimeOut+0xc0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d007      	beq.n	80040e6 <xTaskCheckForTimeOut+0x82>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d302      	bcc.n	80040e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040e0:	2301      	movs	r3, #1
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	e015      	b.n	8004112 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d20b      	bcs.n	8004108 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad2      	subs	r2, r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff ff9b 	bl	8004038 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	e004      	b.n	8004112 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800410e:	2301      	movs	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004112:	f000 fe77 	bl	8004e04 <vPortExitCritical>

	return xReturn;
 8004116:	69fb      	ldr	r3, [r7, #28]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000d98 	.word	0x20000d98
 8004124:	20000dac 	.word	0x20000dac

08004128 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <vTaskMissedYield+0x14>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]
}
 8004132:	bf00      	nop
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	20000da8 	.word	0x20000da8

08004140 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004148:	f000 f852 	bl	80041f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <prvIdleTask+0x28>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d9f9      	bls.n	8004148 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <prvIdleTask+0x2c>)
 8004156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004164:	e7f0      	b.n	8004148 <prvIdleTask+0x8>
 8004166:	bf00      	nop
 8004168:	200008c4 	.word	0x200008c4
 800416c:	e000ed04 	.word	0xe000ed04

08004170 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004176:	2300      	movs	r3, #0
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	e00c      	b.n	8004196 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <prvInitialiseTaskLists+0x60>)
 8004188:	4413      	add	r3, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe fcca 	bl	8002b24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3301      	adds	r3, #1
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b37      	cmp	r3, #55	; 0x37
 800419a:	d9ef      	bls.n	800417c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800419c:	480d      	ldr	r0, [pc, #52]	; (80041d4 <prvInitialiseTaskLists+0x64>)
 800419e:	f7fe fcc1 	bl	8002b24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041a2:	480d      	ldr	r0, [pc, #52]	; (80041d8 <prvInitialiseTaskLists+0x68>)
 80041a4:	f7fe fcbe 	bl	8002b24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041a8:	480c      	ldr	r0, [pc, #48]	; (80041dc <prvInitialiseTaskLists+0x6c>)
 80041aa:	f7fe fcbb 	bl	8002b24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041ae:	480c      	ldr	r0, [pc, #48]	; (80041e0 <prvInitialiseTaskLists+0x70>)
 80041b0:	f7fe fcb8 	bl	8002b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041b4:	480b      	ldr	r0, [pc, #44]	; (80041e4 <prvInitialiseTaskLists+0x74>)
 80041b6:	f7fe fcb5 	bl	8002b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <prvInitialiseTaskLists+0x78>)
 80041bc:	4a05      	ldr	r2, [pc, #20]	; (80041d4 <prvInitialiseTaskLists+0x64>)
 80041be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <prvInitialiseTaskLists+0x7c>)
 80041c2:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <prvInitialiseTaskLists+0x68>)
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	200008c4 	.word	0x200008c4
 80041d4:	20000d24 	.word	0x20000d24
 80041d8:	20000d38 	.word	0x20000d38
 80041dc:	20000d54 	.word	0x20000d54
 80041e0:	20000d68 	.word	0x20000d68
 80041e4:	20000d80 	.word	0x20000d80
 80041e8:	20000d4c 	.word	0x20000d4c
 80041ec:	20000d50 	.word	0x20000d50

080041f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041f6:	e019      	b.n	800422c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041f8:	f000 fdd4 	bl	8004da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <prvCheckTasksWaitingTermination+0x50>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe fd15 	bl	8002c38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <prvCheckTasksWaitingTermination+0x54>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3b01      	subs	r3, #1
 8004214:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <prvCheckTasksWaitingTermination+0x54>)
 8004216:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <prvCheckTasksWaitingTermination+0x58>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3b01      	subs	r3, #1
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <prvCheckTasksWaitingTermination+0x58>)
 8004220:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004222:	f000 fdef 	bl	8004e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f810 	bl	800424c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <prvCheckTasksWaitingTermination+0x58>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e1      	bne.n	80041f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000d68 	.word	0x20000d68
 8004244:	20000d94 	.word	0x20000d94
 8004248:	20000d7c 	.word	0x20000d7c

0800424c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3354      	adds	r3, #84	; 0x54
 8004258:	4618      	mov	r0, r3
 800425a:	f001 f8b7 	bl	80053cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	4618      	mov	r0, r3
 800426e:	f000 ff87 	bl	8005180 <vPortFree>
				vPortFree( pxTCB );
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 ff84 	bl	8005180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004278:	e018      	b.n	80042ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004280:	2b01      	cmp	r3, #1
 8004282:	d103      	bne.n	800428c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 ff7b 	bl	8005180 <vPortFree>
	}
 800428a:	e00f      	b.n	80042ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004292:	2b02      	cmp	r3, #2
 8004294:	d00a      	beq.n	80042ac <prvDeleteTCB+0x60>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60fb      	str	r3, [r7, #12]
}
 80042a8:	bf00      	nop
 80042aa:	e7fe      	b.n	80042aa <prvDeleteTCB+0x5e>
	}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <prvResetNextTaskUnblockTime+0x38>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <prvResetNextTaskUnblockTime+0x3c>)
 80042c6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042cc:	e008      	b.n	80042e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <prvResetNextTaskUnblockTime+0x38>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <prvResetNextTaskUnblockTime+0x3c>)
 80042de:	6013      	str	r3, [r2, #0]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20000d4c 	.word	0x20000d4c
 80042f0:	20000db4 	.word	0x20000db4

080042f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <xTaskGetSchedulerState+0x34>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004302:	2301      	movs	r3, #1
 8004304:	607b      	str	r3, [r7, #4]
 8004306:	e008      	b.n	800431a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <xTaskGetSchedulerState+0x38>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004310:	2302      	movs	r3, #2
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	e001      	b.n	800431a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800431a:	687b      	ldr	r3, [r7, #4]
	}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	20000da0 	.word	0x20000da0
 800432c:	20000dbc 	.word	0x20000dbc

08004330 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d056      	beq.n	80043f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004346:	4b2e      	ldr	r3, [pc, #184]	; (8004400 <xTaskPriorityDisinherit+0xd0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	429a      	cmp	r2, r3
 800434e:	d00a      	beq.n	8004366 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60fb      	str	r3, [r7, #12]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	60bb      	str	r3, [r7, #8]
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	429a      	cmp	r2, r3
 8004398:	d02c      	beq.n	80043f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d128      	bne.n	80043f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe fc46 	bl	8002c38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <xTaskPriorityDisinherit+0xd4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d903      	bls.n	80043d4 <xTaskPriorityDisinherit+0xa4>
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <xTaskPriorityDisinherit+0xd4>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4a09      	ldr	r2, [pc, #36]	; (8004408 <xTaskPriorityDisinherit+0xd8>)
 80043e2:	441a      	add	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f7fe fbc7 	bl	8002b7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043f4:	697b      	ldr	r3, [r7, #20]
	}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200008c0 	.word	0x200008c0
 8004404:	20000d9c 	.word	0x20000d9c
 8004408:	200008c4 	.word	0x200008c4

0800440c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004416:	4b21      	ldr	r3, [pc, #132]	; (800449c <prvAddCurrentTaskToDelayedList+0x90>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800441c:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3304      	adds	r3, #4
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fc08 	bl	8002c38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d10a      	bne.n	8004446 <prvAddCurrentTaskToDelayedList+0x3a>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004436:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4819      	ldr	r0, [pc, #100]	; (80044a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004440:	f7fe fb9d 	bl	8002b7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004444:	e026      	b.n	8004494 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4413      	add	r3, r2
 800444c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	429a      	cmp	r2, r3
 800445c:	d209      	bcs.n	8004472 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3304      	adds	r3, #4
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f7fe fbab 	bl	8002bc6 <vListInsert>
}
 8004470:	e010      	b.n	8004494 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3304      	adds	r3, #4
 800447c:	4619      	mov	r1, r3
 800447e:	4610      	mov	r0, r2
 8004480:	f7fe fba1 	bl	8002bc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	d202      	bcs.n	8004494 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800448e:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	6013      	str	r3, [r2, #0]
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000d98 	.word	0x20000d98
 80044a0:	200008c0 	.word	0x200008c0
 80044a4:	20000d80 	.word	0x20000d80
 80044a8:	20000d50 	.word	0x20000d50
 80044ac:	20000d4c 	.word	0x20000d4c
 80044b0:	20000db4 	.word	0x20000db4

080044b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044be:	f000 fb07 	bl	8004ad0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044c2:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <xTimerCreateTimerTask+0x80>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d021      	beq.n	800450e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044d2:	1d3a      	adds	r2, r7, #4
 80044d4:	f107 0108 	add.w	r1, r7, #8
 80044d8:	f107 030c 	add.w	r3, r7, #12
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe fb07 	bl	8002af0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	9202      	str	r2, [sp, #8]
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	2302      	movs	r3, #2
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2300      	movs	r3, #0
 80044f2:	460a      	mov	r2, r1
 80044f4:	4910      	ldr	r1, [pc, #64]	; (8004538 <xTimerCreateTimerTask+0x84>)
 80044f6:	4811      	ldr	r0, [pc, #68]	; (800453c <xTimerCreateTimerTask+0x88>)
 80044f8:	f7ff f8b4 	bl	8003664 <xTaskCreateStatic>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4a10      	ldr	r2, [pc, #64]	; (8004540 <xTimerCreateTimerTask+0x8c>)
 8004500:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <xTimerCreateTimerTask+0x8c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800450a:	2301      	movs	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	613b      	str	r3, [r7, #16]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800452a:	697b      	ldr	r3, [r7, #20]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000df0 	.word	0x20000df0
 8004538:	080055d4 	.word	0x080055d4
 800453c:	08004679 	.word	0x08004679
 8004540:	20000df4 	.word	0x20000df4

08004544 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <xTimerGenericCommand+0x2e>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	623b      	str	r3, [r7, #32]
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004572:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <xTimerGenericCommand+0x98>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d02a      	beq.n	80045d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b05      	cmp	r3, #5
 800458a:	dc18      	bgt.n	80045be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800458c:	f7ff feb2 	bl	80042f4 <xTaskGetSchedulerState>
 8004590:	4603      	mov	r3, r0
 8004592:	2b02      	cmp	r3, #2
 8004594:	d109      	bne.n	80045aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <xTimerGenericCommand+0x98>)
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	f107 0110 	add.w	r1, r7, #16
 800459e:	2300      	movs	r3, #0
 80045a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a2:	f7fe fc77 	bl	8002e94 <xQueueGenericSend>
 80045a6:	6278      	str	r0, [r7, #36]	; 0x24
 80045a8:	e012      	b.n	80045d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <xTimerGenericCommand+0x98>)
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	f107 0110 	add.w	r1, r7, #16
 80045b2:	2300      	movs	r3, #0
 80045b4:	2200      	movs	r2, #0
 80045b6:	f7fe fc6d 	bl	8002e94 <xQueueGenericSend>
 80045ba:	6278      	str	r0, [r7, #36]	; 0x24
 80045bc:	e008      	b.n	80045d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <xTimerGenericCommand+0x98>)
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	f107 0110 	add.w	r1, r7, #16
 80045c6:	2300      	movs	r3, #0
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	f7fe fd61 	bl	8003090 <xQueueGenericSendFromISR>
 80045ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3728      	adds	r7, #40	; 0x28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000df0 	.word	0x20000df0

080045e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ea:	4b22      	ldr	r3, [pc, #136]	; (8004674 <prvProcessExpiredTimer+0x94>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fb1d 	bl	8002c38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d022      	beq.n	8004652 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	18d1      	adds	r1, r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	f000 f8d1 	bl	80047c0 <prvInsertTimerInActiveList>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01f      	beq.n	8004664 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004624:	2300      	movs	r3, #0
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2300      	movs	r3, #0
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	2100      	movs	r1, #0
 800462e:	6978      	ldr	r0, [r7, #20]
 8004630:	f7ff ff88 	bl	8004544 <xTimerGenericCommand>
 8004634:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d113      	bne.n	8004664 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60fb      	str	r3, [r7, #12]
}
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	b2da      	uxtb	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	6978      	ldr	r0, [r7, #20]
 800466a:	4798      	blx	r3
}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000de8 	.word	0x20000de8

08004678 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004680:	f107 0308 	add.w	r3, r7, #8
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f857 	bl	8004738 <prvGetNextExpireTime>
 800468a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4619      	mov	r1, r3
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f803 	bl	800469c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004696:	f000 f8d5 	bl	8004844 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800469a:	e7f1      	b.n	8004680 <prvTimerTask+0x8>

0800469c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046a6:	f7ff fa39 	bl	8003b1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f866 	bl	8004780 <prvSampleTimeNow>
 80046b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d130      	bne.n	800471e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <prvProcessTimerOrBlockTask+0x3c>
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d806      	bhi.n	80046d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046ca:	f7ff fa35 	bl	8003b38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ff85 	bl	80045e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046d6:	e024      	b.n	8004722 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <prvProcessTimerOrBlockTask+0x90>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <prvProcessTimerOrBlockTask+0x50>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <prvProcessTimerOrBlockTask+0x52>
 80046ec:	2300      	movs	r3, #0
 80046ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <prvProcessTimerOrBlockTask+0x94>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	4619      	mov	r1, r3
 80046fe:	f7fe ff7d 	bl	80035fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004702:	f7ff fa19 	bl	8003b38 <xTaskResumeAll>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800470c:	4b09      	ldr	r3, [pc, #36]	; (8004734 <prvProcessTimerOrBlockTask+0x98>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
}
 800471c:	e001      	b.n	8004722 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800471e:	f7ff fa0b 	bl	8003b38 <xTaskResumeAll>
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000dec 	.word	0x20000dec
 8004730:	20000df0 	.word	0x20000df0
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <prvGetNextExpireTime+0x44>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <prvGetNextExpireTime+0x16>
 800474a:	2201      	movs	r2, #1
 800474c:	e000      	b.n	8004750 <prvGetNextExpireTime+0x18>
 800474e:	2200      	movs	r2, #0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d105      	bne.n	8004768 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <prvGetNextExpireTime+0x44>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e001      	b.n	800476c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800476c:	68fb      	ldr	r3, [r7, #12]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000de8 	.word	0x20000de8

08004780 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004788:	f7ff fa74 	bl	8003c74 <xTaskGetTickCount>
 800478c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <prvSampleTimeNow+0x3c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	429a      	cmp	r2, r3
 8004796:	d205      	bcs.n	80047a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004798:	f000 f936 	bl	8004a08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e002      	b.n	80047aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047aa:	4a04      	ldr	r2, [pc, #16]	; (80047bc <prvSampleTimeNow+0x3c>)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047b0:	68fb      	ldr	r3, [r7, #12]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000df8 	.word	0x20000df8

080047c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d812      	bhi.n	800480c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	1ad2      	subs	r2, r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e01b      	b.n	8004832 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <prvInsertTimerInActiveList+0x7c>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fe f9de 	bl	8002bc6 <vListInsert>
 800480a:	e012      	b.n	8004832 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d206      	bcs.n	8004822 <prvInsertTimerInActiveList+0x62>
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d302      	bcc.n	8004822 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800481c:	2301      	movs	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e007      	b.n	8004832 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004822:	4b07      	ldr	r3, [pc, #28]	; (8004840 <prvInsertTimerInActiveList+0x80>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3304      	adds	r3, #4
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f7fe f9ca 	bl	8002bc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004832:	697b      	ldr	r3, [r7, #20]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000dec 	.word	0x20000dec
 8004840:	20000de8 	.word	0x20000de8

08004844 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08e      	sub	sp, #56	; 0x38
 8004848:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800484a:	e0ca      	b.n	80049e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da18      	bge.n	8004884 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004852:	1d3b      	adds	r3, r7, #4
 8004854:	3304      	adds	r3, #4
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	61fb      	str	r3, [r7, #28]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800487a:	6850      	ldr	r0, [r2, #4]
 800487c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800487e:	6892      	ldr	r2, [r2, #8]
 8004880:	4611      	mov	r1, r2
 8004882:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f2c0 80ab 	blt.w	80049e2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	3304      	adds	r3, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe f9cb 	bl	8002c38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048a2:	463b      	mov	r3, r7
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ff6b 	bl	8004780 <prvSampleTimeNow>
 80048aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b09      	cmp	r3, #9
 80048b0:	f200 8096 	bhi.w	80049e0 <prvProcessReceivedCommands+0x19c>
 80048b4:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <prvProcessReceivedCommands+0x78>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048e5 	.word	0x080048e5
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048e5 	.word	0x080048e5
 80048c8:	08004959 	.word	0x08004959
 80048cc:	0800496d 	.word	0x0800496d
 80048d0:	080049b7 	.word	0x080049b7
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	080048e5 	.word	0x080048e5
 80048dc:	08004959 	.word	0x08004959
 80048e0:	0800496d 	.word	0x0800496d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	18d1      	adds	r1, r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004904:	f7ff ff5c 	bl	80047c0 <prvInsertTimerInActiveList>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d069      	beq.n	80049e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004914:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05e      	beq.n	80049e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	441a      	add	r2, r3
 800492c:	2300      	movs	r3, #0
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	2300      	movs	r3, #0
 8004932:	2100      	movs	r1, #0
 8004934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004936:	f7ff fe05 	bl	8004544 <xTimerGenericCommand>
 800493a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d14f      	bne.n	80049e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	61bb      	str	r3, [r7, #24]
}
 8004954:	bf00      	nop
 8004956:	e7fe      	b.n	8004956 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800496a:	e03a      	b.n	80049e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b2da      	uxtb	r2, r3
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	617b      	str	r3, [r7, #20]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	18d1      	adds	r1, r2, r3
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b0:	f7ff ff06 	bl	80047c0 <prvInsertTimerInActiveList>
					break;
 80049b4:	e015      	b.n	80049e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80049c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c6:	f000 fbdb 	bl	8005180 <vPortFree>
 80049ca:	e00a      	b.n	80049e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049de:	e000      	b.n	80049e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80049e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <prvProcessReceivedCommands+0x1c0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1d39      	adds	r1, r7, #4
 80049e8:	2200      	movs	r2, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe fbec 	bl	80031c8 <xQueueReceive>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f47f af2a 	bne.w	800484c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	3730      	adds	r7, #48	; 0x30
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000df0 	.word	0x20000df0

08004a08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a0e:	e048      	b.n	8004aa2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a10:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <prvSwitchTimerLists+0xc0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <prvSwitchTimerLists+0xc0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fe f905 	bl	8002c38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d02e      	beq.n	8004aa2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d90e      	bls.n	8004a74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a62:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <prvSwitchTimerLists+0xc0>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f7fe f8aa 	bl	8002bc6 <vListInsert>
 8004a72:	e016      	b.n	8004aa2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a74:	2300      	movs	r3, #0
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f7ff fd60 	bl	8004544 <xTimerGenericCommand>
 8004a84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	603b      	str	r3, [r7, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <prvSwitchTimerLists+0xc0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1b1      	bne.n	8004a10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <prvSwitchTimerLists+0xc0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <prvSwitchTimerLists+0xc4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a04      	ldr	r2, [pc, #16]	; (8004ac8 <prvSwitchTimerLists+0xc0>)
 8004ab8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004aba:	4a04      	ldr	r2, [pc, #16]	; (8004acc <prvSwitchTimerLists+0xc4>)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	6013      	str	r3, [r2, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000de8 	.word	0x20000de8
 8004acc:	20000dec 	.word	0x20000dec

08004ad0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ad6:	f000 f965 	bl	8004da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <prvCheckForValidListAndQueue+0x60>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d120      	bne.n	8004b24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ae2:	4814      	ldr	r0, [pc, #80]	; (8004b34 <prvCheckForValidListAndQueue+0x64>)
 8004ae4:	f7fe f81e 	bl	8002b24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ae8:	4813      	ldr	r0, [pc, #76]	; (8004b38 <prvCheckForValidListAndQueue+0x68>)
 8004aea:	f7fe f81b 	bl	8002b24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004aee:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <prvCheckForValidListAndQueue+0x6c>)
 8004af0:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <prvCheckForValidListAndQueue+0x64>)
 8004af2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <prvCheckForValidListAndQueue+0x70>)
 8004af6:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <prvCheckForValidListAndQueue+0x68>)
 8004af8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004afa:	2300      	movs	r3, #0
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <prvCheckForValidListAndQueue+0x74>)
 8004b00:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <prvCheckForValidListAndQueue+0x78>)
 8004b02:	2110      	movs	r1, #16
 8004b04:	200a      	movs	r0, #10
 8004b06:	f7fe f929 	bl	8002d5c <xQueueGenericCreateStatic>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <prvCheckForValidListAndQueue+0x60>)
 8004b0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <prvCheckForValidListAndQueue+0x60>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b18:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <prvCheckForValidListAndQueue+0x60>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	490b      	ldr	r1, [pc, #44]	; (8004b4c <prvCheckForValidListAndQueue+0x7c>)
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fd42 	bl	80035a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b24:	f000 f96e 	bl	8004e04 <vPortExitCritical>
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000df0 	.word	0x20000df0
 8004b34:	20000dc0 	.word	0x20000dc0
 8004b38:	20000dd4 	.word	0x20000dd4
 8004b3c:	20000de8 	.word	0x20000de8
 8004b40:	20000dec 	.word	0x20000dec
 8004b44:	20000e9c 	.word	0x20000e9c
 8004b48:	20000dfc 	.word	0x20000dfc
 8004b4c:	080055dc 	.word	0x080055dc

08004b50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3b04      	subs	r3, #4
 8004b60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3b04      	subs	r3, #4
 8004b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f023 0201 	bic.w	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3b04      	subs	r3, #4
 8004b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b80:	4a0c      	ldr	r2, [pc, #48]	; (8004bb4 <pxPortInitialiseStack+0x64>)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3b14      	subs	r3, #20
 8004b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3b04      	subs	r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f06f 0202 	mvn.w	r2, #2
 8004b9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3b20      	subs	r3, #32
 8004ba4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	08004bb9 	.word	0x08004bb9

08004bb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <prvTaskExitError+0x54>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d00a      	beq.n	8004be2 <prvTaskExitError+0x2a>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60fb      	str	r3, [r7, #12]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <prvTaskExitError+0x28>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	60bb      	str	r3, [r7, #8]
}
 8004bf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bf6:	bf00      	nop
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0fc      	beq.n	8004bf8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	20000010 	.word	0x20000010

08004c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <pxCurrentTCBConst2>)
 8004c12:	6819      	ldr	r1, [r3, #0]
 8004c14:	6808      	ldr	r0, [r1, #0]
 8004c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	f380 8809 	msr	PSP, r0
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8811 	msr	BASEPRI, r0
 8004c2a:	4770      	bx	lr
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst2>:
 8004c30:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c38:	4808      	ldr	r0, [pc, #32]	; (8004c5c <prvPortStartFirstTask+0x24>)
 8004c3a:	6800      	ldr	r0, [r0, #0]
 8004c3c:	6800      	ldr	r0, [r0, #0]
 8004c3e:	f380 8808 	msr	MSP, r0
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8814 	msr	CONTROL, r0
 8004c4a:	b662      	cpsie	i
 8004c4c:	b661      	cpsie	f
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	df00      	svc	0
 8004c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c5a:	bf00      	nop
 8004c5c:	e000ed08 	.word	0xe000ed08

08004c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c66:	4b46      	ldr	r3, [pc, #280]	; (8004d80 <xPortStartScheduler+0x120>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a46      	ldr	r2, [pc, #280]	; (8004d84 <xPortStartScheduler+0x124>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10a      	bne.n	8004c86 <xPortStartScheduler+0x26>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	613b      	str	r3, [r7, #16]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c86:	4b3e      	ldr	r3, [pc, #248]	; (8004d80 <xPortStartScheduler+0x120>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	; (8004d88 <xPortStartScheduler+0x128>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10a      	bne.n	8004ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	60fb      	str	r3, [r7, #12]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ca6:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <xPortStartScheduler+0x12c>)
 8004ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	22ff      	movs	r2, #255	; 0xff
 8004cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <xPortStartScheduler+0x130>)
 8004ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cce:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cd4:	e009      	b.n	8004cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004cd6:	4b2f      	ldr	r3, [pc, #188]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d0ef      	beq.n	8004cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cf6:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1c3 0307 	rsb	r3, r3, #7
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d00a      	beq.n	8004d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60bb      	str	r3, [r7, #8]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d18:	4b1e      	ldr	r3, [pc, #120]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d22:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d2a:	4a1a      	ldr	r2, [pc, #104]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d36:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a14      	ldr	r2, [pc, #80]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d4e:	f000 f8dd 	bl	8004f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <xPortStartScheduler+0x13c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d58:	f000 f8fc 	bl	8004f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d5c:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <xPortStartScheduler+0x140>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <xPortStartScheduler+0x140>)
 8004d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d68:	f7ff ff66 	bl	8004c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d6c:	f7ff f84c 	bl	8003e08 <vTaskSwitchContext>
	prvTaskExitError();
 8004d70:	f7ff ff22 	bl	8004bb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	e000ed00 	.word	0xe000ed00
 8004d84:	410fc271 	.word	0x410fc271
 8004d88:	410fc270 	.word	0x410fc270
 8004d8c:	e000e400 	.word	0xe000e400
 8004d90:	20000eec 	.word	0x20000eec
 8004d94:	20000ef0 	.word	0x20000ef0
 8004d98:	e000ed20 	.word	0xe000ed20
 8004d9c:	20000010 	.word	0x20000010
 8004da0:	e000ef34 	.word	0xe000ef34

08004da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	607b      	str	r3, [r7, #4]
}
 8004dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <vPortEnterCritical+0x58>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <vPortEnterCritical+0x58>)
 8004dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <vPortEnterCritical+0x58>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10f      	bne.n	8004df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <vPortEnterCritical+0x5c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	603b      	str	r3, [r7, #0]
}
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <vPortEnterCritical+0x4a>
	}
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	20000010 	.word	0x20000010
 8004e00:	e000ed04 	.word	0xe000ed04

08004e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <vPortExitCritical+0x50>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <vPortExitCritical+0x24>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	607b      	str	r3, [r7, #4]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e28:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <vPortExitCritical+0x50>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <vPortExitCritical+0x50>)
 8004e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <vPortExitCritical+0x50>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <vPortExitCritical+0x42>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f383 8811 	msr	BASEPRI, r3
}
 8004e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000010 	.word	0x20000010
	...

08004e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e60:	f3ef 8009 	mrs	r0, PSP
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <pxCurrentTCBConst>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	f01e 0f10 	tst.w	lr, #16
 8004e70:	bf08      	it	eq
 8004e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7a:	6010      	str	r0, [r2, #0]
 8004e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e84:	f380 8811 	msr	BASEPRI, r0
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f7fe ffba 	bl	8003e08 <vTaskSwitchContext>
 8004e94:	f04f 0000 	mov.w	r0, #0
 8004e98:	f380 8811 	msr	BASEPRI, r0
 8004e9c:	bc09      	pop	{r0, r3}
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	6808      	ldr	r0, [r1, #0]
 8004ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea6:	f01e 0f10 	tst.w	lr, #16
 8004eaa:	bf08      	it	eq
 8004eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004eb0:	f380 8809 	msr	PSP, r0
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst>:
 8004ec0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	607b      	str	r3, [r7, #4]
}
 8004ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ee2:	f7fe fed7 	bl	8003c94 <xTaskIncrementTick>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <xPortSysTickHandler+0x40>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f383 8811 	msr	BASEPRI, r3
}
 8004efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <vPortSetupTimerInterrupt+0x34>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f16:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <vPortSetupTimerInterrupt+0x38>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <vPortSetupTimerInterrupt+0x3c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <vPortSetupTimerInterrupt+0x40>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <vPortSetupTimerInterrupt+0x44>)
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <vPortSetupTimerInterrupt+0x34>)
 8004f30:	2207      	movs	r2, #7
 8004f32:	601a      	str	r2, [r3, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	e000e010 	.word	0xe000e010
 8004f44:	e000e018 	.word	0xe000e018
 8004f48:	20000004 	.word	0x20000004
 8004f4c:	51eb851f 	.word	0x51eb851f
 8004f50:	e000e014 	.word	0xe000e014

08004f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f64 <vPortEnableVFP+0x10>
 8004f58:	6801      	ldr	r1, [r0, #0]
 8004f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f5e:	6001      	str	r1, [r0, #0]
 8004f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f62:	bf00      	nop
 8004f64:	e000ed88 	.word	0xe000ed88

08004f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f6e:	f3ef 8305 	mrs	r3, IPSR
 8004f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	d914      	bls.n	8004fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f7a:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <vPortValidateInterruptPriority+0x70>)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f84:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <vPortValidateInterruptPriority+0x74>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	7afa      	ldrb	r2, [r7, #11]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d20a      	bcs.n	8004fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <vPortValidateInterruptPriority+0x78>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <vPortValidateInterruptPriority+0x7c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d90a      	bls.n	8004fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	603b      	str	r3, [r7, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <vPortValidateInterruptPriority+0x60>
	}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	e000e3f0 	.word	0xe000e3f0
 8004fdc:	20000eec 	.word	0x20000eec
 8004fe0:	e000ed0c 	.word	0xe000ed0c
 8004fe4:	20000ef0 	.word	0x20000ef0

08004fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ff4:	f7fe fd92 	bl	8003b1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ff8:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <pvPortMalloc+0x180>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005000:	f000 f920 	bl	8005244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005004:	4b59      	ldr	r3, [pc, #356]	; (800516c <pvPortMalloc+0x184>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	f040 8093 	bne.w	8005138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01d      	beq.n	8005054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005018:	2208      	movs	r2, #8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	2b00      	cmp	r3, #0
 8005028:	d014      	beq.n	8005054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f023 0307 	bic.w	r3, r3, #7
 8005030:	3308      	adds	r3, #8
 8005032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <pvPortMalloc+0x6c>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	617b      	str	r3, [r7, #20]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d06e      	beq.n	8005138 <pvPortMalloc+0x150>
 800505a:	4b45      	ldr	r3, [pc, #276]	; (8005170 <pvPortMalloc+0x188>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d869      	bhi.n	8005138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005064:	4b43      	ldr	r3, [pc, #268]	; (8005174 <pvPortMalloc+0x18c>)
 8005066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005068:	4b42      	ldr	r3, [pc, #264]	; (8005174 <pvPortMalloc+0x18c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800506e:	e004      	b.n	800507a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d903      	bls.n	800508c <pvPortMalloc+0xa4>
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f1      	bne.n	8005070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800508c:	4b36      	ldr	r3, [pc, #216]	; (8005168 <pvPortMalloc+0x180>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005092:	429a      	cmp	r2, r3
 8005094:	d050      	beq.n	8005138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2208      	movs	r2, #8
 800509c:	4413      	add	r3, r2
 800509e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	1ad2      	subs	r2, r2, r3
 80050b0:	2308      	movs	r3, #8
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d91f      	bls.n	80050f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <pvPortMalloc+0xf8>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	613b      	str	r3, [r7, #16]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	1ad2      	subs	r2, r2, r3
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050f2:	69b8      	ldr	r0, [r7, #24]
 80050f4:	f000 f908 	bl	8005308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050f8:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <pvPortMalloc+0x188>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <pvPortMalloc+0x188>)
 8005104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <pvPortMalloc+0x188>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <pvPortMalloc+0x190>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d203      	bcs.n	800511a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005112:	4b17      	ldr	r3, [pc, #92]	; (8005170 <pvPortMalloc+0x188>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a18      	ldr	r2, [pc, #96]	; (8005178 <pvPortMalloc+0x190>)
 8005118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	4b13      	ldr	r3, [pc, #76]	; (800516c <pvPortMalloc+0x184>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	431a      	orrs	r2, r3
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800512e:	4b13      	ldr	r3, [pc, #76]	; (800517c <pvPortMalloc+0x194>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	4a11      	ldr	r2, [pc, #68]	; (800517c <pvPortMalloc+0x194>)
 8005136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005138:	f7fe fcfe 	bl	8003b38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <pvPortMalloc+0x174>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60fb      	str	r3, [r7, #12]
}
 8005158:	bf00      	nop
 800515a:	e7fe      	b.n	800515a <pvPortMalloc+0x172>
	return pvReturn;
 800515c:	69fb      	ldr	r3, [r7, #28]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3728      	adds	r7, #40	; 0x28
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20004afc 	.word	0x20004afc
 800516c:	20004b10 	.word	0x20004b10
 8005170:	20004b00 	.word	0x20004b00
 8005174:	20004af4 	.word	0x20004af4
 8005178:	20004b04 	.word	0x20004b04
 800517c:	20004b08 	.word	0x20004b08

08005180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d04d      	beq.n	800522e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005192:	2308      	movs	r3, #8
 8005194:	425b      	negs	r3, r3
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4413      	add	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	4b24      	ldr	r3, [pc, #144]	; (8005238 <vPortFree+0xb8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <vPortFree+0x44>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60fb      	str	r3, [r7, #12]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <vPortFree+0x62>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	60bb      	str	r3, [r7, #8]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	4b14      	ldr	r3, [pc, #80]	; (8005238 <vPortFree+0xb8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01e      	beq.n	800522e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d11a      	bne.n	800522e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <vPortFree+0xb8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	43db      	mvns	r3, r3
 8005202:	401a      	ands	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005208:	f7fe fc88 	bl	8003b1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <vPortFree+0xbc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4413      	add	r3, r2
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <vPortFree+0xbc>)
 8005218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800521a:	6938      	ldr	r0, [r7, #16]
 800521c:	f000 f874 	bl	8005308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <vPortFree+0xc0>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3301      	adds	r3, #1
 8005226:	4a06      	ldr	r2, [pc, #24]	; (8005240 <vPortFree+0xc0>)
 8005228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800522a:	f7fe fc85 	bl	8003b38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800522e:	bf00      	nop
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20004b10 	.word	0x20004b10
 800523c:	20004b00 	.word	0x20004b00
 8005240:	20004b0c 	.word	0x20004b0c

08005244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800524a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800524e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005250:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <prvHeapInit+0xac>)
 8005252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3307      	adds	r3, #7
 8005262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0307 	bic.w	r3, r3, #7
 800526a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <prvHeapInit+0xac>)
 8005274:	4413      	add	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800527c:	4a1d      	ldr	r2, [pc, #116]	; (80052f4 <prvHeapInit+0xb0>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005282:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <prvHeapInit+0xb0>)
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005290:	2208      	movs	r2, #8
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0307 	bic.w	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <prvHeapInit+0xb4>)
 80052a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <prvHeapInit+0xb4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2200      	movs	r2, #0
 80052ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ae:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <prvHeapInit+0xb4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <prvHeapInit+0xb4>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <prvHeapInit+0xb8>)
 80052d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4a09      	ldr	r2, [pc, #36]	; (8005300 <prvHeapInit+0xbc>)
 80052da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052dc:	4b09      	ldr	r3, [pc, #36]	; (8005304 <prvHeapInit+0xc0>)
 80052de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052e2:	601a      	str	r2, [r3, #0]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20000ef4 	.word	0x20000ef4
 80052f4:	20004af4 	.word	0x20004af4
 80052f8:	20004afc 	.word	0x20004afc
 80052fc:	20004b04 	.word	0x20004b04
 8005300:	20004b00 	.word	0x20004b00
 8005304:	20004b10 	.word	0x20004b10

08005308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005310:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <prvInsertBlockIntoFreeList+0xac>)
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e002      	b.n	800531c <prvInsertBlockIntoFreeList+0x14>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d8f7      	bhi.n	8005316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4413      	add	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	d108      	bne.n	800534a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	441a      	add	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d118      	bne.n	8005390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b15      	ldr	r3, [pc, #84]	; (80053b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d00d      	beq.n	8005386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e008      	b.n	8005398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	e003      	b.n	8005398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d002      	beq.n	80053a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20004af4 	.word	0x20004af4
 80053b8:	20004afc 	.word	0x20004afc

080053bc <memset>:
 80053bc:	4402      	add	r2, r0
 80053be:	4603      	mov	r3, r0
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d100      	bne.n	80053c6 <memset+0xa>
 80053c4:	4770      	bx	lr
 80053c6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ca:	e7f9      	b.n	80053c0 <memset+0x4>

080053cc <_reclaim_reent>:
 80053cc:	4b29      	ldr	r3, [pc, #164]	; (8005474 <_reclaim_reent+0xa8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4283      	cmp	r3, r0
 80053d2:	b570      	push	{r4, r5, r6, lr}
 80053d4:	4604      	mov	r4, r0
 80053d6:	d04b      	beq.n	8005470 <_reclaim_reent+0xa4>
 80053d8:	69c3      	ldr	r3, [r0, #28]
 80053da:	b143      	cbz	r3, 80053ee <_reclaim_reent+0x22>
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d144      	bne.n	800546c <_reclaim_reent+0xa0>
 80053e2:	69e3      	ldr	r3, [r4, #28]
 80053e4:	6819      	ldr	r1, [r3, #0]
 80053e6:	b111      	cbz	r1, 80053ee <_reclaim_reent+0x22>
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 f879 	bl	80054e0 <_free_r>
 80053ee:	6961      	ldr	r1, [r4, #20]
 80053f0:	b111      	cbz	r1, 80053f8 <_reclaim_reent+0x2c>
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 f874 	bl	80054e0 <_free_r>
 80053f8:	69e1      	ldr	r1, [r4, #28]
 80053fa:	b111      	cbz	r1, 8005402 <_reclaim_reent+0x36>
 80053fc:	4620      	mov	r0, r4
 80053fe:	f000 f86f 	bl	80054e0 <_free_r>
 8005402:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005404:	b111      	cbz	r1, 800540c <_reclaim_reent+0x40>
 8005406:	4620      	mov	r0, r4
 8005408:	f000 f86a 	bl	80054e0 <_free_r>
 800540c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800540e:	b111      	cbz	r1, 8005416 <_reclaim_reent+0x4a>
 8005410:	4620      	mov	r0, r4
 8005412:	f000 f865 	bl	80054e0 <_free_r>
 8005416:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005418:	b111      	cbz	r1, 8005420 <_reclaim_reent+0x54>
 800541a:	4620      	mov	r0, r4
 800541c:	f000 f860 	bl	80054e0 <_free_r>
 8005420:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005422:	b111      	cbz	r1, 800542a <_reclaim_reent+0x5e>
 8005424:	4620      	mov	r0, r4
 8005426:	f000 f85b 	bl	80054e0 <_free_r>
 800542a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800542c:	b111      	cbz	r1, 8005434 <_reclaim_reent+0x68>
 800542e:	4620      	mov	r0, r4
 8005430:	f000 f856 	bl	80054e0 <_free_r>
 8005434:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005436:	b111      	cbz	r1, 800543e <_reclaim_reent+0x72>
 8005438:	4620      	mov	r0, r4
 800543a:	f000 f851 	bl	80054e0 <_free_r>
 800543e:	6a23      	ldr	r3, [r4, #32]
 8005440:	b1b3      	cbz	r3, 8005470 <_reclaim_reent+0xa4>
 8005442:	4620      	mov	r0, r4
 8005444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005448:	4718      	bx	r3
 800544a:	5949      	ldr	r1, [r1, r5]
 800544c:	b941      	cbnz	r1, 8005460 <_reclaim_reent+0x94>
 800544e:	3504      	adds	r5, #4
 8005450:	69e3      	ldr	r3, [r4, #28]
 8005452:	2d80      	cmp	r5, #128	; 0x80
 8005454:	68d9      	ldr	r1, [r3, #12]
 8005456:	d1f8      	bne.n	800544a <_reclaim_reent+0x7e>
 8005458:	4620      	mov	r0, r4
 800545a:	f000 f841 	bl	80054e0 <_free_r>
 800545e:	e7c0      	b.n	80053e2 <_reclaim_reent+0x16>
 8005460:	680e      	ldr	r6, [r1, #0]
 8005462:	4620      	mov	r0, r4
 8005464:	f000 f83c 	bl	80054e0 <_free_r>
 8005468:	4631      	mov	r1, r6
 800546a:	e7ef      	b.n	800544c <_reclaim_reent+0x80>
 800546c:	2500      	movs	r5, #0
 800546e:	e7ef      	b.n	8005450 <_reclaim_reent+0x84>
 8005470:	bd70      	pop	{r4, r5, r6, pc}
 8005472:	bf00      	nop
 8005474:	20000060 	.word	0x20000060

08005478 <__libc_init_array>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	4d0d      	ldr	r5, [pc, #52]	; (80054b0 <__libc_init_array+0x38>)
 800547c:	4c0d      	ldr	r4, [pc, #52]	; (80054b4 <__libc_init_array+0x3c>)
 800547e:	1b64      	subs	r4, r4, r5
 8005480:	10a4      	asrs	r4, r4, #2
 8005482:	2600      	movs	r6, #0
 8005484:	42a6      	cmp	r6, r4
 8005486:	d109      	bne.n	800549c <__libc_init_array+0x24>
 8005488:	4d0b      	ldr	r5, [pc, #44]	; (80054b8 <__libc_init_array+0x40>)
 800548a:	4c0c      	ldr	r4, [pc, #48]	; (80054bc <__libc_init_array+0x44>)
 800548c:	f000 f880 	bl	8005590 <_init>
 8005490:	1b64      	subs	r4, r4, r5
 8005492:	10a4      	asrs	r4, r4, #2
 8005494:	2600      	movs	r6, #0
 8005496:	42a6      	cmp	r6, r4
 8005498:	d105      	bne.n	80054a6 <__libc_init_array+0x2e>
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a0:	4798      	blx	r3
 80054a2:	3601      	adds	r6, #1
 80054a4:	e7ee      	b.n	8005484 <__libc_init_array+0xc>
 80054a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054aa:	4798      	blx	r3
 80054ac:	3601      	adds	r6, #1
 80054ae:	e7f2      	b.n	8005496 <__libc_init_array+0x1e>
 80054b0:	08005670 	.word	0x08005670
 80054b4:	08005670 	.word	0x08005670
 80054b8:	08005670 	.word	0x08005670
 80054bc:	08005674 	.word	0x08005674

080054c0 <__retarget_lock_acquire_recursive>:
 80054c0:	4770      	bx	lr

080054c2 <__retarget_lock_release_recursive>:
 80054c2:	4770      	bx	lr

080054c4 <memcpy>:
 80054c4:	440a      	add	r2, r1
 80054c6:	4291      	cmp	r1, r2
 80054c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054cc:	d100      	bne.n	80054d0 <memcpy+0xc>
 80054ce:	4770      	bx	lr
 80054d0:	b510      	push	{r4, lr}
 80054d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054da:	4291      	cmp	r1, r2
 80054dc:	d1f9      	bne.n	80054d2 <memcpy+0xe>
 80054de:	bd10      	pop	{r4, pc}

080054e0 <_free_r>:
 80054e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054e2:	2900      	cmp	r1, #0
 80054e4:	d044      	beq.n	8005570 <_free_r+0x90>
 80054e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ea:	9001      	str	r0, [sp, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f1a1 0404 	sub.w	r4, r1, #4
 80054f2:	bfb8      	it	lt
 80054f4:	18e4      	addlt	r4, r4, r3
 80054f6:	f000 f83f 	bl	8005578 <__malloc_lock>
 80054fa:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <_free_r+0x94>)
 80054fc:	9801      	ldr	r0, [sp, #4]
 80054fe:	6813      	ldr	r3, [r2, #0]
 8005500:	b933      	cbnz	r3, 8005510 <_free_r+0x30>
 8005502:	6063      	str	r3, [r4, #4]
 8005504:	6014      	str	r4, [r2, #0]
 8005506:	b003      	add	sp, #12
 8005508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800550c:	f000 b83a 	b.w	8005584 <__malloc_unlock>
 8005510:	42a3      	cmp	r3, r4
 8005512:	d908      	bls.n	8005526 <_free_r+0x46>
 8005514:	6825      	ldr	r5, [r4, #0]
 8005516:	1961      	adds	r1, r4, r5
 8005518:	428b      	cmp	r3, r1
 800551a:	bf01      	itttt	eq
 800551c:	6819      	ldreq	r1, [r3, #0]
 800551e:	685b      	ldreq	r3, [r3, #4]
 8005520:	1949      	addeq	r1, r1, r5
 8005522:	6021      	streq	r1, [r4, #0]
 8005524:	e7ed      	b.n	8005502 <_free_r+0x22>
 8005526:	461a      	mov	r2, r3
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	b10b      	cbz	r3, 8005530 <_free_r+0x50>
 800552c:	42a3      	cmp	r3, r4
 800552e:	d9fa      	bls.n	8005526 <_free_r+0x46>
 8005530:	6811      	ldr	r1, [r2, #0]
 8005532:	1855      	adds	r5, r2, r1
 8005534:	42a5      	cmp	r5, r4
 8005536:	d10b      	bne.n	8005550 <_free_r+0x70>
 8005538:	6824      	ldr	r4, [r4, #0]
 800553a:	4421      	add	r1, r4
 800553c:	1854      	adds	r4, r2, r1
 800553e:	42a3      	cmp	r3, r4
 8005540:	6011      	str	r1, [r2, #0]
 8005542:	d1e0      	bne.n	8005506 <_free_r+0x26>
 8005544:	681c      	ldr	r4, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	6053      	str	r3, [r2, #4]
 800554a:	440c      	add	r4, r1
 800554c:	6014      	str	r4, [r2, #0]
 800554e:	e7da      	b.n	8005506 <_free_r+0x26>
 8005550:	d902      	bls.n	8005558 <_free_r+0x78>
 8005552:	230c      	movs	r3, #12
 8005554:	6003      	str	r3, [r0, #0]
 8005556:	e7d6      	b.n	8005506 <_free_r+0x26>
 8005558:	6825      	ldr	r5, [r4, #0]
 800555a:	1961      	adds	r1, r4, r5
 800555c:	428b      	cmp	r3, r1
 800555e:	bf04      	itt	eq
 8005560:	6819      	ldreq	r1, [r3, #0]
 8005562:	685b      	ldreq	r3, [r3, #4]
 8005564:	6063      	str	r3, [r4, #4]
 8005566:	bf04      	itt	eq
 8005568:	1949      	addeq	r1, r1, r5
 800556a:	6021      	streq	r1, [r4, #0]
 800556c:	6054      	str	r4, [r2, #4]
 800556e:	e7ca      	b.n	8005506 <_free_r+0x26>
 8005570:	b003      	add	sp, #12
 8005572:	bd30      	pop	{r4, r5, pc}
 8005574:	20004c50 	.word	0x20004c50

08005578 <__malloc_lock>:
 8005578:	4801      	ldr	r0, [pc, #4]	; (8005580 <__malloc_lock+0x8>)
 800557a:	f7ff bfa1 	b.w	80054c0 <__retarget_lock_acquire_recursive>
 800557e:	bf00      	nop
 8005580:	20004c4c 	.word	0x20004c4c

08005584 <__malloc_unlock>:
 8005584:	4801      	ldr	r0, [pc, #4]	; (800558c <__malloc_unlock+0x8>)
 8005586:	f7ff bf9c 	b.w	80054c2 <__retarget_lock_release_recursive>
 800558a:	bf00      	nop
 800558c:	20004c4c 	.word	0x20004c4c

08005590 <_init>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr

0800559c <_fini>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr
