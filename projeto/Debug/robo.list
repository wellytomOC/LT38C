
robo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008028  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009064  08009064  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009064  08009064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800906c  0800906c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009070  08009070  00019070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050fc  20000070  080090e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000516c  080090e4  0002516c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018dd3  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000370c  00000000  00000000  00038eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0003c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112d  00000000  00000000  0003dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003973  00000000  00000000  0003ed1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188ec  00000000  00000000  00042690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098aca  00000000  00000000  0005af7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063b8  00000000  00000000  000f3a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f9e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081b0 	.word	0x080081b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080081b0 	.word	0x080081b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d5c:	f001 faf8 	bl	8002350 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d60:	f000 f868 	bl	8000e34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d64:	f000 fa3c 	bl	80011e0 <MX_GPIO_Init>
	MX_TIM4_Init();
 8000d68:	f000 f9c0 	bl	80010ec <MX_TIM4_Init>
	MX_TIM2_Init();
 8000d6c:	f000 f8fa 	bl	8000f64 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000d70:	f000 f96e 	bl	8001050 <MX_TIM3_Init>
	MX_I2C3_Init();
 8000d74:	f000 f8c8 	bl	8000f08 <MX_I2C3_Init>




	//inicializacao do display
	ssd1306_Init();
 8000d78:	f001 f8f4 	bl	8001f64 <ssd1306_Init>
	ssd1306_Fill(White);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f001 f95b 	bl	8002038 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000d82:	f001 f971 	bl	8002068 <ssd1306_UpdateScreen>


	//inicializacao dos sensores
	HAL_TIM_Base_Start(&htim3);
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <main+0xa0>)
 8000d88:	f002 ff2e 	bl	8003be8 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SensorFrenteTrigger_GPIO_Port, SensorFrenteTrigger_Pin , GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2140      	movs	r1, #64	; 0x40
 8000d90:	481a      	ldr	r0, [pc, #104]	; (8000dfc <main+0xa4>)
 8000d92:	f001 fdc1 	bl	8002918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SensorEsquerdaTrigger_GPIO_Port, SensorEsquerdaTrigger_Pin , GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9c:	4818      	ldr	r0, [pc, #96]	; (8000e00 <main+0xa8>)
 8000d9e:	f001 fdbb 	bl	8002918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SensorDireitoTrigger_GPIO_Port, SensorDireitoTrigger_Pin , GPIO_PIN_RESET);  // pull the TRIG pin low
 8000da2:	2200      	movs	r2, #0
 8000da4:	2104      	movs	r1, #4
 8000da6:	4815      	ldr	r0, [pc, #84]	; (8000dfc <main+0xa4>)
 8000da8:	f001 fdb6 	bl	8002918 <HAL_GPIO_WritePin>


	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000dac:	f003 ff88 	bl	8004cc0 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <main+0xac>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4814      	ldr	r0, [pc, #80]	; (8000e08 <main+0xb0>)
 8000db6:	f003 ffcd 	bl	8004d54 <osThreadNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <main+0xb4>)
 8000dbe:	6013      	str	r3, [r2, #0]

	/* creation of RightMotor */
	RightMotorHandle = osThreadNew(StartRightMotor, NULL, &RightMotor_attributes);
 8000dc0:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <main+0xb8>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <main+0xbc>)
 8000dc6:	f003 ffc5 	bl	8004d54 <osThreadNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <main+0xc0>)
 8000dce:	6013      	str	r3, [r2, #0]

	/* creation of LeftMotor */
	LeftMotorHandle = osThreadNew(StartLeftMotor, NULL, &LeftMotor_attributes);
 8000dd0:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <main+0xc4>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <main+0xc8>)
 8000dd6:	f003 ffbd 	bl	8004d54 <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <main+0xcc>)
 8000dde:	6013      	str	r3, [r2, #0]

	/* creation of StateMachine */
	StateMachineHandle = osThreadNew(StartStateMachine, NULL, &StateMachine_attributes);
 8000de0:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <main+0xd0>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4811      	ldr	r0, [pc, #68]	; (8000e2c <main+0xd4>)
 8000de6:	f003 ffb5 	bl	8004d54 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <main+0xd8>)
 8000dee:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000df0:	f003 ff8a 	bl	8004d08 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000df4:	e7fe      	b.n	8000df4 <main+0x9c>
 8000df6:	bf00      	nop
 8000df8:	20000128 	.word	0x20000128
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400
 8000e04:	0800822c 	.word	0x0800822c
 8000e08:	08001731 	.word	0x08001731
 8000e0c:	200001b8 	.word	0x200001b8
 8000e10:	08008250 	.word	0x08008250
 8000e14:	08001749 	.word	0x08001749
 8000e18:	200001bc 	.word	0x200001bc
 8000e1c:	08008274 	.word	0x08008274
 8000e20:	080017fd 	.word	0x080017fd
 8000e24:	200001c0 	.word	0x200001c0
 8000e28:	08008298 	.word	0x08008298
 8000e2c:	080018d1 	.word	0x080018d1
 8000e30:	200001c4 	.word	0x200001c4

08000e34 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2230      	movs	r2, #48	; 0x30
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f006 fcf4 	bl	8007830 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e80:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e94:	2302      	movs	r3, #2
 8000e96:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000eac:	2354      	movs	r3, #84	; 0x54
 8000eae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f107 0320 	add.w	r3, r7, #32
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 f9b9 	bl	8003234 <HAL_RCC_OscConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000ec8:	f000 fdb0 	bl	8001a2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
 8000ece:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fc1b 	bl	8003724 <HAL_RCC_ClockConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000ef4:	f000 fd9a 	bl	8001a2c <Error_Handler>
	}
}
 8000ef8:	bf00      	nop
 8000efa:	3750      	adds	r7, #80	; 0x50
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000

08000f08 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C3_Init+0x50>)
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <MX_I2C3_Init+0x54>)
 8000f10:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C3_Init+0x50>)
 8000f14:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <MX_I2C3_Init+0x58>)
 8000f16:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C3_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_I2C3_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_I2C3_Init+0x50>)
 8000f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2a:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MX_I2C3_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_I2C3_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MX_I2C3_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_I2C3_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_I2C3_Init+0x50>)
 8000f46:	f001 fd19 	bl	800297c <HAL_I2C_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8000f50:	f000 fd6c 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000008c 	.word	0x2000008c
 8000f5c:	40005c00 	.word	0x40005c00
 8000f60:	000186a0 	.word	0x000186a0

08000f64 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	615a      	str	r2, [r3, #20]
 8000f92:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <MX_TIM2_Init+0xe8>)
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8400;
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <MX_TIM2_Init+0xe8>)
 8000f9e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000fa2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <MX_TIM2_Init+0xe8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10;
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <MX_TIM2_Init+0xe8>)
 8000fac:	220a      	movs	r2, #10
 8000fae:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <MX_TIM2_Init+0xe8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <MX_TIM2_Init+0xe8>)
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fbc:	4823      	ldr	r0, [pc, #140]	; (800104c <MX_TIM2_Init+0xe8>)
 8000fbe:	f002 fdc3 	bl	8003b48 <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM2_Init+0x68>
	{
		Error_Handler();
 8000fc8:	f000 fd30 	bl	8001a2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481c      	ldr	r0, [pc, #112]	; (800104c <MX_TIM2_Init+0xe8>)
 8000fda:	f003 f9ef 	bl	80043bc <HAL_TIM_ConfigClockSource>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 8000fe4:	f000 fd22 	bl	8001a2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fe8:	4818      	ldr	r0, [pc, #96]	; (800104c <MX_TIM2_Init+0xe8>)
 8000fea:	f002 feb9 	bl	8003d60 <HAL_TIM_PWM_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 8000ff4:	f000 fd1a 	bl	8001a2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001000:	f107 0320 	add.w	r3, r7, #32
 8001004:	4619      	mov	r1, r3
 8001006:	4811      	ldr	r0, [pc, #68]	; (800104c <MX_TIM2_Init+0xe8>)
 8001008:	f003 fd94 	bl	8004b34 <HAL_TIMEx_MasterConfigSynchronization>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 8001012:	f000 fd0b 	bl	8001a2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001016:	2360      	movs	r3, #96	; 0x60
 8001018:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 5;
 800101a:	2305      	movs	r3, #5
 800101c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	4619      	mov	r1, r3
 800102c:	4807      	ldr	r0, [pc, #28]	; (800104c <MX_TIM2_Init+0xe8>)
 800102e:	f003 f903 	bl	8004238 <HAL_TIM_PWM_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 8001038:	f000 fcf8 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <MX_TIM2_Init+0xe8>)
 800103e:	f000 fde7 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 8001042:	bf00      	nop
 8001044:	3738      	adds	r7, #56	; 0x38
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200000e0 	.word	0x200000e0

08001050 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_TIM3_Init+0x94>)
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <MX_TIM3_Init+0x98>)
 8001070:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84-1;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_TIM3_Init+0x94>)
 8001074:	2253      	movs	r2, #83	; 0x53
 8001076:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_TIM3_Init+0x94>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_TIM3_Init+0x94>)
 8001080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001084:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_TIM3_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_TIM3_Init+0x94>)
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <MX_TIM3_Init+0x94>)
 8001094:	f002 fd58 	bl	8003b48 <HAL_TIM_Base_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800109e:	f000 fcc5 	bl	8001a2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <MX_TIM3_Init+0x94>)
 80010b0:	f003 f984 	bl	80043bc <HAL_TIM_ConfigClockSource>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 80010ba:	f000 fcb7 	bl	8001a2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_TIM3_Init+0x94>)
 80010cc:	f003 fd32 	bl	8004b34 <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 80010d6:	f000 fca9 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000128 	.word	0x20000128
 80010e8:	40000400 	.word	0x40000400

080010ec <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <MX_TIM4_Init+0xec>)
 8001110:	4a32      	ldr	r2, [pc, #200]	; (80011dc <MX_TIM4_Init+0xf0>)
 8001112:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 840;
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <MX_TIM4_Init+0xec>)
 8001116:	f44f 7252 	mov.w	r2, #840	; 0x348
 800111a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <MX_TIM4_Init+0xec>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100-1;
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <MX_TIM4_Init+0xec>)
 8001124:	2263      	movs	r2, #99	; 0x63
 8001126:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <MX_TIM4_Init+0xec>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <MX_TIM4_Init+0xec>)
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001134:	4828      	ldr	r0, [pc, #160]	; (80011d8 <MX_TIM4_Init+0xec>)
 8001136:	f002 fe13 	bl	8003d60 <HAL_TIM_PWM_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM4_Init+0x58>
	{
		Error_Handler();
 8001140:	f000 fc74 	bl	8001a2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4619      	mov	r1, r3
 8001152:	4821      	ldr	r0, [pc, #132]	; (80011d8 <MX_TIM4_Init+0xec>)
 8001154:	f003 fcee 	bl	8004b34 <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM4_Init+0x76>
	{
		Error_Handler();
 800115e:	f000 fc65 	bl	8001a2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001162:	2360      	movs	r3, #96	; 0x60
 8001164:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 50-1;
 8001166:	2331      	movs	r3, #49	; 0x31
 8001168:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	4817      	ldr	r0, [pc, #92]	; (80011d8 <MX_TIM4_Init+0xec>)
 800117a:	f003 f85d 	bl	8004238 <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM4_Init+0x9c>
	{
		Error_Handler();
 8001184:	f000 fc52 	bl	8001a2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2204      	movs	r2, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4812      	ldr	r0, [pc, #72]	; (80011d8 <MX_TIM4_Init+0xec>)
 8001190:	f003 f852 	bl	8004238 <HAL_TIM_PWM_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM4_Init+0xb2>
	{
		Error_Handler();
 800119a:	f000 fc47 	bl	8001a2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2208      	movs	r2, #8
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_TIM4_Init+0xec>)
 80011a6:	f003 f847 	bl	8004238 <HAL_TIM_PWM_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM4_Init+0xc8>
	{
		Error_Handler();
 80011b0:	f000 fc3c 	bl	8001a2c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	220c      	movs	r2, #12
 80011b8:	4619      	mov	r1, r3
 80011ba:	4807      	ldr	r0, [pc, #28]	; (80011d8 <MX_TIM4_Init+0xec>)
 80011bc:	f003 f83c 	bl	8004238 <HAL_TIM_PWM_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM4_Init+0xde>
	{
		Error_Handler();
 80011c6:	f000 fc31 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <MX_TIM4_Init+0xec>)
 80011cc:	f000 fd20 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000170 	.word	0x20000170
 80011dc:	40000800 	.word	0x40000800

080011e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b55      	ldr	r3, [pc, #340]	; (8001350 <MX_GPIO_Init+0x170>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a54      	ldr	r2, [pc, #336]	; (8001350 <MX_GPIO_Init+0x170>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b52      	ldr	r3, [pc, #328]	; (8001350 <MX_GPIO_Init+0x170>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b4e      	ldr	r3, [pc, #312]	; (8001350 <MX_GPIO_Init+0x170>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a4d      	ldr	r2, [pc, #308]	; (8001350 <MX_GPIO_Init+0x170>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <MX_GPIO_Init+0x170>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <MX_GPIO_Init+0x170>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a46      	ldr	r2, [pc, #280]	; (8001350 <MX_GPIO_Init+0x170>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <MX_GPIO_Init+0x170>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001250:	4840      	ldr	r0, [pc, #256]	; (8001354 <MX_GPIO_Init+0x174>)
 8001252:	f001 fb61 	bl	8002918 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SensorDireitoTrigger_Pin|SensorFrenteTrigger_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2144      	movs	r1, #68	; 0x44
 800125a:	483f      	ldr	r0, [pc, #252]	; (8001358 <MX_GPIO_Init+0x178>)
 800125c:	f001 fb5c 	bl	8002918 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SensorEsquerdaTrigger_GPIO_Port, SensorEsquerdaTrigger_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001266:	483d      	ldr	r0, [pc, #244]	; (800135c <MX_GPIO_Init+0x17c>)
 8001268:	f001 fb56 	bl	8002918 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 800126c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001270:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4619      	mov	r1, r3
 8001284:	4833      	ldr	r0, [pc, #204]	; (8001354 <MX_GPIO_Init+0x174>)
 8001286:	f001 f9ab 	bl	80025e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Key_Pin */
	GPIO_InitStruct.Pin = Key_Pin;
 800128a:	2301      	movs	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001292:	2301      	movs	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	482e      	ldr	r0, [pc, #184]	; (8001358 <MX_GPIO_Init+0x178>)
 800129e:	f001 f99f 	bl	80025e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SensorDireitoEcho_Pin SensorFrenteEcho_Pin */
	GPIO_InitStruct.Pin = SensorDireitoEcho_Pin|SensorFrenteEcho_Pin;
 80012a2:	2382      	movs	r3, #130	; 0x82
 80012a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	4828      	ldr	r0, [pc, #160]	; (8001358 <MX_GPIO_Init+0x178>)
 80012b6:	f001 f993 	bl	80025e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SensorDireitoTrigger_Pin SensorFrenteTrigger_Pin */
	GPIO_InitStruct.Pin = SensorDireitoTrigger_Pin|SensorFrenteTrigger_Pin;
 80012ba:	2344      	movs	r3, #68	; 0x44
 80012bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	4821      	ldr	r0, [pc, #132]	; (8001358 <MX_GPIO_Init+0x178>)
 80012d2:	f001 f985 	bl	80025e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Encoder_Direito_Pin Encoder_Esquerdo_Pin */
	GPIO_InitStruct.Pin = Encoder_Direito_Pin|Encoder_Esquerdo_Pin;
 80012d6:	2318      	movs	r3, #24
 80012d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4619      	mov	r1, r3
 80012ea:	481b      	ldr	r0, [pc, #108]	; (8001358 <MX_GPIO_Init+0x178>)
 80012ec:	f001 f978 	bl	80025e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SensorEsquerdaEcho_Pin */
	GPIO_InitStruct.Pin = SensorEsquerdaEcho_Pin;
 80012f0:	2304      	movs	r3, #4
 80012f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SensorEsquerdaEcho_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4619      	mov	r1, r3
 8001302:	4816      	ldr	r0, [pc, #88]	; (800135c <MX_GPIO_Init+0x17c>)
 8001304:	f001 f96c 	bl	80025e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SensorEsquerdaTrigger_Pin */
	GPIO_InitStruct.Pin = SensorEsquerdaTrigger_Pin;
 8001308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SensorEsquerdaTrigger_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	4619      	mov	r1, r3
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <MX_GPIO_Init+0x17c>)
 8001322:	f001 f95d 	bl	80025e0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2105      	movs	r1, #5
 800132a:	2009      	movs	r0, #9
 800132c:	f001 f92e 	bl	800258c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001330:	2009      	movs	r0, #9
 8001332:	f001 f947 	bl	80025c4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2105      	movs	r1, #5
 800133a:	200a      	movs	r0, #10
 800133c:	f001 f926 	bl	800258c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001340:	200a      	movs	r0, #10
 8001342:	f001 f93f 	bl	80025c4 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40020800 	.word	0x40020800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400

08001360 <printDistance>:
/* USER CODE BEGIN 4 */



// display
void printDistance(){
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0

	char text[20] = {};
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]

	ssd1306_Fill(Black);
 8001378:	2000      	movs	r0, #0
 800137a:	f000 fe5d 	bl	8002038 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 800137e:	2100      	movs	r1, #0
 8001380:	2000      	movs	r0, #0
 8001382:	f000 ff9b 	bl	80022bc <ssd1306_SetCursor>
	sprintf(text,"esq: %d", Walle.Sensor_Esquerda);
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <printDistance+0x98>)
 8001388:	88db      	ldrh	r3, [r3, #6]
 800138a:	461a      	mov	r2, r3
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	491b      	ldr	r1, [pc, #108]	; (80013fc <printDistance+0x9c>)
 8001390:	4618      	mov	r0, r3
 8001392:	f006 fa13 	bl	80077bc <siprintf>
	ssd1306_WriteString(text, Font_11x18, White);
 8001396:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <printDistance+0xa0>)
 8001398:	1d38      	adds	r0, r7, #4
 800139a:	2301      	movs	r3, #1
 800139c:	ca06      	ldmia	r2, {r1, r2}
 800139e:	f000 ff67 	bl	8002270 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 20);
 80013a2:	2114      	movs	r1, #20
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 ff89 	bl	80022bc <ssd1306_SetCursor>
	sprintf(text,"Dir: %d", Walle.Sensor_Direita);
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <printDistance+0x98>)
 80013ac:	891b      	ldrh	r3, [r3, #8]
 80013ae:	461a      	mov	r2, r3
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4914      	ldr	r1, [pc, #80]	; (8001404 <printDistance+0xa4>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f006 fa01 	bl	80077bc <siprintf>
	ssd1306_WriteString(text, Font_11x18, White);
 80013ba:	4a11      	ldr	r2, [pc, #68]	; (8001400 <printDistance+0xa0>)
 80013bc:	1d38      	adds	r0, r7, #4
 80013be:	2301      	movs	r3, #1
 80013c0:	ca06      	ldmia	r2, {r1, r2}
 80013c2:	f000 ff55 	bl	8002270 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 40);
 80013c6:	2128      	movs	r1, #40	; 0x28
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 ff77 	bl	80022bc <ssd1306_SetCursor>
	sprintf(text,"Frt: %d", Walle.Sensor_Frente);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <printDistance+0x98>)
 80013d0:	889b      	ldrh	r3, [r3, #4]
 80013d2:	461a      	mov	r2, r3
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	490c      	ldr	r1, [pc, #48]	; (8001408 <printDistance+0xa8>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f006 f9ef 	bl	80077bc <siprintf>
	ssd1306_WriteString(text, Font_11x18, White);
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <printDistance+0xa0>)
 80013e0:	1d38      	adds	r0, r7, #4
 80013e2:	2301      	movs	r3, #1
 80013e4:	ca06      	ldmia	r2, {r1, r2}
 80013e6:	f000 ff43 	bl	8002270 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 80013ea:	f000 fe3d 	bl	8002068 <ssd1306_UpdateScreen>

}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001d8 	.word	0x200001d8
 80013fc:	080081fc 	.word	0x080081fc
 8001400:	2000000c 	.word	0x2000000c
 8001404:	08008204 	.word	0x08008204
 8001408:	0800820c 	.word	0x0800820c

0800140c <LerSensores>:




// sensores
void LerSensores(){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

	Walle.Sensor_Direita = Read_Ultrasonic(SensorDireitoTrigger_GPIO_Port, SensorDireitoTrigger_Pin, SensorDireitoEcho_GPIO_Port, SensorDireitoEcho_Pin);
 8001410:	2302      	movs	r3, #2
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <LerSensores+0x48>)
 8001414:	2104      	movs	r1, #4
 8001416:	480f      	ldr	r0, [pc, #60]	; (8001454 <LerSensores+0x48>)
 8001418:	f000 f822 	bl	8001460 <Read_Ultrasonic>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <LerSensores+0x4c>)
 8001422:	811a      	strh	r2, [r3, #8]
	Walle.Sensor_Esquerda = Read_Ultrasonic(SensorEsquerdaTrigger_GPIO_Port, SensorEsquerdaTrigger_Pin, SensorEsquerdaEcho_GPIO_Port, SensorEsquerdaEcho_Pin);
 8001424:	2304      	movs	r3, #4
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <LerSensores+0x50>)
 8001428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <LerSensores+0x50>)
 800142e:	f000 f817 	bl	8001460 <Read_Ultrasonic>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <LerSensores+0x4c>)
 8001438:	80da      	strh	r2, [r3, #6]
	Walle.Sensor_Frente = Read_Ultrasonic(SensorFrenteTrigger_GPIO_Port, SensorFrenteTrigger_Pin, SensorFrenteEcho_GPIO_Port, SensorFrenteEcho_Pin);
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <LerSensores+0x48>)
 800143e:	2140      	movs	r1, #64	; 0x40
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <LerSensores+0x48>)
 8001442:	f000 f80d 	bl	8001460 <Read_Ultrasonic>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4b03      	ldr	r3, [pc, #12]	; (8001458 <LerSensores+0x4c>)
 800144c:	809a      	strh	r2, [r3, #4]

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40020000 	.word	0x40020000
 8001458:	200001d8 	.word	0x200001d8
 800145c:	40020400 	.word	0x40020400

08001460 <Read_Ultrasonic>:

uint16_t Read_Ultrasonic(GPIO_TypeDef* TriggerPort, uint16_t TriggerPin, GPIO_TypeDef* EchoPort, uint16_t EchoPin){
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	461a      	mov	r2, r3
 800146c:	460b      	mov	r3, r1
 800146e:	817b      	strh	r3, [r7, #10]
 8001470:	4613      	mov	r3, r2
 8001472:	813b      	strh	r3, [r7, #8]

	uint32_t pMillis;
	uint32_t Value1 = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
	uint32_t Value2 = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
	uint16_t Distance  = 0;  // cm
 800147c:	2300      	movs	r3, #0
 800147e:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(TriggerPort, TriggerPin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001480:	897b      	ldrh	r3, [r7, #10]
 8001482:	2201      	movs	r2, #1
 8001484:	4619      	mov	r1, r3
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f001 fa46 	bl	8002918 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <Read_Ultrasonic+0xf8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER (&htim3) < 10);  // wait for 10 us
 8001494:	bf00      	nop
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <Read_Ultrasonic+0xf8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	2b09      	cmp	r3, #9
 800149e:	d9fa      	bls.n	8001496 <Read_Ultrasonic+0x36>
	HAL_GPIO_WritePin(TriggerPort, TriggerPin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80014a0:	897b      	ldrh	r3, [r7, #10]
 80014a2:	2200      	movs	r2, #0
 80014a4:	4619      	mov	r1, r3
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f001 fa36 	bl	8002918 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80014ac:	f000 ff86 	bl	80023bc <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (EchoPort, EchoPin)) && pMillis + 10 >  HAL_GetTick());
 80014b2:	bf00      	nop
 80014b4:	893b      	ldrh	r3, [r7, #8]
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f001 fa15 	bl	80028e8 <HAL_GPIO_ReadPin>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d107      	bne.n	80014d4 <Read_Ultrasonic+0x74>
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f103 040a 	add.w	r4, r3, #10
 80014ca:	f000 ff77 	bl	80023bc <HAL_GetTick>
 80014ce:	4603      	mov	r3, r0
 80014d0:	429c      	cmp	r4, r3
 80014d2:	d8ef      	bhi.n	80014b4 <Read_Ultrasonic+0x54>
	Value1 = __HAL_TIM_GET_COUNTER (&htim3);
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <Read_Ultrasonic+0xf8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	61fb      	str	r3, [r7, #28]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80014dc:	f000 ff6e 	bl	80023bc <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (EchoPort, EchoPin)) && pMillis + 50 > HAL_GetTick());
 80014e2:	bf00      	nop
 80014e4:	893b      	ldrh	r3, [r7, #8]
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f001 f9fd 	bl	80028e8 <HAL_GPIO_ReadPin>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <Read_Ultrasonic+0xa4>
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80014fa:	f000 ff5f 	bl	80023bc <HAL_GetTick>
 80014fe:	4603      	mov	r3, r0
 8001500:	429c      	cmp	r4, r3
 8001502:	d8ef      	bhi.n	80014e4 <Read_Ultrasonic+0x84>
	Value2 = __HAL_TIM_GET_COUNTER (&htim3);
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Read_Ultrasonic+0xf8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	61bb      	str	r3, [r7, #24]

	Distance = (Value2-Value1)* 0.034/2;
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe fff6 	bl	8000504 <__aeabi_ui2d>
 8001518:	a30d      	add	r3, pc, #52	; (adr r3, 8001550 <Read_Ultrasonic+0xf0>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff f86b 	bl	80005f8 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001532:	f7ff f98b 	bl	800084c <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fa6d 	bl	8000a1c <__aeabi_d2uiz>
 8001542:	4603      	mov	r3, r0
 8001544:	82fb      	strh	r3, [r7, #22]

	return Distance;
 8001546:	8afb      	ldrh	r3, [r7, #22]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3724      	adds	r7, #36	; 0x24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	b020c49c 	.word	0xb020c49c
 8001554:	3fa16872 	.word	0x3fa16872
 8001558:	20000128 	.word	0x20000128

0800155c <SetDefaultSpeed>:



// controle velocidade
void SetDefaultSpeed(){
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	TIM4->CCR1 = MaxPWM;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <SetDefaultSpeed+0x30>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <SetDefaultSpeed+0x34>)
 8001566:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = MaxPWM;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <SetDefaultSpeed+0x30>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <SetDefaultSpeed+0x34>)
 800156e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = MaxPWM;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SetDefaultSpeed+0x30>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <SetDefaultSpeed+0x34>)
 8001576:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = MaxPWM;
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <SetDefaultSpeed+0x30>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SetDefaultSpeed+0x34>)
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000004 	.word	0x20000004
 8001590:	40000800 	.word	0x40000800

08001594 <RightMotorSpeed>:

void RightMotorSpeed(uint8_t speed){
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
	//MaxPWM = speed;
	if (speed<=1)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d801      	bhi.n	80015a8 <RightMotorSpeed+0x14>
		speed = 1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	71fb      	strb	r3, [r7, #7]

	if (speed>100)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <RightMotorSpeed+0x1e>
		speed=100;
 80015ae:	2364      	movs	r3, #100	; 0x64
 80015b0:	71fb      	strb	r3, [r7, #7]

	TIM4->CCR1 = speed-1;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	1e5a      	subs	r2, r3, #1
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <RightMotorSpeed+0x3c>)
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = speed-1;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	1e5a      	subs	r2, r3, #1
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <RightMotorSpeed+0x3c>)
 80015c0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40000800 	.word	0x40000800

080015d4 <LeftMotorSpeed>:

void LeftMotorSpeed(uint8_t speed){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
	//MaxPWM = speed;
	if (speed<=1)
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d801      	bhi.n	80015e8 <LeftMotorSpeed+0x14>
		speed=1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	71fb      	strb	r3, [r7, #7]

	if (speed>100)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <LeftMotorSpeed+0x1e>
		speed=100;
 80015ee:	2364      	movs	r3, #100	; 0x64
 80015f0:	71fb      	strb	r3, [r7, #7]

	TIM4->CCR3 = speed-1;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	1e5a      	subs	r2, r3, #1
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <LeftMotorSpeed+0x3c>)
 80015f8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = speed-1;
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	1e5a      	subs	r2, r3, #1
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <LeftMotorSpeed+0x3c>)
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40000800 	.word	0x40000800

08001614 <RightMotorForward>:


// macros roda direita
void RightMotorForward(){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001618:	2104      	movs	r1, #4
 800161a:	4804      	ldr	r0, [pc, #16]	; (800162c <RightMotorForward+0x18>)
 800161c:	f002 fbf0 	bl	8003e00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
 8001620:	2100      	movs	r1, #0
 8001622:	4802      	ldr	r0, [pc, #8]	; (800162c <RightMotorForward+0x18>)
 8001624:	f002 fc9c 	bl	8003f60 <HAL_TIM_PWM_Stop>

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000170 	.word	0x20000170

08001630 <RightMotorStop>:
void RightMotorBackward(){
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);
}

void RightMotorStop(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
 8001634:	2100      	movs	r1, #0
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <RightMotorStop+0x18>)
 8001638:	f002 fc92 	bl	8003f60 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);
 800163c:	2104      	movs	r1, #4
 800163e:	4802      	ldr	r0, [pc, #8]	; (8001648 <RightMotorStop+0x18>)
 8001640:	f002 fc8e 	bl	8003f60 <HAL_TIM_PWM_Stop>

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000170 	.word	0x20000170

0800164c <LeftMotorForward>:


// macros roda direita
void LeftMotorForward(){
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001650:	2108      	movs	r1, #8
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <LeftMotorForward+0x18>)
 8001654:	f002 fbd4 	bl	8003e00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 8001658:	210c      	movs	r1, #12
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <LeftMotorForward+0x18>)
 800165c:	f002 fc80 	bl	8003f60 <HAL_TIM_PWM_Stop>

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000170 	.word	0x20000170

08001668 <LeftMotorStop>:
void LeftMotorBackward(){
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_3);
}

void LeftMotorStop(){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_3);
 800166c:	2108      	movs	r1, #8
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <LeftMotorStop+0x18>)
 8001670:	f002 fc76 	bl	8003f60 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 8001674:	210c      	movs	r1, #12
 8001676:	4802      	ldr	r0, [pc, #8]	; (8001680 <LeftMotorStop+0x18>)
 8001678:	f002 fc72 	bl	8003f60 <HAL_TIM_PWM_Stop>

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000170 	.word	0x20000170

08001684 <Mov_Forward>:



// movimentos
void Mov_Forward(){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0

	RightEncoderCount=0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Mov_Forward+0x2c>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <Mov_Forward+0x30>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

	Flag_RightMotor_Mov_Forward=true;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <Mov_Forward+0x34>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
	Flag_LeftMotor_Mov_Forward=true;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <Mov_Forward+0x38>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]

	SetDefaultSpeed();
 80016a0:	f7ff ff5c 	bl	800155c <SetDefaultSpeed>

	RightMotorForward();
 80016a4:	f7ff ffb6 	bl	8001614 <RightMotorForward>
	LeftMotorForward();
 80016a8:	f7ff ffd0 	bl	800164c <LeftMotorForward>

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200001cc 	.word	0x200001cc
 80016b4:	200001c8 	.word	0x200001c8
 80016b8:	200001d0 	.word	0x200001d0
 80016bc:	200001d1 	.word	0x200001d1

080016c0 <Mov_RotateRight>:

	RightMotorBackward();
	LeftMotorBackward();
}

void Mov_RotateRight(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

	RightEncoderCount=0;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <Mov_RotateRight+0x24>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <Mov_RotateRight+0x28>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

	Flag_LeftMotor_Mov_RotateRight=true;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <Mov_RotateRight+0x2c>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]

	SetDefaultSpeed();
 80016d6:	f7ff ff41 	bl	800155c <SetDefaultSpeed>

	LeftMotorForward();
 80016da:	f7ff ffb7 	bl	800164c <LeftMotorForward>


}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200001cc 	.word	0x200001cc
 80016e8:	200001c8 	.word	0x200001c8
 80016ec:	200001d4 	.word	0x200001d4

080016f0 <HAL_GPIO_EXTI_Callback>:



// callback encoder
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_4){
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	2b10      	cmp	r3, #16
 80016fe:	d104      	bne.n	800170a <HAL_GPIO_EXTI_Callback+0x1a>
		LeftEncoderCount++;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_GPIO_EXTI_Callback+0x38>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_GPIO_EXTI_Callback+0x38>)
 8001708:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == GPIO_PIN_3){
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	2b08      	cmp	r3, #8
 800170e:	d104      	bne.n	800171a <HAL_GPIO_EXTI_Callback+0x2a>
		RightEncoderCount++;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001718:	6013      	str	r3, [r2, #0]
	}

}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	200001c8 	.word	0x200001c8
 800172c:	200001cc 	.word	0x200001cc

08001730 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(5000);
 8001738:	f241 3088 	movw	r0, #5000	; 0x1388
 800173c:	f003 fb9c 	bl	8004e78 <osDelay>
			while(Flag_LeftMotor_Mov_Forward || Flag_RightMotor_Mov_Forward){
				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
			};
		}*/

		osDelay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f003 fb99 	bl	8004e78 <osDelay>
		osDelay(5000);
 8001746:	e7f7      	b.n	8001738 <StartDefaultTask+0x8>

08001748 <StartRightMotor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRightMotor */
void StartRightMotor(void *argument)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartRightMotor */
	/* Infinite loop */
	for(;;)
	{
		if(Flag_RightMotor_Mov_Forward){
 8001750:	4b26      	ldr	r3, [pc, #152]	; (80017ec <StartRightMotor+0xa4>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d03a      	beq.n	80017ce <StartRightMotor+0x86>

			if(RightEncoderCount >=20 && RightEncoderCount < 25){
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <StartRightMotor+0xa8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b13      	cmp	r3, #19
 800175e:	dd0c      	ble.n	800177a <StartRightMotor+0x32>
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <StartRightMotor+0xa8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b18      	cmp	r3, #24
 8001766:	dc08      	bgt.n	800177a <StartRightMotor+0x32>
				RightMotorSpeed(MaxPWM-5);
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <StartRightMotor+0xac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3b05      	subs	r3, #5
 8001770:	b2db      	uxtb	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff0e 	bl	8001594 <RightMotorSpeed>
 8001778:	e020      	b.n	80017bc <StartRightMotor+0x74>
			}

			else if(RightEncoderCount >=25 && RightEncoderCount < 35){
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <StartRightMotor+0xa8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b18      	cmp	r3, #24
 8001780:	dd0c      	ble.n	800179c <StartRightMotor+0x54>
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <StartRightMotor+0xa8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b22      	cmp	r3, #34	; 0x22
 8001788:	dc08      	bgt.n	800179c <StartRightMotor+0x54>
				RightMotorSpeed(MaxPWM-10);
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <StartRightMotor+0xac>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	3b0a      	subs	r3, #10
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fefd 	bl	8001594 <RightMotorSpeed>
 800179a:	e00f      	b.n	80017bc <StartRightMotor+0x74>
			}

			else if(RightEncoderCount >=35 && RightEncoderCount < 45){
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <StartRightMotor+0xa8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b22      	cmp	r3, #34	; 0x22
 80017a2:	dd0b      	ble.n	80017bc <StartRightMotor+0x74>
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <StartRightMotor+0xa8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b2c      	cmp	r3, #44	; 0x2c
 80017aa:	dc07      	bgt.n	80017bc <StartRightMotor+0x74>
				RightMotorSpeed(MaxPWM-15);
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <StartRightMotor+0xac>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	3b0f      	subs	r3, #15
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff feec 	bl	8001594 <RightMotorSpeed>
			}

			if(RightEncoderCount >=100){
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <StartRightMotor+0xa8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b63      	cmp	r3, #99	; 0x63
 80017c2:	dd04      	ble.n	80017ce <StartRightMotor+0x86>
				RightMotorStop();
 80017c4:	f7ff ff34 	bl	8001630 <RightMotorStop>
				Flag_RightMotor_Mov_Forward=false;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <StartRightMotor+0xa4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]

			}

		}

		if(Flag_RightMotor_Mov_Backward){
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <StartRightMotor+0xb0>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <StartRightMotor+0x9c>
			if(RightEncoderCount>=15){
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <StartRightMotor+0xa8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b0e      	cmp	r3, #14
 80017dc:	dd02      	ble.n	80017e4 <StartRightMotor+0x9c>
				Flag_RightMotor_Mov_Backward = false;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <StartRightMotor+0xb0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
			}
		}

		osDelay(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f003 fb47 	bl	8004e78 <osDelay>
		if(Flag_RightMotor_Mov_Forward){
 80017ea:	e7b1      	b.n	8001750 <StartRightMotor+0x8>
 80017ec:	200001d0 	.word	0x200001d0
 80017f0:	200001cc 	.word	0x200001cc
 80017f4:	20000004 	.word	0x20000004
 80017f8:	200001d2 	.word	0x200001d2

080017fc <StartLeftMotor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLeftMotor */
void StartLeftMotor(void *argument)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLeftMotor */
	/* Infinite loop */
	for(;;)
	{
		if(Flag_LeftMotor_Mov_Forward){
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <StartLeftMotor+0xc0>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03a      	beq.n	8001882 <StartLeftMotor+0x86>


			if(LeftEncoderCount >=20 && LeftEncoderCount < 25){
 800180c:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <StartLeftMotor+0xc4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b13      	cmp	r3, #19
 8001812:	dd0c      	ble.n	800182e <StartLeftMotor+0x32>
 8001814:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <StartLeftMotor+0xc4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b18      	cmp	r3, #24
 800181a:	dc08      	bgt.n	800182e <StartLeftMotor+0x32>
				LeftMotorSpeed(MaxPWM-5);
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <StartLeftMotor+0xc8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	3b05      	subs	r3, #5
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fed4 	bl	80015d4 <LeftMotorSpeed>
 800182c:	e020      	b.n	8001870 <StartLeftMotor+0x74>
			}

			else if(LeftEncoderCount >=25 && LeftEncoderCount < 35){
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <StartLeftMotor+0xc4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b18      	cmp	r3, #24
 8001834:	dd0c      	ble.n	8001850 <StartLeftMotor+0x54>
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <StartLeftMotor+0xc4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b22      	cmp	r3, #34	; 0x22
 800183c:	dc08      	bgt.n	8001850 <StartLeftMotor+0x54>
				LeftMotorSpeed(MaxPWM-10);
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <StartLeftMotor+0xc8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	3b0a      	subs	r3, #10
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fec3 	bl	80015d4 <LeftMotorSpeed>
 800184e:	e00f      	b.n	8001870 <StartLeftMotor+0x74>
			}

			else if(LeftEncoderCount >=35 && LeftEncoderCount < 45){
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <StartLeftMotor+0xc4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b22      	cmp	r3, #34	; 0x22
 8001856:	dd0b      	ble.n	8001870 <StartLeftMotor+0x74>
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <StartLeftMotor+0xc4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b2c      	cmp	r3, #44	; 0x2c
 800185e:	dc07      	bgt.n	8001870 <StartLeftMotor+0x74>
				LeftMotorSpeed(MaxPWM-15);
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <StartLeftMotor+0xc8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	3b0f      	subs	r3, #15
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff feb2 	bl	80015d4 <LeftMotorSpeed>
			}

			if(LeftEncoderCount >=100){
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <StartLeftMotor+0xc4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b63      	cmp	r3, #99	; 0x63
 8001876:	dd04      	ble.n	8001882 <StartLeftMotor+0x86>
				LeftMotorStop();
 8001878:	f7ff fef6 	bl	8001668 <LeftMotorStop>
				Flag_LeftMotor_Mov_Forward=false;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <StartLeftMotor+0xc0>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Flag_LeftMotor_Mov_RotateRight){
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <StartLeftMotor+0xcc>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <StartLeftMotor+0xa0>
			if(LeftEncoderCount >=40){
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <StartLeftMotor+0xc4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b27      	cmp	r3, #39	; 0x27
 8001890:	dd04      	ble.n	800189c <StartLeftMotor+0xa0>
				LeftMotorStop();
 8001892:	f7ff fee9 	bl	8001668 <LeftMotorStop>
				Flag_LeftMotor_Mov_RotateRight=false;
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <StartLeftMotor+0xcc>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
				//HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
			}
		}

		if(Flag_LeftMotor_Mov_Backward){
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <StartLeftMotor+0xd0>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <StartLeftMotor+0xb6>
			if(LeftEncoderCount >= 40){
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <StartLeftMotor+0xc4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b27      	cmp	r3, #39	; 0x27
 80018aa:	dd02      	ble.n	80018b2 <StartLeftMotor+0xb6>
				Flag_LeftMotor_Mov_Backward = false;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <StartLeftMotor+0xd0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
			}
		}
		osDelay(1);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f003 fae0 	bl	8004e78 <osDelay>
		if(Flag_LeftMotor_Mov_Forward){
 80018b8:	e7a4      	b.n	8001804 <StartLeftMotor+0x8>
 80018ba:	bf00      	nop
 80018bc:	200001d1 	.word	0x200001d1
 80018c0:	200001c8 	.word	0x200001c8
 80018c4:	20000004 	.word	0x20000004
 80018c8:	200001d4 	.word	0x200001d4
 80018cc:	200001d3 	.word	0x200001d3

080018d0 <StartStateMachine>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateMachine */
void StartStateMachine(void *argument)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{

		// modo barata tonta
		if(Baratinha){
 80018d8:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <StartStateMachine+0x118>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d07f      	beq.n	80019e0 <StartStateMachine+0x110>
			switch (Barata) {
 80018e0:	4b42      	ldr	r3, [pc, #264]	; (80019ec <StartStateMachine+0x11c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d878      	bhi.n	80019da <StartStateMachine+0x10a>
 80018e8:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <StartStateMachine+0x20>)
 80018ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ee:	bf00      	nop
 80018f0:	08001909 	.word	0x08001909
 80018f4:	08001927 	.word	0x08001927
 80018f8:	0800194b 	.word	0x0800194b
 80018fc:	0800198b 	.word	0x0800198b
 8001900:	080019af 	.word	0x080019af
 8001904:	080019d3 	.word	0x080019d3

			case AguardaBotao:

				if(!HAL_GPIO_ReadPin(Key_GPIO_Port, Key_Pin)){
 8001908:	2101      	movs	r1, #1
 800190a:	4839      	ldr	r0, [pc, #228]	; (80019f0 <StartStateMachine+0x120>)
 800190c:	f000 ffec 	bl	80028e8 <HAL_GPIO_ReadPin>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d163      	bne.n	80019de <StartStateMachine+0x10e>
					osDelay(500);
 8001916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800191a:	f003 faad 	bl	8004e78 <osDelay>
					Barata = LeSensor;
 800191e:	4b33      	ldr	r3, [pc, #204]	; (80019ec <StartStateMachine+0x11c>)
 8001920:	2202      	movs	r2, #2
 8001922:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001924:	e05b      	b.n	80019de <StartStateMachine+0x10e>
			case Frente:

				Mov_Forward();
 8001926:	f7ff fead 	bl	8001684 <Mov_Forward>
				while(Flag_LeftMotor_Mov_Forward || Flag_RightMotor_Mov_Forward){
 800192a:	e002      	b.n	8001932 <StartStateMachine+0x62>
					osDelay(100);
 800192c:	2064      	movs	r0, #100	; 0x64
 800192e:	f003 faa3 	bl	8004e78 <osDelay>
				while(Flag_LeftMotor_Mov_Forward || Flag_RightMotor_Mov_Forward){
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <StartStateMachine+0x124>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f8      	bne.n	800192c <StartStateMachine+0x5c>
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <StartStateMachine+0x128>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f4      	bne.n	800192c <StartStateMachine+0x5c>
				}
				Barata = LeSensor;
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <StartStateMachine+0x11c>)
 8001944:	2202      	movs	r2, #2
 8001946:	701a      	strb	r2, [r3, #0]

				break;
 8001948:	e04a      	b.n	80019e0 <StartStateMachine+0x110>
			case LeSensor:

				LerSensores();
 800194a:	f7ff fd5f 	bl	800140c <LerSensores>
				printDistance();
 800194e:	f7ff fd07 	bl	8001360 <printDistance>

				if(Walle.Sensor_Frente > 20){
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <StartStateMachine+0x12c>)
 8001954:	889b      	ldrh	r3, [r3, #4]
 8001956:	2b14      	cmp	r3, #20
 8001958:	d903      	bls.n	8001962 <StartStateMachine+0x92>
					Barata = Frente;
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <StartStateMachine+0x11c>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
				}
				else{
					Barata = AguardaBotao;
				}

				break;
 8001960:	e03e      	b.n	80019e0 <StartStateMachine+0x110>
				else if(Walle.Sensor_Direita > 20){
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <StartStateMachine+0x12c>)
 8001964:	891b      	ldrh	r3, [r3, #8]
 8001966:	2b14      	cmp	r3, #20
 8001968:	d903      	bls.n	8001972 <StartStateMachine+0xa2>
					Barata = ViraDireita;
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <StartStateMachine+0x11c>)
 800196c:	2203      	movs	r2, #3
 800196e:	701a      	strb	r2, [r3, #0]
				break;
 8001970:	e036      	b.n	80019e0 <StartStateMachine+0x110>
				else if(Walle.Sensor_Esquerda > 20){
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <StartStateMachine+0x12c>)
 8001974:	88db      	ldrh	r3, [r3, #6]
 8001976:	2b14      	cmp	r3, #20
 8001978:	d903      	bls.n	8001982 <StartStateMachine+0xb2>
					Barata = ViraEsquerda;
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <StartStateMachine+0x11c>)
 800197c:	2204      	movs	r2, #4
 800197e:	701a      	strb	r2, [r3, #0]
				break;
 8001980:	e02e      	b.n	80019e0 <StartStateMachine+0x110>
					Barata = AguardaBotao;
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <StartStateMachine+0x11c>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
				break;
 8001988:	e02a      	b.n	80019e0 <StartStateMachine+0x110>

			case ViraDireita:

				Mov_RotateRight();
 800198a:	f7ff fe99 	bl	80016c0 <Mov_RotateRight>
				while(Flag_LeftMotor_Mov_RotateRight || Flag_RightMotor_Mov_RotateRight){
 800198e:	e002      	b.n	8001996 <StartStateMachine+0xc6>
					osDelay(100);
 8001990:	2064      	movs	r0, #100	; 0x64
 8001992:	f003 fa71 	bl	8004e78 <osDelay>
				while(Flag_LeftMotor_Mov_RotateRight || Flag_RightMotor_Mov_RotateRight){
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <StartStateMachine+0x130>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f8      	bne.n	8001990 <StartStateMachine+0xc0>
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <StartStateMachine+0x134>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f4      	bne.n	8001990 <StartStateMachine+0xc0>
				}
				Barata = LeSensor;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <StartStateMachine+0x11c>)
 80019a8:	2202      	movs	r2, #2
 80019aa:	701a      	strb	r2, [r3, #0]


				break;
 80019ac:	e018      	b.n	80019e0 <StartStateMachine+0x110>
			case ViraEsquerda:

				Mov_RotateRight();
 80019ae:	f7ff fe87 	bl	80016c0 <Mov_RotateRight>
				while(Flag_LeftMotor_Mov_RotateRight || Flag_RightMotor_Mov_RotateRight){
 80019b2:	e002      	b.n	80019ba <StartStateMachine+0xea>
					osDelay(100);
 80019b4:	2064      	movs	r0, #100	; 0x64
 80019b6:	f003 fa5f 	bl	8004e78 <osDelay>
				while(Flag_LeftMotor_Mov_RotateRight || Flag_RightMotor_Mov_RotateRight){
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <StartStateMachine+0x130>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f8      	bne.n	80019b4 <StartStateMachine+0xe4>
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <StartStateMachine+0x134>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f4      	bne.n	80019b4 <StartStateMachine+0xe4>
				}
				Barata = LeSensor;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <StartStateMachine+0x11c>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	701a      	strb	r2, [r3, #0]

				break;
 80019d0:	e006      	b.n	80019e0 <StartStateMachine+0x110>
			case Achou:

				Barata = AguardaBotao;
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <StartStateMachine+0x11c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]

				break;
 80019d8:	e002      	b.n	80019e0 <StartStateMachine+0x110>
			default:
				break;
 80019da:	bf00      	nop
 80019dc:	e000      	b.n	80019e0 <StartStateMachine+0x110>
				break;
 80019de:	bf00      	nop

		// modo BlindSearch
		else{

		}
		osDelay(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f003 fa49 	bl	8004e78 <osDelay>
		if(Baratinha){
 80019e6:	e777      	b.n	80018d8 <StartStateMachine+0x8>
 80019e8:	20000000 	.word	0x20000000
 80019ec:	200001e2 	.word	0x200001e2
 80019f0:	40020000 	.word	0x40020000
 80019f4:	200001d1 	.word	0x200001d1
 80019f8:	200001d0 	.word	0x200001d0
 80019fc:	200001d8 	.word	0x200001d8
 8001a00:	200001d4 	.word	0x200001d4
 8001a04:	200001d5 	.word	0x200001d5

08001a08 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001a1a:	f000 fcbb 	bl	8002394 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40010000 	.word	0x40010000

08001a2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1){ };
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>
	...

08001a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_MspInit+0x54>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <HAL_MspInit+0x54>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_MspInit+0x54>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_MspInit+0x54>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_MspInit+0x54>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_MspInit+0x54>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	210f      	movs	r1, #15
 8001a7a:	f06f 0001 	mvn.w	r0, #1
 8001a7e:	f000 fd85 	bl	800258c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_I2C_MspInit+0xc0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d14a      	bne.n	8001b48 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af0:	2312      	movs	r3, #18
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001afc:	2304      	movs	r3, #4
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <HAL_I2C_MspInit+0xc8>)
 8001b08:	f000 fd6a 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b0c:	2310      	movs	r3, #16
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001b1c:	2309      	movs	r3, #9
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <HAL_I2C_MspInit+0xcc>)
 8001b28:	f000 fd5a 	bl	80025e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001b36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_I2C_MspInit+0xc4>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40005c00 	.word	0x40005c00
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	40020400 	.word	0x40020400

08001b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b70:	d10e      	bne.n	8001b90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_TIM_Base_MspInit+0x64>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <HAL_TIM_Base_MspInit+0x64>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_TIM_Base_MspInit+0x64>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b8e:	e012      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_TIM_Base_MspInit+0x68>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10d      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_TIM_Base_MspInit+0x64>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_TIM_Base_MspInit+0x64>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_TIM_Base_MspInit+0x64>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40000400 	.word	0x40000400

08001bcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10d      	bne.n	8001bfa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_TIM_PWM_MspInit+0x40>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_TIM_PWM_MspInit+0x40>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_TIM_PWM_MspInit+0x40>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40000800 	.word	0x40000800
 8001c0c:	40023800 	.word	0x40023800

08001c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c30:	d11e      	bne.n	8001c70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001c4e:	2320      	movs	r3, #32
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4816      	ldr	r0, [pc, #88]	; (8001cc4 <HAL_TIM_MspPostInit+0xb4>)
 8001c6a:	f000 fcb9 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c6e:	e023      	b.n	8001cb8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_TIM_MspPostInit+0xb8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d11e      	bne.n	8001cb8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 8001c96:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <HAL_TIM_MspPostInit+0xbc>)
 8001cb4:	f000 fc94 	bl	80025e0 <HAL_GPIO_Init>
}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40000800 	.word	0x40000800
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_InitTick+0xd0>)
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	4a2d      	ldr	r2, [pc, #180]	; (8001da0 <HAL_InitTick+0xd0>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <HAL_InitTick+0xd0>)
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cfc:	f107 020c 	add.w	r2, r7, #12
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 feec 	bl	8003ae4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d0c:	f001 fed6 	bl	8003abc <HAL_RCC_GetPCLK2Freq>
 8001d10:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <HAL_InitTick+0xd4>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0c9b      	lsrs	r3, r3, #18
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <HAL_InitTick+0xd8>)
 8001d22:	4a22      	ldr	r2, [pc, #136]	; (8001dac <HAL_InitTick+0xdc>)
 8001d24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_InitTick+0xd8>)
 8001d28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <HAL_InitTick+0xd8>)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <HAL_InitTick+0xd8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_InitTick+0xd8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_InitTick+0xd8>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d46:	4818      	ldr	r0, [pc, #96]	; (8001da8 <HAL_InitTick+0xd8>)
 8001d48:	f001 fefe 	bl	8003b48 <HAL_TIM_Base_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11b      	bne.n	8001d92 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d5a:	4813      	ldr	r0, [pc, #76]	; (8001da8 <HAL_InitTick+0xd8>)
 8001d5c:	f001 ff9e 	bl	8003c9c <HAL_TIM_Base_Start_IT>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d111      	bne.n	8001d92 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d6e:	2019      	movs	r0, #25
 8001d70:	f000 fc28 	bl	80025c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	d808      	bhi.n	8001d8c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	2019      	movs	r0, #25
 8001d80:	f000 fc04 	bl	800258c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_InitTick+0xe0>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e002      	b.n	8001d92 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3730      	adds	r7, #48	; 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	431bde83 	.word	0x431bde83
 8001da8:	200001e4 	.word	0x200001e4
 8001dac:	40010000 	.word	0x40010000
 8001db0:	20000014 	.word	0x20000014

08001db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <NMI_Handler+0x4>

08001dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <BusFault_Handler+0x4>

08001dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <UsageFault_Handler+0x4>

08001dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Direito_Pin);
 8001de4:	2008      	movs	r0, #8
 8001de6:	f000 fdb1 	bl	800294c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}

08001dee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Esquerdo_Pin);
 8001df2:	2010      	movs	r0, #16
 8001df4:	f000 fdaa 	bl	800294c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e02:	f002 f911 	bl	8004028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200001e4 	.word	0x200001e4

08001e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <_sbrk+0x5c>)
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <_sbrk+0x60>)
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <_sbrk+0x64>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <_sbrk+0x68>)
 8001e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d207      	bcs.n	8001e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e40:	f005 fd54 	bl	80078ec <__errno>
 8001e44:	4603      	mov	r3, r0
 8001e46:	220c      	movs	r2, #12
 8001e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	e009      	b.n	8001e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <_sbrk+0x64>)
 8001e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e62:	68fb      	ldr	r3, [r7, #12]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20010000 	.word	0x20010000
 8001e70:	00000400 	.word	0x00000400
 8001e74:	2000022c 	.word	0x2000022c
 8001e78:	20005170 	.word	0x20005170

08001e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SystemInit+0x20>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <SystemInit+0x20>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea6:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ebc:	4c0b      	ldr	r4, [pc, #44]	; (8001eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eca:	f7ff ffd7 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ece:	f005 fd13 	bl	80078f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7fe ff41 	bl	8000d58 <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ee4:	08009074 	.word	0x08009074
  ldr r2, =_sbss
 8001ee8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001eec:	2000516c 	.word	0x2000516c

08001ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC_IRQHandler>

08001ef2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	2301      	movs	r3, #1
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	1dfb      	adds	r3, r7, #7
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2178      	movs	r1, #120	; 0x78
 8001f1e:	4803      	ldr	r0, [pc, #12]	; (8001f2c <ssd1306_WriteCommand+0x2c>)
 8001f20:	f000 fe70 	bl	8002c04 <HAL_I2C_Mem_Write>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	2000008c 	.word	0x2000008c

08001f30 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af04      	add	r7, sp, #16
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f42:	9202      	str	r2, [sp, #8]
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	2178      	movs	r1, #120	; 0x78
 8001f50:	4803      	ldr	r0, [pc, #12]	; (8001f60 <ssd1306_WriteData+0x30>)
 8001f52:	f000 fe57 	bl	8002c04 <HAL_I2C_Mem_Write>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000008c 	.word	0x2000008c

08001f64 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001f68:	f7ff ffc3 	bl	8001ef2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001f6c:	2064      	movs	r0, #100	; 0x64
 8001f6e:	f000 fa31 	bl	80023d4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001f72:	2000      	movs	r0, #0
 8001f74:	f000 f9ce 	bl	8002314 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001f78:	2020      	movs	r0, #32
 8001f7a:	f7ff ffc1 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff ffbe 	bl	8001f00 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f84:	20b0      	movs	r0, #176	; 0xb0
 8001f86:	f7ff ffbb 	bl	8001f00 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001f8a:	20c8      	movs	r0, #200	; 0xc8
 8001f8c:	f7ff ffb8 	bl	8001f00 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff ffb5 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001f96:	2010      	movs	r0, #16
 8001f98:	f7ff ffb2 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001f9c:	2040      	movs	r0, #64	; 0x40
 8001f9e:	f7ff ffaf 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001fa2:	20ff      	movs	r0, #255	; 0xff
 8001fa4:	f000 f9a2 	bl	80022ec <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001fa8:	20a1      	movs	r0, #161	; 0xa1
 8001faa:	f7ff ffa9 	bl	8001f00 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001fae:	20a6      	movs	r0, #166	; 0xa6
 8001fb0:	f7ff ffa6 	bl	8001f00 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001fb4:	20a8      	movs	r0, #168	; 0xa8
 8001fb6:	f7ff ffa3 	bl	8001f00 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001fba:	203f      	movs	r0, #63	; 0x3f
 8001fbc:	f7ff ffa0 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fc0:	20a4      	movs	r0, #164	; 0xa4
 8001fc2:	f7ff ff9d 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001fc6:	20d3      	movs	r0, #211	; 0xd3
 8001fc8:	f7ff ff9a 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff ff97 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fd2:	20d5      	movs	r0, #213	; 0xd5
 8001fd4:	f7ff ff94 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001fd8:	20f0      	movs	r0, #240	; 0xf0
 8001fda:	f7ff ff91 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001fde:	20d9      	movs	r0, #217	; 0xd9
 8001fe0:	f7ff ff8e 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001fe4:	2022      	movs	r0, #34	; 0x22
 8001fe6:	f7ff ff8b 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001fea:	20da      	movs	r0, #218	; 0xda
 8001fec:	f7ff ff88 	bl	8001f00 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ff0:	2012      	movs	r0, #18
 8001ff2:	f7ff ff85 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ff6:	20db      	movs	r0, #219	; 0xdb
 8001ff8:	f7ff ff82 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ffc:	2020      	movs	r0, #32
 8001ffe:	f7ff ff7f 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002002:	208d      	movs	r0, #141	; 0x8d
 8002004:	f7ff ff7c 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002008:	2014      	movs	r0, #20
 800200a:	f7ff ff79 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800200e:	2001      	movs	r0, #1
 8002010:	f000 f980 	bl	8002314 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002014:	2000      	movs	r0, #0
 8002016:	f000 f80f 	bl	8002038 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800201a:	f000 f825 	bl	8002068 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <ssd1306_Init+0xd0>)
 8002020:	2200      	movs	r2, #0
 8002022:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <ssd1306_Init+0xd0>)
 8002026:	2200      	movs	r2, #0
 8002028:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800202a:	4b02      	ldr	r3, [pc, #8]	; (8002034 <ssd1306_Init+0xd0>)
 800202c:	2201      	movs	r2, #1
 800202e:	711a      	strb	r2, [r3, #4]
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000630 	.word	0x20000630

08002038 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <ssd1306_Fill+0x14>
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <ssd1306_Fill+0x16>
 800204c:	23ff      	movs	r3, #255	; 0xff
 800204e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002052:	4619      	mov	r1, r3
 8002054:	4803      	ldr	r0, [pc, #12]	; (8002064 <ssd1306_Fill+0x2c>)
 8002056:	f005 fbeb 	bl	8007830 <memset>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000230 	.word	0x20000230

08002068 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800206e:	2300      	movs	r3, #0
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	e016      	b.n	80020a2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	3b50      	subs	r3, #80	; 0x50
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff40 	bl	8001f00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff ff3d 	bl	8001f00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002086:	2010      	movs	r0, #16
 8002088:	f7ff ff3a 	bl	8001f00 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	01db      	lsls	r3, r3, #7
 8002090:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <ssd1306_UpdateScreen+0x4c>)
 8002092:	4413      	add	r3, r2
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff4a 	bl	8001f30 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	3301      	adds	r3, #1
 80020a0:	71fb      	strb	r3, [r7, #7]
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	2b07      	cmp	r3, #7
 80020a6:	d9e5      	bls.n	8002074 <ssd1306_UpdateScreen+0xc>
    }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000230 	.word	0x20000230

080020b8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
 80020c2:	460b      	mov	r3, r1
 80020c4:	71bb      	strb	r3, [r7, #6]
 80020c6:	4613      	mov	r3, r2
 80020c8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db3d      	blt.n	800214e <ssd1306_DrawPixel+0x96>
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	2b3f      	cmp	r3, #63	; 0x3f
 80020d6:	d83a      	bhi.n	800214e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d11a      	bne.n	8002114 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020de:	79fa      	ldrb	r2, [r7, #7]
 80020e0:	79bb      	ldrb	r3, [r7, #6]
 80020e2:	08db      	lsrs	r3, r3, #3
 80020e4:	b2d8      	uxtb	r0, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	01db      	lsls	r3, r3, #7
 80020ea:	4413      	add	r3, r2
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <ssd1306_DrawPixel+0xa4>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	b25a      	sxtb	r2, r3
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	4313      	orrs	r3, r2
 8002102:	b259      	sxtb	r1, r3
 8002104:	79fa      	ldrb	r2, [r7, #7]
 8002106:	4603      	mov	r3, r0
 8002108:	01db      	lsls	r3, r3, #7
 800210a:	4413      	add	r3, r2
 800210c:	b2c9      	uxtb	r1, r1
 800210e:	4a13      	ldr	r2, [pc, #76]	; (800215c <ssd1306_DrawPixel+0xa4>)
 8002110:	54d1      	strb	r1, [r2, r3]
 8002112:	e01d      	b.n	8002150 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002114:	79fa      	ldrb	r2, [r7, #7]
 8002116:	79bb      	ldrb	r3, [r7, #6]
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	b2d8      	uxtb	r0, r3
 800211c:	4603      	mov	r3, r0
 800211e:	01db      	lsls	r3, r3, #7
 8002120:	4413      	add	r3, r2
 8002122:	4a0e      	ldr	r2, [pc, #56]	; (800215c <ssd1306_DrawPixel+0xa4>)
 8002124:	5cd3      	ldrb	r3, [r2, r3]
 8002126:	b25a      	sxtb	r2, r3
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	b25b      	sxtb	r3, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	b25b      	sxtb	r3, r3
 800213a:	4013      	ands	r3, r2
 800213c:	b259      	sxtb	r1, r3
 800213e:	79fa      	ldrb	r2, [r7, #7]
 8002140:	4603      	mov	r3, r0
 8002142:	01db      	lsls	r3, r3, #7
 8002144:	4413      	add	r3, r2
 8002146:	b2c9      	uxtb	r1, r1
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <ssd1306_DrawPixel+0xa4>)
 800214a:	54d1      	strb	r1, [r2, r3]
 800214c:	e000      	b.n	8002150 <ssd1306_DrawPixel+0x98>
        return;
 800214e:	bf00      	nop
    }
}
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000230 	.word	0x20000230

08002160 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	4604      	mov	r4, r0
 8002168:	1d38      	adds	r0, r7, #4
 800216a:	e880 0006 	stmia.w	r0, {r1, r2}
 800216e:	461a      	mov	r2, r3
 8002170:	4623      	mov	r3, r4
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	4613      	mov	r3, r2
 8002176:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b1f      	cmp	r3, #31
 800217c:	d902      	bls.n	8002184 <ssd1306_WriteChar+0x24>
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b7e      	cmp	r3, #126	; 0x7e
 8002182:	d901      	bls.n	8002188 <ssd1306_WriteChar+0x28>
        return 0;
 8002184:	2300      	movs	r3, #0
 8002186:	e06d      	b.n	8002264 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002188:	4b38      	ldr	r3, [pc, #224]	; (800226c <ssd1306_WriteChar+0x10c>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	793b      	ldrb	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	2b80      	cmp	r3, #128	; 0x80
 8002194:	dc06      	bgt.n	80021a4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002196:	4b35      	ldr	r3, [pc, #212]	; (800226c <ssd1306_WriteChar+0x10c>)
 8002198:	885b      	ldrh	r3, [r3, #2]
 800219a:	461a      	mov	r2, r3
 800219c:	797b      	ldrb	r3, [r7, #5]
 800219e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021a0:	2b40      	cmp	r3, #64	; 0x40
 80021a2:	dd01      	ble.n	80021a8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e05d      	b.n	8002264 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	e04c      	b.n	8002248 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	3b20      	subs	r3, #32
 80021b4:	7979      	ldrb	r1, [r7, #5]
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4619      	mov	r1, r3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	440b      	add	r3, r1
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	e034      	b.n	8002238 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d012      	beq.n	8002204 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <ssd1306_WriteChar+0x10c>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	b2d8      	uxtb	r0, r3
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <ssd1306_WriteChar+0x10c>)
 80021ee:	885b      	ldrh	r3, [r3, #2]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	7bba      	ldrb	r2, [r7, #14]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7ff ff5b 	bl	80020b8 <ssd1306_DrawPixel>
 8002202:	e016      	b.n	8002232 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <ssd1306_WriteChar+0x10c>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	4413      	add	r3, r2
 8002210:	b2d8      	uxtb	r0, r3
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <ssd1306_WriteChar+0x10c>)
 8002214:	885b      	ldrh	r3, [r3, #2]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	4413      	add	r3, r2
 800221e:	b2d9      	uxtb	r1, r3
 8002220:	7bbb      	ldrb	r3, [r7, #14]
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf0c      	ite	eq
 8002226:	2301      	moveq	r3, #1
 8002228:	2300      	movne	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	f7ff ff43 	bl	80020b8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	3301      	adds	r3, #1
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	793b      	ldrb	r3, [r7, #4]
 800223a:	461a      	mov	r2, r3
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	4293      	cmp	r3, r2
 8002240:	d3c5      	bcc.n	80021ce <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3301      	adds	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	797b      	ldrb	r3, [r7, #5]
 800224a:	461a      	mov	r2, r3
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4293      	cmp	r3, r2
 8002250:	d3ad      	bcc.n	80021ae <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <ssd1306_WriteChar+0x10c>)
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	793b      	ldrb	r3, [r7, #4]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4413      	add	r3, r2
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b03      	ldr	r3, [pc, #12]	; (800226c <ssd1306_WriteChar+0x10c>)
 8002260:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3724      	adds	r7, #36	; 0x24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd90      	pop	{r4, r7, pc}
 800226c:	20000630 	.word	0x20000630

08002270 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	1d38      	adds	r0, r7, #4
 800227a:	e880 0006 	stmia.w	r0, {r1, r2}
 800227e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002280:	e012      	b.n	80022a8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	7818      	ldrb	r0, [r3, #0]
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	1d3a      	adds	r2, r7, #4
 800228a:	ca06      	ldmia	r2, {r1, r2}
 800228c:	f7ff ff68 	bl	8002160 <ssd1306_WriteChar>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d002      	beq.n	80022a2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	e008      	b.n	80022b4 <ssd1306_WriteString+0x44>
        }
        str++;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3301      	adds	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e8      	bne.n	8002282 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	460a      	mov	r2, r1
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <ssd1306_SetCursor+0x2c>)
 80022d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <ssd1306_SetCursor+0x2c>)
 80022da:	805a      	strh	r2, [r3, #2]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	20000630 	.word	0x20000630

080022ec <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80022f6:	2381      	movs	r3, #129	; 0x81
 80022f8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fdff 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdfb 	bl	8001f00 <ssd1306_WriteCommand>
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002324:	23af      	movs	r3, #175	; 0xaf
 8002326:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <ssd1306_SetDisplayOn+0x38>)
 800232a:	2201      	movs	r2, #1
 800232c:	715a      	strb	r2, [r3, #5]
 800232e:	e004      	b.n	800233a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002330:	23ae      	movs	r3, #174	; 0xae
 8002332:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <ssd1306_SetDisplayOn+0x38>)
 8002336:	2200      	movs	r2, #0
 8002338:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fddf 	bl	8001f00 <ssd1306_WriteCommand>
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000630 	.word	0x20000630

08002350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <HAL_Init+0x40>)
 800235a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800235e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_Init+0x40>)
 8002366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_Init+0x40>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 f8fc 	bl	8002576 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237e:	2005      	movs	r0, #5
 8002380:	f7ff fca6 	bl	8001cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002384:	f7ff fb58 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00

08002394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_IncTick+0x20>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_IncTick+0x24>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <HAL_IncTick+0x24>)
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000018 	.word	0x20000018
 80023b8:	20000638 	.word	0x20000638

080023bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <HAL_GetTick+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000638 	.word	0x20000638

080023d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff ffee 	bl	80023bc <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d005      	beq.n	80023fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_Delay+0x44>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023fa:	bf00      	nop
 80023fc:	f7ff ffde 	bl	80023bc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8f7      	bhi.n	80023fc <HAL_Delay+0x28>
  {
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000018 	.word	0x20000018

0800241c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	2b00      	cmp	r3, #0
 8002490:	db0b      	blt.n	80024aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	4907      	ldr	r1, [pc, #28]	; (80024b8 <__NVIC_EnableIRQ+0x38>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2001      	movs	r0, #1
 80024a2:	fa00 f202 	lsl.w	r2, r0, r2
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100

080024bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0a      	blt.n	80024e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	490c      	ldr	r1, [pc, #48]	; (8002508 <__NVIC_SetPriority+0x4c>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e4:	e00a      	b.n	80024fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <__NVIC_SetPriority+0x50>)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3b04      	subs	r3, #4
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	761a      	strb	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f1c3 0307 	rsb	r3, r3, #7
 800252a:	2b04      	cmp	r3, #4
 800252c:	bf28      	it	cs
 800252e:	2304      	movcs	r3, #4
 8002530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3304      	adds	r3, #4
 8002536:	2b06      	cmp	r3, #6
 8002538:	d902      	bls.n	8002540 <NVIC_EncodePriority+0x30>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3b03      	subs	r3, #3
 800253e:	e000      	b.n	8002542 <NVIC_EncodePriority+0x32>
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43d9      	mvns	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	4313      	orrs	r3, r2
         );
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	; 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff4c 	bl	800241c <__NVIC_SetPriorityGrouping>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259e:	f7ff ff61 	bl	8002464 <__NVIC_GetPriorityGrouping>
 80025a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	6978      	ldr	r0, [r7, #20]
 80025aa:	f7ff ffb1 	bl	8002510 <NVIC_EncodePriority>
 80025ae:	4602      	mov	r2, r0
 80025b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff80 	bl	80024bc <__NVIC_SetPriority>
}
 80025bc:	bf00      	nop
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff54 	bl	8002480 <__NVIC_EnableIRQ>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e159      	b.n	80028b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 8148 	bne.w	80028aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d005      	beq.n	8002632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262e:	2b02      	cmp	r3, #2
 8002630:	d130      	bne.n	8002694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0201 	and.w	r2, r3, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b03      	cmp	r3, #3
 800269e:	d017      	beq.n	80026d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d123      	bne.n	8002724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	08da      	lsrs	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3208      	adds	r2, #8
 80026e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	08da      	lsrs	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a2 	beq.w	80028aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <HAL_GPIO_Init+0x2e8>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a56      	ldr	r2, [pc, #344]	; (80028c8 <HAL_GPIO_Init+0x2e8>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b54      	ldr	r3, [pc, #336]	; (80028c8 <HAL_GPIO_Init+0x2e8>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002782:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_GPIO_Init+0x2ec>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a49      	ldr	r2, [pc, #292]	; (80028d0 <HAL_GPIO_Init+0x2f0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d019      	beq.n	80027e2 <HAL_GPIO_Init+0x202>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a48      	ldr	r2, [pc, #288]	; (80028d4 <HAL_GPIO_Init+0x2f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x1fe>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a47      	ldr	r2, [pc, #284]	; (80028d8 <HAL_GPIO_Init+0x2f8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_GPIO_Init+0x1fa>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a46      	ldr	r2, [pc, #280]	; (80028dc <HAL_GPIO_Init+0x2fc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x1f6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a45      	ldr	r2, [pc, #276]	; (80028e0 <HAL_GPIO_Init+0x300>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_Init+0x1f2>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e008      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e004      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027da:	2302      	movs	r3, #2
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027e2:	2300      	movs	r3, #0
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4093      	lsls	r3, r2
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f4:	4935      	ldr	r1, [pc, #212]	; (80028cc <HAL_GPIO_Init+0x2ec>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_GPIO_Init+0x304>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002826:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <HAL_GPIO_Init+0x304>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282c:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_GPIO_Init+0x304>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002850:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <HAL_GPIO_Init+0x304>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002856:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <HAL_GPIO_Init+0x304>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287a:	4a1a      	ldr	r2, [pc, #104]	; (80028e4 <HAL_GPIO_Init+0x304>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_GPIO_Init+0x304>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a4:	4a0f      	ldr	r2, [pc, #60]	; (80028e4 <HAL_GPIO_Init+0x304>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f aea2 	bls.w	80025fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020c00 	.word	0x40020c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40013c00 	.word	0x40013c00

080028e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	887b      	ldrh	r3, [r7, #2]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e001      	b.n	800290a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002934:	e003      	b.n	800293e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	041a      	lsls	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	619a      	str	r2, [r3, #24]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d006      	beq.n	8002970 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fec0 	bl	80016f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40013c00 	.word	0x40013c00

0800297c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e12b      	b.n	8002be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff f874 	bl	8001a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e0:	f001 f858 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a81      	ldr	r2, [pc, #516]	; (8002bf0 <HAL_I2C_Init+0x274>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d807      	bhi.n	8002a00 <HAL_I2C_Init+0x84>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a80      	ldr	r2, [pc, #512]	; (8002bf4 <HAL_I2C_Init+0x278>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	bf94      	ite	ls
 80029f8:	2301      	movls	r3, #1
 80029fa:	2300      	movhi	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e006      	b.n	8002a0e <HAL_I2C_Init+0x92>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a7d      	ldr	r2, [pc, #500]	; (8002bf8 <HAL_I2C_Init+0x27c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0e7      	b.n	8002be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a78      	ldr	r2, [pc, #480]	; (8002bfc <HAL_I2C_Init+0x280>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0c9b      	lsrs	r3, r3, #18
 8002a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a6a      	ldr	r2, [pc, #424]	; (8002bf0 <HAL_I2C_Init+0x274>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d802      	bhi.n	8002a50 <HAL_I2C_Init+0xd4>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	e009      	b.n	8002a64 <HAL_I2C_Init+0xe8>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	4a69      	ldr	r2, [pc, #420]	; (8002c00 <HAL_I2C_Init+0x284>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	3301      	adds	r3, #1
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	495c      	ldr	r1, [pc, #368]	; (8002bf0 <HAL_I2C_Init+0x274>)
 8002a80:	428b      	cmp	r3, r1
 8002a82:	d819      	bhi.n	8002ab8 <HAL_I2C_Init+0x13c>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e59      	subs	r1, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a98:	400b      	ands	r3, r1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_I2C_Init+0x138>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e59      	subs	r1, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab2:	e051      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	e04f      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d111      	bne.n	8002ae4 <HAL_I2C_Init+0x168>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e012      	b.n	8002b0a <HAL_I2C_Init+0x18e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	0099      	lsls	r1, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Init+0x196>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e022      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10e      	bne.n	8002b38 <HAL_I2C_Init+0x1bc>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e58      	subs	r0, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	440b      	add	r3, r1
 8002b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b36:	e00f      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e58      	subs	r0, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	0099      	lsls	r1, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	6809      	ldr	r1, [r1, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6911      	ldr	r1, [r2, #16]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	000186a0 	.word	0x000186a0
 8002bf4:	001e847f 	.word	0x001e847f
 8002bf8:	003d08ff 	.word	0x003d08ff
 8002bfc:	431bde83 	.word	0x431bde83
 8002c00:	10624dd3 	.word	0x10624dd3

08002c04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	817b      	strh	r3, [r7, #10]
 8002c16:	460b      	mov	r3, r1
 8002c18:	813b      	strh	r3, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c1e:	f7ff fbcd 	bl	80023bc <HAL_GetTick>
 8002c22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	f040 80d9 	bne.w	8002de4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	2319      	movs	r3, #25
 8002c38:	2201      	movs	r2, #1
 8002c3a:	496d      	ldr	r1, [pc, #436]	; (8002df0 <HAL_I2C_Mem_Write+0x1ec>)
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f971 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e0cc      	b.n	8002de6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_I2C_Mem_Write+0x56>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0c5      	b.n	8002de6 <HAL_I2C_Mem_Write+0x1e2>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d007      	beq.n	8002c80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2221      	movs	r2, #33	; 0x21
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a4d      	ldr	r2, [pc, #308]	; (8002df4 <HAL_I2C_Mem_Write+0x1f0>)
 8002cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cc2:	88f8      	ldrh	r0, [r7, #6]
 8002cc4:	893a      	ldrh	r2, [r7, #8]
 8002cc6:	8979      	ldrh	r1, [r7, #10]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f890 	bl	8002df8 <I2C_RequestMemoryWrite>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d052      	beq.n	8002d84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e081      	b.n	8002de6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f9f2 	bl	80030d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d107      	bne.n	8002d0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e06b      	b.n	8002de6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	781a      	ldrb	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d11b      	bne.n	8002d84 <HAL_I2C_Mem_Write+0x180>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d017      	beq.n	8002d84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1aa      	bne.n	8002ce2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f9de 	bl	8003152 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d107      	bne.n	8002db4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e016      	b.n	8002de6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e000      	b.n	8002de6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	00100002 	.word	0x00100002
 8002df4:	ffff0000 	.word	0xffff0000

08002df8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	817b      	strh	r3, [r7, #10]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	813b      	strh	r3, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f878 	bl	8002f24 <I2C_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e48:	d103      	bne.n	8002e52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e05f      	b.n	8002f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	6a3a      	ldr	r2, [r7, #32]
 8002e6a:	492d      	ldr	r1, [pc, #180]	; (8002f20 <I2C_RequestMemoryWrite+0x128>)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f8b0 	bl	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e04c      	b.n	8002f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	6a39      	ldr	r1, [r7, #32]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f91a 	bl	80030d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d107      	bne.n	8002eba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e02b      	b.n	8002f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec4:	893b      	ldrh	r3, [r7, #8]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	611a      	str	r2, [r3, #16]
 8002ece:	e021      	b.n	8002f14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ed0:	893b      	ldrh	r3, [r7, #8]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee0:	6a39      	ldr	r1, [r7, #32]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f8f4 	bl	80030d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d107      	bne.n	8002f06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e005      	b.n	8002f16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0a:	893b      	ldrh	r3, [r7, #8]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	00010002 	.word	0x00010002

08002f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f34:	e025      	b.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d021      	beq.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7ff fa3d 	bl	80023bc <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d116      	bne.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e023      	b.n	8002fca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d10d      	bne.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4013      	ands	r3, r2
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf0c      	ite	eq
 8002f9e:	2301      	moveq	r3, #1
 8002fa0:	2300      	movne	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	e00c      	b.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d0b6      	beq.n	8002f36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe0:	e051      	b.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff0:	d123      	bne.n	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003000:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800300a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f043 0204 	orr.w	r2, r3, #4
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e046      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d021      	beq.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7ff f9bb 	bl	80023bc <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d116      	bne.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e020      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10c      	bne.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4013      	ands	r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	e00b      	b.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	43da      	mvns	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d18d      	bne.n	8002fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030dc:	e02d      	b.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f878 	bl	80031d4 <I2C_IsAcknowledgeFailed>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e02d      	b.n	800314a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d021      	beq.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7ff f961 	bl	80023bc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	429a      	cmp	r2, r3
 8003104:	d302      	bcc.n	800310c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d116      	bne.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e007      	b.n	800314a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b80      	cmp	r3, #128	; 0x80
 8003146:	d1ca      	bne.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800315e:	e02d      	b.n	80031bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f837 	bl	80031d4 <I2C_IsAcknowledgeFailed>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e02d      	b.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003176:	d021      	beq.n	80031bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003178:	f7ff f920 	bl	80023bc <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	429a      	cmp	r2, r3
 8003186:	d302      	bcc.n	800318e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d116      	bne.n	80031bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e007      	b.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d1ca      	bne.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d11b      	bne.n	8003224 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f043 0204 	orr.w	r2, r3, #4
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e267      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d075      	beq.n	800333e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003252:	4b88      	ldr	r3, [pc, #544]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d00c      	beq.n	8003278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325e:	4b85      	ldr	r3, [pc, #532]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003266:	2b08      	cmp	r3, #8
 8003268:	d112      	bne.n	8003290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326a:	4b82      	ldr	r3, [pc, #520]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003276:	d10b      	bne.n	8003290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	4b7e      	ldr	r3, [pc, #504]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d05b      	beq.n	800333c <HAL_RCC_OscConfig+0x108>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d157      	bne.n	800333c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e242      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003298:	d106      	bne.n	80032a8 <HAL_RCC_OscConfig+0x74>
 800329a:	4b76      	ldr	r3, [pc, #472]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a75      	ldr	r2, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xb0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x98>
 80032b2:	4b70      	ldr	r3, [pc, #448]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6f      	ldr	r2, [pc, #444]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6c      	ldr	r2, [pc, #432]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xb0>
 80032cc:	4b69      	ldr	r3, [pc, #420]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a68      	ldr	r2, [pc, #416]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b66      	ldr	r3, [pc, #408]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a65      	ldr	r2, [pc, #404]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7ff f866 	bl	80023bc <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f4:	f7ff f862 	bl	80023bc <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e207      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xc0>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7ff f852 	bl	80023bc <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff f84e 	bl	80023bc <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1f3      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b51      	ldr	r3, [pc, #324]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0xe8>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800334a:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003356:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003362:	4b44      	ldr	r3, [pc, #272]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b41      	ldr	r3, [pc, #260]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x152>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1c7      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4937      	ldr	r1, [pc, #220]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_OscConfig+0x244>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7ff f807 	bl	80023bc <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b2:	f7ff f803 	bl	80023bc <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1a8      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4925      	ldr	r1, [pc, #148]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCC_OscConfig+0x244>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fe ffe6 	bl	80023bc <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fe ffe2 	bl	80023bc <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e187      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d036      	beq.n	800348c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d016      	beq.n	8003454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <HAL_RCC_OscConfig+0x248>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe ffc6 	bl	80023bc <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003434:	f7fe ffc2 	bl	80023bc <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e167      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_OscConfig+0x240>)
 8003448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x200>
 8003452:	e01b      	b.n	800348c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_OscConfig+0x248>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345a:	f7fe ffaf 	bl	80023bc <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	e00e      	b.n	8003480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003462:	f7fe ffab 	bl	80023bc <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d907      	bls.n	8003480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e150      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
 8003474:	40023800 	.word	0x40023800
 8003478:	42470000 	.word	0x42470000
 800347c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ea      	bne.n	8003462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8097 	beq.w	80035c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349e:	4b81      	ldr	r3, [pc, #516]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10f      	bne.n	80034ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	4b7d      	ldr	r3, [pc, #500]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a7c      	ldr	r2, [pc, #496]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ba:	4b7a      	ldr	r3, [pc, #488]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ca:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d118      	bne.n	8003508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d6:	4b74      	ldr	r3, [pc, #464]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a73      	ldr	r2, [pc, #460]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e2:	f7fe ff6b 	bl	80023bc <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ea:	f7fe ff67 	bl	80023bc <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e10c      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x474>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x2ea>
 8003510:	4b64      	ldr	r3, [pc, #400]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a63      	ldr	r2, [pc, #396]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
 800351c:	e01c      	b.n	8003558 <HAL_RCC_OscConfig+0x324>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b05      	cmp	r3, #5
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0x30c>
 8003526:	4b5f      	ldr	r3, [pc, #380]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a5e      	ldr	r2, [pc, #376]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800352c:	f043 0304 	orr.w	r3, r3, #4
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
 8003532:	4b5c      	ldr	r3, [pc, #368]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a5b      	ldr	r2, [pc, #364]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0x324>
 8003540:	4b58      	ldr	r3, [pc, #352]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a57      	ldr	r2, [pc, #348]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	4b55      	ldr	r3, [pc, #340]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a54      	ldr	r2, [pc, #336]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003552:	f023 0304 	bic.w	r3, r3, #4
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d015      	beq.n	800358c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe ff2c 	bl	80023bc <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	e00a      	b.n	800357e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fe ff28 	bl	80023bc <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e0cb      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357e:	4b49      	ldr	r3, [pc, #292]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0ee      	beq.n	8003568 <HAL_RCC_OscConfig+0x334>
 800358a:	e014      	b.n	80035b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358c:	f7fe ff16 	bl	80023bc <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003592:	e00a      	b.n	80035aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003594:	f7fe ff12 	bl	80023bc <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e0b5      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035aa:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ee      	bne.n	8003594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d105      	bne.n	80035c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035bc:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	4a38      	ldr	r2, [pc, #224]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a1 	beq.w	8003714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035d2:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d05c      	beq.n	8003698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d141      	bne.n	800366a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HAL_RCC_OscConfig+0x478>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe fee6 	bl	80023bc <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fe fee2 	bl	80023bc <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e087      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	019b      	lsls	r3, r3, #6
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	3b01      	subs	r3, #1
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	491b      	ldr	r1, [pc, #108]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_RCC_OscConfig+0x478>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fe febb 	bl	80023bc <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364a:	f7fe feb7 	bl	80023bc <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e05c      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x416>
 8003668:	e054      	b.n	8003714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_RCC_OscConfig+0x478>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe fea4 	bl	80023bc <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe fea0 	bl	80023bc <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e045      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_OscConfig+0x470>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x444>
 8003696:	e03d      	b.n	8003714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e038      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
 80036ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x4ec>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d028      	beq.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d121      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d11a      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d111      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	3b01      	subs	r3, #1
 80036fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0cc      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b68      	ldr	r3, [pc, #416]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d90c      	bls.n	8003760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0b8      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d020      	beq.n	80037ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003778:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a58      	ldr	r2, [pc, #352]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003790:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a52      	ldr	r2, [pc, #328]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800379a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800379c:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	494d      	ldr	r1, [pc, #308]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d044      	beq.n	8003844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d119      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e07f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e067      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003802:	4b37      	ldr	r3, [pc, #220]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4934      	ldr	r1, [pc, #208]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003814:	f7fe fdd2 	bl	80023bc <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fe fdce 	bl	80023bc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e04f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	429a      	cmp	r2, r3
 8003842:	d1eb      	bne.n	800381c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d20c      	bcs.n	800386c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e032      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4916      	ldr	r1, [pc, #88]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038aa:	f000 f821 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	490a      	ldr	r1, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	fa22 f303 	lsr.w	r3, r2, r3
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fa00 	bl	8001cd0 <HAL_InitTick>

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023c00 	.word	0x40023c00
 80038e0:	40023800 	.word	0x40023800
 80038e4:	080082bc 	.word	0x080082bc
 80038e8:	20000008 	.word	0x20000008
 80038ec:	20000014 	.word	0x20000014

080038f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b090      	sub	sp, #64	; 0x40
 80038f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
 80038fc:	2300      	movs	r3, #0
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003900:	2300      	movs	r3, #0
 8003902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003908:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b08      	cmp	r3, #8
 8003912:	d00d      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x40>
 8003914:	2b08      	cmp	r3, #8
 8003916:	f200 80a1 	bhi.w	8003a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x34>
 800391e:	2b04      	cmp	r3, #4
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x3a>
 8003922:	e09b      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003924:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003928:	e09b      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800392a:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800392e:	e098      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003930:	4b4f      	ldr	r3, [pc, #316]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800393a:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d028      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003946:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	099b      	lsrs	r3, r3, #6
 800394c:	2200      	movs	r2, #0
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	627a      	str	r2, [r7, #36]	; 0x24
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003958:	2100      	movs	r1, #0
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800395c:	fb03 f201 	mul.w	r2, r3, r1
 8003960:	2300      	movs	r3, #0
 8003962:	fb00 f303 	mul.w	r3, r0, r3
 8003966:	4413      	add	r3, r2
 8003968:	4a43      	ldr	r2, [pc, #268]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800396a:	fba0 1202 	umull	r1, r2, r0, r2
 800396e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003970:	460a      	mov	r2, r1
 8003972:	62ba      	str	r2, [r7, #40]	; 0x28
 8003974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003976:	4413      	add	r3, r2
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397c:	2200      	movs	r2, #0
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	61fa      	str	r2, [r7, #28]
 8003982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800398a:	f7fd f867 	bl	8000a5c <__aeabi_uldivmod>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4613      	mov	r3, r2
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003996:	e053      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003998:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	2200      	movs	r2, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	617a      	str	r2, [r7, #20]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039aa:	f04f 0b00 	mov.w	fp, #0
 80039ae:	4652      	mov	r2, sl
 80039b0:	465b      	mov	r3, fp
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f04f 0100 	mov.w	r1, #0
 80039ba:	0159      	lsls	r1, r3, #5
 80039bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039c0:	0150      	lsls	r0, r2, #5
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	ebb2 080a 	subs.w	r8, r2, sl
 80039ca:	eb63 090b 	sbc.w	r9, r3, fp
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039e2:	ebb2 0408 	subs.w	r4, r2, r8
 80039e6:	eb63 0509 	sbc.w	r5, r3, r9
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	00eb      	lsls	r3, r5, #3
 80039f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f8:	00e2      	lsls	r2, r4, #3
 80039fa:	4614      	mov	r4, r2
 80039fc:	461d      	mov	r5, r3
 80039fe:	eb14 030a 	adds.w	r3, r4, sl
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	eb45 030b 	adc.w	r3, r5, fp
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a16:	4629      	mov	r1, r5
 8003a18:	028b      	lsls	r3, r1, #10
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a20:	4621      	mov	r1, r4
 8003a22:	028a      	lsls	r2, r1, #10
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	60fa      	str	r2, [r7, #12]
 8003a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a34:	f7fd f812 	bl	8000a5c <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a5a:	e002      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3740      	adds	r7, #64	; 0x40
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	017d7840 	.word	0x017d7840

08003a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000008 	.word	0x20000008

08003a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a98:	f7ff fff0 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0a9b      	lsrs	r3, r3, #10
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4903      	ldr	r1, [pc, #12]	; (8003ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	080082cc 	.word	0x080082cc

08003abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ac0:	f7ff ffdc 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0b5b      	lsrs	r3, r3, #13
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	080082cc 	.word	0x080082cc

08003ae4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	220f      	movs	r2, #15
 8003af2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003af4:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_RCC_GetClockConfig+0x5c>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0203 	and.w	r2, r3, #3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <HAL_RCC_GetClockConfig+0x5c>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <HAL_RCC_GetClockConfig+0x5c>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_GetClockConfig+0x5c>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	08db      	lsrs	r3, r3, #3
 8003b1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <HAL_RCC_GetClockConfig+0x60>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0207 	and.w	r2, r3, #7
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	601a      	str	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40023c00 	.word	0x40023c00

08003b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e041      	b.n	8003bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fff6 	bl	8001b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f000 fd08 	bl	800459c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d001      	beq.n	8003c00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e03c      	b.n	8003c7a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <HAL_TIM_Base_Start+0xa0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d018      	beq.n	8003c44 <HAL_TIM_Base_Start+0x5c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1a:	d013      	beq.n	8003c44 <HAL_TIM_Base_Start+0x5c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1a      	ldr	r2, [pc, #104]	; (8003c8c <HAL_TIM_Base_Start+0xa4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00e      	beq.n	8003c44 <HAL_TIM_Base_Start+0x5c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <HAL_TIM_Base_Start+0xa8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_TIM_Base_Start+0x5c>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a17      	ldr	r2, [pc, #92]	; (8003c94 <HAL_TIM_Base_Start+0xac>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <HAL_TIM_Base_Start+0x5c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <HAL_TIM_Base_Start+0xb0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d111      	bne.n	8003c68 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b06      	cmp	r3, #6
 8003c54:	d010      	beq.n	8003c78 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c66:	e007      	b.n	8003c78 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40014000 	.word	0x40014000

08003c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d001      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e044      	b.n	8003d3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <HAL_TIM_Base_Start_IT+0xb0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d018      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x6c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d013      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x6c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00e      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x6c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <HAL_TIM_Base_Start_IT+0xb8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x6c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <HAL_TIM_Base_Start_IT+0xbc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x6c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a16      	ldr	r2, [pc, #88]	; (8003d5c <HAL_TIM_Base_Start_IT+0xc0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d111      	bne.n	8003d2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d010      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	e007      	b.n	8003d3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40014000 	.word	0x40014000

08003d60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e041      	b.n	8003df6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd ff20 	bl	8001bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4610      	mov	r0, r2
 8003da0:	f000 fbfc 	bl	800459c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_TIM_PWM_Start+0x24>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e022      	b.n	8003e6a <HAL_TIM_PWM_Start+0x6a>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d109      	bne.n	8003e3e <HAL_TIM_PWM_Start+0x3e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	bf14      	ite	ne
 8003e36:	2301      	movne	r3, #1
 8003e38:	2300      	moveq	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e015      	b.n	8003e6a <HAL_TIM_PWM_Start+0x6a>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d109      	bne.n	8003e58 <HAL_TIM_PWM_Start+0x58>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e008      	b.n	8003e6a <HAL_TIM_PWM_Start+0x6a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e068      	b.n	8003f44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <HAL_TIM_PWM_Start+0x82>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e80:	e013      	b.n	8003eaa <HAL_TIM_PWM_Start+0xaa>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_PWM_Start+0x92>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e90:	e00b      	b.n	8003eaa <HAL_TIM_PWM_Start+0xaa>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xa2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea0:	e003      	b.n	8003eaa <HAL_TIM_PWM_Start+0xaa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fe18 	bl	8004ae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <HAL_TIM_PWM_Start+0x14c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d107      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <HAL_TIM_PWM_Start+0x14c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d018      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x10e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d013      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x10e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_TIM_PWM_Start+0x150>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00e      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x10e>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_TIM_PWM_Start+0x154>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x10e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a16      	ldr	r2, [pc, #88]	; (8003f58 <HAL_TIM_PWM_Start+0x158>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x10e>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <HAL_TIM_PWM_Start+0x15c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d111      	bne.n	8003f32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b06      	cmp	r3, #6
 8003f1e:	d010      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	e007      	b.n	8003f42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40010000 	.word	0x40010000
 8003f50:	40000400 	.word	0x40000400
 8003f54:	40000800 	.word	0x40000800
 8003f58:	40000c00 	.word	0x40000c00
 8003f5c:	40014000 	.word	0x40014000

08003f60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	6839      	ldr	r1, [r7, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fdb8 	bl	8004ae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a29      	ldr	r2, [pc, #164]	; (8004024 <HAL_TIM_PWM_Stop+0xc4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d117      	bne.n	8003fb2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10f      	bne.n	8003fb2 <HAL_TIM_PWM_Stop+0x52>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	f240 4344 	movw	r3, #1092	; 0x444
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d107      	bne.n	8003fb2 <HAL_TIM_PWM_Stop+0x52>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a1a      	ldr	r2, [r3, #32]
 8003fb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10f      	bne.n	8003fe2 <HAL_TIM_PWM_Stop+0x82>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	f240 4344 	movw	r3, #1092	; 0x444
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d107      	bne.n	8003fe2 <HAL_TIM_PWM_Stop+0x82>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_PWM_Stop+0x92>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff0:	e013      	b.n	800401a <HAL_TIM_PWM_Stop+0xba>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d104      	bne.n	8004002 <HAL_TIM_PWM_Stop+0xa2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004000:	e00b      	b.n	800401a <HAL_TIM_PWM_Stop+0xba>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d104      	bne.n	8004012 <HAL_TIM_PWM_Stop+0xb2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004010:	e003      	b.n	800401a <HAL_TIM_PWM_Stop+0xba>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40010000 	.word	0x40010000

08004028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b02      	cmp	r3, #2
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b02      	cmp	r3, #2
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0202 	mvn.w	r2, #2
 8004054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa77 	bl	800455e <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa69 	bl	800454a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa7a 	bl	8004572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b04      	cmp	r3, #4
 8004090:	d122      	bne.n	80040d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d11b      	bne.n	80040d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0204 	mvn.w	r2, #4
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa4d 	bl	800455e <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa3f 	bl	800454a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fa50 	bl	8004572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d122      	bne.n	800412c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0208 	mvn.w	r2, #8
 80040fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2204      	movs	r2, #4
 8004102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa23 	bl	800455e <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fa15 	bl	800454a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fa26 	bl	8004572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b10      	cmp	r3, #16
 8004138:	d122      	bne.n	8004180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b10      	cmp	r3, #16
 8004146:	d11b      	bne.n	8004180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0210 	mvn.w	r2, #16
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2208      	movs	r2, #8
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f9f9 	bl	800455e <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f9eb 	bl	800454a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f9fc 	bl	8004572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10e      	bne.n	80041ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0201 	mvn.w	r2, #1
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd fc2e 	bl	8001a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b80      	cmp	r3, #128	; 0x80
 80041b8:	d10e      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	2b80      	cmp	r3, #128	; 0x80
 80041c6:	d107      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fd26 	bl	8004c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f9c1 	bl	8004586 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b20      	cmp	r3, #32
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b20      	cmp	r3, #32
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0220 	mvn.w	r2, #32
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fcf0 	bl	8004c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004252:	2302      	movs	r3, #2
 8004254:	e0ae      	b.n	80043b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b0c      	cmp	r3, #12
 8004262:	f200 809f 	bhi.w	80043a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080043a5 	.word	0x080043a5
 8004274:	080043a5 	.word	0x080043a5
 8004278:	080043a5 	.word	0x080043a5
 800427c:	080042e1 	.word	0x080042e1
 8004280:	080043a5 	.word	0x080043a5
 8004284:	080043a5 	.word	0x080043a5
 8004288:	080043a5 	.word	0x080043a5
 800428c:	08004323 	.word	0x08004323
 8004290:	080043a5 	.word	0x080043a5
 8004294:	080043a5 	.word	0x080043a5
 8004298:	080043a5 	.word	0x080043a5
 800429c:	08004363 	.word	0x08004363
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f9f8 	bl	800469c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0208 	orr.w	r2, r2, #8
 80042ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0204 	bic.w	r2, r2, #4
 80042ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6999      	ldr	r1, [r3, #24]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	619a      	str	r2, [r3, #24]
      break;
 80042de:	e064      	b.n	80043aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fa3e 	bl	8004768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6999      	ldr	r1, [r3, #24]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	021a      	lsls	r2, r3, #8
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	619a      	str	r2, [r3, #24]
      break;
 8004320:	e043      	b.n	80043aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fa89 	bl	8004840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0208 	orr.w	r2, r2, #8
 800433c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0204 	bic.w	r2, r2, #4
 800434c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69d9      	ldr	r1, [r3, #28]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	61da      	str	r2, [r3, #28]
      break;
 8004360:	e023      	b.n	80043aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fad3 	bl	8004914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800437c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69d9      	ldr	r1, [r3, #28]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	021a      	lsls	r2, r3, #8
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	61da      	str	r2, [r3, #28]
      break;
 80043a2:	e002      	b.n	80043aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	75fb      	strb	r3, [r7, #23]
      break;
 80043a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_ConfigClockSource+0x1c>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e0b4      	b.n	8004542 <HAL_TIM_ConfigClockSource+0x186>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004410:	d03e      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0xd4>
 8004412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004416:	f200 8087 	bhi.w	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441e:	f000 8086 	beq.w	800452e <HAL_TIM_ConfigClockSource+0x172>
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004426:	d87f      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004428:	2b70      	cmp	r3, #112	; 0x70
 800442a:	d01a      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0xa6>
 800442c:	2b70      	cmp	r3, #112	; 0x70
 800442e:	d87b      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004430:	2b60      	cmp	r3, #96	; 0x60
 8004432:	d050      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004434:	2b60      	cmp	r3, #96	; 0x60
 8004436:	d877      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004438:	2b50      	cmp	r3, #80	; 0x50
 800443a:	d03c      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0xfa>
 800443c:	2b50      	cmp	r3, #80	; 0x50
 800443e:	d873      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	d058      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d86f      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004448:	2b30      	cmp	r3, #48	; 0x30
 800444a:	d064      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x15a>
 800444c:	2b30      	cmp	r3, #48	; 0x30
 800444e:	d86b      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004450:	2b20      	cmp	r3, #32
 8004452:	d060      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x15a>
 8004454:	2b20      	cmp	r3, #32
 8004456:	d867      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05c      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x15a>
 800445c:	2b10      	cmp	r3, #16
 800445e:	d05a      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x15a>
 8004460:	e062      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6899      	ldr	r1, [r3, #8]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f000 fb19 	bl	8004aa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	609a      	str	r2, [r3, #8]
      break;
 800448e:	e04f      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6899      	ldr	r1, [r3, #8]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f000 fb02 	bl	8004aa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044b2:	609a      	str	r2, [r3, #8]
      break;
 80044b4:	e03c      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	461a      	mov	r2, r3
 80044c4:	f000 fa76 	bl	80049b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2150      	movs	r1, #80	; 0x50
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 facf 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 80044d4:	e02c      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6859      	ldr	r1, [r3, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f000 fa95 	bl	8004a12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2160      	movs	r1, #96	; 0x60
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fabf 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 80044f4:	e01c      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6859      	ldr	r1, [r3, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	461a      	mov	r2, r3
 8004504:	f000 fa56 	bl	80049b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2140      	movs	r1, #64	; 0x40
 800450e:	4618      	mov	r0, r3
 8004510:	f000 faaf 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 8004514:	e00c      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f000 faa6 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 8004526:	e003      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      break;
 800452c:	e000      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800452e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a34      	ldr	r2, [pc, #208]	; (8004680 <TIM_Base_SetConfig+0xe4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0x38>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0x38>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a31      	ldr	r2, [pc, #196]	; (8004684 <TIM_Base_SetConfig+0xe8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0x38>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a30      	ldr	r2, [pc, #192]	; (8004688 <TIM_Base_SetConfig+0xec>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0x38>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a2f      	ldr	r2, [pc, #188]	; (800468c <TIM_Base_SetConfig+0xf0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d108      	bne.n	80045e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a25      	ldr	r2, [pc, #148]	; (8004680 <TIM_Base_SetConfig+0xe4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01b      	beq.n	8004626 <TIM_Base_SetConfig+0x8a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f4:	d017      	beq.n	8004626 <TIM_Base_SetConfig+0x8a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a22      	ldr	r2, [pc, #136]	; (8004684 <TIM_Base_SetConfig+0xe8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <TIM_Base_SetConfig+0x8a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a21      	ldr	r2, [pc, #132]	; (8004688 <TIM_Base_SetConfig+0xec>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00f      	beq.n	8004626 <TIM_Base_SetConfig+0x8a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a20      	ldr	r2, [pc, #128]	; (800468c <TIM_Base_SetConfig+0xf0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_Base_SetConfig+0x8a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <TIM_Base_SetConfig+0xf4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d007      	beq.n	8004626 <TIM_Base_SetConfig+0x8a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <TIM_Base_SetConfig+0xf8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_Base_SetConfig+0x8a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <TIM_Base_SetConfig+0xfc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a08      	ldr	r2, [pc, #32]	; (8004680 <TIM_Base_SetConfig+0xe4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d103      	bne.n	800466c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	615a      	str	r2, [r3, #20]
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40010000 	.word	0x40010000
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40000c00 	.word	0x40000c00
 8004690:	40014000 	.word	0x40014000
 8004694:	40014400 	.word	0x40014400
 8004698:	40014800 	.word	0x40014800

0800469c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f023 0201 	bic.w	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f023 0302 	bic.w	r3, r3, #2
 80046e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <TIM_OC1_SetConfig+0xc8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d10c      	bne.n	8004712 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 0308 	bic.w	r3, r3, #8
 80046fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a13      	ldr	r2, [pc, #76]	; (8004764 <TIM_OC1_SetConfig+0xc8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d111      	bne.n	800473e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	621a      	str	r2, [r3, #32]
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	40010000 	.word	0x40010000

08004768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	f023 0210 	bic.w	r2, r3, #16
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0320 	bic.w	r3, r3, #32
 80047b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a1e      	ldr	r2, [pc, #120]	; (800483c <TIM_OC2_SetConfig+0xd4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10d      	bne.n	80047e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a15      	ldr	r2, [pc, #84]	; (800483c <TIM_OC2_SetConfig+0xd4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d113      	bne.n	8004814 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000

08004840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <TIM_OC3_SetConfig+0xd0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10d      	bne.n	80048ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <TIM_OC3_SetConfig+0xd0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d113      	bne.n	80048ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	40010000 	.word	0x40010000

08004914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800495e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	031b      	lsls	r3, r3, #12
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a10      	ldr	r2, [pc, #64]	; (80049b0 <TIM_OC4_SetConfig+0x9c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d109      	bne.n	8004988 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	019b      	lsls	r3, r3, #6
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000

080049b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f023 0201 	bic.w	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f023 030a 	bic.w	r3, r3, #10
 80049f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f023 0210 	bic.w	r2, r3, #16
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	031b      	lsls	r3, r3, #12
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	621a      	str	r2, [r3, #32]
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f043 0307 	orr.w	r3, r3, #7
 8004a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	609a      	str	r2, [r3, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	021a      	lsls	r2, r3, #8
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	609a      	str	r2, [r3, #8]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	2201      	movs	r2, #1
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a1a      	ldr	r2, [r3, #32]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1a      	ldr	r2, [r3, #32]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	431a      	orrs	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e050      	b.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d018      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d013      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a18      	ldr	r2, [pc, #96]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a16      	ldr	r2, [pc, #88]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d10c      	bne.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40000400 	.word	0x40000400
 8004c04:	40000800 	.word	0x40000800
 8004c08:	40000c00 	.word	0x40000c00
 8004c0c:	40014000 	.word	0x40014000

08004c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <__NVIC_SetPriority>:
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	6039      	str	r1, [r7, #0]
 8004c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db0a      	blt.n	8004c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	490c      	ldr	r1, [pc, #48]	; (8004c84 <__NVIC_SetPriority+0x4c>)
 8004c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c56:	0112      	lsls	r2, r2, #4
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c60:	e00a      	b.n	8004c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4908      	ldr	r1, [pc, #32]	; (8004c88 <__NVIC_SetPriority+0x50>)
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	3b04      	subs	r3, #4
 8004c70:	0112      	lsls	r2, r2, #4
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	440b      	add	r3, r1
 8004c76:	761a      	strb	r2, [r3, #24]
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	e000e100 	.word	0xe000e100
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <SysTick_Handler+0x1c>)
 8004c92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c94:	f001 fd28 	bl	80066e8 <xTaskGetSchedulerState>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d001      	beq.n	8004ca2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c9e:	f002 fb13 	bl	80072c8 <xPortSysTickHandler>
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	e000e010 	.word	0xe000e010

08004cac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	f06f 0004 	mvn.w	r0, #4
 8004cb6:	f7ff ffbf 	bl	8004c38 <__NVIC_SetPriority>
#endif
}
 8004cba:	bf00      	nop
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cc6:	f3ef 8305 	mrs	r3, IPSR
 8004cca:	603b      	str	r3, [r7, #0]
  return(result);
 8004ccc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cd2:	f06f 0305 	mvn.w	r3, #5
 8004cd6:	607b      	str	r3, [r7, #4]
 8004cd8:	e00c      	b.n	8004cf4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cda:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <osKernelInitialize+0x44>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <osKernelInitialize+0x44>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	e002      	b.n	8004cf4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cf4:	687b      	ldr	r3, [r7, #4]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000063c 	.word	0x2000063c

08004d08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d0e:	f3ef 8305 	mrs	r3, IPSR
 8004d12:	603b      	str	r3, [r7, #0]
  return(result);
 8004d14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d1a:	f06f 0305 	mvn.w	r3, #5
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	e010      	b.n	8004d44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d22:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <osKernelStart+0x48>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d109      	bne.n	8004d3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d2a:	f7ff ffbf 	bl	8004cac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d2e:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <osKernelStart+0x48>)
 8004d30:	2202      	movs	r2, #2
 8004d32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d34:	f001 f87c 	bl	8005e30 <vTaskStartScheduler>
      stat = osOK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	e002      	b.n	8004d44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d44:	687b      	ldr	r3, [r7, #4]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	2000063c 	.word	0x2000063c

08004d54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08e      	sub	sp, #56	; 0x38
 8004d58:	af04      	add	r7, sp, #16
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d64:	f3ef 8305 	mrs	r3, IPSR
 8004d68:	617b      	str	r3, [r7, #20]
  return(result);
 8004d6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d17e      	bne.n	8004e6e <osThreadNew+0x11a>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d07b      	beq.n	8004e6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d7a:	2318      	movs	r3, #24
 8004d7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295
 8004d86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d045      	beq.n	8004e1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <osThreadNew+0x48>
        name = attr->name;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <osThreadNew+0x6e>
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b38      	cmp	r3, #56	; 0x38
 8004db4:	d805      	bhi.n	8004dc2 <osThreadNew+0x6e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <osThreadNew+0x72>
        return (NULL);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e054      	b.n	8004e70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	089b      	lsrs	r3, r3, #2
 8004dd4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00e      	beq.n	8004dfc <osThreadNew+0xa8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2ba7      	cmp	r3, #167	; 0xa7
 8004de4:	d90a      	bls.n	8004dfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <osThreadNew+0xa8>
        mem = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e010      	b.n	8004e1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10c      	bne.n	8004e1e <osThreadNew+0xca>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d108      	bne.n	8004e1e <osThreadNew+0xca>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <osThreadNew+0xca>
          mem = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	e001      	b.n	8004e1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d110      	bne.n	8004e46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e2c:	9202      	str	r2, [sp, #8]
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6a3a      	ldr	r2, [r7, #32]
 8004e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fe0c 	bl	8005a58 <xTaskCreateStatic>
 8004e40:	4603      	mov	r3, r0
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	e013      	b.n	8004e6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d110      	bne.n	8004e6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	f107 0310 	add.w	r3, r7, #16
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fe57 	bl	8005b12 <xTaskCreate>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d001      	beq.n	8004e6e <osThreadNew+0x11a>
            hTask = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e6e:	693b      	ldr	r3, [r7, #16]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3728      	adds	r7, #40	; 0x28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e80:	f3ef 8305 	mrs	r3, IPSR
 8004e84:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <osDelay+0x1c>
    stat = osErrorISR;
 8004e8c:	f06f 0305 	mvn.w	r3, #5
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	e007      	b.n	8004ea4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 ff92 	bl	8005dc8 <vTaskDelay>
    }
  }

  return (stat);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a07      	ldr	r2, [pc, #28]	; (8004edc <vApplicationGetIdleTaskMemory+0x2c>)
 8004ec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4a06      	ldr	r2, [pc, #24]	; (8004ee0 <vApplicationGetIdleTaskMemory+0x30>)
 8004ec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2280      	movs	r2, #128	; 0x80
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000640 	.word	0x20000640
 8004ee0:	200006e8 	.word	0x200006e8

08004ee4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a07      	ldr	r2, [pc, #28]	; (8004f10 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4a06      	ldr	r2, [pc, #24]	; (8004f14 <vApplicationGetTimerTaskMemory+0x30>)
 8004efa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	200008e8 	.word	0x200008e8
 8004f14:	20000990 	.word	0x20000990

08004f18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f103 0208 	add.w	r2, r3, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f103 0208 	add.w	r2, r3, #8
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f103 0208 	add.w	r2, r3, #8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d103      	bne.n	8004fda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e00c      	b.n	8004ff4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e002      	b.n	8004fe8 <vListInsert+0x2e>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d2f6      	bcs.n	8004fe2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	601a      	str	r2, [r3, #0]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6892      	ldr	r2, [r2, #8]
 8005042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6852      	ldr	r2, [r2, #4]
 800504c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	d103      	bne.n	8005060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	1e5a      	subs	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050aa:	f002 f87b 	bl	80071a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	441a      	add	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	3b01      	subs	r3, #1
 80050dc:	68f9      	ldr	r1, [r7, #12]
 80050de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	441a      	add	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	22ff      	movs	r2, #255	; 0xff
 80050ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	22ff      	movs	r2, #255	; 0xff
 80050f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d114      	bne.n	800512a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01a      	beq.n	800513e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3310      	adds	r3, #16
 800510c:	4618      	mov	r0, r3
 800510e:	f001 f929 	bl	8006364 <xTaskRemoveFromEventList>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d012      	beq.n	800513e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <xQueueGenericReset+0xcc>)
 800511a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	e009      	b.n	800513e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3310      	adds	r3, #16
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fef2 	bl	8004f18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3324      	adds	r3, #36	; 0x24
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff feed 	bl	8004f18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800513e:	f002 f861 	bl	8007204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005142:	2301      	movs	r3, #1
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08e      	sub	sp, #56	; 0x38
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <xQueueGenericCreateStatic+0x52>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <xQueueGenericCreateStatic+0x56>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <xQueueGenericCreateStatic+0x58>
 80051a6:	2300      	movs	r3, #0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	623b      	str	r3, [r7, #32]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <xQueueGenericCreateStatic+0x7e>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <xQueueGenericCreateStatic+0x82>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <xQueueGenericCreateStatic+0x84>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	61fb      	str	r3, [r7, #28]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051ee:	2350      	movs	r3, #80	; 0x50
 80051f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b50      	cmp	r3, #80	; 0x50
 80051f6:	d00a      	beq.n	800520e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	61bb      	str	r3, [r7, #24]
}
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800520e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005222:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f805 	bl	8005240 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005238:	4618      	mov	r0, r3
 800523a:	3730      	adds	r7, #48	; 0x30
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d103      	bne.n	800525c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e002      	b.n	8005262 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800526e:	2101      	movs	r1, #1
 8005270:	69b8      	ldr	r0, [r7, #24]
 8005272:	f7ff ff05 	bl	8005080 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800527e:	bf00      	nop
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08e      	sub	sp, #56	; 0x38
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005296:	2300      	movs	r3, #0
 8005298:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <xQueueGenericSend+0x32>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d103      	bne.n	80052c8 <xQueueGenericSend+0x40>
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <xQueueGenericSend+0x44>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <xQueueGenericSend+0x46>
 80052cc:	2300      	movs	r3, #0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <xQueueGenericSend+0x60>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052e4:	bf00      	nop
 80052e6:	e7fe      	b.n	80052e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d103      	bne.n	80052f6 <xQueueGenericSend+0x6e>
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <xQueueGenericSend+0x72>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <xQueueGenericSend+0x74>
 80052fa:	2300      	movs	r3, #0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <xQueueGenericSend+0x8e>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	623b      	str	r3, [r7, #32]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005316:	f001 f9e7 	bl	80066e8 <xTaskGetSchedulerState>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d102      	bne.n	8005326 <xQueueGenericSend+0x9e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <xQueueGenericSend+0xa2>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <xQueueGenericSend+0xa4>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xQueueGenericSend+0xbe>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	61fb      	str	r3, [r7, #28]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005346:	f001 ff2d 	bl	80071a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	429a      	cmp	r2, r3
 8005354:	d302      	bcc.n	800535c <xQueueGenericSend+0xd4>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d129      	bne.n	80053b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005362:	f000 fa0b 	bl	800577c <prvCopyDataToQueue>
 8005366:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	3324      	adds	r3, #36	; 0x24
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fff5 	bl	8006364 <xTaskRemoveFromEventList>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d013      	beq.n	80053a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005380:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <xQueueGenericSend+0x1f8>)
 8005382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	e00a      	b.n	80053a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005398:	4b39      	ldr	r3, [pc, #228]	; (8005480 <xQueueGenericSend+0x1f8>)
 800539a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053a8:	f001 ff2c 	bl	8007204 <vPortExitCritical>
				return pdPASS;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e063      	b.n	8005478 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053b6:	f001 ff25 	bl	8007204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e05c      	b.n	8005478 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d106      	bne.n	80053d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053c4:	f107 0314 	add.w	r3, r7, #20
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 f82f 	bl	800642c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053d2:	f001 ff17 	bl	8007204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053d6:	f000 fd9b 	bl	8005f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053da:	f001 fee3 	bl	80071a4 <vPortEnterCritical>
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ea:	d103      	bne.n	80053f4 <xQueueGenericSend+0x16c>
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053fa:	b25b      	sxtb	r3, r3
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d103      	bne.n	800540a <xQueueGenericSend+0x182>
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800540a:	f001 fefb 	bl	8007204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800540e:	1d3a      	adds	r2, r7, #4
 8005410:	f107 0314 	add.w	r3, r7, #20
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f001 f81e 	bl	8006458 <xTaskCheckForTimeOut>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d124      	bne.n	800546c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005424:	f000 faa2 	bl	800596c <prvIsQueueFull>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d018      	beq.n	8005460 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	3310      	adds	r3, #16
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f000 ff44 	bl	80062c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800543c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800543e:	f000 fa2d 	bl	800589c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005442:	f000 fd73 	bl	8005f2c <xTaskResumeAll>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	f47f af7c 	bne.w	8005346 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <xQueueGenericSend+0x1f8>)
 8005450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	e772      	b.n	8005346 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005462:	f000 fa1b 	bl	800589c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005466:	f000 fd61 	bl	8005f2c <xTaskResumeAll>
 800546a:	e76c      	b.n	8005346 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800546c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800546e:	f000 fa15 	bl	800589c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005472:	f000 fd5b 	bl	8005f2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005476:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005478:	4618      	mov	r0, r3
 800547a:	3738      	adds	r7, #56	; 0x38
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	e000ed04 	.word	0xe000ed04

08005484 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b090      	sub	sp, #64	; 0x40
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d103      	bne.n	80054c0 <xQueueGenericSendFromISR+0x3c>
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <xQueueGenericSendFromISR+0x40>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <xQueueGenericSendFromISR+0x42>
 80054c4:	2300      	movs	r3, #0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d103      	bne.n	80054ee <xQueueGenericSendFromISR+0x6a>
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <xQueueGenericSendFromISR+0x6e>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <xQueueGenericSendFromISR+0x70>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	623b      	str	r3, [r7, #32]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800550e:	f001 ff2b 	bl	8007368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005512:	f3ef 8211 	mrs	r2, BASEPRI
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	61fa      	str	r2, [r7, #28]
 8005528:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800552a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800552c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <xQueueGenericSendFromISR+0xbc>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d12f      	bne.n	80055a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005556:	f000 f911 	bl	800577c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800555a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d112      	bne.n	800558a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d016      	beq.n	800559a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	3324      	adds	r3, #36	; 0x24
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fef7 	bl	8006364 <xTaskRemoveFromEventList>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00e      	beq.n	800559a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	e007      	b.n	800559a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800558a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800558e:	3301      	adds	r3, #1
 8005590:	b2db      	uxtb	r3, r3
 8005592:	b25a      	sxtb	r2, r3
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800559a:	2301      	movs	r3, #1
 800559c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800559e:	e001      	b.n	80055a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3740      	adds	r7, #64	; 0x40
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08c      	sub	sp, #48	; 0x30
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <xQueueReceive+0x30>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	623b      	str	r3, [r7, #32]
}
 80055e8:	bf00      	nop
 80055ea:	e7fe      	b.n	80055ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <xQueueReceive+0x3e>
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <xQueueReceive+0x42>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <xQueueReceive+0x44>
 80055fe:	2300      	movs	r3, #0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <xQueueReceive+0x5e>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	61fb      	str	r3, [r7, #28]
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800561a:	f001 f865 	bl	80066e8 <xTaskGetSchedulerState>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d102      	bne.n	800562a <xQueueReceive+0x6e>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <xQueueReceive+0x72>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <xQueueReceive+0x74>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xQueueReceive+0x8e>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	61bb      	str	r3, [r7, #24]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800564a:	f001 fdab 	bl	80071a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01f      	beq.n	800569a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800565e:	f000 f8f7 	bl	8005850 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	1e5a      	subs	r2, r3, #1
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00f      	beq.n	8005692 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	3310      	adds	r3, #16
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fe74 	bl	8006364 <xTaskRemoveFromEventList>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005682:	4b3d      	ldr	r3, [pc, #244]	; (8005778 <xQueueReceive+0x1bc>)
 8005684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005692:	f001 fdb7 	bl	8007204 <vPortExitCritical>
				return pdPASS;
 8005696:	2301      	movs	r3, #1
 8005698:	e069      	b.n	800576e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d103      	bne.n	80056a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056a0:	f001 fdb0 	bl	8007204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e062      	b.n	800576e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ae:	f107 0310 	add.w	r3, r7, #16
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 feba 	bl	800642c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056b8:	2301      	movs	r3, #1
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056bc:	f001 fda2 	bl	8007204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056c0:	f000 fc26 	bl	8005f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056c4:	f001 fd6e 	bl	80071a4 <vPortEnterCritical>
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ce:	b25b      	sxtb	r3, r3
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d103      	bne.n	80056de <xQueueReceive+0x122>
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e4:	b25b      	sxtb	r3, r3
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	d103      	bne.n	80056f4 <xQueueReceive+0x138>
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056f4:	f001 fd86 	bl	8007204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056f8:	1d3a      	adds	r2, r7, #4
 80056fa:	f107 0310 	add.w	r3, r7, #16
 80056fe:	4611      	mov	r1, r2
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fea9 	bl	8006458 <xTaskCheckForTimeOut>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d123      	bne.n	8005754 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800570c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800570e:	f000 f917 	bl	8005940 <prvIsQueueEmpty>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d017      	beq.n	8005748 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	3324      	adds	r3, #36	; 0x24
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fdcf 	bl	80062c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005728:	f000 f8b8 	bl	800589c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800572c:	f000 fbfe 	bl	8005f2c <xTaskResumeAll>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d189      	bne.n	800564a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005736:	4b10      	ldr	r3, [pc, #64]	; (8005778 <xQueueReceive+0x1bc>)
 8005738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	e780      	b.n	800564a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800574a:	f000 f8a7 	bl	800589c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800574e:	f000 fbed 	bl	8005f2c <xTaskResumeAll>
 8005752:	e77a      	b.n	800564a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005756:	f000 f8a1 	bl	800589c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800575a:	f000 fbe7 	bl	8005f2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800575e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005760:	f000 f8ee 	bl	8005940 <prvIsQueueEmpty>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	f43f af6f 	beq.w	800564a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800576c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800576e:	4618      	mov	r0, r3
 8005770:	3730      	adds	r7, #48	; 0x30
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	e000ed04 	.word	0xe000ed04

0800577c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10d      	bne.n	80057b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d14d      	bne.n	800583e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 ffbc 	bl	8006724 <xTaskPriorityDisinherit>
 80057ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	609a      	str	r2, [r3, #8]
 80057b4:	e043      	b.n	800583e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d119      	bne.n	80057f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6858      	ldr	r0, [r3, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	461a      	mov	r2, r3
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	f002 f8bc 	bl	8007944 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	441a      	add	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d32b      	bcc.n	800583e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	e026      	b.n	800583e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68d8      	ldr	r0, [r3, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	461a      	mov	r2, r3
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	f002 f8a2 	bl	8007944 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	425b      	negs	r3, r3
 800580a:	441a      	add	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d207      	bcs.n	800582c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	425b      	negs	r3, r3
 8005826:	441a      	add	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d105      	bne.n	800583e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	3b01      	subs	r3, #1
 800583c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005846:	697b      	ldr	r3, [r7, #20]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d018      	beq.n	8005894 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	441a      	add	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	429a      	cmp	r2, r3
 800587a:	d303      	bcc.n	8005884 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68d9      	ldr	r1, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	461a      	mov	r2, r3
 800588e:	6838      	ldr	r0, [r7, #0]
 8005890:	f002 f858 	bl	8007944 <memcpy>
	}
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058a4:	f001 fc7e 	bl	80071a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058b0:	e011      	b.n	80058d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d012      	beq.n	80058e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3324      	adds	r3, #36	; 0x24
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fd50 	bl	8006364 <xTaskRemoveFromEventList>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058ca:	f000 fe27 	bl	800651c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	dce9      	bgt.n	80058b2 <prvUnlockQueue+0x16>
 80058de:	e000      	b.n	80058e2 <prvUnlockQueue+0x46>
					break;
 80058e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	22ff      	movs	r2, #255	; 0xff
 80058e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058ea:	f001 fc8b 	bl	8007204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058ee:	f001 fc59 	bl	80071a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058fa:	e011      	b.n	8005920 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d012      	beq.n	800592a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3310      	adds	r3, #16
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fd2b 	bl	8006364 <xTaskRemoveFromEventList>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005914:	f000 fe02 	bl	800651c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005918:	7bbb      	ldrb	r3, [r7, #14]
 800591a:	3b01      	subs	r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005924:	2b00      	cmp	r3, #0
 8005926:	dce9      	bgt.n	80058fc <prvUnlockQueue+0x60>
 8005928:	e000      	b.n	800592c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800592a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	22ff      	movs	r2, #255	; 0xff
 8005930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005934:	f001 fc66 	bl	8007204 <vPortExitCritical>
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005948:	f001 fc2c 	bl	80071a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005954:	2301      	movs	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e001      	b.n	800595e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800595e:	f001 fc51 	bl	8007204 <vPortExitCritical>

	return xReturn;
 8005962:	68fb      	ldr	r3, [r7, #12]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005974:	f001 fc16 	bl	80071a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005980:	429a      	cmp	r2, r3
 8005982:	d102      	bne.n	800598a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005984:	2301      	movs	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e001      	b.n	800598e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800598e:	f001 fc39 	bl	8007204 <vPortExitCritical>

	return xReturn;
 8005992:	68fb      	ldr	r3, [r7, #12]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	e014      	b.n	80059d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059ac:	4a0f      	ldr	r2, [pc, #60]	; (80059ec <vQueueAddToRegistry+0x50>)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10b      	bne.n	80059d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059b8:	490c      	ldr	r1, [pc, #48]	; (80059ec <vQueueAddToRegistry+0x50>)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059c2:	4a0a      	ldr	r2, [pc, #40]	; (80059ec <vQueueAddToRegistry+0x50>)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4413      	add	r3, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059ce:	e006      	b.n	80059de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b07      	cmp	r3, #7
 80059da:	d9e7      	bls.n	80059ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000d90 	.word	0x20000d90

080059f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a00:	f001 fbd0 	bl	80071a4 <vPortEnterCritical>
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a0a:	b25b      	sxtb	r3, r3
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d103      	bne.n	8005a1a <vQueueWaitForMessageRestricted+0x2a>
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a20:	b25b      	sxtb	r3, r3
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d103      	bne.n	8005a30 <vQueueWaitForMessageRestricted+0x40>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a30:	f001 fbe8 	bl	8007204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	3324      	adds	r3, #36	; 0x24
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fc61 	bl	800630c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a4a:	6978      	ldr	r0, [r7, #20]
 8005a4c:	f7ff ff26 	bl	800589c <prvUnlockQueue>
	}
 8005a50:	bf00      	nop
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08e      	sub	sp, #56	; 0x38
 8005a5c:	af04      	add	r7, sp, #16
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	623b      	str	r3, [r7, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <xTaskCreateStatic+0x46>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	61fb      	str	r3, [r7, #28]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a9e:	23a8      	movs	r3, #168	; 0xa8
 8005aa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2ba8      	cmp	r3, #168	; 0xa8
 8005aa6:	d00a      	beq.n	8005abe <xTaskCreateStatic+0x66>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	61bb      	str	r3, [r7, #24]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005abe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01e      	beq.n	8005b04 <xTaskCreateStatic+0xac>
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01b      	beq.n	8005b04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	2202      	movs	r2, #2
 8005ada:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ade:	2300      	movs	r3, #0
 8005ae0:	9303      	str	r3, [sp, #12]
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	9302      	str	r3, [sp, #8]
 8005ae6:	f107 0314 	add.w	r3, r7, #20
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f850 	bl	8005b9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005afe:	f000 f8f3 	bl	8005ce8 <prvAddNewTaskToReadyList>
 8005b02:	e001      	b.n	8005b08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b08:	697b      	ldr	r3, [r7, #20]
	}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3728      	adds	r7, #40	; 0x28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b08c      	sub	sp, #48	; 0x30
 8005b16:	af04      	add	r7, sp, #16
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	603b      	str	r3, [r7, #0]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f001 fc5e 	bl	80073e8 <pvPortMalloc>
 8005b2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b34:	20a8      	movs	r0, #168	; 0xa8
 8005b36:	f001 fc57 	bl	80073e8 <pvPortMalloc>
 8005b3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
 8005b48:	e005      	b.n	8005b56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b4a:	6978      	ldr	r0, [r7, #20]
 8005b4c:	f001 fd18 	bl	8007580 <vPortFree>
 8005b50:	e001      	b.n	8005b56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d017      	beq.n	8005b8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	2300      	movs	r3, #0
 8005b68:	9303      	str	r3, [sp, #12]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	9302      	str	r3, [sp, #8]
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f80e 	bl	8005b9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b80:	69f8      	ldr	r0, [r7, #28]
 8005b82:	f000 f8b1 	bl	8005ce8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b86:	2301      	movs	r3, #1
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	e002      	b.n	8005b92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b92:	69bb      	ldr	r3, [r7, #24]
	}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3720      	adds	r7, #32
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	21a5      	movs	r1, #165	; 0xa5
 8005bb6:	f001 fe3b 	bl	8007830 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f023 0307 	bic.w	r3, r3, #7
 8005bd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	617b      	str	r3, [r7, #20]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01f      	beq.n	8005c3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	e012      	b.n	8005c26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	7819      	ldrb	r1, [r3, #0]
 8005c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	3334      	adds	r3, #52	; 0x34
 8005c10:	460a      	mov	r2, r1
 8005c12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	3301      	adds	r3, #1
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b0f      	cmp	r3, #15
 8005c2a:	d9e9      	bls.n	8005c00 <prvInitialiseNewTask+0x64>
 8005c2c:	e000      	b.n	8005c30 <prvInitialiseNewTask+0x94>
			{
				break;
 8005c2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c38:	e003      	b.n	8005c42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	2b37      	cmp	r3, #55	; 0x37
 8005c46:	d901      	bls.n	8005c4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c48:	2337      	movs	r3, #55	; 0x37
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	3304      	adds	r3, #4
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff f978 	bl	8004f58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	3318      	adds	r3, #24
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff f973 	bl	8004f58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	3354      	adds	r3, #84	; 0x54
 8005c9c:	224c      	movs	r2, #76	; 0x4c
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f001 fdc5 	bl	8007830 <memset>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	4a0c      	ldr	r2, [pc, #48]	; (8005cdc <prvInitialiseNewTask+0x140>)
 8005caa:	659a      	str	r2, [r3, #88]	; 0x58
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	4a0c      	ldr	r2, [pc, #48]	; (8005ce0 <prvInitialiseNewTask+0x144>)
 8005cb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	4a0b      	ldr	r2, [pc, #44]	; (8005ce4 <prvInitialiseNewTask+0x148>)
 8005cb6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	69b8      	ldr	r0, [r7, #24]
 8005cbe:	f001 f941 	bl	8006f44 <pxPortInitialiseStack>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd4:	bf00      	nop
 8005cd6:	3720      	adds	r7, #32
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20005024 	.word	0x20005024
 8005ce0:	2000508c 	.word	0x2000508c
 8005ce4:	200050f4 	.word	0x200050f4

08005ce8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cf0:	f001 fa58 	bl	80071a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cf4:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <prvAddNewTaskToReadyList+0xc4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	4a2c      	ldr	r2, [pc, #176]	; (8005dac <prvAddNewTaskToReadyList+0xc4>)
 8005cfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cfe:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <prvAddNewTaskToReadyList+0xc8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d06:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <prvAddNewTaskToReadyList+0xc8>)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d0c:	4b27      	ldr	r3, [pc, #156]	; (8005dac <prvAddNewTaskToReadyList+0xc4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d110      	bne.n	8005d36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d14:	f000 fc26 	bl	8006564 <prvInitialiseTaskLists>
 8005d18:	e00d      	b.n	8005d36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d1a:	4b26      	ldr	r3, [pc, #152]	; (8005db4 <prvAddNewTaskToReadyList+0xcc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d22:	4b23      	ldr	r3, [pc, #140]	; (8005db0 <prvAddNewTaskToReadyList+0xc8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d802      	bhi.n	8005d36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d30:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <prvAddNewTaskToReadyList+0xc8>)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d36:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <prvAddNewTaskToReadyList+0xd0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	4a1e      	ldr	r2, [pc, #120]	; (8005db8 <prvAddNewTaskToReadyList+0xd0>)
 8005d3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d40:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <prvAddNewTaskToReadyList+0xd0>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4c:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <prvAddNewTaskToReadyList+0xd4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d903      	bls.n	8005d5c <prvAddNewTaskToReadyList+0x74>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <prvAddNewTaskToReadyList+0xd4>)
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <prvAddNewTaskToReadyList+0xd8>)
 8005d6a:	441a      	add	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7ff f8fd 	bl	8004f72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d78:	f001 fa44 	bl	8007204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d7c:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <prvAddNewTaskToReadyList+0xcc>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00e      	beq.n	8005da2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <prvAddNewTaskToReadyList+0xc8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d207      	bcs.n	8005da2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d92:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <prvAddNewTaskToReadyList+0xdc>)
 8005d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200012a4 	.word	0x200012a4
 8005db0:	20000dd0 	.word	0x20000dd0
 8005db4:	200012b0 	.word	0x200012b0
 8005db8:	200012c0 	.word	0x200012c0
 8005dbc:	200012ac 	.word	0x200012ac
 8005dc0:	20000dd4 	.word	0x20000dd4
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d017      	beq.n	8005e0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <vTaskDelay+0x60>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <vTaskDelay+0x30>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	60bb      	str	r3, [r7, #8]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005df8:	f000 f88a 	bl	8005f10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fcfe 	bl	8006800 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e04:	f000 f892 	bl	8005f2c <xTaskResumeAll>
 8005e08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d107      	bne.n	8005e20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <vTaskDelay+0x64>)
 8005e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	200012cc 	.word	0x200012cc
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e3e:	463a      	mov	r2, r7
 8005e40:	1d39      	adds	r1, r7, #4
 8005e42:	f107 0308 	add.w	r3, r7, #8
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff f832 	bl	8004eb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	9202      	str	r2, [sp, #8]
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	4924      	ldr	r1, [pc, #144]	; (8005ef0 <vTaskStartScheduler+0xc0>)
 8005e60:	4824      	ldr	r0, [pc, #144]	; (8005ef4 <vTaskStartScheduler+0xc4>)
 8005e62:	f7ff fdf9 	bl	8005a58 <xTaskCreateStatic>
 8005e66:	4603      	mov	r3, r0
 8005e68:	4a23      	ldr	r2, [pc, #140]	; (8005ef8 <vTaskStartScheduler+0xc8>)
 8005e6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e6c:	4b22      	ldr	r3, [pc, #136]	; (8005ef8 <vTaskStartScheduler+0xc8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	e001      	b.n	8005e7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d102      	bne.n	8005e8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e84:	f000 fd10 	bl	80068a8 <xTimerCreateTimerTask>
 8005e88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d11b      	bne.n	8005ec8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	613b      	str	r3, [r7, #16]
}
 8005ea2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ea4:	4b15      	ldr	r3, [pc, #84]	; (8005efc <vTaskStartScheduler+0xcc>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3354      	adds	r3, #84	; 0x54
 8005eaa:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <vTaskStartScheduler+0xd0>)
 8005eac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005eae:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <vTaskStartScheduler+0xd4>)
 8005eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <vTaskStartScheduler+0xd8>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ebc:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <vTaskStartScheduler+0xdc>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ec2:	f001 f8cd 	bl	8007060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ec6:	e00e      	b.n	8005ee6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ece:	d10a      	bne.n	8005ee6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	60fb      	str	r3, [r7, #12]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <vTaskStartScheduler+0xb4>
}
 8005ee6:	bf00      	nop
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	08008214 	.word	0x08008214
 8005ef4:	08006535 	.word	0x08006535
 8005ef8:	200012c8 	.word	0x200012c8
 8005efc:	20000dd0 	.word	0x20000dd0
 8005f00:	2000006c 	.word	0x2000006c
 8005f04:	200012c4 	.word	0x200012c4
 8005f08:	200012b0 	.word	0x200012b0
 8005f0c:	200012a8 	.word	0x200012a8

08005f10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <vTaskSuspendAll+0x18>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	4a03      	ldr	r2, [pc, #12]	; (8005f28 <vTaskSuspendAll+0x18>)
 8005f1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f1e:	bf00      	nop
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	200012cc 	.word	0x200012cc

08005f2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f3a:	4b42      	ldr	r3, [pc, #264]	; (8006044 <xTaskResumeAll+0x118>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	603b      	str	r3, [r7, #0]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f58:	f001 f924 	bl	80071a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f5c:	4b39      	ldr	r3, [pc, #228]	; (8006044 <xTaskResumeAll+0x118>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	4a38      	ldr	r2, [pc, #224]	; (8006044 <xTaskResumeAll+0x118>)
 8005f64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f66:	4b37      	ldr	r3, [pc, #220]	; (8006044 <xTaskResumeAll+0x118>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d162      	bne.n	8006034 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f6e:	4b36      	ldr	r3, [pc, #216]	; (8006048 <xTaskResumeAll+0x11c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d05e      	beq.n	8006034 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f76:	e02f      	b.n	8005fd8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f78:	4b34      	ldr	r3, [pc, #208]	; (800604c <xTaskResumeAll+0x120>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3318      	adds	r3, #24
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff f851 	bl	800502c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff f84c 	bl	800502c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f98:	4b2d      	ldr	r3, [pc, #180]	; (8006050 <xTaskResumeAll+0x124>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d903      	bls.n	8005fa8 <xTaskResumeAll+0x7c>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	4a2a      	ldr	r2, [pc, #168]	; (8006050 <xTaskResumeAll+0x124>)
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4a27      	ldr	r2, [pc, #156]	; (8006054 <xTaskResumeAll+0x128>)
 8005fb6:	441a      	add	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f7fe ffd7 	bl	8004f72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc8:	4b23      	ldr	r3, [pc, #140]	; (8006058 <xTaskResumeAll+0x12c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d302      	bcc.n	8005fd8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fd2:	4b22      	ldr	r3, [pc, #136]	; (800605c <xTaskResumeAll+0x130>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fd8:	4b1c      	ldr	r3, [pc, #112]	; (800604c <xTaskResumeAll+0x120>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1cb      	bne.n	8005f78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fe6:	f000 fb5f 	bl	80066a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fea:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <xTaskResumeAll+0x134>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d010      	beq.n	8006018 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ff6:	f000 f847 	bl	8006088 <xTaskIncrementTick>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006000:	4b16      	ldr	r3, [pc, #88]	; (800605c <xTaskResumeAll+0x130>)
 8006002:	2201      	movs	r2, #1
 8006004:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3b01      	subs	r3, #1
 800600a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1f1      	bne.n	8005ff6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006012:	4b13      	ldr	r3, [pc, #76]	; (8006060 <xTaskResumeAll+0x134>)
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006018:	4b10      	ldr	r3, [pc, #64]	; (800605c <xTaskResumeAll+0x130>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006020:	2301      	movs	r3, #1
 8006022:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006024:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <xTaskResumeAll+0x138>)
 8006026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006034:	f001 f8e6 	bl	8007204 <vPortExitCritical>

	return xAlreadyYielded;
 8006038:	68bb      	ldr	r3, [r7, #8]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	200012cc 	.word	0x200012cc
 8006048:	200012a4 	.word	0x200012a4
 800604c:	20001264 	.word	0x20001264
 8006050:	200012ac 	.word	0x200012ac
 8006054:	20000dd4 	.word	0x20000dd4
 8006058:	20000dd0 	.word	0x20000dd0
 800605c:	200012b8 	.word	0x200012b8
 8006060:	200012b4 	.word	0x200012b4
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800606e:	4b05      	ldr	r3, [pc, #20]	; (8006084 <xTaskGetTickCount+0x1c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006074:	687b      	ldr	r3, [r7, #4]
}
 8006076:	4618      	mov	r0, r3
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	200012a8 	.word	0x200012a8

08006088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006092:	4b4f      	ldr	r3, [pc, #316]	; (80061d0 <xTaskIncrementTick+0x148>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f040 808f 	bne.w	80061ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800609c:	4b4d      	ldr	r3, [pc, #308]	; (80061d4 <xTaskIncrementTick+0x14c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060a4:	4a4b      	ldr	r2, [pc, #300]	; (80061d4 <xTaskIncrementTick+0x14c>)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d120      	bne.n	80060f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060b0:	4b49      	ldr	r3, [pc, #292]	; (80061d8 <xTaskIncrementTick+0x150>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	603b      	str	r3, [r7, #0]
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <xTaskIncrementTick+0x46>
 80060d0:	4b41      	ldr	r3, [pc, #260]	; (80061d8 <xTaskIncrementTick+0x150>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	4b41      	ldr	r3, [pc, #260]	; (80061dc <xTaskIncrementTick+0x154>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <xTaskIncrementTick+0x150>)
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	4a3f      	ldr	r2, [pc, #252]	; (80061dc <xTaskIncrementTick+0x154>)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b3e      	ldr	r3, [pc, #248]	; (80061e0 <xTaskIncrementTick+0x158>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3301      	adds	r3, #1
 80060ea:	4a3d      	ldr	r2, [pc, #244]	; (80061e0 <xTaskIncrementTick+0x158>)
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	f000 fadb 	bl	80066a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060f2:	4b3c      	ldr	r3, [pc, #240]	; (80061e4 <xTaskIncrementTick+0x15c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d349      	bcc.n	8006190 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060fc:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <xTaskIncrementTick+0x150>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006106:	4b37      	ldr	r3, [pc, #220]	; (80061e4 <xTaskIncrementTick+0x15c>)
 8006108:	f04f 32ff 	mov.w	r2, #4294967295
 800610c:	601a      	str	r2, [r3, #0]
					break;
 800610e:	e03f      	b.n	8006190 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006110:	4b31      	ldr	r3, [pc, #196]	; (80061d8 <xTaskIncrementTick+0x150>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d203      	bcs.n	8006130 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006128:	4a2e      	ldr	r2, [pc, #184]	; (80061e4 <xTaskIncrementTick+0x15c>)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800612e:	e02f      	b.n	8006190 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	3304      	adds	r3, #4
 8006134:	4618      	mov	r0, r3
 8006136:	f7fe ff79 	bl	800502c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	2b00      	cmp	r3, #0
 8006140:	d004      	beq.n	800614c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	3318      	adds	r3, #24
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe ff70 	bl	800502c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	4b25      	ldr	r3, [pc, #148]	; (80061e8 <xTaskIncrementTick+0x160>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d903      	bls.n	8006160 <xTaskIncrementTick+0xd8>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	4a22      	ldr	r2, [pc, #136]	; (80061e8 <xTaskIncrementTick+0x160>)
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4a1f      	ldr	r2, [pc, #124]	; (80061ec <xTaskIncrementTick+0x164>)
 800616e:	441a      	add	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	3304      	adds	r3, #4
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f7fe fefb 	bl	8004f72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <xTaskIncrementTick+0x168>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	429a      	cmp	r2, r3
 8006188:	d3b8      	bcc.n	80060fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800618a:	2301      	movs	r3, #1
 800618c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800618e:	e7b5      	b.n	80060fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006190:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <xTaskIncrementTick+0x168>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006196:	4915      	ldr	r1, [pc, #84]	; (80061ec <xTaskIncrementTick+0x164>)
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d901      	bls.n	80061ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061ac:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <xTaskIncrementTick+0x16c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e004      	b.n	80061c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061ba:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <xTaskIncrementTick+0x170>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	4a0d      	ldr	r2, [pc, #52]	; (80061f8 <xTaskIncrementTick+0x170>)
 80061c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061c4:	697b      	ldr	r3, [r7, #20]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	200012cc 	.word	0x200012cc
 80061d4:	200012a8 	.word	0x200012a8
 80061d8:	2000125c 	.word	0x2000125c
 80061dc:	20001260 	.word	0x20001260
 80061e0:	200012bc 	.word	0x200012bc
 80061e4:	200012c4 	.word	0x200012c4
 80061e8:	200012ac 	.word	0x200012ac
 80061ec:	20000dd4 	.word	0x20000dd4
 80061f0:	20000dd0 	.word	0x20000dd0
 80061f4:	200012b8 	.word	0x200012b8
 80061f8:	200012b4 	.word	0x200012b4

080061fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006202:	4b2a      	ldr	r3, [pc, #168]	; (80062ac <vTaskSwitchContext+0xb0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800620a:	4b29      	ldr	r3, [pc, #164]	; (80062b0 <vTaskSwitchContext+0xb4>)
 800620c:	2201      	movs	r2, #1
 800620e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006210:	e046      	b.n	80062a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006212:	4b27      	ldr	r3, [pc, #156]	; (80062b0 <vTaskSwitchContext+0xb4>)
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006218:	4b26      	ldr	r3, [pc, #152]	; (80062b4 <vTaskSwitchContext+0xb8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	e010      	b.n	8006242 <vTaskSwitchContext+0x46>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <vTaskSwitchContext+0x40>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	607b      	str	r3, [r7, #4]
}
 8006238:	bf00      	nop
 800623a:	e7fe      	b.n	800623a <vTaskSwitchContext+0x3e>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3b01      	subs	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	491d      	ldr	r1, [pc, #116]	; (80062b8 <vTaskSwitchContext+0xbc>)
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0e4      	beq.n	8006220 <vTaskSwitchContext+0x24>
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <vTaskSwitchContext+0xbc>)
 8006262:	4413      	add	r3, r2
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	605a      	str	r2, [r3, #4]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	3308      	adds	r3, #8
 8006278:	429a      	cmp	r2, r3
 800627a:	d104      	bne.n	8006286 <vTaskSwitchContext+0x8a>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	605a      	str	r2, [r3, #4]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	4a0b      	ldr	r2, [pc, #44]	; (80062bc <vTaskSwitchContext+0xc0>)
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	4a08      	ldr	r2, [pc, #32]	; (80062b4 <vTaskSwitchContext+0xb8>)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006296:	4b09      	ldr	r3, [pc, #36]	; (80062bc <vTaskSwitchContext+0xc0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3354      	adds	r3, #84	; 0x54
 800629c:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <vTaskSwitchContext+0xc4>)
 800629e:	6013      	str	r3, [r2, #0]
}
 80062a0:	bf00      	nop
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	200012cc 	.word	0x200012cc
 80062b0:	200012b8 	.word	0x200012b8
 80062b4:	200012ac 	.word	0x200012ac
 80062b8:	20000dd4 	.word	0x20000dd4
 80062bc:	20000dd0 	.word	0x20000dd0
 80062c0:	2000006c 	.word	0x2000006c

080062c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	60fb      	str	r3, [r7, #12]
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062ea:	4b07      	ldr	r3, [pc, #28]	; (8006308 <vTaskPlaceOnEventList+0x44>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3318      	adds	r3, #24
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fe fe61 	bl	8004fba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062f8:	2101      	movs	r1, #1
 80062fa:	6838      	ldr	r0, [r7, #0]
 80062fc:	f000 fa80 	bl	8006800 <prvAddCurrentTaskToDelayedList>
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20000dd0 	.word	0x20000dd0

0800630c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	617b      	str	r3, [r7, #20]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006334:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <vTaskPlaceOnEventListRestricted+0x54>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3318      	adds	r3, #24
 800633a:	4619      	mov	r1, r3
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7fe fe18 	bl	8004f72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006348:	f04f 33ff 	mov.w	r3, #4294967295
 800634c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	68b8      	ldr	r0, [r7, #8]
 8006352:	f000 fa55 	bl	8006800 <prvAddCurrentTaskToDelayedList>
	}
 8006356:	bf00      	nop
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000dd0 	.word	0x20000dd0

08006364 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	60fb      	str	r3, [r7, #12]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	3318      	adds	r3, #24
 8006394:	4618      	mov	r0, r3
 8006396:	f7fe fe49 	bl	800502c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800639a:	4b1e      	ldr	r3, [pc, #120]	; (8006414 <xTaskRemoveFromEventList+0xb0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d11d      	bne.n	80063de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	3304      	adds	r3, #4
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fe40 	bl	800502c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b0:	4b19      	ldr	r3, [pc, #100]	; (8006418 <xTaskRemoveFromEventList+0xb4>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d903      	bls.n	80063c0 <xTaskRemoveFromEventList+0x5c>
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	4a16      	ldr	r2, [pc, #88]	; (8006418 <xTaskRemoveFromEventList+0xb4>)
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4a13      	ldr	r2, [pc, #76]	; (800641c <xTaskRemoveFromEventList+0xb8>)
 80063ce:	441a      	add	r2, r3
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f7fe fdcb 	bl	8004f72 <vListInsertEnd>
 80063dc:	e005      	b.n	80063ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3318      	adds	r3, #24
 80063e2:	4619      	mov	r1, r3
 80063e4:	480e      	ldr	r0, [pc, #56]	; (8006420 <xTaskRemoveFromEventList+0xbc>)
 80063e6:	f7fe fdc4 	bl	8004f72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ee:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <xTaskRemoveFromEventList+0xc0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d905      	bls.n	8006404 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063f8:	2301      	movs	r3, #1
 80063fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <xTaskRemoveFromEventList+0xc4>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	e001      	b.n	8006408 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006408:	697b      	ldr	r3, [r7, #20]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	200012cc 	.word	0x200012cc
 8006418:	200012ac 	.word	0x200012ac
 800641c:	20000dd4 	.word	0x20000dd4
 8006420:	20001264 	.word	0x20001264
 8006424:	20000dd0 	.word	0x20000dd0
 8006428:	200012b8 	.word	0x200012b8

0800642c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <vTaskInternalSetTimeOutState+0x24>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800643c:	4b05      	ldr	r3, [pc, #20]	; (8006454 <vTaskInternalSetTimeOutState+0x28>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	605a      	str	r2, [r3, #4]
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	200012bc 	.word	0x200012bc
 8006454:	200012a8 	.word	0x200012a8

08006458 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	613b      	str	r3, [r7, #16]
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	60fb      	str	r3, [r7, #12]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800649a:	f000 fe83 	bl	80071a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800649e:	4b1d      	ldr	r3, [pc, #116]	; (8006514 <xTaskCheckForTimeOut+0xbc>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b6:	d102      	bne.n	80064be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	e023      	b.n	8006506 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b15      	ldr	r3, [pc, #84]	; (8006518 <xTaskCheckForTimeOut+0xc0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d007      	beq.n	80064da <xTaskCheckForTimeOut+0x82>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d302      	bcc.n	80064da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	e015      	b.n	8006506 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d20b      	bcs.n	80064fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	1ad2      	subs	r2, r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff9b 	bl	800642c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	e004      	b.n	8006506 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006502:	2301      	movs	r3, #1
 8006504:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006506:	f000 fe7d 	bl	8007204 <vPortExitCritical>

	return xReturn;
 800650a:	69fb      	ldr	r3, [r7, #28]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	200012a8 	.word	0x200012a8
 8006518:	200012bc 	.word	0x200012bc

0800651c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006520:	4b03      	ldr	r3, [pc, #12]	; (8006530 <vTaskMissedYield+0x14>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
}
 8006526:	bf00      	nop
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	200012b8 	.word	0x200012b8

08006534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800653c:	f000 f852 	bl	80065e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006540:	4b06      	ldr	r3, [pc, #24]	; (800655c <prvIdleTask+0x28>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d9f9      	bls.n	800653c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006548:	4b05      	ldr	r3, [pc, #20]	; (8006560 <prvIdleTask+0x2c>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006558:	e7f0      	b.n	800653c <prvIdleTask+0x8>
 800655a:	bf00      	nop
 800655c:	20000dd4 	.word	0x20000dd4
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800656a:	2300      	movs	r3, #0
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	e00c      	b.n	800658a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4a12      	ldr	r2, [pc, #72]	; (80065c4 <prvInitialiseTaskLists+0x60>)
 800657c:	4413      	add	r3, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe fcca 	bl	8004f18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3301      	adds	r3, #1
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b37      	cmp	r3, #55	; 0x37
 800658e:	d9ef      	bls.n	8006570 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006590:	480d      	ldr	r0, [pc, #52]	; (80065c8 <prvInitialiseTaskLists+0x64>)
 8006592:	f7fe fcc1 	bl	8004f18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006596:	480d      	ldr	r0, [pc, #52]	; (80065cc <prvInitialiseTaskLists+0x68>)
 8006598:	f7fe fcbe 	bl	8004f18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800659c:	480c      	ldr	r0, [pc, #48]	; (80065d0 <prvInitialiseTaskLists+0x6c>)
 800659e:	f7fe fcbb 	bl	8004f18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065a2:	480c      	ldr	r0, [pc, #48]	; (80065d4 <prvInitialiseTaskLists+0x70>)
 80065a4:	f7fe fcb8 	bl	8004f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065a8:	480b      	ldr	r0, [pc, #44]	; (80065d8 <prvInitialiseTaskLists+0x74>)
 80065aa:	f7fe fcb5 	bl	8004f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065ae:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <prvInitialiseTaskLists+0x78>)
 80065b0:	4a05      	ldr	r2, [pc, #20]	; (80065c8 <prvInitialiseTaskLists+0x64>)
 80065b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <prvInitialiseTaskLists+0x7c>)
 80065b6:	4a05      	ldr	r2, [pc, #20]	; (80065cc <prvInitialiseTaskLists+0x68>)
 80065b8:	601a      	str	r2, [r3, #0]
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000dd4 	.word	0x20000dd4
 80065c8:	20001234 	.word	0x20001234
 80065cc:	20001248 	.word	0x20001248
 80065d0:	20001264 	.word	0x20001264
 80065d4:	20001278 	.word	0x20001278
 80065d8:	20001290 	.word	0x20001290
 80065dc:	2000125c 	.word	0x2000125c
 80065e0:	20001260 	.word	0x20001260

080065e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ea:	e019      	b.n	8006620 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065ec:	f000 fdda 	bl	80071a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <prvCheckTasksWaitingTermination+0x50>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe fd15 	bl	800502c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006602:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <prvCheckTasksWaitingTermination+0x54>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3b01      	subs	r3, #1
 8006608:	4a0b      	ldr	r2, [pc, #44]	; (8006638 <prvCheckTasksWaitingTermination+0x54>)
 800660a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <prvCheckTasksWaitingTermination+0x58>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3b01      	subs	r3, #1
 8006612:	4a0a      	ldr	r2, [pc, #40]	; (800663c <prvCheckTasksWaitingTermination+0x58>)
 8006614:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006616:	f000 fdf5 	bl	8007204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f810 	bl	8006640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <prvCheckTasksWaitingTermination+0x58>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e1      	bne.n	80065ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20001278 	.word	0x20001278
 8006638:	200012a4 	.word	0x200012a4
 800663c:	2000128c 	.word	0x2000128c

08006640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3354      	adds	r3, #84	; 0x54
 800664c:	4618      	mov	r0, r3
 800664e:	f001 f8f7 	bl	8007840 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006658:	2b00      	cmp	r3, #0
 800665a:	d108      	bne.n	800666e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	4618      	mov	r0, r3
 8006662:	f000 ff8d 	bl	8007580 <vPortFree>
				vPortFree( pxTCB );
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 ff8a 	bl	8007580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800666c:	e018      	b.n	80066a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006674:	2b01      	cmp	r3, #1
 8006676:	d103      	bne.n	8006680 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 ff81 	bl	8007580 <vPortFree>
	}
 800667e:	e00f      	b.n	80066a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006686:	2b02      	cmp	r3, #2
 8006688:	d00a      	beq.n	80066a0 <prvDeleteTCB+0x60>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	60fb      	str	r3, [r7, #12]
}
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <prvDeleteTCB+0x5e>
	}
 80066a0:	bf00      	nop
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ae:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <prvResetNextTaskUnblockTime+0x38>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <prvResetNextTaskUnblockTime+0x3c>)
 80066ba:	f04f 32ff 	mov.w	r2, #4294967295
 80066be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066c0:	e008      	b.n	80066d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c2:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <prvResetNextTaskUnblockTime+0x38>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	4a04      	ldr	r2, [pc, #16]	; (80066e4 <prvResetNextTaskUnblockTime+0x3c>)
 80066d2:	6013      	str	r3, [r2, #0]
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	2000125c 	.word	0x2000125c
 80066e4:	200012c4 	.word	0x200012c4

080066e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066ee:	4b0b      	ldr	r3, [pc, #44]	; (800671c <xTaskGetSchedulerState+0x34>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066f6:	2301      	movs	r3, #1
 80066f8:	607b      	str	r3, [r7, #4]
 80066fa:	e008      	b.n	800670e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066fc:	4b08      	ldr	r3, [pc, #32]	; (8006720 <xTaskGetSchedulerState+0x38>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d102      	bne.n	800670a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006704:	2302      	movs	r3, #2
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	e001      	b.n	800670e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800670a:	2300      	movs	r3, #0
 800670c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800670e:	687b      	ldr	r3, [r7, #4]
	}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	200012b0 	.word	0x200012b0
 8006720:	200012cc 	.word	0x200012cc

08006724 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d056      	beq.n	80067e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800673a:	4b2e      	ldr	r3, [pc, #184]	; (80067f4 <xTaskPriorityDisinherit+0xd0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	429a      	cmp	r2, r3
 8006742:	d00a      	beq.n	800675a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	60fb      	str	r3, [r7, #12]
}
 8006756:	bf00      	nop
 8006758:	e7fe      	b.n	8006758 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	60bb      	str	r3, [r7, #8]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677c:	1e5a      	subs	r2, r3, #1
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	429a      	cmp	r2, r3
 800678c:	d02c      	beq.n	80067e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006792:	2b00      	cmp	r3, #0
 8006794:	d128      	bne.n	80067e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	3304      	adds	r3, #4
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fc46 	bl	800502c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b8:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <xTaskPriorityDisinherit+0xd4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d903      	bls.n	80067c8 <xTaskPriorityDisinherit+0xa4>
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	4a0c      	ldr	r2, [pc, #48]	; (80067f8 <xTaskPriorityDisinherit+0xd4>)
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4a09      	ldr	r2, [pc, #36]	; (80067fc <xTaskPriorityDisinherit+0xd8>)
 80067d6:	441a      	add	r2, r3
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	3304      	adds	r3, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f7fe fbc7 	bl	8004f72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067e4:	2301      	movs	r3, #1
 80067e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067e8:	697b      	ldr	r3, [r7, #20]
	}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000dd0 	.word	0x20000dd0
 80067f8:	200012ac 	.word	0x200012ac
 80067fc:	20000dd4 	.word	0x20000dd4

08006800 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800680a:	4b21      	ldr	r3, [pc, #132]	; (8006890 <prvAddCurrentTaskToDelayedList+0x90>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006810:	4b20      	ldr	r3, [pc, #128]	; (8006894 <prvAddCurrentTaskToDelayedList+0x94>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3304      	adds	r3, #4
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fc08 	bl	800502c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006822:	d10a      	bne.n	800683a <prvAddCurrentTaskToDelayedList+0x3a>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800682a:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <prvAddCurrentTaskToDelayedList+0x94>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	4819      	ldr	r0, [pc, #100]	; (8006898 <prvAddCurrentTaskToDelayedList+0x98>)
 8006834:	f7fe fb9d 	bl	8004f72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006838:	e026      	b.n	8006888 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4413      	add	r3, r2
 8006840:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006842:	4b14      	ldr	r3, [pc, #80]	; (8006894 <prvAddCurrentTaskToDelayedList+0x94>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	429a      	cmp	r2, r3
 8006850:	d209      	bcs.n	8006866 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <prvAddCurrentTaskToDelayedList+0x94>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3304      	adds	r3, #4
 800685c:	4619      	mov	r1, r3
 800685e:	4610      	mov	r0, r2
 8006860:	f7fe fbab 	bl	8004fba <vListInsert>
}
 8006864:	e010      	b.n	8006888 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006866:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <prvAddCurrentTaskToDelayedList+0x94>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3304      	adds	r3, #4
 8006870:	4619      	mov	r1, r3
 8006872:	4610      	mov	r0, r2
 8006874:	f7fe fba1 	bl	8004fba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	d202      	bcs.n	8006888 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006882:	4a08      	ldr	r2, [pc, #32]	; (80068a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	6013      	str	r3, [r2, #0]
}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	200012a8 	.word	0x200012a8
 8006894:	20000dd0 	.word	0x20000dd0
 8006898:	20001290 	.word	0x20001290
 800689c:	20001260 	.word	0x20001260
 80068a0:	2000125c 	.word	0x2000125c
 80068a4:	200012c4 	.word	0x200012c4

080068a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08a      	sub	sp, #40	; 0x28
 80068ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068b2:	f000 fb07 	bl	8006ec4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068b6:	4b1c      	ldr	r3, [pc, #112]	; (8006928 <xTimerCreateTimerTask+0x80>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d021      	beq.n	8006902 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068c6:	1d3a      	adds	r2, r7, #4
 80068c8:	f107 0108 	add.w	r1, r7, #8
 80068cc:	f107 030c 	add.w	r3, r7, #12
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe fb07 	bl	8004ee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	9202      	str	r2, [sp, #8]
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	2302      	movs	r3, #2
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	2300      	movs	r3, #0
 80068e6:	460a      	mov	r2, r1
 80068e8:	4910      	ldr	r1, [pc, #64]	; (800692c <xTimerCreateTimerTask+0x84>)
 80068ea:	4811      	ldr	r0, [pc, #68]	; (8006930 <xTimerCreateTimerTask+0x88>)
 80068ec:	f7ff f8b4 	bl	8005a58 <xTaskCreateStatic>
 80068f0:	4603      	mov	r3, r0
 80068f2:	4a10      	ldr	r2, [pc, #64]	; (8006934 <xTimerCreateTimerTask+0x8c>)
 80068f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068f6:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <xTimerCreateTimerTask+0x8c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068fe:	2301      	movs	r3, #1
 8006900:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	613b      	str	r3, [r7, #16]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800691e:	697b      	ldr	r3, [r7, #20]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20001300 	.word	0x20001300
 800692c:	0800821c 	.word	0x0800821c
 8006930:	08006a6d 	.word	0x08006a6d
 8006934:	20001304 	.word	0x20001304

08006938 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	; 0x28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006946:	2300      	movs	r3, #0
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	623b      	str	r3, [r7, #32]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006966:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <xTimerGenericCommand+0x98>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d02a      	beq.n	80069c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b05      	cmp	r3, #5
 800697e:	dc18      	bgt.n	80069b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006980:	f7ff feb2 	bl	80066e8 <xTaskGetSchedulerState>
 8006984:	4603      	mov	r3, r0
 8006986:	2b02      	cmp	r3, #2
 8006988:	d109      	bne.n	800699e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800698a:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <xTimerGenericCommand+0x98>)
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	f107 0110 	add.w	r1, r7, #16
 8006992:	2300      	movs	r3, #0
 8006994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006996:	f7fe fc77 	bl	8005288 <xQueueGenericSend>
 800699a:	6278      	str	r0, [r7, #36]	; 0x24
 800699c:	e012      	b.n	80069c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <xTimerGenericCommand+0x98>)
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	f107 0110 	add.w	r1, r7, #16
 80069a6:	2300      	movs	r3, #0
 80069a8:	2200      	movs	r2, #0
 80069aa:	f7fe fc6d 	bl	8005288 <xQueueGenericSend>
 80069ae:	6278      	str	r0, [r7, #36]	; 0x24
 80069b0:	e008      	b.n	80069c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069b2:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <xTimerGenericCommand+0x98>)
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	f107 0110 	add.w	r1, r7, #16
 80069ba:	2300      	movs	r3, #0
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	f7fe fd61 	bl	8005484 <xQueueGenericSendFromISR>
 80069c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3728      	adds	r7, #40	; 0x28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20001300 	.word	0x20001300

080069d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af02      	add	r7, sp, #8
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069de:	4b22      	ldr	r3, [pc, #136]	; (8006a68 <prvProcessExpiredTimer+0x94>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe fb1d 	bl	800502c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d022      	beq.n	8006a46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	699a      	ldr	r2, [r3, #24]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	18d1      	adds	r1, r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	6978      	ldr	r0, [r7, #20]
 8006a0e:	f000 f8d1 	bl	8006bb4 <prvInsertTimerInActiveList>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01f      	beq.n	8006a58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	2100      	movs	r1, #0
 8006a22:	6978      	ldr	r0, [r7, #20]
 8006a24:	f7ff ff88 	bl	8006938 <xTimerGenericCommand>
 8006a28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d113      	bne.n	8006a58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60fb      	str	r3, [r7, #12]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	6978      	ldr	r0, [r7, #20]
 8006a5e:	4798      	blx	r3
}
 8006a60:	bf00      	nop
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	200012f8 	.word	0x200012f8

08006a6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a74:	f107 0308 	add.w	r3, r7, #8
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 f857 	bl	8006b2c <prvGetNextExpireTime>
 8006a7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4619      	mov	r1, r3
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f803 	bl	8006a90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a8a:	f000 f8d5 	bl	8006c38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a8e:	e7f1      	b.n	8006a74 <prvTimerTask+0x8>

08006a90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a9a:	f7ff fa39 	bl	8005f10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a9e:	f107 0308 	add.w	r3, r7, #8
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 f866 	bl	8006b74 <prvSampleTimeNow>
 8006aa8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d130      	bne.n	8006b12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <prvProcessTimerOrBlockTask+0x3c>
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d806      	bhi.n	8006acc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006abe:	f7ff fa35 	bl	8005f2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ac2:	68f9      	ldr	r1, [r7, #12]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff ff85 	bl	80069d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006aca:	e024      	b.n	8006b16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d008      	beq.n	8006ae4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ad2:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <prvProcessTimerOrBlockTask+0x90>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <prvProcessTimerOrBlockTask+0x50>
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <prvProcessTimerOrBlockTask+0x52>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ae4:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <prvProcessTimerOrBlockTask+0x94>)
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	4619      	mov	r1, r3
 8006af2:	f7fe ff7d 	bl	80059f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006af6:	f7ff fa19 	bl	8005f2c <xTaskResumeAll>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10a      	bne.n	8006b16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <prvProcessTimerOrBlockTask+0x98>)
 8006b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	f3bf 8f6f 	isb	sy
}
 8006b10:	e001      	b.n	8006b16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b12:	f7ff fa0b 	bl	8005f2c <xTaskResumeAll>
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	200012fc 	.word	0x200012fc
 8006b24:	20001300 	.word	0x20001300
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b34:	4b0e      	ldr	r3, [pc, #56]	; (8006b70 <prvGetNextExpireTime+0x44>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <prvGetNextExpireTime+0x16>
 8006b3e:	2201      	movs	r2, #1
 8006b40:	e000      	b.n	8006b44 <prvGetNextExpireTime+0x18>
 8006b42:	2200      	movs	r2, #0
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <prvGetNextExpireTime+0x44>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	e001      	b.n	8006b60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b60:	68fb      	ldr	r3, [r7, #12]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	200012f8 	.word	0x200012f8

08006b74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b7c:	f7ff fa74 	bl	8006068 <xTaskGetTickCount>
 8006b80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b82:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <prvSampleTimeNow+0x3c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d205      	bcs.n	8006b98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b8c:	f000 f936 	bl	8006dfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	e002      	b.n	8006b9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b9e:	4a04      	ldr	r2, [pc, #16]	; (8006bb0 <prvSampleTimeNow+0x3c>)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20001308 	.word	0x20001308

08006bb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d812      	bhi.n	8006c00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d302      	bcc.n	8006bee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006be8:	2301      	movs	r3, #1
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	e01b      	b.n	8006c26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bee:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <prvInsertTimerInActiveList+0x7c>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	f7fe f9de 	bl	8004fba <vListInsert>
 8006bfe:	e012      	b.n	8006c26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d206      	bcs.n	8006c16 <prvInsertTimerInActiveList+0x62>
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d302      	bcc.n	8006c16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c10:	2301      	movs	r3, #1
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	e007      	b.n	8006c26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c16:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <prvInsertTimerInActiveList+0x80>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f7fe f9ca 	bl	8004fba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c26:	697b      	ldr	r3, [r7, #20]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	200012fc 	.word	0x200012fc
 8006c34:	200012f8 	.word	0x200012f8

08006c38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08e      	sub	sp, #56	; 0x38
 8006c3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c3e:	e0ca      	b.n	8006dd6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	da18      	bge.n	8006c78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c46:	1d3b      	adds	r3, r7, #4
 8006c48:	3304      	adds	r3, #4
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	61fb      	str	r3, [r7, #28]
}
 8006c64:	bf00      	nop
 8006c66:	e7fe      	b.n	8006c66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6e:	6850      	ldr	r0, [r2, #4]
 8006c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c72:	6892      	ldr	r2, [r2, #8]
 8006c74:	4611      	mov	r1, r2
 8006c76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f2c0 80ab 	blt.w	8006dd6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d004      	beq.n	8006c96 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe f9cb 	bl	800502c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c96:	463b      	mov	r3, r7
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff ff6b 	bl	8006b74 <prvSampleTimeNow>
 8006c9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b09      	cmp	r3, #9
 8006ca4:	f200 8096 	bhi.w	8006dd4 <prvProcessReceivedCommands+0x19c>
 8006ca8:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <prvProcessReceivedCommands+0x78>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006cd9 	.word	0x08006cd9
 8006cb8:	08006cd9 	.word	0x08006cd9
 8006cbc:	08006d4d 	.word	0x08006d4d
 8006cc0:	08006d61 	.word	0x08006d61
 8006cc4:	08006dab 	.word	0x08006dab
 8006cc8:	08006cd9 	.word	0x08006cd9
 8006ccc:	08006cd9 	.word	0x08006cd9
 8006cd0:	08006d4d 	.word	0x08006d4d
 8006cd4:	08006d61 	.word	0x08006d61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	18d1      	adds	r1, r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf8:	f7ff ff5c 	bl	8006bb4 <prvInsertTimerInActiveList>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d069      	beq.n	8006dd6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d05e      	beq.n	8006dd6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	441a      	add	r2, r3
 8006d20:	2300      	movs	r3, #0
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	2300      	movs	r3, #0
 8006d26:	2100      	movs	r1, #0
 8006d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d2a:	f7ff fe05 	bl	8006938 <xTimerGenericCommand>
 8006d2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d14f      	bne.n	8006dd6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	61bb      	str	r3, [r7, #24]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d5e:	e03a      	b.n	8006dd6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	617b      	str	r3, [r7, #20]
}
 8006d92:	bf00      	nop
 8006d94:	e7fe      	b.n	8006d94 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	18d1      	adds	r1, r2, r3
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da4:	f7ff ff06 	bl	8006bb4 <prvInsertTimerInActiveList>
					break;
 8006da8:	e015      	b.n	8006dd6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d103      	bne.n	8006dc0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dba:	f000 fbe1 	bl	8007580 <vPortFree>
 8006dbe:	e00a      	b.n	8006dd6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dc6:	f023 0301 	bic.w	r3, r3, #1
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006dd2:	e000      	b.n	8006dd6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006dd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dd6:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <prvProcessReceivedCommands+0x1c0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	1d39      	adds	r1, r7, #4
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fbec 	bl	80055bc <xQueueReceive>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f47f af2a 	bne.w	8006c40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006dec:	bf00      	nop
 8006dee:	bf00      	nop
 8006df0:	3730      	adds	r7, #48	; 0x30
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20001300 	.word	0x20001300

08006dfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e02:	e048      	b.n	8006e96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e04:	4b2d      	ldr	r3, [pc, #180]	; (8006ebc <prvSwitchTimerLists+0xc0>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e0e:	4b2b      	ldr	r3, [pc, #172]	; (8006ebc <prvSwitchTimerLists+0xc0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe f905 	bl	800502c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d02e      	beq.n	8006e96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d90e      	bls.n	8006e68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e56:	4b19      	ldr	r3, [pc, #100]	; (8006ebc <prvSwitchTimerLists+0xc0>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f7fe f8aa 	bl	8004fba <vListInsert>
 8006e66:	e016      	b.n	8006e96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	2100      	movs	r1, #0
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7ff fd60 	bl	8006938 <xTimerGenericCommand>
 8006e78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	603b      	str	r3, [r7, #0]
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <prvSwitchTimerLists+0xc0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1b1      	bne.n	8006e04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ea0:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <prvSwitchTimerLists+0xc0>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ea6:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <prvSwitchTimerLists+0xc4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a04      	ldr	r2, [pc, #16]	; (8006ebc <prvSwitchTimerLists+0xc0>)
 8006eac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006eae:	4a04      	ldr	r2, [pc, #16]	; (8006ec0 <prvSwitchTimerLists+0xc4>)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	6013      	str	r3, [r2, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	200012f8 	.word	0x200012f8
 8006ec0:	200012fc 	.word	0x200012fc

08006ec4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006eca:	f000 f96b 	bl	80071a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ece:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <prvCheckForValidListAndQueue+0x60>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d120      	bne.n	8006f18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ed6:	4814      	ldr	r0, [pc, #80]	; (8006f28 <prvCheckForValidListAndQueue+0x64>)
 8006ed8:	f7fe f81e 	bl	8004f18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006edc:	4813      	ldr	r0, [pc, #76]	; (8006f2c <prvCheckForValidListAndQueue+0x68>)
 8006ede:	f7fe f81b 	bl	8004f18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ee2:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <prvCheckForValidListAndQueue+0x6c>)
 8006ee4:	4a10      	ldr	r2, [pc, #64]	; (8006f28 <prvCheckForValidListAndQueue+0x64>)
 8006ee6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ee8:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <prvCheckForValidListAndQueue+0x70>)
 8006eea:	4a10      	ldr	r2, [pc, #64]	; (8006f2c <prvCheckForValidListAndQueue+0x68>)
 8006eec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <prvCheckForValidListAndQueue+0x74>)
 8006ef4:	4a11      	ldr	r2, [pc, #68]	; (8006f3c <prvCheckForValidListAndQueue+0x78>)
 8006ef6:	2110      	movs	r1, #16
 8006ef8:	200a      	movs	r0, #10
 8006efa:	f7fe f929 	bl	8005150 <xQueueGenericCreateStatic>
 8006efe:	4603      	mov	r3, r0
 8006f00:	4a08      	ldr	r2, [pc, #32]	; (8006f24 <prvCheckForValidListAndQueue+0x60>)
 8006f02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f04:	4b07      	ldr	r3, [pc, #28]	; (8006f24 <prvCheckForValidListAndQueue+0x60>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f0c:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <prvCheckForValidListAndQueue+0x60>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	490b      	ldr	r1, [pc, #44]	; (8006f40 <prvCheckForValidListAndQueue+0x7c>)
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe fd42 	bl	800599c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f18:	f000 f974 	bl	8007204 <vPortExitCritical>
}
 8006f1c:	bf00      	nop
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20001300 	.word	0x20001300
 8006f28:	200012d0 	.word	0x200012d0
 8006f2c:	200012e4 	.word	0x200012e4
 8006f30:	200012f8 	.word	0x200012f8
 8006f34:	200012fc 	.word	0x200012fc
 8006f38:	200013ac 	.word	0x200013ac
 8006f3c:	2000130c 	.word	0x2000130c
 8006f40:	08008224 	.word	0x08008224

08006f44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3b04      	subs	r3, #4
 8006f54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3b04      	subs	r3, #4
 8006f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f023 0201 	bic.w	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3b04      	subs	r3, #4
 8006f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f74:	4a0c      	ldr	r2, [pc, #48]	; (8006fa8 <pxPortInitialiseStack+0x64>)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3b14      	subs	r3, #20
 8006f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3b04      	subs	r3, #4
 8006f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f06f 0202 	mvn.w	r2, #2
 8006f92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3b20      	subs	r3, #32
 8006f98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	08006fad 	.word	0x08006fad

08006fac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fb6:	4b12      	ldr	r3, [pc, #72]	; (8007000 <prvTaskExitError+0x54>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d00a      	beq.n	8006fd6 <prvTaskExitError+0x2a>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	60fb      	str	r3, [r7, #12]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <prvTaskExitError+0x28>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	60bb      	str	r3, [r7, #8]
}
 8006fe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fea:	bf00      	nop
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0fc      	beq.n	8006fec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	2000001c 	.word	0x2000001c
	...

08007010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007010:	4b07      	ldr	r3, [pc, #28]	; (8007030 <pxCurrentTCBConst2>)
 8007012:	6819      	ldr	r1, [r3, #0]
 8007014:	6808      	ldr	r0, [r1, #0]
 8007016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701a:	f380 8809 	msr	PSP, r0
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8811 	msr	BASEPRI, r0
 800702a:	4770      	bx	lr
 800702c:	f3af 8000 	nop.w

08007030 <pxCurrentTCBConst2>:
 8007030:	20000dd0 	.word	0x20000dd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop

08007038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007038:	4808      	ldr	r0, [pc, #32]	; (800705c <prvPortStartFirstTask+0x24>)
 800703a:	6800      	ldr	r0, [r0, #0]
 800703c:	6800      	ldr	r0, [r0, #0]
 800703e:	f380 8808 	msr	MSP, r0
 8007042:	f04f 0000 	mov.w	r0, #0
 8007046:	f380 8814 	msr	CONTROL, r0
 800704a:	b662      	cpsie	i
 800704c:	b661      	cpsie	f
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	df00      	svc	0
 8007058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800705a:	bf00      	nop
 800705c:	e000ed08 	.word	0xe000ed08

08007060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007066:	4b46      	ldr	r3, [pc, #280]	; (8007180 <xPortStartScheduler+0x120>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a46      	ldr	r2, [pc, #280]	; (8007184 <xPortStartScheduler+0x124>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10a      	bne.n	8007086 <xPortStartScheduler+0x26>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	613b      	str	r3, [r7, #16]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007086:	4b3e      	ldr	r3, [pc, #248]	; (8007180 <xPortStartScheduler+0x120>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a3f      	ldr	r2, [pc, #252]	; (8007188 <xPortStartScheduler+0x128>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d10a      	bne.n	80070a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070a6:	4b39      	ldr	r3, [pc, #228]	; (800718c <xPortStartScheduler+0x12c>)
 80070a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	22ff      	movs	r2, #255	; 0xff
 80070b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	4b31      	ldr	r3, [pc, #196]	; (8007190 <xPortStartScheduler+0x130>)
 80070cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070ce:	4b31      	ldr	r3, [pc, #196]	; (8007194 <xPortStartScheduler+0x134>)
 80070d0:	2207      	movs	r2, #7
 80070d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070d4:	e009      	b.n	80070ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80070d6:	4b2f      	ldr	r3, [pc, #188]	; (8007194 <xPortStartScheduler+0x134>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3b01      	subs	r3, #1
 80070dc:	4a2d      	ldr	r2, [pc, #180]	; (8007194 <xPortStartScheduler+0x134>)
 80070de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070ea:	78fb      	ldrb	r3, [r7, #3]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f2:	2b80      	cmp	r3, #128	; 0x80
 80070f4:	d0ef      	beq.n	80070d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070f6:	4b27      	ldr	r3, [pc, #156]	; (8007194 <xPortStartScheduler+0x134>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1c3 0307 	rsb	r3, r3, #7
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d00a      	beq.n	8007118 <xPortStartScheduler+0xb8>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	60bb      	str	r3, [r7, #8]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007118:	4b1e      	ldr	r3, [pc, #120]	; (8007194 <xPortStartScheduler+0x134>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <xPortStartScheduler+0x134>)
 8007120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007122:	4b1c      	ldr	r3, [pc, #112]	; (8007194 <xPortStartScheduler+0x134>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800712a:	4a1a      	ldr	r2, [pc, #104]	; (8007194 <xPortStartScheduler+0x134>)
 800712c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	b2da      	uxtb	r2, r3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007136:	4b18      	ldr	r3, [pc, #96]	; (8007198 <xPortStartScheduler+0x138>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a17      	ldr	r2, [pc, #92]	; (8007198 <xPortStartScheduler+0x138>)
 800713c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007142:	4b15      	ldr	r3, [pc, #84]	; (8007198 <xPortStartScheduler+0x138>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a14      	ldr	r2, [pc, #80]	; (8007198 <xPortStartScheduler+0x138>)
 8007148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800714c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800714e:	f000 f8dd 	bl	800730c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007152:	4b12      	ldr	r3, [pc, #72]	; (800719c <xPortStartScheduler+0x13c>)
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007158:	f000 f8fc 	bl	8007354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800715c:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <xPortStartScheduler+0x140>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a0f      	ldr	r2, [pc, #60]	; (80071a0 <xPortStartScheduler+0x140>)
 8007162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007168:	f7ff ff66 	bl	8007038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800716c:	f7ff f846 	bl	80061fc <vTaskSwitchContext>
	prvTaskExitError();
 8007170:	f7ff ff1c 	bl	8006fac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	e000ed00 	.word	0xe000ed00
 8007184:	410fc271 	.word	0x410fc271
 8007188:	410fc270 	.word	0x410fc270
 800718c:	e000e400 	.word	0xe000e400
 8007190:	200013fc 	.word	0x200013fc
 8007194:	20001400 	.word	0x20001400
 8007198:	e000ed20 	.word	0xe000ed20
 800719c:	2000001c 	.word	0x2000001c
 80071a0:	e000ef34 	.word	0xe000ef34

080071a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	607b      	str	r3, [r7, #4]
}
 80071bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <vPortEnterCritical+0x58>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3301      	adds	r3, #1
 80071c4:	4a0d      	ldr	r2, [pc, #52]	; (80071fc <vPortEnterCritical+0x58>)
 80071c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071c8:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <vPortEnterCritical+0x58>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d10f      	bne.n	80071f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071d0:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <vPortEnterCritical+0x5c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	603b      	str	r3, [r7, #0]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <vPortEnterCritical+0x4a>
	}
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	2000001c 	.word	0x2000001c
 8007200:	e000ed04 	.word	0xe000ed04

08007204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800720a:	4b12      	ldr	r3, [pc, #72]	; (8007254 <vPortExitCritical+0x50>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <vPortExitCritical+0x24>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	607b      	str	r3, [r7, #4]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <vPortExitCritical+0x50>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3b01      	subs	r3, #1
 800722e:	4a09      	ldr	r2, [pc, #36]	; (8007254 <vPortExitCritical+0x50>)
 8007230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007232:	4b08      	ldr	r3, [pc, #32]	; (8007254 <vPortExitCritical+0x50>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <vPortExitCritical+0x42>
 800723a:	2300      	movs	r3, #0
 800723c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	f383 8811 	msr	BASEPRI, r3
}
 8007244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	2000001c 	.word	0x2000001c
	...

08007260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007260:	f3ef 8009 	mrs	r0, PSP
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <pxCurrentTCBConst>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	f01e 0f10 	tst.w	lr, #16
 8007270:	bf08      	it	eq
 8007272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727a:	6010      	str	r0, [r2, #0]
 800727c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007284:	f380 8811 	msr	BASEPRI, r0
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f7fe ffb4 	bl	80061fc <vTaskSwitchContext>
 8007294:	f04f 0000 	mov.w	r0, #0
 8007298:	f380 8811 	msr	BASEPRI, r0
 800729c:	bc09      	pop	{r0, r3}
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	6808      	ldr	r0, [r1, #0]
 80072a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a6:	f01e 0f10 	tst.w	lr, #16
 80072aa:	bf08      	it	eq
 80072ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072b0:	f380 8809 	msr	PSP, r0
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	f3af 8000 	nop.w

080072c0 <pxCurrentTCBConst>:
 80072c0:	20000dd0 	.word	0x20000dd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop

080072c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	607b      	str	r3, [r7, #4]
}
 80072e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072e2:	f7fe fed1 	bl	8006088 <xTaskIncrementTick>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072ec:	4b06      	ldr	r3, [pc, #24]	; (8007308 <xPortSysTickHandler+0x40>)
 80072ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	2300      	movs	r3, #0
 80072f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f383 8811 	msr	BASEPRI, r3
}
 80072fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <vPortSetupTimerInterrupt+0x34>)
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007316:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <vPortSetupTimerInterrupt+0x38>)
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <vPortSetupTimerInterrupt+0x3c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0a      	ldr	r2, [pc, #40]	; (800734c <vPortSetupTimerInterrupt+0x40>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	099b      	lsrs	r3, r3, #6
 8007328:	4a09      	ldr	r2, [pc, #36]	; (8007350 <vPortSetupTimerInterrupt+0x44>)
 800732a:	3b01      	subs	r3, #1
 800732c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800732e:	4b04      	ldr	r3, [pc, #16]	; (8007340 <vPortSetupTimerInterrupt+0x34>)
 8007330:	2207      	movs	r2, #7
 8007332:	601a      	str	r2, [r3, #0]
}
 8007334:	bf00      	nop
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	e000e010 	.word	0xe000e010
 8007344:	e000e018 	.word	0xe000e018
 8007348:	20000008 	.word	0x20000008
 800734c:	10624dd3 	.word	0x10624dd3
 8007350:	e000e014 	.word	0xe000e014

08007354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007364 <vPortEnableVFP+0x10>
 8007358:	6801      	ldr	r1, [r0, #0]
 800735a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800735e:	6001      	str	r1, [r0, #0]
 8007360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007362:	bf00      	nop
 8007364:	e000ed88 	.word	0xe000ed88

08007368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800736e:	f3ef 8305 	mrs	r3, IPSR
 8007372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b0f      	cmp	r3, #15
 8007378:	d914      	bls.n	80073a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <vPortValidateInterruptPriority+0x70>)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007384:	4b15      	ldr	r3, [pc, #84]	; (80073dc <vPortValidateInterruptPriority+0x74>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	7afa      	ldrb	r2, [r7, #11]
 800738a:	429a      	cmp	r2, r3
 800738c:	d20a      	bcs.n	80073a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	607b      	str	r3, [r7, #4]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073a4:	4b0e      	ldr	r3, [pc, #56]	; (80073e0 <vPortValidateInterruptPriority+0x78>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073ac:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <vPortValidateInterruptPriority+0x7c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d90a      	bls.n	80073ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	603b      	str	r3, [r7, #0]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <vPortValidateInterruptPriority+0x60>
	}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	e000e3f0 	.word	0xe000e3f0
 80073dc:	200013fc 	.word	0x200013fc
 80073e0:	e000ed0c 	.word	0xe000ed0c
 80073e4:	20001400 	.word	0x20001400

080073e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	; 0x28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073f4:	f7fe fd8c 	bl	8005f10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073f8:	4b5b      	ldr	r3, [pc, #364]	; (8007568 <pvPortMalloc+0x180>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007400:	f000 f920 	bl	8007644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007404:	4b59      	ldr	r3, [pc, #356]	; (800756c <pvPortMalloc+0x184>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4013      	ands	r3, r2
 800740c:	2b00      	cmp	r3, #0
 800740e:	f040 8093 	bne.w	8007538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01d      	beq.n	8007454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007418:	2208      	movs	r2, #8
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	2b00      	cmp	r3, #0
 8007428:	d014      	beq.n	8007454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f023 0307 	bic.w	r3, r3, #7
 8007430:	3308      	adds	r3, #8
 8007432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <pvPortMalloc+0x6c>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	617b      	str	r3, [r7, #20]
}
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d06e      	beq.n	8007538 <pvPortMalloc+0x150>
 800745a:	4b45      	ldr	r3, [pc, #276]	; (8007570 <pvPortMalloc+0x188>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d869      	bhi.n	8007538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007464:	4b43      	ldr	r3, [pc, #268]	; (8007574 <pvPortMalloc+0x18c>)
 8007466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007468:	4b42      	ldr	r3, [pc, #264]	; (8007574 <pvPortMalloc+0x18c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800746e:	e004      	b.n	800747a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	429a      	cmp	r2, r3
 8007482:	d903      	bls.n	800748c <pvPortMalloc+0xa4>
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f1      	bne.n	8007470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800748c:	4b36      	ldr	r3, [pc, #216]	; (8007568 <pvPortMalloc+0x180>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007492:	429a      	cmp	r2, r3
 8007494:	d050      	beq.n	8007538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2208      	movs	r2, #8
 800749c:	4413      	add	r3, r2
 800749e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	2308      	movs	r3, #8
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d91f      	bls.n	80074f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4413      	add	r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <pvPortMalloc+0xf8>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	613b      	str	r3, [r7, #16]
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	1ad2      	subs	r2, r2, r3
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074f2:	69b8      	ldr	r0, [r7, #24]
 80074f4:	f000 f908 	bl	8007708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074f8:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <pvPortMalloc+0x188>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	4a1b      	ldr	r2, [pc, #108]	; (8007570 <pvPortMalloc+0x188>)
 8007504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007506:	4b1a      	ldr	r3, [pc, #104]	; (8007570 <pvPortMalloc+0x188>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <pvPortMalloc+0x190>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d203      	bcs.n	800751a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007512:	4b17      	ldr	r3, [pc, #92]	; (8007570 <pvPortMalloc+0x188>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a18      	ldr	r2, [pc, #96]	; (8007578 <pvPortMalloc+0x190>)
 8007518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <pvPortMalloc+0x184>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	431a      	orrs	r2, r3
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800752e:	4b13      	ldr	r3, [pc, #76]	; (800757c <pvPortMalloc+0x194>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3301      	adds	r3, #1
 8007534:	4a11      	ldr	r2, [pc, #68]	; (800757c <pvPortMalloc+0x194>)
 8007536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007538:	f7fe fcf8 	bl	8005f2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <pvPortMalloc+0x174>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60fb      	str	r3, [r7, #12]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <pvPortMalloc+0x172>
	return pvReturn;
 800755c:	69fb      	ldr	r3, [r7, #28]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3728      	adds	r7, #40	; 0x28
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	2000500c 	.word	0x2000500c
 800756c:	20005020 	.word	0x20005020
 8007570:	20005010 	.word	0x20005010
 8007574:	20005004 	.word	0x20005004
 8007578:	20005014 	.word	0x20005014
 800757c:	20005018 	.word	0x20005018

08007580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d04d      	beq.n	800762e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007592:	2308      	movs	r3, #8
 8007594:	425b      	negs	r3, r3
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4413      	add	r3, r2
 800759a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	4b24      	ldr	r3, [pc, #144]	; (8007638 <vPortFree+0xb8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4013      	ands	r3, r2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <vPortFree+0x44>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	60fb      	str	r3, [r7, #12]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <vPortFree+0x62>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	60bb      	str	r3, [r7, #8]
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	4b14      	ldr	r3, [pc, #80]	; (8007638 <vPortFree+0xb8>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4013      	ands	r3, r2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01e      	beq.n	800762e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d11a      	bne.n	800762e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <vPortFree+0xb8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	43db      	mvns	r3, r3
 8007602:	401a      	ands	r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007608:	f7fe fc82 	bl	8005f10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	4b0a      	ldr	r3, [pc, #40]	; (800763c <vPortFree+0xbc>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4413      	add	r3, r2
 8007616:	4a09      	ldr	r2, [pc, #36]	; (800763c <vPortFree+0xbc>)
 8007618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800761a:	6938      	ldr	r0, [r7, #16]
 800761c:	f000 f874 	bl	8007708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <vPortFree+0xc0>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3301      	adds	r3, #1
 8007626:	4a06      	ldr	r2, [pc, #24]	; (8007640 <vPortFree+0xc0>)
 8007628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800762a:	f7fe fc7f 	bl	8005f2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800762e:	bf00      	nop
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20005020 	.word	0x20005020
 800763c:	20005010 	.word	0x20005010
 8007640:	2000501c 	.word	0x2000501c

08007644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800764a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800764e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007650:	4b27      	ldr	r3, [pc, #156]	; (80076f0 <prvHeapInit+0xac>)
 8007652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00c      	beq.n	8007678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3307      	adds	r3, #7
 8007662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0307 	bic.w	r3, r3, #7
 800766a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <prvHeapInit+0xac>)
 8007674:	4413      	add	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800767c:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <prvHeapInit+0xb0>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007682:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <prvHeapInit+0xb0>)
 8007684:	2200      	movs	r2, #0
 8007686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	4413      	add	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007690:	2208      	movs	r2, #8
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1a9b      	subs	r3, r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 0307 	bic.w	r3, r3, #7
 800769e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <prvHeapInit+0xb4>)
 80076a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <prvHeapInit+0xb4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2200      	movs	r2, #0
 80076ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076ae:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <prvHeapInit+0xb4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076c4:	4b0c      	ldr	r3, [pc, #48]	; (80076f8 <prvHeapInit+0xb4>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <prvHeapInit+0xb8>)
 80076d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	4a09      	ldr	r2, [pc, #36]	; (8007700 <prvHeapInit+0xbc>)
 80076da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076dc:	4b09      	ldr	r3, [pc, #36]	; (8007704 <prvHeapInit+0xc0>)
 80076de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	bf00      	nop
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	20001404 	.word	0x20001404
 80076f4:	20005004 	.word	0x20005004
 80076f8:	2000500c 	.word	0x2000500c
 80076fc:	20005014 	.word	0x20005014
 8007700:	20005010 	.word	0x20005010
 8007704:	20005020 	.word	0x20005020

08007708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007710:	4b28      	ldr	r3, [pc, #160]	; (80077b4 <prvInsertBlockIntoFreeList+0xac>)
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e002      	b.n	800771c <prvInsertBlockIntoFreeList+0x14>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	429a      	cmp	r2, r3
 8007724:	d8f7      	bhi.n	8007716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4413      	add	r3, r2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	429a      	cmp	r2, r3
 8007736:	d108      	bne.n	800774a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	441a      	add	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	441a      	add	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d118      	bne.n	8007790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d00d      	beq.n	8007786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	441a      	add	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	e008      	b.n	8007798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007786:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	e003      	b.n	8007798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	429a      	cmp	r2, r3
 800779e:	d002      	beq.n	80077a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	20005004 	.word	0x20005004
 80077b8:	2000500c 	.word	0x2000500c

080077bc <siprintf>:
 80077bc:	b40e      	push	{r1, r2, r3}
 80077be:	b500      	push	{lr}
 80077c0:	b09c      	sub	sp, #112	; 0x70
 80077c2:	ab1d      	add	r3, sp, #116	; 0x74
 80077c4:	9002      	str	r0, [sp, #8]
 80077c6:	9006      	str	r0, [sp, #24]
 80077c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077cc:	4809      	ldr	r0, [pc, #36]	; (80077f4 <siprintf+0x38>)
 80077ce:	9107      	str	r1, [sp, #28]
 80077d0:	9104      	str	r1, [sp, #16]
 80077d2:	4909      	ldr	r1, [pc, #36]	; (80077f8 <siprintf+0x3c>)
 80077d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d8:	9105      	str	r1, [sp, #20]
 80077da:	6800      	ldr	r0, [r0, #0]
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	a902      	add	r1, sp, #8
 80077e0:	f000 fa10 	bl	8007c04 <_svfiprintf_r>
 80077e4:	9b02      	ldr	r3, [sp, #8]
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
 80077ea:	b01c      	add	sp, #112	; 0x70
 80077ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80077f0:	b003      	add	sp, #12
 80077f2:	4770      	bx	lr
 80077f4:	2000006c 	.word	0x2000006c
 80077f8:	ffff0208 	.word	0xffff0208

080077fc <memmove>:
 80077fc:	4288      	cmp	r0, r1
 80077fe:	b510      	push	{r4, lr}
 8007800:	eb01 0402 	add.w	r4, r1, r2
 8007804:	d902      	bls.n	800780c <memmove+0x10>
 8007806:	4284      	cmp	r4, r0
 8007808:	4623      	mov	r3, r4
 800780a:	d807      	bhi.n	800781c <memmove+0x20>
 800780c:	1e43      	subs	r3, r0, #1
 800780e:	42a1      	cmp	r1, r4
 8007810:	d008      	beq.n	8007824 <memmove+0x28>
 8007812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800781a:	e7f8      	b.n	800780e <memmove+0x12>
 800781c:	4402      	add	r2, r0
 800781e:	4601      	mov	r1, r0
 8007820:	428a      	cmp	r2, r1
 8007822:	d100      	bne.n	8007826 <memmove+0x2a>
 8007824:	bd10      	pop	{r4, pc}
 8007826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800782a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800782e:	e7f7      	b.n	8007820 <memmove+0x24>

08007830 <memset>:
 8007830:	4402      	add	r2, r0
 8007832:	4603      	mov	r3, r0
 8007834:	4293      	cmp	r3, r2
 8007836:	d100      	bne.n	800783a <memset+0xa>
 8007838:	4770      	bx	lr
 800783a:	f803 1b01 	strb.w	r1, [r3], #1
 800783e:	e7f9      	b.n	8007834 <memset+0x4>

08007840 <_reclaim_reent>:
 8007840:	4b29      	ldr	r3, [pc, #164]	; (80078e8 <_reclaim_reent+0xa8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4283      	cmp	r3, r0
 8007846:	b570      	push	{r4, r5, r6, lr}
 8007848:	4604      	mov	r4, r0
 800784a:	d04b      	beq.n	80078e4 <_reclaim_reent+0xa4>
 800784c:	69c3      	ldr	r3, [r0, #28]
 800784e:	b143      	cbz	r3, 8007862 <_reclaim_reent+0x22>
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d144      	bne.n	80078e0 <_reclaim_reent+0xa0>
 8007856:	69e3      	ldr	r3, [r4, #28]
 8007858:	6819      	ldr	r1, [r3, #0]
 800785a:	b111      	cbz	r1, 8007862 <_reclaim_reent+0x22>
 800785c:	4620      	mov	r0, r4
 800785e:	f000 f87f 	bl	8007960 <_free_r>
 8007862:	6961      	ldr	r1, [r4, #20]
 8007864:	b111      	cbz	r1, 800786c <_reclaim_reent+0x2c>
 8007866:	4620      	mov	r0, r4
 8007868:	f000 f87a 	bl	8007960 <_free_r>
 800786c:	69e1      	ldr	r1, [r4, #28]
 800786e:	b111      	cbz	r1, 8007876 <_reclaim_reent+0x36>
 8007870:	4620      	mov	r0, r4
 8007872:	f000 f875 	bl	8007960 <_free_r>
 8007876:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007878:	b111      	cbz	r1, 8007880 <_reclaim_reent+0x40>
 800787a:	4620      	mov	r0, r4
 800787c:	f000 f870 	bl	8007960 <_free_r>
 8007880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007882:	b111      	cbz	r1, 800788a <_reclaim_reent+0x4a>
 8007884:	4620      	mov	r0, r4
 8007886:	f000 f86b 	bl	8007960 <_free_r>
 800788a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800788c:	b111      	cbz	r1, 8007894 <_reclaim_reent+0x54>
 800788e:	4620      	mov	r0, r4
 8007890:	f000 f866 	bl	8007960 <_free_r>
 8007894:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007896:	b111      	cbz	r1, 800789e <_reclaim_reent+0x5e>
 8007898:	4620      	mov	r0, r4
 800789a:	f000 f861 	bl	8007960 <_free_r>
 800789e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80078a0:	b111      	cbz	r1, 80078a8 <_reclaim_reent+0x68>
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 f85c 	bl	8007960 <_free_r>
 80078a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80078aa:	b111      	cbz	r1, 80078b2 <_reclaim_reent+0x72>
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 f857 	bl	8007960 <_free_r>
 80078b2:	6a23      	ldr	r3, [r4, #32]
 80078b4:	b1b3      	cbz	r3, 80078e4 <_reclaim_reent+0xa4>
 80078b6:	4620      	mov	r0, r4
 80078b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078bc:	4718      	bx	r3
 80078be:	5949      	ldr	r1, [r1, r5]
 80078c0:	b941      	cbnz	r1, 80078d4 <_reclaim_reent+0x94>
 80078c2:	3504      	adds	r5, #4
 80078c4:	69e3      	ldr	r3, [r4, #28]
 80078c6:	2d80      	cmp	r5, #128	; 0x80
 80078c8:	68d9      	ldr	r1, [r3, #12]
 80078ca:	d1f8      	bne.n	80078be <_reclaim_reent+0x7e>
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 f847 	bl	8007960 <_free_r>
 80078d2:	e7c0      	b.n	8007856 <_reclaim_reent+0x16>
 80078d4:	680e      	ldr	r6, [r1, #0]
 80078d6:	4620      	mov	r0, r4
 80078d8:	f000 f842 	bl	8007960 <_free_r>
 80078dc:	4631      	mov	r1, r6
 80078de:	e7ef      	b.n	80078c0 <_reclaim_reent+0x80>
 80078e0:	2500      	movs	r5, #0
 80078e2:	e7ef      	b.n	80078c4 <_reclaim_reent+0x84>
 80078e4:	bd70      	pop	{r4, r5, r6, pc}
 80078e6:	bf00      	nop
 80078e8:	2000006c 	.word	0x2000006c

080078ec <__errno>:
 80078ec:	4b01      	ldr	r3, [pc, #4]	; (80078f4 <__errno+0x8>)
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	2000006c 	.word	0x2000006c

080078f8 <__libc_init_array>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	4d0d      	ldr	r5, [pc, #52]	; (8007930 <__libc_init_array+0x38>)
 80078fc:	4c0d      	ldr	r4, [pc, #52]	; (8007934 <__libc_init_array+0x3c>)
 80078fe:	1b64      	subs	r4, r4, r5
 8007900:	10a4      	asrs	r4, r4, #2
 8007902:	2600      	movs	r6, #0
 8007904:	42a6      	cmp	r6, r4
 8007906:	d109      	bne.n	800791c <__libc_init_array+0x24>
 8007908:	4d0b      	ldr	r5, [pc, #44]	; (8007938 <__libc_init_array+0x40>)
 800790a:	4c0c      	ldr	r4, [pc, #48]	; (800793c <__libc_init_array+0x44>)
 800790c:	f000 fc50 	bl	80081b0 <_init>
 8007910:	1b64      	subs	r4, r4, r5
 8007912:	10a4      	asrs	r4, r4, #2
 8007914:	2600      	movs	r6, #0
 8007916:	42a6      	cmp	r6, r4
 8007918:	d105      	bne.n	8007926 <__libc_init_array+0x2e>
 800791a:	bd70      	pop	{r4, r5, r6, pc}
 800791c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007920:	4798      	blx	r3
 8007922:	3601      	adds	r6, #1
 8007924:	e7ee      	b.n	8007904 <__libc_init_array+0xc>
 8007926:	f855 3b04 	ldr.w	r3, [r5], #4
 800792a:	4798      	blx	r3
 800792c:	3601      	adds	r6, #1
 800792e:	e7f2      	b.n	8007916 <__libc_init_array+0x1e>
 8007930:	0800906c 	.word	0x0800906c
 8007934:	0800906c 	.word	0x0800906c
 8007938:	0800906c 	.word	0x0800906c
 800793c:	08009070 	.word	0x08009070

08007940 <__retarget_lock_acquire_recursive>:
 8007940:	4770      	bx	lr

08007942 <__retarget_lock_release_recursive>:
 8007942:	4770      	bx	lr

08007944 <memcpy>:
 8007944:	440a      	add	r2, r1
 8007946:	4291      	cmp	r1, r2
 8007948:	f100 33ff 	add.w	r3, r0, #4294967295
 800794c:	d100      	bne.n	8007950 <memcpy+0xc>
 800794e:	4770      	bx	lr
 8007950:	b510      	push	{r4, lr}
 8007952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800795a:	4291      	cmp	r1, r2
 800795c:	d1f9      	bne.n	8007952 <memcpy+0xe>
 800795e:	bd10      	pop	{r4, pc}

08007960 <_free_r>:
 8007960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007962:	2900      	cmp	r1, #0
 8007964:	d044      	beq.n	80079f0 <_free_r+0x90>
 8007966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800796a:	9001      	str	r0, [sp, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	f1a1 0404 	sub.w	r4, r1, #4
 8007972:	bfb8      	it	lt
 8007974:	18e4      	addlt	r4, r4, r3
 8007976:	f000 f8df 	bl	8007b38 <__malloc_lock>
 800797a:	4a1e      	ldr	r2, [pc, #120]	; (80079f4 <_free_r+0x94>)
 800797c:	9801      	ldr	r0, [sp, #4]
 800797e:	6813      	ldr	r3, [r2, #0]
 8007980:	b933      	cbnz	r3, 8007990 <_free_r+0x30>
 8007982:	6063      	str	r3, [r4, #4]
 8007984:	6014      	str	r4, [r2, #0]
 8007986:	b003      	add	sp, #12
 8007988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800798c:	f000 b8da 	b.w	8007b44 <__malloc_unlock>
 8007990:	42a3      	cmp	r3, r4
 8007992:	d908      	bls.n	80079a6 <_free_r+0x46>
 8007994:	6825      	ldr	r5, [r4, #0]
 8007996:	1961      	adds	r1, r4, r5
 8007998:	428b      	cmp	r3, r1
 800799a:	bf01      	itttt	eq
 800799c:	6819      	ldreq	r1, [r3, #0]
 800799e:	685b      	ldreq	r3, [r3, #4]
 80079a0:	1949      	addeq	r1, r1, r5
 80079a2:	6021      	streq	r1, [r4, #0]
 80079a4:	e7ed      	b.n	8007982 <_free_r+0x22>
 80079a6:	461a      	mov	r2, r3
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	b10b      	cbz	r3, 80079b0 <_free_r+0x50>
 80079ac:	42a3      	cmp	r3, r4
 80079ae:	d9fa      	bls.n	80079a6 <_free_r+0x46>
 80079b0:	6811      	ldr	r1, [r2, #0]
 80079b2:	1855      	adds	r5, r2, r1
 80079b4:	42a5      	cmp	r5, r4
 80079b6:	d10b      	bne.n	80079d0 <_free_r+0x70>
 80079b8:	6824      	ldr	r4, [r4, #0]
 80079ba:	4421      	add	r1, r4
 80079bc:	1854      	adds	r4, r2, r1
 80079be:	42a3      	cmp	r3, r4
 80079c0:	6011      	str	r1, [r2, #0]
 80079c2:	d1e0      	bne.n	8007986 <_free_r+0x26>
 80079c4:	681c      	ldr	r4, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	6053      	str	r3, [r2, #4]
 80079ca:	440c      	add	r4, r1
 80079cc:	6014      	str	r4, [r2, #0]
 80079ce:	e7da      	b.n	8007986 <_free_r+0x26>
 80079d0:	d902      	bls.n	80079d8 <_free_r+0x78>
 80079d2:	230c      	movs	r3, #12
 80079d4:	6003      	str	r3, [r0, #0]
 80079d6:	e7d6      	b.n	8007986 <_free_r+0x26>
 80079d8:	6825      	ldr	r5, [r4, #0]
 80079da:	1961      	adds	r1, r4, r5
 80079dc:	428b      	cmp	r3, r1
 80079de:	bf04      	itt	eq
 80079e0:	6819      	ldreq	r1, [r3, #0]
 80079e2:	685b      	ldreq	r3, [r3, #4]
 80079e4:	6063      	str	r3, [r4, #4]
 80079e6:	bf04      	itt	eq
 80079e8:	1949      	addeq	r1, r1, r5
 80079ea:	6021      	streq	r1, [r4, #0]
 80079ec:	6054      	str	r4, [r2, #4]
 80079ee:	e7ca      	b.n	8007986 <_free_r+0x26>
 80079f0:	b003      	add	sp, #12
 80079f2:	bd30      	pop	{r4, r5, pc}
 80079f4:	20005164 	.word	0x20005164

080079f8 <sbrk_aligned>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	4e0e      	ldr	r6, [pc, #56]	; (8007a34 <sbrk_aligned+0x3c>)
 80079fc:	460c      	mov	r4, r1
 80079fe:	6831      	ldr	r1, [r6, #0]
 8007a00:	4605      	mov	r5, r0
 8007a02:	b911      	cbnz	r1, 8007a0a <sbrk_aligned+0x12>
 8007a04:	f000 fb8c 	bl	8008120 <_sbrk_r>
 8007a08:	6030      	str	r0, [r6, #0]
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f000 fb87 	bl	8008120 <_sbrk_r>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d00a      	beq.n	8007a2c <sbrk_aligned+0x34>
 8007a16:	1cc4      	adds	r4, r0, #3
 8007a18:	f024 0403 	bic.w	r4, r4, #3
 8007a1c:	42a0      	cmp	r0, r4
 8007a1e:	d007      	beq.n	8007a30 <sbrk_aligned+0x38>
 8007a20:	1a21      	subs	r1, r4, r0
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 fb7c 	bl	8008120 <_sbrk_r>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d101      	bne.n	8007a30 <sbrk_aligned+0x38>
 8007a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a30:	4620      	mov	r0, r4
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
 8007a34:	20005168 	.word	0x20005168

08007a38 <_malloc_r>:
 8007a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a3c:	1ccd      	adds	r5, r1, #3
 8007a3e:	f025 0503 	bic.w	r5, r5, #3
 8007a42:	3508      	adds	r5, #8
 8007a44:	2d0c      	cmp	r5, #12
 8007a46:	bf38      	it	cc
 8007a48:	250c      	movcc	r5, #12
 8007a4a:	2d00      	cmp	r5, #0
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	db01      	blt.n	8007a54 <_malloc_r+0x1c>
 8007a50:	42a9      	cmp	r1, r5
 8007a52:	d905      	bls.n	8007a60 <_malloc_r+0x28>
 8007a54:	230c      	movs	r3, #12
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	2600      	movs	r6, #0
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b34 <_malloc_r+0xfc>
 8007a64:	f000 f868 	bl	8007b38 <__malloc_lock>
 8007a68:	f8d8 3000 	ldr.w	r3, [r8]
 8007a6c:	461c      	mov	r4, r3
 8007a6e:	bb5c      	cbnz	r4, 8007ac8 <_malloc_r+0x90>
 8007a70:	4629      	mov	r1, r5
 8007a72:	4638      	mov	r0, r7
 8007a74:	f7ff ffc0 	bl	80079f8 <sbrk_aligned>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	d155      	bne.n	8007b2a <_malloc_r+0xf2>
 8007a7e:	f8d8 4000 	ldr.w	r4, [r8]
 8007a82:	4626      	mov	r6, r4
 8007a84:	2e00      	cmp	r6, #0
 8007a86:	d145      	bne.n	8007b14 <_malloc_r+0xdc>
 8007a88:	2c00      	cmp	r4, #0
 8007a8a:	d048      	beq.n	8007b1e <_malloc_r+0xe6>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4638      	mov	r0, r7
 8007a92:	eb04 0903 	add.w	r9, r4, r3
 8007a96:	f000 fb43 	bl	8008120 <_sbrk_r>
 8007a9a:	4581      	cmp	r9, r0
 8007a9c:	d13f      	bne.n	8007b1e <_malloc_r+0xe6>
 8007a9e:	6821      	ldr	r1, [r4, #0]
 8007aa0:	1a6d      	subs	r5, r5, r1
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f7ff ffa7 	bl	80079f8 <sbrk_aligned>
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d037      	beq.n	8007b1e <_malloc_r+0xe6>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	442b      	add	r3, r5
 8007ab2:	6023      	str	r3, [r4, #0]
 8007ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d038      	beq.n	8007b2e <_malloc_r+0xf6>
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	42a2      	cmp	r2, r4
 8007ac0:	d12b      	bne.n	8007b1a <_malloc_r+0xe2>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	605a      	str	r2, [r3, #4]
 8007ac6:	e00f      	b.n	8007ae8 <_malloc_r+0xb0>
 8007ac8:	6822      	ldr	r2, [r4, #0]
 8007aca:	1b52      	subs	r2, r2, r5
 8007acc:	d41f      	bmi.n	8007b0e <_malloc_r+0xd6>
 8007ace:	2a0b      	cmp	r2, #11
 8007ad0:	d917      	bls.n	8007b02 <_malloc_r+0xca>
 8007ad2:	1961      	adds	r1, r4, r5
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	6025      	str	r5, [r4, #0]
 8007ad8:	bf18      	it	ne
 8007ada:	6059      	strne	r1, [r3, #4]
 8007adc:	6863      	ldr	r3, [r4, #4]
 8007ade:	bf08      	it	eq
 8007ae0:	f8c8 1000 	streq.w	r1, [r8]
 8007ae4:	5162      	str	r2, [r4, r5]
 8007ae6:	604b      	str	r3, [r1, #4]
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f104 060b 	add.w	r6, r4, #11
 8007aee:	f000 f829 	bl	8007b44 <__malloc_unlock>
 8007af2:	f026 0607 	bic.w	r6, r6, #7
 8007af6:	1d23      	adds	r3, r4, #4
 8007af8:	1af2      	subs	r2, r6, r3
 8007afa:	d0ae      	beq.n	8007a5a <_malloc_r+0x22>
 8007afc:	1b9b      	subs	r3, r3, r6
 8007afe:	50a3      	str	r3, [r4, r2]
 8007b00:	e7ab      	b.n	8007a5a <_malloc_r+0x22>
 8007b02:	42a3      	cmp	r3, r4
 8007b04:	6862      	ldr	r2, [r4, #4]
 8007b06:	d1dd      	bne.n	8007ac4 <_malloc_r+0x8c>
 8007b08:	f8c8 2000 	str.w	r2, [r8]
 8007b0c:	e7ec      	b.n	8007ae8 <_malloc_r+0xb0>
 8007b0e:	4623      	mov	r3, r4
 8007b10:	6864      	ldr	r4, [r4, #4]
 8007b12:	e7ac      	b.n	8007a6e <_malloc_r+0x36>
 8007b14:	4634      	mov	r4, r6
 8007b16:	6876      	ldr	r6, [r6, #4]
 8007b18:	e7b4      	b.n	8007a84 <_malloc_r+0x4c>
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	e7cc      	b.n	8007ab8 <_malloc_r+0x80>
 8007b1e:	230c      	movs	r3, #12
 8007b20:	603b      	str	r3, [r7, #0]
 8007b22:	4638      	mov	r0, r7
 8007b24:	f000 f80e 	bl	8007b44 <__malloc_unlock>
 8007b28:	e797      	b.n	8007a5a <_malloc_r+0x22>
 8007b2a:	6025      	str	r5, [r4, #0]
 8007b2c:	e7dc      	b.n	8007ae8 <_malloc_r+0xb0>
 8007b2e:	605b      	str	r3, [r3, #4]
 8007b30:	deff      	udf	#255	; 0xff
 8007b32:	bf00      	nop
 8007b34:	20005164 	.word	0x20005164

08007b38 <__malloc_lock>:
 8007b38:	4801      	ldr	r0, [pc, #4]	; (8007b40 <__malloc_lock+0x8>)
 8007b3a:	f7ff bf01 	b.w	8007940 <__retarget_lock_acquire_recursive>
 8007b3e:	bf00      	nop
 8007b40:	20005160 	.word	0x20005160

08007b44 <__malloc_unlock>:
 8007b44:	4801      	ldr	r0, [pc, #4]	; (8007b4c <__malloc_unlock+0x8>)
 8007b46:	f7ff befc 	b.w	8007942 <__retarget_lock_release_recursive>
 8007b4a:	bf00      	nop
 8007b4c:	20005160 	.word	0x20005160

08007b50 <__ssputs_r>:
 8007b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b54:	688e      	ldr	r6, [r1, #8]
 8007b56:	461f      	mov	r7, r3
 8007b58:	42be      	cmp	r6, r7
 8007b5a:	680b      	ldr	r3, [r1, #0]
 8007b5c:	4682      	mov	sl, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	4690      	mov	r8, r2
 8007b62:	d82c      	bhi.n	8007bbe <__ssputs_r+0x6e>
 8007b64:	898a      	ldrh	r2, [r1, #12]
 8007b66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b6a:	d026      	beq.n	8007bba <__ssputs_r+0x6a>
 8007b6c:	6965      	ldr	r5, [r4, #20]
 8007b6e:	6909      	ldr	r1, [r1, #16]
 8007b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b74:	eba3 0901 	sub.w	r9, r3, r1
 8007b78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b7c:	1c7b      	adds	r3, r7, #1
 8007b7e:	444b      	add	r3, r9
 8007b80:	106d      	asrs	r5, r5, #1
 8007b82:	429d      	cmp	r5, r3
 8007b84:	bf38      	it	cc
 8007b86:	461d      	movcc	r5, r3
 8007b88:	0553      	lsls	r3, r2, #21
 8007b8a:	d527      	bpl.n	8007bdc <__ssputs_r+0x8c>
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	f7ff ff53 	bl	8007a38 <_malloc_r>
 8007b92:	4606      	mov	r6, r0
 8007b94:	b360      	cbz	r0, 8007bf0 <__ssputs_r+0xa0>
 8007b96:	6921      	ldr	r1, [r4, #16]
 8007b98:	464a      	mov	r2, r9
 8007b9a:	f7ff fed3 	bl	8007944 <memcpy>
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	6126      	str	r6, [r4, #16]
 8007bac:	6165      	str	r5, [r4, #20]
 8007bae:	444e      	add	r6, r9
 8007bb0:	eba5 0509 	sub.w	r5, r5, r9
 8007bb4:	6026      	str	r6, [r4, #0]
 8007bb6:	60a5      	str	r5, [r4, #8]
 8007bb8:	463e      	mov	r6, r7
 8007bba:	42be      	cmp	r6, r7
 8007bbc:	d900      	bls.n	8007bc0 <__ssputs_r+0x70>
 8007bbe:	463e      	mov	r6, r7
 8007bc0:	6820      	ldr	r0, [r4, #0]
 8007bc2:	4632      	mov	r2, r6
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	f7ff fe19 	bl	80077fc <memmove>
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	1b9b      	subs	r3, r3, r6
 8007bce:	60a3      	str	r3, [r4, #8]
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	4433      	add	r3, r6
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bdc:	462a      	mov	r2, r5
 8007bde:	f000 faaf 	bl	8008140 <_realloc_r>
 8007be2:	4606      	mov	r6, r0
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d1e0      	bne.n	8007baa <__ssputs_r+0x5a>
 8007be8:	6921      	ldr	r1, [r4, #16]
 8007bea:	4650      	mov	r0, sl
 8007bec:	f7ff feb8 	bl	8007960 <_free_r>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	f8ca 3000 	str.w	r3, [sl]
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bfc:	81a3      	strh	r3, [r4, #12]
 8007bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007c02:	e7e9      	b.n	8007bd8 <__ssputs_r+0x88>

08007c04 <_svfiprintf_r>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	4698      	mov	r8, r3
 8007c0a:	898b      	ldrh	r3, [r1, #12]
 8007c0c:	061b      	lsls	r3, r3, #24
 8007c0e:	b09d      	sub	sp, #116	; 0x74
 8007c10:	4607      	mov	r7, r0
 8007c12:	460d      	mov	r5, r1
 8007c14:	4614      	mov	r4, r2
 8007c16:	d50e      	bpl.n	8007c36 <_svfiprintf_r+0x32>
 8007c18:	690b      	ldr	r3, [r1, #16]
 8007c1a:	b963      	cbnz	r3, 8007c36 <_svfiprintf_r+0x32>
 8007c1c:	2140      	movs	r1, #64	; 0x40
 8007c1e:	f7ff ff0b 	bl	8007a38 <_malloc_r>
 8007c22:	6028      	str	r0, [r5, #0]
 8007c24:	6128      	str	r0, [r5, #16]
 8007c26:	b920      	cbnz	r0, 8007c32 <_svfiprintf_r+0x2e>
 8007c28:	230c      	movs	r3, #12
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	e0d0      	b.n	8007dd4 <_svfiprintf_r+0x1d0>
 8007c32:	2340      	movs	r3, #64	; 0x40
 8007c34:	616b      	str	r3, [r5, #20]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3a:	2320      	movs	r3, #32
 8007c3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c44:	2330      	movs	r3, #48	; 0x30
 8007c46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007dec <_svfiprintf_r+0x1e8>
 8007c4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c4e:	f04f 0901 	mov.w	r9, #1
 8007c52:	4623      	mov	r3, r4
 8007c54:	469a      	mov	sl, r3
 8007c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c5a:	b10a      	cbz	r2, 8007c60 <_svfiprintf_r+0x5c>
 8007c5c:	2a25      	cmp	r2, #37	; 0x25
 8007c5e:	d1f9      	bne.n	8007c54 <_svfiprintf_r+0x50>
 8007c60:	ebba 0b04 	subs.w	fp, sl, r4
 8007c64:	d00b      	beq.n	8007c7e <_svfiprintf_r+0x7a>
 8007c66:	465b      	mov	r3, fp
 8007c68:	4622      	mov	r2, r4
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f7ff ff6f 	bl	8007b50 <__ssputs_r>
 8007c72:	3001      	adds	r0, #1
 8007c74:	f000 80a9 	beq.w	8007dca <_svfiprintf_r+0x1c6>
 8007c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c7a:	445a      	add	r2, fp
 8007c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80a1 	beq.w	8007dca <_svfiprintf_r+0x1c6>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c92:	f10a 0a01 	add.w	sl, sl, #1
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	9307      	str	r3, [sp, #28]
 8007c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8007ca0:	4654      	mov	r4, sl
 8007ca2:	2205      	movs	r2, #5
 8007ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca8:	4850      	ldr	r0, [pc, #320]	; (8007dec <_svfiprintf_r+0x1e8>)
 8007caa:	f7f8 fa99 	bl	80001e0 <memchr>
 8007cae:	9a04      	ldr	r2, [sp, #16]
 8007cb0:	b9d8      	cbnz	r0, 8007cea <_svfiprintf_r+0xe6>
 8007cb2:	06d0      	lsls	r0, r2, #27
 8007cb4:	bf44      	itt	mi
 8007cb6:	2320      	movmi	r3, #32
 8007cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cbc:	0711      	lsls	r1, r2, #28
 8007cbe:	bf44      	itt	mi
 8007cc0:	232b      	movmi	r3, #43	; 0x2b
 8007cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cca:	2b2a      	cmp	r3, #42	; 0x2a
 8007ccc:	d015      	beq.n	8007cfa <_svfiprintf_r+0xf6>
 8007cce:	9a07      	ldr	r2, [sp, #28]
 8007cd0:	4654      	mov	r4, sl
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	f04f 0c0a 	mov.w	ip, #10
 8007cd8:	4621      	mov	r1, r4
 8007cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cde:	3b30      	subs	r3, #48	; 0x30
 8007ce0:	2b09      	cmp	r3, #9
 8007ce2:	d94d      	bls.n	8007d80 <_svfiprintf_r+0x17c>
 8007ce4:	b1b0      	cbz	r0, 8007d14 <_svfiprintf_r+0x110>
 8007ce6:	9207      	str	r2, [sp, #28]
 8007ce8:	e014      	b.n	8007d14 <_svfiprintf_r+0x110>
 8007cea:	eba0 0308 	sub.w	r3, r0, r8
 8007cee:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	9304      	str	r3, [sp, #16]
 8007cf6:	46a2      	mov	sl, r4
 8007cf8:	e7d2      	b.n	8007ca0 <_svfiprintf_r+0x9c>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	1d19      	adds	r1, r3, #4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	9103      	str	r1, [sp, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bfbb      	ittet	lt
 8007d06:	425b      	neglt	r3, r3
 8007d08:	f042 0202 	orrlt.w	r2, r2, #2
 8007d0c:	9307      	strge	r3, [sp, #28]
 8007d0e:	9307      	strlt	r3, [sp, #28]
 8007d10:	bfb8      	it	lt
 8007d12:	9204      	strlt	r2, [sp, #16]
 8007d14:	7823      	ldrb	r3, [r4, #0]
 8007d16:	2b2e      	cmp	r3, #46	; 0x2e
 8007d18:	d10c      	bne.n	8007d34 <_svfiprintf_r+0x130>
 8007d1a:	7863      	ldrb	r3, [r4, #1]
 8007d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d1e:	d134      	bne.n	8007d8a <_svfiprintf_r+0x186>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	1d1a      	adds	r2, r3, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	9203      	str	r2, [sp, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bfb8      	it	lt
 8007d2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d30:	3402      	adds	r4, #2
 8007d32:	9305      	str	r3, [sp, #20]
 8007d34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007dfc <_svfiprintf_r+0x1f8>
 8007d38:	7821      	ldrb	r1, [r4, #0]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	f7f8 fa4f 	bl	80001e0 <memchr>
 8007d42:	b138      	cbz	r0, 8007d54 <_svfiprintf_r+0x150>
 8007d44:	9b04      	ldr	r3, [sp, #16]
 8007d46:	eba0 000a 	sub.w	r0, r0, sl
 8007d4a:	2240      	movs	r2, #64	; 0x40
 8007d4c:	4082      	lsls	r2, r0
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	3401      	adds	r4, #1
 8007d52:	9304      	str	r3, [sp, #16]
 8007d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d58:	4825      	ldr	r0, [pc, #148]	; (8007df0 <_svfiprintf_r+0x1ec>)
 8007d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d5e:	2206      	movs	r2, #6
 8007d60:	f7f8 fa3e 	bl	80001e0 <memchr>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d038      	beq.n	8007dda <_svfiprintf_r+0x1d6>
 8007d68:	4b22      	ldr	r3, [pc, #136]	; (8007df4 <_svfiprintf_r+0x1f0>)
 8007d6a:	bb1b      	cbnz	r3, 8007db4 <_svfiprintf_r+0x1b0>
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	3307      	adds	r3, #7
 8007d70:	f023 0307 	bic.w	r3, r3, #7
 8007d74:	3308      	adds	r3, #8
 8007d76:	9303      	str	r3, [sp, #12]
 8007d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7a:	4433      	add	r3, r6
 8007d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7e:	e768      	b.n	8007c52 <_svfiprintf_r+0x4e>
 8007d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d84:	460c      	mov	r4, r1
 8007d86:	2001      	movs	r0, #1
 8007d88:	e7a6      	b.n	8007cd8 <_svfiprintf_r+0xd4>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	3401      	adds	r4, #1
 8007d8e:	9305      	str	r3, [sp, #20]
 8007d90:	4619      	mov	r1, r3
 8007d92:	f04f 0c0a 	mov.w	ip, #10
 8007d96:	4620      	mov	r0, r4
 8007d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d9c:	3a30      	subs	r2, #48	; 0x30
 8007d9e:	2a09      	cmp	r2, #9
 8007da0:	d903      	bls.n	8007daa <_svfiprintf_r+0x1a6>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0c6      	beq.n	8007d34 <_svfiprintf_r+0x130>
 8007da6:	9105      	str	r1, [sp, #20]
 8007da8:	e7c4      	b.n	8007d34 <_svfiprintf_r+0x130>
 8007daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dae:	4604      	mov	r4, r0
 8007db0:	2301      	movs	r3, #1
 8007db2:	e7f0      	b.n	8007d96 <_svfiprintf_r+0x192>
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	462a      	mov	r2, r5
 8007dba:	4b0f      	ldr	r3, [pc, #60]	; (8007df8 <_svfiprintf_r+0x1f4>)
 8007dbc:	a904      	add	r1, sp, #16
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f3af 8000 	nop.w
 8007dc4:	1c42      	adds	r2, r0, #1
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	d1d6      	bne.n	8007d78 <_svfiprintf_r+0x174>
 8007dca:	89ab      	ldrh	r3, [r5, #12]
 8007dcc:	065b      	lsls	r3, r3, #25
 8007dce:	f53f af2d 	bmi.w	8007c2c <_svfiprintf_r+0x28>
 8007dd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd4:	b01d      	add	sp, #116	; 0x74
 8007dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dda:	ab03      	add	r3, sp, #12
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	462a      	mov	r2, r5
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <_svfiprintf_r+0x1f4>)
 8007de2:	a904      	add	r1, sp, #16
 8007de4:	4638      	mov	r0, r7
 8007de6:	f000 f879 	bl	8007edc <_printf_i>
 8007dea:	e7eb      	b.n	8007dc4 <_svfiprintf_r+0x1c0>
 8007dec:	08009030 	.word	0x08009030
 8007df0:	0800903a 	.word	0x0800903a
 8007df4:	00000000 	.word	0x00000000
 8007df8:	08007b51 	.word	0x08007b51
 8007dfc:	08009036 	.word	0x08009036

08007e00 <_printf_common>:
 8007e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	4616      	mov	r6, r2
 8007e06:	4699      	mov	r9, r3
 8007e08:	688a      	ldr	r2, [r1, #8]
 8007e0a:	690b      	ldr	r3, [r1, #16]
 8007e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e10:	4293      	cmp	r3, r2
 8007e12:	bfb8      	it	lt
 8007e14:	4613      	movlt	r3, r2
 8007e16:	6033      	str	r3, [r6, #0]
 8007e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	460c      	mov	r4, r1
 8007e20:	b10a      	cbz	r2, 8007e26 <_printf_common+0x26>
 8007e22:	3301      	adds	r3, #1
 8007e24:	6033      	str	r3, [r6, #0]
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	0699      	lsls	r1, r3, #26
 8007e2a:	bf42      	ittt	mi
 8007e2c:	6833      	ldrmi	r3, [r6, #0]
 8007e2e:	3302      	addmi	r3, #2
 8007e30:	6033      	strmi	r3, [r6, #0]
 8007e32:	6825      	ldr	r5, [r4, #0]
 8007e34:	f015 0506 	ands.w	r5, r5, #6
 8007e38:	d106      	bne.n	8007e48 <_printf_common+0x48>
 8007e3a:	f104 0a19 	add.w	sl, r4, #25
 8007e3e:	68e3      	ldr	r3, [r4, #12]
 8007e40:	6832      	ldr	r2, [r6, #0]
 8007e42:	1a9b      	subs	r3, r3, r2
 8007e44:	42ab      	cmp	r3, r5
 8007e46:	dc26      	bgt.n	8007e96 <_printf_common+0x96>
 8007e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e4c:	1e13      	subs	r3, r2, #0
 8007e4e:	6822      	ldr	r2, [r4, #0]
 8007e50:	bf18      	it	ne
 8007e52:	2301      	movne	r3, #1
 8007e54:	0692      	lsls	r2, r2, #26
 8007e56:	d42b      	bmi.n	8007eb0 <_printf_common+0xb0>
 8007e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	4638      	mov	r0, r7
 8007e60:	47c0      	blx	r8
 8007e62:	3001      	adds	r0, #1
 8007e64:	d01e      	beq.n	8007ea4 <_printf_common+0xa4>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	6922      	ldr	r2, [r4, #16]
 8007e6a:	f003 0306 	and.w	r3, r3, #6
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	bf02      	ittt	eq
 8007e72:	68e5      	ldreq	r5, [r4, #12]
 8007e74:	6833      	ldreq	r3, [r6, #0]
 8007e76:	1aed      	subeq	r5, r5, r3
 8007e78:	68a3      	ldr	r3, [r4, #8]
 8007e7a:	bf0c      	ite	eq
 8007e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e80:	2500      	movne	r5, #0
 8007e82:	4293      	cmp	r3, r2
 8007e84:	bfc4      	itt	gt
 8007e86:	1a9b      	subgt	r3, r3, r2
 8007e88:	18ed      	addgt	r5, r5, r3
 8007e8a:	2600      	movs	r6, #0
 8007e8c:	341a      	adds	r4, #26
 8007e8e:	42b5      	cmp	r5, r6
 8007e90:	d11a      	bne.n	8007ec8 <_printf_common+0xc8>
 8007e92:	2000      	movs	r0, #0
 8007e94:	e008      	b.n	8007ea8 <_printf_common+0xa8>
 8007e96:	2301      	movs	r3, #1
 8007e98:	4652      	mov	r2, sl
 8007e9a:	4649      	mov	r1, r9
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	47c0      	blx	r8
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d103      	bne.n	8007eac <_printf_common+0xac>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eac:	3501      	adds	r5, #1
 8007eae:	e7c6      	b.n	8007e3e <_printf_common+0x3e>
 8007eb0:	18e1      	adds	r1, r4, r3
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	2030      	movs	r0, #48	; 0x30
 8007eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eba:	4422      	add	r2, r4
 8007ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ec4:	3302      	adds	r3, #2
 8007ec6:	e7c7      	b.n	8007e58 <_printf_common+0x58>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	4622      	mov	r2, r4
 8007ecc:	4649      	mov	r1, r9
 8007ece:	4638      	mov	r0, r7
 8007ed0:	47c0      	blx	r8
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d0e6      	beq.n	8007ea4 <_printf_common+0xa4>
 8007ed6:	3601      	adds	r6, #1
 8007ed8:	e7d9      	b.n	8007e8e <_printf_common+0x8e>
	...

08007edc <_printf_i>:
 8007edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	7e0f      	ldrb	r7, [r1, #24]
 8007ee2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ee4:	2f78      	cmp	r7, #120	; 0x78
 8007ee6:	4691      	mov	r9, r2
 8007ee8:	4680      	mov	r8, r0
 8007eea:	460c      	mov	r4, r1
 8007eec:	469a      	mov	sl, r3
 8007eee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ef2:	d807      	bhi.n	8007f04 <_printf_i+0x28>
 8007ef4:	2f62      	cmp	r7, #98	; 0x62
 8007ef6:	d80a      	bhi.n	8007f0e <_printf_i+0x32>
 8007ef8:	2f00      	cmp	r7, #0
 8007efa:	f000 80d4 	beq.w	80080a6 <_printf_i+0x1ca>
 8007efe:	2f58      	cmp	r7, #88	; 0x58
 8007f00:	f000 80c0 	beq.w	8008084 <_printf_i+0x1a8>
 8007f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f0c:	e03a      	b.n	8007f84 <_printf_i+0xa8>
 8007f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f12:	2b15      	cmp	r3, #21
 8007f14:	d8f6      	bhi.n	8007f04 <_printf_i+0x28>
 8007f16:	a101      	add	r1, pc, #4	; (adr r1, 8007f1c <_printf_i+0x40>)
 8007f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f1c:	08007f75 	.word	0x08007f75
 8007f20:	08007f89 	.word	0x08007f89
 8007f24:	08007f05 	.word	0x08007f05
 8007f28:	08007f05 	.word	0x08007f05
 8007f2c:	08007f05 	.word	0x08007f05
 8007f30:	08007f05 	.word	0x08007f05
 8007f34:	08007f89 	.word	0x08007f89
 8007f38:	08007f05 	.word	0x08007f05
 8007f3c:	08007f05 	.word	0x08007f05
 8007f40:	08007f05 	.word	0x08007f05
 8007f44:	08007f05 	.word	0x08007f05
 8007f48:	0800808d 	.word	0x0800808d
 8007f4c:	08007fb5 	.word	0x08007fb5
 8007f50:	08008047 	.word	0x08008047
 8007f54:	08007f05 	.word	0x08007f05
 8007f58:	08007f05 	.word	0x08007f05
 8007f5c:	080080af 	.word	0x080080af
 8007f60:	08007f05 	.word	0x08007f05
 8007f64:	08007fb5 	.word	0x08007fb5
 8007f68:	08007f05 	.word	0x08007f05
 8007f6c:	08007f05 	.word	0x08007f05
 8007f70:	0800804f 	.word	0x0800804f
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	1d1a      	adds	r2, r3, #4
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	602a      	str	r2, [r5, #0]
 8007f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f84:	2301      	movs	r3, #1
 8007f86:	e09f      	b.n	80080c8 <_printf_i+0x1ec>
 8007f88:	6820      	ldr	r0, [r4, #0]
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	0607      	lsls	r7, r0, #24
 8007f8e:	f103 0104 	add.w	r1, r3, #4
 8007f92:	6029      	str	r1, [r5, #0]
 8007f94:	d501      	bpl.n	8007f9a <_printf_i+0xbe>
 8007f96:	681e      	ldr	r6, [r3, #0]
 8007f98:	e003      	b.n	8007fa2 <_printf_i+0xc6>
 8007f9a:	0646      	lsls	r6, r0, #25
 8007f9c:	d5fb      	bpl.n	8007f96 <_printf_i+0xba>
 8007f9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fa2:	2e00      	cmp	r6, #0
 8007fa4:	da03      	bge.n	8007fae <_printf_i+0xd2>
 8007fa6:	232d      	movs	r3, #45	; 0x2d
 8007fa8:	4276      	negs	r6, r6
 8007faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fae:	485a      	ldr	r0, [pc, #360]	; (8008118 <_printf_i+0x23c>)
 8007fb0:	230a      	movs	r3, #10
 8007fb2:	e012      	b.n	8007fda <_printf_i+0xfe>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	6820      	ldr	r0, [r4, #0]
 8007fb8:	1d19      	adds	r1, r3, #4
 8007fba:	6029      	str	r1, [r5, #0]
 8007fbc:	0605      	lsls	r5, r0, #24
 8007fbe:	d501      	bpl.n	8007fc4 <_printf_i+0xe8>
 8007fc0:	681e      	ldr	r6, [r3, #0]
 8007fc2:	e002      	b.n	8007fca <_printf_i+0xee>
 8007fc4:	0641      	lsls	r1, r0, #25
 8007fc6:	d5fb      	bpl.n	8007fc0 <_printf_i+0xe4>
 8007fc8:	881e      	ldrh	r6, [r3, #0]
 8007fca:	4853      	ldr	r0, [pc, #332]	; (8008118 <_printf_i+0x23c>)
 8007fcc:	2f6f      	cmp	r7, #111	; 0x6f
 8007fce:	bf0c      	ite	eq
 8007fd0:	2308      	moveq	r3, #8
 8007fd2:	230a      	movne	r3, #10
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fda:	6865      	ldr	r5, [r4, #4]
 8007fdc:	60a5      	str	r5, [r4, #8]
 8007fde:	2d00      	cmp	r5, #0
 8007fe0:	bfa2      	ittt	ge
 8007fe2:	6821      	ldrge	r1, [r4, #0]
 8007fe4:	f021 0104 	bicge.w	r1, r1, #4
 8007fe8:	6021      	strge	r1, [r4, #0]
 8007fea:	b90e      	cbnz	r6, 8007ff0 <_printf_i+0x114>
 8007fec:	2d00      	cmp	r5, #0
 8007fee:	d04b      	beq.n	8008088 <_printf_i+0x1ac>
 8007ff0:	4615      	mov	r5, r2
 8007ff2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ff6:	fb03 6711 	mls	r7, r3, r1, r6
 8007ffa:	5dc7      	ldrb	r7, [r0, r7]
 8007ffc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008000:	4637      	mov	r7, r6
 8008002:	42bb      	cmp	r3, r7
 8008004:	460e      	mov	r6, r1
 8008006:	d9f4      	bls.n	8007ff2 <_printf_i+0x116>
 8008008:	2b08      	cmp	r3, #8
 800800a:	d10b      	bne.n	8008024 <_printf_i+0x148>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	07de      	lsls	r6, r3, #31
 8008010:	d508      	bpl.n	8008024 <_printf_i+0x148>
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	6861      	ldr	r1, [r4, #4]
 8008016:	4299      	cmp	r1, r3
 8008018:	bfde      	ittt	le
 800801a:	2330      	movle	r3, #48	; 0x30
 800801c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008020:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008024:	1b52      	subs	r2, r2, r5
 8008026:	6122      	str	r2, [r4, #16]
 8008028:	f8cd a000 	str.w	sl, [sp]
 800802c:	464b      	mov	r3, r9
 800802e:	aa03      	add	r2, sp, #12
 8008030:	4621      	mov	r1, r4
 8008032:	4640      	mov	r0, r8
 8008034:	f7ff fee4 	bl	8007e00 <_printf_common>
 8008038:	3001      	adds	r0, #1
 800803a:	d14a      	bne.n	80080d2 <_printf_i+0x1f6>
 800803c:	f04f 30ff 	mov.w	r0, #4294967295
 8008040:	b004      	add	sp, #16
 8008042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	f043 0320 	orr.w	r3, r3, #32
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	4833      	ldr	r0, [pc, #204]	; (800811c <_printf_i+0x240>)
 8008050:	2778      	movs	r7, #120	; 0x78
 8008052:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	6829      	ldr	r1, [r5, #0]
 800805a:	061f      	lsls	r7, r3, #24
 800805c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008060:	d402      	bmi.n	8008068 <_printf_i+0x18c>
 8008062:	065f      	lsls	r7, r3, #25
 8008064:	bf48      	it	mi
 8008066:	b2b6      	uxthmi	r6, r6
 8008068:	07df      	lsls	r7, r3, #31
 800806a:	bf48      	it	mi
 800806c:	f043 0320 	orrmi.w	r3, r3, #32
 8008070:	6029      	str	r1, [r5, #0]
 8008072:	bf48      	it	mi
 8008074:	6023      	strmi	r3, [r4, #0]
 8008076:	b91e      	cbnz	r6, 8008080 <_printf_i+0x1a4>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	f023 0320 	bic.w	r3, r3, #32
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	2310      	movs	r3, #16
 8008082:	e7a7      	b.n	8007fd4 <_printf_i+0xf8>
 8008084:	4824      	ldr	r0, [pc, #144]	; (8008118 <_printf_i+0x23c>)
 8008086:	e7e4      	b.n	8008052 <_printf_i+0x176>
 8008088:	4615      	mov	r5, r2
 800808a:	e7bd      	b.n	8008008 <_printf_i+0x12c>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	6826      	ldr	r6, [r4, #0]
 8008090:	6961      	ldr	r1, [r4, #20]
 8008092:	1d18      	adds	r0, r3, #4
 8008094:	6028      	str	r0, [r5, #0]
 8008096:	0635      	lsls	r5, r6, #24
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	d501      	bpl.n	80080a0 <_printf_i+0x1c4>
 800809c:	6019      	str	r1, [r3, #0]
 800809e:	e002      	b.n	80080a6 <_printf_i+0x1ca>
 80080a0:	0670      	lsls	r0, r6, #25
 80080a2:	d5fb      	bpl.n	800809c <_printf_i+0x1c0>
 80080a4:	8019      	strh	r1, [r3, #0]
 80080a6:	2300      	movs	r3, #0
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	4615      	mov	r5, r2
 80080ac:	e7bc      	b.n	8008028 <_printf_i+0x14c>
 80080ae:	682b      	ldr	r3, [r5, #0]
 80080b0:	1d1a      	adds	r2, r3, #4
 80080b2:	602a      	str	r2, [r5, #0]
 80080b4:	681d      	ldr	r5, [r3, #0]
 80080b6:	6862      	ldr	r2, [r4, #4]
 80080b8:	2100      	movs	r1, #0
 80080ba:	4628      	mov	r0, r5
 80080bc:	f7f8 f890 	bl	80001e0 <memchr>
 80080c0:	b108      	cbz	r0, 80080c6 <_printf_i+0x1ea>
 80080c2:	1b40      	subs	r0, r0, r5
 80080c4:	6060      	str	r0, [r4, #4]
 80080c6:	6863      	ldr	r3, [r4, #4]
 80080c8:	6123      	str	r3, [r4, #16]
 80080ca:	2300      	movs	r3, #0
 80080cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d0:	e7aa      	b.n	8008028 <_printf_i+0x14c>
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	462a      	mov	r2, r5
 80080d6:	4649      	mov	r1, r9
 80080d8:	4640      	mov	r0, r8
 80080da:	47d0      	blx	sl
 80080dc:	3001      	adds	r0, #1
 80080de:	d0ad      	beq.n	800803c <_printf_i+0x160>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	079b      	lsls	r3, r3, #30
 80080e4:	d413      	bmi.n	800810e <_printf_i+0x232>
 80080e6:	68e0      	ldr	r0, [r4, #12]
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	4298      	cmp	r0, r3
 80080ec:	bfb8      	it	lt
 80080ee:	4618      	movlt	r0, r3
 80080f0:	e7a6      	b.n	8008040 <_printf_i+0x164>
 80080f2:	2301      	movs	r3, #1
 80080f4:	4632      	mov	r2, r6
 80080f6:	4649      	mov	r1, r9
 80080f8:	4640      	mov	r0, r8
 80080fa:	47d0      	blx	sl
 80080fc:	3001      	adds	r0, #1
 80080fe:	d09d      	beq.n	800803c <_printf_i+0x160>
 8008100:	3501      	adds	r5, #1
 8008102:	68e3      	ldr	r3, [r4, #12]
 8008104:	9903      	ldr	r1, [sp, #12]
 8008106:	1a5b      	subs	r3, r3, r1
 8008108:	42ab      	cmp	r3, r5
 800810a:	dcf2      	bgt.n	80080f2 <_printf_i+0x216>
 800810c:	e7eb      	b.n	80080e6 <_printf_i+0x20a>
 800810e:	2500      	movs	r5, #0
 8008110:	f104 0619 	add.w	r6, r4, #25
 8008114:	e7f5      	b.n	8008102 <_printf_i+0x226>
 8008116:	bf00      	nop
 8008118:	08009041 	.word	0x08009041
 800811c:	08009052 	.word	0x08009052

08008120 <_sbrk_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d06      	ldr	r5, [pc, #24]	; (800813c <_sbrk_r+0x1c>)
 8008124:	2300      	movs	r3, #0
 8008126:	4604      	mov	r4, r0
 8008128:	4608      	mov	r0, r1
 800812a:	602b      	str	r3, [r5, #0]
 800812c:	f7f9 fe70 	bl	8001e10 <_sbrk>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_sbrk_r+0x1a>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_sbrk_r+0x1a>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	2000515c 	.word	0x2000515c

08008140 <_realloc_r>:
 8008140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008144:	4680      	mov	r8, r0
 8008146:	4614      	mov	r4, r2
 8008148:	460e      	mov	r6, r1
 800814a:	b921      	cbnz	r1, 8008156 <_realloc_r+0x16>
 800814c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	4611      	mov	r1, r2
 8008152:	f7ff bc71 	b.w	8007a38 <_malloc_r>
 8008156:	b92a      	cbnz	r2, 8008164 <_realloc_r+0x24>
 8008158:	f7ff fc02 	bl	8007960 <_free_r>
 800815c:	4625      	mov	r5, r4
 800815e:	4628      	mov	r0, r5
 8008160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008164:	f000 f81b 	bl	800819e <_malloc_usable_size_r>
 8008168:	4284      	cmp	r4, r0
 800816a:	4607      	mov	r7, r0
 800816c:	d802      	bhi.n	8008174 <_realloc_r+0x34>
 800816e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008172:	d812      	bhi.n	800819a <_realloc_r+0x5a>
 8008174:	4621      	mov	r1, r4
 8008176:	4640      	mov	r0, r8
 8008178:	f7ff fc5e 	bl	8007a38 <_malloc_r>
 800817c:	4605      	mov	r5, r0
 800817e:	2800      	cmp	r0, #0
 8008180:	d0ed      	beq.n	800815e <_realloc_r+0x1e>
 8008182:	42bc      	cmp	r4, r7
 8008184:	4622      	mov	r2, r4
 8008186:	4631      	mov	r1, r6
 8008188:	bf28      	it	cs
 800818a:	463a      	movcs	r2, r7
 800818c:	f7ff fbda 	bl	8007944 <memcpy>
 8008190:	4631      	mov	r1, r6
 8008192:	4640      	mov	r0, r8
 8008194:	f7ff fbe4 	bl	8007960 <_free_r>
 8008198:	e7e1      	b.n	800815e <_realloc_r+0x1e>
 800819a:	4635      	mov	r5, r6
 800819c:	e7df      	b.n	800815e <_realloc_r+0x1e>

0800819e <_malloc_usable_size_r>:
 800819e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a2:	1f18      	subs	r0, r3, #4
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bfbc      	itt	lt
 80081a8:	580b      	ldrlt	r3, [r1, r0]
 80081aa:	18c0      	addlt	r0, r0, r3
 80081ac:	4770      	bx	lr
	...

080081b0 <_init>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	bf00      	nop
 80081b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b6:	bc08      	pop	{r3}
 80081b8:	469e      	mov	lr, r3
 80081ba:	4770      	bx	lr

080081bc <_fini>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr
