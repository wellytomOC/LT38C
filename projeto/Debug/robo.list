
robo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  08008678  08008678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009514  08009514  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009514  08009514  00019514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800951c  0800951c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009520  08009520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050fc  20000070  08009594  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000516c  08009594  0002516c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018eb1  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003729  00000000  00000000  00038f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  0003c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113a  00000000  00000000  0003dcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003973  00000000  00000000  0003ee32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189cb  00000000  00000000  000427a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098b50  00000000  00000000  0005b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064cc  00000000  00000000  000f3cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000fa18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008660 	.word	0x08008660

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08008660 	.word	0x08008660

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b970 	b.w	8000e64 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	460d      	mov	r5, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	460f      	mov	r7, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4694      	mov	ip, r2
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0xe2>
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	b143      	cbz	r3, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bbc:	f1c3 0220 	rsb	r2, r3, #32
 8000bc0:	409f      	lsls	r7, r3
 8000bc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	409c      	lsls	r4, r3
 8000bca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bce:	fa1f f58c 	uxth.w	r5, ip
 8000bd2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bd6:	0c22      	lsrs	r2, r4, #16
 8000bd8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bdc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be0:	fb01 f005 	mul.w	r0, r1, r5
 8000be4:	4290      	cmp	r0, r2
 8000be6:	d90a      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000be8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bf0:	f080 811c 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	f240 8119 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	4462      	add	r2, ip
 8000bfe:	1a12      	subs	r2, r2, r0
 8000c00:	b2a4      	uxth	r4, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c0e:	fb00 f505 	mul.w	r5, r0, r5
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c16:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1e:	f080 8107 	bcs.w	8000e30 <__udivmoddi4+0x294>
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	f240 8104 	bls.w	8000e30 <__udivmoddi4+0x294>
 8000c28:	4464      	add	r4, ip
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c30:	1b64      	subs	r4, r4, r5
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40dc      	lsrs	r4, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0xbc>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80ed 	beq.w	8000e26 <__udivmoddi4+0x28a>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c52:	4608      	mov	r0, r1
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c58:	fab3 f183 	clz	r1, r3
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d149      	bne.n	8000cf4 <__udivmoddi4+0x158>
 8000c60:	42ab      	cmp	r3, r5
 8000c62:	d302      	bcc.n	8000c6a <__udivmoddi4+0xce>
 8000c64:	4282      	cmp	r2, r0
 8000c66:	f200 80f8 	bhi.w	8000e5a <__udivmoddi4+0x2be>
 8000c6a:	1a84      	subs	r4, r0, r2
 8000c6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c70:	2001      	movs	r0, #1
 8000c72:	4617      	mov	r7, r2
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d0e2      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	e9c6 4700 	strd	r4, r7, [r6]
 8000c7c:	e7df      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xe6>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f382 	clz	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8090 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8c:	1a8a      	subs	r2, r1, r2
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2101      	movs	r1, #1
 8000c98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca0:	0c22      	lsrs	r2, r4, #16
 8000ca2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ca6:	fb0e f005 	mul.w	r0, lr, r5
 8000caa:	4290      	cmp	r0, r2
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cae:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4290      	cmp	r0, r2
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2b8>
 8000cbe:	4645      	mov	r5, r8
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000ccc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x14e>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x14c>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2c2>
 8000ce8:	4610      	mov	r0, r2
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cf2:	e79f      	b.n	8000c34 <__udivmoddi4+0x98>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa05 f401 	lsl.w	r4, r5, r1
 8000d06:	fa20 f307 	lsr.w	r3, r0, r7
 8000d0a:	40fd      	lsrs	r5, r7
 8000d0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d10:	4323      	orrs	r3, r4
 8000d12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d1e:	0c1c      	lsrs	r4, r3, #16
 8000d20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d24:	fb08 f50e 	mul.w	r5, r8, lr
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2b4>
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2b4>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	b29d      	uxth	r5, r3
 8000d50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d54:	fb09 4413 	mls	r4, r9, r3, r4
 8000d58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2ac>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2ac>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	4464      	add	r4, ip
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	42ac      	cmp	r4, r5
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46ae      	mov	lr, r5
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x29c>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x298>
 8000d8c:	b156      	cbz	r6, 8000da4 <__udivmoddi4+0x208>
 8000d8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d92:	eb64 040e 	sbc.w	r4, r4, lr
 8000d96:	fa04 f707 	lsl.w	r7, r4, r7
 8000d9a:	40ca      	lsrs	r2, r1
 8000d9c:	40cc      	lsrs	r4, r1
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	e9c6 7400 	strd	r7, r4, [r6]
 8000da4:	4618      	mov	r0, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	f1c3 0120 	rsb	r1, r3, #32
 8000db0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db4:	fa20 f201 	lsr.w	r2, r0, r1
 8000db8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dbc:	409d      	lsls	r5, r3
 8000dbe:	432a      	orrs	r2, r5
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd0:	0c11      	lsrs	r1, r2, #16
 8000dd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dda:	428d      	cmp	r5, r1
 8000ddc:	fa04 f403 	lsl.w	r4, r4, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x258>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000dec:	428d      	cmp	r5, r1
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1b49      	subs	r1, r1, r5
 8000df6:	b292      	uxth	r2, r2
 8000df8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000e00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e04:	fb05 f10e 	mul.w	r1, r5, lr
 8000e08:	4291      	cmp	r1, r2
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x282>
 8000e0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000e16:	4291      	cmp	r1, r2
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000e1a:	3d02      	subs	r5, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a52      	subs	r2, r2, r1
 8000e20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0xfc>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e708      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000e2c:	4639      	mov	r1, r7
 8000e2e:	e6e6      	b.n	8000bfe <__udivmoddi4+0x62>
 8000e30:	4610      	mov	r0, r2
 8000e32:	e6fb      	b.n	8000c2c <__udivmoddi4+0x90>
 8000e34:	4548      	cmp	r0, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e40:	3b01      	subs	r3, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e44:	4645      	mov	r5, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e48:	462b      	mov	r3, r5
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x258>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e70a      	b.n	8000c74 <__udivmoddi4+0xd8>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x14e>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e6c:	f001 fcc8 	bl	8002800 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e70:	f000 f868 	bl	8000f44 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e74:	f000 fa3c 	bl	80012f0 <MX_GPIO_Init>
	MX_TIM4_Init();
 8000e78:	f000 f9c0 	bl	80011fc <MX_TIM4_Init>
	MX_TIM2_Init();
 8000e7c:	f000 f8fa 	bl	8001074 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000e80:	f000 f96e 	bl	8001160 <MX_TIM3_Init>
	MX_I2C3_Init();
 8000e84:	f000 f8c8 	bl	8001018 <MX_I2C3_Init>




	//inicializacao do display
	ssd1306_Init();
 8000e88:	f001 fac4 	bl	8002414 <ssd1306_Init>
	ssd1306_Fill(White);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f001 fb2b 	bl	80024e8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000e92:	f001 fb41 	bl	8002518 <ssd1306_UpdateScreen>


	//inicializacao dos sensores
	HAL_TIM_Base_Start(&htim3);
 8000e96:	481c      	ldr	r0, [pc, #112]	; (8000f08 <main+0xa0>)
 8000e98:	f003 f8fe 	bl	8004098 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SensorFrenteTrigger_GPIO_Port, SensorFrenteTrigger_Pin , GPIO_PIN_RESET);  // pull the TRIG pin low
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2140      	movs	r1, #64	; 0x40
 8000ea0:	481a      	ldr	r0, [pc, #104]	; (8000f0c <main+0xa4>)
 8000ea2:	f001 ff91 	bl	8002dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SensorEsquerdaTrigger_GPIO_Port, SensorEsquerdaTrigger_Pin , GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eac:	4818      	ldr	r0, [pc, #96]	; (8000f10 <main+0xa8>)
 8000eae:	f001 ff8b 	bl	8002dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SensorDireitoTrigger_GPIO_Port, SensorDireitoTrigger_Pin , GPIO_PIN_RESET);  // pull the TRIG pin low
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <main+0xa4>)
 8000eb8:	f001 ff86 	bl	8002dc8 <HAL_GPIO_WritePin>


	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000ebc:	f004 f958 	bl	8005170 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <main+0xac>)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4814      	ldr	r0, [pc, #80]	; (8000f18 <main+0xb0>)
 8000ec6:	f004 f99d 	bl	8005204 <osThreadNew>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <main+0xb4>)
 8000ece:	6013      	str	r3, [r2, #0]

	/* creation of RightMotor */
	RightMotorHandle = osThreadNew(StartRightMotor, NULL, &RightMotor_attributes);
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <main+0xb8>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <main+0xbc>)
 8000ed6:	f004 f995 	bl	8005204 <osThreadNew>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <main+0xc0>)
 8000ede:	6013      	str	r3, [r2, #0]

	/* creation of LeftMotor */
	LeftMotorHandle = osThreadNew(StartLeftMotor, NULL, &LeftMotor_attributes);
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <main+0xc4>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4812      	ldr	r0, [pc, #72]	; (8000f30 <main+0xc8>)
 8000ee6:	f004 f98d 	bl	8005204 <osThreadNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <main+0xcc>)
 8000eee:	6013      	str	r3, [r2, #0]

	/* creation of StateMachine */
	StateMachineHandle = osThreadNew(StartStateMachine, NULL, &StateMachine_attributes);
 8000ef0:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <main+0xd0>)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <main+0xd4>)
 8000ef6:	f004 f985 	bl	8005204 <osThreadNew>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <main+0xd8>)
 8000efe:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f00:	f004 f95a 	bl	80051b8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000f04:	e7fe      	b.n	8000f04 <main+0x9c>
 8000f06:	bf00      	nop
 8000f08:	20000128 	.word	0x20000128
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020400 	.word	0x40020400
 8000f14:	080086dc 	.word	0x080086dc
 8000f18:	080018b9 	.word	0x080018b9
 8000f1c:	200001b8 	.word	0x200001b8
 8000f20:	08008700 	.word	0x08008700
 8000f24:	080018d1 	.word	0x080018d1
 8000f28:	200001bc 	.word	0x200001bc
 8000f2c:	08008724 	.word	0x08008724
 8000f30:	08001af9 	.word	0x08001af9
 8000f34:	200001c0 	.word	0x200001c0
 8000f38:	08008748 	.word	0x08008748
 8000f3c:	08001d21 	.word	0x08001d21
 8000f40:	200001c4 	.word	0x200001c4

08000f44 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f006 fec4 	bl	8007ce0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <SystemClock_Config+0xcc>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f90:	4a20      	ldr	r2, [pc, #128]	; (8001014 <SystemClock_Config+0xd0>)
 8000f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <SystemClock_Config+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fac:	2310      	movs	r3, #16
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000fbc:	2354      	movs	r3, #84	; 0x54
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fb89 	bl	80036e4 <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000fd8:	f000 ff80 	bl	8001edc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 fdeb 	bl	8003bd4 <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001004:	f000 ff6a 	bl	8001edc <Error_Handler>
	}
}
 8001008:	bf00      	nop
 800100a:	3750      	adds	r7, #80	; 0x50
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_I2C3_Init+0x50>)
 800101e:	4a13      	ldr	r2, [pc, #76]	; (800106c <MX_I2C3_Init+0x54>)
 8001020:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_I2C3_Init+0x50>)
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <MX_I2C3_Init+0x58>)
 8001026:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_I2C3_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_I2C3_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_I2C3_Init+0x50>)
 8001036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800103a:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_I2C3_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_I2C3_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_I2C3_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_I2C3_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_I2C3_Init+0x50>)
 8001056:	f001 fee9 	bl	8002e2c <HAL_I2C_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8001060:	f000 ff3c 	bl	8001edc <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000008c 	.word	0x2000008c
 800106c:	40005c00 	.word	0x40005c00
 8001070:	000186a0 	.word	0x000186a0

08001074 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_TIM2_Init+0xe8>)
 80010a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010aa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8400;
 80010ac:	4b2b      	ldr	r3, [pc, #172]	; (800115c <MX_TIM2_Init+0xe8>)
 80010ae:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80010b2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <MX_TIM2_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10;
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <MX_TIM2_Init+0xe8>)
 80010bc:	220a      	movs	r2, #10
 80010be:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <MX_TIM2_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_TIM2_Init+0xe8>)
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010cc:	4823      	ldr	r0, [pc, #140]	; (800115c <MX_TIM2_Init+0xe8>)
 80010ce:	f002 ff93 	bl	8003ff8 <HAL_TIM_Base_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0x68>
	{
		Error_Handler();
 80010d8:	f000 ff00 	bl	8001edc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	4619      	mov	r1, r3
 80010e8:	481c      	ldr	r0, [pc, #112]	; (800115c <MX_TIM2_Init+0xe8>)
 80010ea:	f003 fbbf 	bl	800486c <HAL_TIM_ConfigClockSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 80010f4:	f000 fef2 	bl	8001edc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f8:	4818      	ldr	r0, [pc, #96]	; (800115c <MX_TIM2_Init+0xe8>)
 80010fa:	f003 f889 	bl	8004210 <HAL_TIM_PWM_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 8001104:	f000 feea 	bl	8001edc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4619      	mov	r1, r3
 8001116:	4811      	ldr	r0, [pc, #68]	; (800115c <MX_TIM2_Init+0xe8>)
 8001118:	f003 ff64 	bl	8004fe4 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 8001122:	f000 fedb 	bl	8001edc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001126:	2360      	movs	r3, #96	; 0x60
 8001128:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 5;
 800112a:	2305      	movs	r3, #5
 800112c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <MX_TIM2_Init+0xe8>)
 800113e:	f003 fad3 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 8001148:	f000 fec8 	bl	8001edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <MX_TIM2_Init+0xe8>)
 800114e:	f000 ffb7 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 8001152:	bf00      	nop
 8001154:	3738      	adds	r7, #56	; 0x38
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000e0 	.word	0x200000e0

08001160 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM3_Init+0x94>)
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <MX_TIM3_Init+0x98>)
 8001180:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84-1;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001184:	2253      	movs	r2, #83	; 0x53
 8001186:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM3_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM3_Init+0x94>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a4:	f002 ff28 	bl	8003ff8 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 80011ae:	f000 fe95 	bl	8001edc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011c0:	f003 fb54 	bl	800486c <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 80011ca:	f000 fe87 	bl	8001edc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011dc:	f003 ff02 	bl	8004fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 80011e6:	f000 fe79 	bl	8001edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000128 	.word	0x20000128
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <MX_TIM4_Init+0xec>)
 8001220:	4a32      	ldr	r2, [pc, #200]	; (80012ec <MX_TIM4_Init+0xf0>)
 8001222:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 840;
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <MX_TIM4_Init+0xec>)
 8001226:	f44f 7252 	mov.w	r2, #840	; 0x348
 800122a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <MX_TIM4_Init+0xec>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100-1;
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_TIM4_Init+0xec>)
 8001234:	2263      	movs	r2, #99	; 0x63
 8001236:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <MX_TIM4_Init+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_TIM4_Init+0xec>)
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001244:	4828      	ldr	r0, [pc, #160]	; (80012e8 <MX_TIM4_Init+0xec>)
 8001246:	f002 ffe3 	bl	8004210 <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM4_Init+0x58>
	{
		Error_Handler();
 8001250:	f000 fe44 	bl	8001edc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4619      	mov	r1, r3
 8001262:	4821      	ldr	r0, [pc, #132]	; (80012e8 <MX_TIM4_Init+0xec>)
 8001264:	f003 febe 	bl	8004fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM4_Init+0x76>
	{
		Error_Handler();
 800126e:	f000 fe35 	bl	8001edc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001272:	2360      	movs	r3, #96	; 0x60
 8001274:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 50-1;
 8001276:	2331      	movs	r3, #49	; 0x31
 8001278:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	4817      	ldr	r0, [pc, #92]	; (80012e8 <MX_TIM4_Init+0xec>)
 800128a:	f003 fa2d 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM4_Init+0x9c>
	{
		Error_Handler();
 8001294:	f000 fe22 	bl	8001edc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <MX_TIM4_Init+0xec>)
 80012a0:	f003 fa22 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM4_Init+0xb2>
	{
		Error_Handler();
 80012aa:	f000 fe17 	bl	8001edc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2208      	movs	r2, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_TIM4_Init+0xec>)
 80012b6:	f003 fa17 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM4_Init+0xc8>
	{
		Error_Handler();
 80012c0:	f000 fe0c 	bl	8001edc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	220c      	movs	r2, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM4_Init+0xec>)
 80012cc:	f003 fa0c 	bl	80046e8 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM4_Init+0xde>
	{
		Error_Handler();
 80012d6:	f000 fe01 	bl	8001edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM4_Init+0xec>)
 80012dc:	f000 fef0 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000170 	.word	0x20000170
 80012ec:	40000800 	.word	0x40000800

080012f0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b55      	ldr	r3, [pc, #340]	; (8001460 <MX_GPIO_Init+0x170>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a54      	ldr	r2, [pc, #336]	; (8001460 <MX_GPIO_Init+0x170>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b52      	ldr	r3, [pc, #328]	; (8001460 <MX_GPIO_Init+0x170>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <MX_GPIO_Init+0x170>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <MX_GPIO_Init+0x170>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <MX_GPIO_Init+0x170>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b47      	ldr	r3, [pc, #284]	; (8001460 <MX_GPIO_Init+0x170>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a46      	ldr	r2, [pc, #280]	; (8001460 <MX_GPIO_Init+0x170>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b44      	ldr	r3, [pc, #272]	; (8001460 <MX_GPIO_Init+0x170>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4840      	ldr	r0, [pc, #256]	; (8001464 <MX_GPIO_Init+0x174>)
 8001362:	f001 fd31 	bl	8002dc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SensorDireitoTrigger_Pin|SensorFrenteTrigger_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2144      	movs	r1, #68	; 0x44
 800136a:	483f      	ldr	r0, [pc, #252]	; (8001468 <MX_GPIO_Init+0x178>)
 800136c:	f001 fd2c 	bl	8002dc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SensorEsquerdaTrigger_GPIO_Port, SensorEsquerdaTrigger_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001376:	483d      	ldr	r0, [pc, #244]	; (800146c <MX_GPIO_Init+0x17c>)
 8001378:	f001 fd26 	bl	8002dc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 800137c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001380:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	4833      	ldr	r0, [pc, #204]	; (8001464 <MX_GPIO_Init+0x174>)
 8001396:	f001 fb7b 	bl	8002a90 <HAL_GPIO_Init>

	/*Configure GPIO pin : Key_Pin */
	GPIO_InitStruct.Pin = Key_Pin;
 800139a:	2301      	movs	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	482e      	ldr	r0, [pc, #184]	; (8001468 <MX_GPIO_Init+0x178>)
 80013ae:	f001 fb6f 	bl	8002a90 <HAL_GPIO_Init>

	/*Configure GPIO pins : SensorDireitoEcho_Pin SensorFrenteEcho_Pin */
	GPIO_InitStruct.Pin = SensorDireitoEcho_Pin|SensorFrenteEcho_Pin;
 80013b2:	2382      	movs	r3, #130	; 0x82
 80013b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	4828      	ldr	r0, [pc, #160]	; (8001468 <MX_GPIO_Init+0x178>)
 80013c6:	f001 fb63 	bl	8002a90 <HAL_GPIO_Init>

	/*Configure GPIO pins : SensorDireitoTrigger_Pin SensorFrenteTrigger_Pin */
	GPIO_InitStruct.Pin = SensorDireitoTrigger_Pin|SensorFrenteTrigger_Pin;
 80013ca:	2344      	movs	r3, #68	; 0x44
 80013cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4619      	mov	r1, r3
 80013e0:	4821      	ldr	r0, [pc, #132]	; (8001468 <MX_GPIO_Init+0x178>)
 80013e2:	f001 fb55 	bl	8002a90 <HAL_GPIO_Init>

	/*Configure GPIO pins : Encoder_Direito_Pin Encoder_Esquerdo_Pin */
	GPIO_InitStruct.Pin = Encoder_Direito_Pin|Encoder_Esquerdo_Pin;
 80013e6:	2318      	movs	r3, #24
 80013e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	481b      	ldr	r0, [pc, #108]	; (8001468 <MX_GPIO_Init+0x178>)
 80013fc:	f001 fb48 	bl	8002a90 <HAL_GPIO_Init>

	/*Configure GPIO pin : SensorEsquerdaEcho_Pin */
	GPIO_InitStruct.Pin = SensorEsquerdaEcho_Pin;
 8001400:	2304      	movs	r3, #4
 8001402:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SensorEsquerdaEcho_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4619      	mov	r1, r3
 8001412:	4816      	ldr	r0, [pc, #88]	; (800146c <MX_GPIO_Init+0x17c>)
 8001414:	f001 fb3c 	bl	8002a90 <HAL_GPIO_Init>

	/*Configure GPIO pin : SensorEsquerdaTrigger_Pin */
	GPIO_InitStruct.Pin = SensorEsquerdaTrigger_Pin;
 8001418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SensorEsquerdaTrigger_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	4619      	mov	r1, r3
 8001430:	480e      	ldr	r0, [pc, #56]	; (800146c <MX_GPIO_Init+0x17c>)
 8001432:	f001 fb2d 	bl	8002a90 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2105      	movs	r1, #5
 800143a:	2009      	movs	r0, #9
 800143c:	f001 fafe 	bl	8002a3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001440:	2009      	movs	r0, #9
 8001442:	f001 fb17 	bl	8002a74 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2105      	movs	r1, #5
 800144a:	200a      	movs	r0, #10
 800144c:	f001 faf6 	bl	8002a3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001450:	200a      	movs	r0, #10
 8001452:	f001 fb0f 	bl	8002a74 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001456:	bf00      	nop
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40020800 	.word	0x40020800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400

08001470 <Print_Distance>:




// display
void Print_Distance(){
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0

	char text[20] = {};
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]

	ssd1306_Fill(Black);
 8001488:	2000      	movs	r0, #0
 800148a:	f001 f82d 	bl	80024e8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 800148e:	2100      	movs	r1, #0
 8001490:	2000      	movs	r0, #0
 8001492:	f001 f96b 	bl	800276c <ssd1306_SetCursor>
	sprintf(text,"esq: %d", Walle.Sensor_Esquerda);
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <Print_Distance+0x98>)
 8001498:	88db      	ldrh	r3, [r3, #6]
 800149a:	461a      	mov	r2, r3
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	491b      	ldr	r1, [pc, #108]	; (800150c <Print_Distance+0x9c>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 fbe3 	bl	8007c6c <siprintf>
	ssd1306_WriteString(text, Font_11x18, White);
 80014a6:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <Print_Distance+0xa0>)
 80014a8:	1d38      	adds	r0, r7, #4
 80014aa:	2301      	movs	r3, #1
 80014ac:	ca06      	ldmia	r2, {r1, r2}
 80014ae:	f001 f937 	bl	8002720 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 20);
 80014b2:	2114      	movs	r1, #20
 80014b4:	2000      	movs	r0, #0
 80014b6:	f001 f959 	bl	800276c <ssd1306_SetCursor>
	sprintf(text,"Dir: %d", Walle.Sensor_Direita);
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <Print_Distance+0x98>)
 80014bc:	891b      	ldrh	r3, [r3, #8]
 80014be:	461a      	mov	r2, r3
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4914      	ldr	r1, [pc, #80]	; (8001514 <Print_Distance+0xa4>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f006 fbd1 	bl	8007c6c <siprintf>
	ssd1306_WriteString(text, Font_11x18, White);
 80014ca:	4a11      	ldr	r2, [pc, #68]	; (8001510 <Print_Distance+0xa0>)
 80014cc:	1d38      	adds	r0, r7, #4
 80014ce:	2301      	movs	r3, #1
 80014d0:	ca06      	ldmia	r2, {r1, r2}
 80014d2:	f001 f925 	bl	8002720 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 40);
 80014d6:	2128      	movs	r1, #40	; 0x28
 80014d8:	2000      	movs	r0, #0
 80014da:	f001 f947 	bl	800276c <ssd1306_SetCursor>
	sprintf(text,"Frt: %d", Walle.Sensor_Frente);
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <Print_Distance+0x98>)
 80014e0:	889b      	ldrh	r3, [r3, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	490c      	ldr	r1, [pc, #48]	; (8001518 <Print_Distance+0xa8>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f006 fbbf 	bl	8007c6c <siprintf>
	ssd1306_WriteString(text, Font_11x18, White);
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <Print_Distance+0xa0>)
 80014f0:	1d38      	adds	r0, r7, #4
 80014f2:	2301      	movs	r3, #1
 80014f4:	ca06      	ldmia	r2, {r1, r2}
 80014f6:	f001 f913 	bl	8002720 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 80014fa:	f001 f80d 	bl	8002518 <ssd1306_UpdateScreen>

}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200001d8 	.word	0x200001d8
 800150c:	080086ac 	.word	0x080086ac
 8001510:	2000000c 	.word	0x2000000c
 8001514:	080086b4 	.word	0x080086b4
 8001518:	080086bc 	.word	0x080086bc

0800151c <LerSensores>:




// sensores
void LerSensores(){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

	Walle.Sensor_Direita = Read_Ultrasonic(SensorDireitoTrigger_GPIO_Port, SensorDireitoTrigger_Pin, SensorDireitoEcho_GPIO_Port, SensorDireitoEcho_Pin);
 8001520:	2302      	movs	r3, #2
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <LerSensores+0x48>)
 8001524:	2104      	movs	r1, #4
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <LerSensores+0x48>)
 8001528:	f000 f822 	bl	8001570 <Read_Ultrasonic>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <LerSensores+0x4c>)
 8001532:	811a      	strh	r2, [r3, #8]
	Walle.Sensor_Esquerda = Read_Ultrasonic(SensorEsquerdaTrigger_GPIO_Port, SensorEsquerdaTrigger_Pin, SensorEsquerdaEcho_GPIO_Port, SensorEsquerdaEcho_Pin);
 8001534:	2304      	movs	r3, #4
 8001536:	4a0d      	ldr	r2, [pc, #52]	; (800156c <LerSensores+0x50>)
 8001538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153c:	480b      	ldr	r0, [pc, #44]	; (800156c <LerSensores+0x50>)
 800153e:	f000 f817 	bl	8001570 <Read_Ultrasonic>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <LerSensores+0x4c>)
 8001548:	80da      	strh	r2, [r3, #6]
	Walle.Sensor_Frente = Read_Ultrasonic(SensorFrenteTrigger_GPIO_Port, SensorFrenteTrigger_Pin, SensorFrenteEcho_GPIO_Port, SensorFrenteEcho_Pin);
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	4a05      	ldr	r2, [pc, #20]	; (8001564 <LerSensores+0x48>)
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <LerSensores+0x48>)
 8001552:	f000 f80d 	bl	8001570 <Read_Ultrasonic>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	4b03      	ldr	r3, [pc, #12]	; (8001568 <LerSensores+0x4c>)
 800155c:	809a      	strh	r2, [r3, #4]

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40020000 	.word	0x40020000
 8001568:	200001d8 	.word	0x200001d8
 800156c:	40020400 	.word	0x40020400

08001570 <Read_Ultrasonic>:

uint16_t Read_Ultrasonic(GPIO_TypeDef* TriggerPort, uint16_t TriggerPin, GPIO_TypeDef* EchoPort, uint16_t EchoPin){
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	460b      	mov	r3, r1
 800157e:	817b      	strh	r3, [r7, #10]
 8001580:	4613      	mov	r3, r2
 8001582:	813b      	strh	r3, [r7, #8]

	uint32_t pMillis;
	uint32_t Value1 = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
	uint32_t Value2 = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
	uint16_t Distance  = 0;  // cm
 800158c:	2300      	movs	r3, #0
 800158e:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(TriggerPort, TriggerPin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001590:	897b      	ldrh	r3, [r7, #10]
 8001592:	2201      	movs	r2, #1
 8001594:	4619      	mov	r1, r3
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f001 fc16 	bl	8002dc8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800159c:	4b32      	ldr	r3, [pc, #200]	; (8001668 <Read_Ultrasonic+0xf8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER (&htim3) < 10);  // wait for 10 us
 80015a4:	bf00      	nop
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <Read_Ultrasonic+0xf8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d9fa      	bls.n	80015a6 <Read_Ultrasonic+0x36>
	HAL_GPIO_WritePin(TriggerPort, TriggerPin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f001 fc06 	bl	8002dc8 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80015bc:	f001 f956 	bl	800286c <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (EchoPort, EchoPin)) && pMillis + 10 >  HAL_GetTick());
 80015c2:	bf00      	nop
 80015c4:	893b      	ldrh	r3, [r7, #8]
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f001 fbe5 	bl	8002d98 <HAL_GPIO_ReadPin>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d107      	bne.n	80015e4 <Read_Ultrasonic+0x74>
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	f103 040a 	add.w	r4, r3, #10
 80015da:	f001 f947 	bl	800286c <HAL_GetTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	429c      	cmp	r4, r3
 80015e2:	d8ef      	bhi.n	80015c4 <Read_Ultrasonic+0x54>
	Value1 = __HAL_TIM_GET_COUNTER (&htim3);
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <Read_Ultrasonic+0xf8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	61fb      	str	r3, [r7, #28]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80015ec:	f001 f93e 	bl	800286c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (EchoPort, EchoPin)) && pMillis + 50 > HAL_GetTick());
 80015f2:	bf00      	nop
 80015f4:	893b      	ldrh	r3, [r7, #8]
 80015f6:	4619      	mov	r1, r3
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f001 fbcd 	bl	8002d98 <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d007      	beq.n	8001614 <Read_Ultrasonic+0xa4>
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800160a:	f001 f92f 	bl	800286c <HAL_GetTick>
 800160e:	4603      	mov	r3, r0
 8001610:	429c      	cmp	r4, r3
 8001612:	d8ef      	bhi.n	80015f4 <Read_Ultrasonic+0x84>
	Value2 = __HAL_TIM_GET_COUNTER (&htim3);
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <Read_Ultrasonic+0xf8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	61bb      	str	r3, [r7, #24]

	Distance = (Value2-Value1)* 0.034/2;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff6e 	bl	8000504 <__aeabi_ui2d>
 8001628:	a30d      	add	r3, pc, #52	; (adr r3, 8001660 <Read_Ultrasonic+0xf0>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe ffe3 	bl	80005f8 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001642:	f7ff f903 	bl	800084c <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff fa6d 	bl	8000b2c <__aeabi_d2uiz>
 8001652:	4603      	mov	r3, r0
 8001654:	82fb      	strh	r3, [r7, #22]

	return Distance;
 8001656:	8afb      	ldrh	r3, [r7, #22]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3724      	adds	r7, #36	; 0x24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd90      	pop	{r4, r7, pc}
 8001660:	b020c49c 	.word	0xb020c49c
 8001664:	3fa16872 	.word	0x3fa16872
 8001668:	20000128 	.word	0x20000128

0800166c <SetDefaultSpeed>:



// controle velocidade
void SetDefaultSpeed(){
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
	TIM4->CCR1 = MaxPWM_Right;
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <SetDefaultSpeed+0x30>)
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <SetDefaultSpeed+0x34>)
 8001676:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = MaxPWM_Right;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <SetDefaultSpeed+0x30>)
 800167a:	781a      	ldrb	r2, [r3, #0]
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <SetDefaultSpeed+0x34>)
 800167e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = MaxPWM_Left;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <SetDefaultSpeed+0x38>)
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <SetDefaultSpeed+0x34>)
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = MaxPWM_Left;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <SetDefaultSpeed+0x38>)
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SetDefaultSpeed+0x34>)
 800168e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000004 	.word	0x20000004
 80016a0:	40000800 	.word	0x40000800
 80016a4:	20000005 	.word	0x20000005

080016a8 <RightMotorSpeed>:

void RightMotorSpeed(uint8_t speed){
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	//MaxPWM = speed;
	if (speed<=1)
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d801      	bhi.n	80016bc <RightMotorSpeed+0x14>
		speed = 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	71fb      	strb	r3, [r7, #7]

	if (speed>100)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <RightMotorSpeed+0x1e>
		speed=100;
 80016c2:	2364      	movs	r3, #100	; 0x64
 80016c4:	71fb      	strb	r3, [r7, #7]

	TIM4->CCR1 = speed-1;
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <RightMotorSpeed+0x3c>)
 80016cc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = speed-1;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	1e5a      	subs	r2, r3, #1
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <RightMotorSpeed+0x3c>)
 80016d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40000800 	.word	0x40000800

080016e8 <LeftMotorSpeed>:

void LeftMotorSpeed(uint8_t speed){
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	//MaxPWM = speed;
	if (speed<=1)
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d801      	bhi.n	80016fc <LeftMotorSpeed+0x14>
		speed=1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	71fb      	strb	r3, [r7, #7]

	if (speed>100)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <LeftMotorSpeed+0x1e>
		speed=100;
 8001702:	2364      	movs	r3, #100	; 0x64
 8001704:	71fb      	strb	r3, [r7, #7]

	TIM4->CCR3 = speed-1;
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <LeftMotorSpeed+0x3c>)
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = speed-1;
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <LeftMotorSpeed+0x3c>)
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40000800 	.word	0x40000800

08001728 <RightMotorForward>:


// macros roda direita
void RightMotorForward(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800172c:	2104      	movs	r1, #4
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <RightMotorForward+0x18>)
 8001730:	f002 fdbe 	bl	80042b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
 8001734:	2100      	movs	r1, #0
 8001736:	4802      	ldr	r0, [pc, #8]	; (8001740 <RightMotorForward+0x18>)
 8001738:	f002 fe6a 	bl	8004410 <HAL_TIM_PWM_Stop>

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000170 	.word	0x20000170

08001744 <RightMotorBackward>:

void RightMotorBackward(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001748:	2100      	movs	r1, #0
 800174a:	4804      	ldr	r0, [pc, #16]	; (800175c <RightMotorBackward+0x18>)
 800174c:	f002 fdb0 	bl	80042b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);
 8001750:	2104      	movs	r1, #4
 8001752:	4802      	ldr	r0, [pc, #8]	; (800175c <RightMotorBackward+0x18>)
 8001754:	f002 fe5c 	bl	8004410 <HAL_TIM_PWM_Stop>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000170 	.word	0x20000170

08001760 <RightMotorStop>:

void RightMotorStop(){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
 8001764:	2100      	movs	r1, #0
 8001766:	4804      	ldr	r0, [pc, #16]	; (8001778 <RightMotorStop+0x18>)
 8001768:	f002 fe52 	bl	8004410 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);
 800176c:	2104      	movs	r1, #4
 800176e:	4802      	ldr	r0, [pc, #8]	; (8001778 <RightMotorStop+0x18>)
 8001770:	f002 fe4e 	bl	8004410 <HAL_TIM_PWM_Stop>

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000170 	.word	0x20000170

0800177c <LeftMotorForward>:


// macros roda direita
void LeftMotorForward(){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001780:	2108      	movs	r1, #8
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <LeftMotorForward+0x18>)
 8001784:	f002 fd94 	bl	80042b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 8001788:	210c      	movs	r1, #12
 800178a:	4802      	ldr	r0, [pc, #8]	; (8001794 <LeftMotorForward+0x18>)
 800178c:	f002 fe40 	bl	8004410 <HAL_TIM_PWM_Stop>

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000170 	.word	0x20000170

08001798 <LeftMotorBackward>:

void LeftMotorBackward(){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 800179c:	210c      	movs	r1, #12
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <LeftMotorBackward+0x18>)
 80017a0:	f002 fd86 	bl	80042b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_3);
 80017a4:	2108      	movs	r1, #8
 80017a6:	4802      	ldr	r0, [pc, #8]	; (80017b0 <LeftMotorBackward+0x18>)
 80017a8:	f002 fe32 	bl	8004410 <HAL_TIM_PWM_Stop>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000170 	.word	0x20000170

080017b4 <LeftMotorStop>:

void LeftMotorStop(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_3);
 80017b8:	2108      	movs	r1, #8
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <LeftMotorStop+0x18>)
 80017bc:	f002 fe28 	bl	8004410 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 80017c0:	210c      	movs	r1, #12
 80017c2:	4802      	ldr	r0, [pc, #8]	; (80017cc <LeftMotorStop+0x18>)
 80017c4:	f002 fe24 	bl	8004410 <HAL_TIM_PWM_Stop>

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000170 	.word	0x20000170

080017d0 <Mov_Forward>:



// movimentos
void Mov_Forward(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

	RightEncoderCount=0;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <Mov_Forward+0x2c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <Mov_Forward+0x30>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

	Flag_RightMotor_Mov_Forward=true;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <Mov_Forward+0x34>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
	Flag_LeftMotor_Mov_Forward=true;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <Mov_Forward+0x38>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]

	SetDefaultSpeed();
 80017ec:	f7ff ff3e 	bl	800166c <SetDefaultSpeed>

	RightMotorForward();
 80017f0:	f7ff ff9a 	bl	8001728 <RightMotorForward>
	LeftMotorForward();
 80017f4:	f7ff ffc2 	bl	800177c <LeftMotorForward>

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200001cc 	.word	0x200001cc
 8001800:	200001c8 	.word	0x200001c8
 8001804:	200001d0 	.word	0x200001d0
 8001808:	200001d1 	.word	0x200001d1

0800180c <Mov_Backward>:

void Mov_Backward(){
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	RightEncoderCount=0;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <Mov_Backward+0x2c>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <Mov_Backward+0x30>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

	Flag_RightMotor_Mov_Backward = true;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <Mov_Backward+0x34>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
	Flag_LeftMotor_Mov_Backward = true;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <Mov_Backward+0x38>)
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]

	SetDefaultSpeed();
 8001828:	f7ff ff20 	bl	800166c <SetDefaultSpeed>

	RightMotorBackward();
 800182c:	f7ff ff8a 	bl	8001744 <RightMotorBackward>
	LeftMotorBackward();
 8001830:	f7ff ffb2 	bl	8001798 <LeftMotorBackward>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200001cc 	.word	0x200001cc
 800183c:	200001c8 	.word	0x200001c8
 8001840:	200001d2 	.word	0x200001d2
 8001844:	200001d3 	.word	0x200001d3

08001848 <Mov_RotateRight>:

void Mov_RotateRight(){
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

	RightEncoderCount=0;
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <Mov_RotateRight+0x24>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <Mov_RotateRight+0x28>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

	Flag_LeftMotor_Mov_RotateRight=true;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <Mov_RotateRight+0x2c>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]

	SetDefaultSpeed();
 800185e:	f7ff ff05 	bl	800166c <SetDefaultSpeed>

	LeftMotorForward();
 8001862:	f7ff ff8b 	bl	800177c <LeftMotorForward>


}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200001cc 	.word	0x200001cc
 8001870:	200001c8 	.word	0x200001c8
 8001874:	200001d4 	.word	0x200001d4

08001878 <HAL_GPIO_EXTI_Callback>:



// callback encoder
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_4){
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	2b10      	cmp	r3, #16
 8001886:	d104      	bne.n	8001892 <HAL_GPIO_EXTI_Callback+0x1a>
		LeftEncoderCount++;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x38>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x38>)
 8001890:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == GPIO_PIN_3){
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d104      	bne.n	80018a2 <HAL_GPIO_EXTI_Callback+0x2a>
		RightEncoderCount++;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80018a0:	6013      	str	r3, [r2, #0]
	}

}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	200001c8 	.word	0x200001c8
 80018b4:	200001cc 	.word	0x200001cc

080018b8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]


		}

		 */
		osDelay(10000);
 80018c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80018c4:	f003 fd30 	bl	8005328 <osDelay>
 80018c8:	e7fa      	b.n	80018c0 <StartDefaultTask+0x8>
 80018ca:	0000      	movs	r0, r0
 80018cc:	0000      	movs	r0, r0
	...

080018d0 <StartRightMotor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRightMotor */
void StartRightMotor(void *argument)
{
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartRightMotor */
	/* Infinite loop */
	for(;;)
	{

		if(Flag_RightMotor_Mov_Forward){
 80018d8:	4b7d      	ldr	r3, [pc, #500]	; (8001ad0 <StartRightMotor+0x200>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 808d 	beq.w	80019fc <StartRightMotor+0x12c>

			if(RightEncoderCount >=Count_Mov_Forward*0.8 && RightEncoderCount < Count_Mov_Forward*0.9){
 80018e2:	4b7c      	ldr	r3, [pc, #496]	; (8001ad4 <StartRightMotor+0x204>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe1c 	bl	8000524 <__aeabi_i2d>
 80018ec:	4604      	mov	r4, r0
 80018ee:	460d      	mov	r5, r1
 80018f0:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <StartRightMotor+0x208>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe15 	bl	8000524 <__aeabi_i2d>
 80018fa:	a36f      	add	r3, pc, #444	; (adr r3, 8001ab8 <StartRightMotor+0x1e8>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fe7a 	bl	80005f8 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7ff f8fa 	bl	8000b04 <__aeabi_dcmpge>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d02f      	beq.n	8001976 <StartRightMotor+0xa6>
 8001916:	4b6f      	ldr	r3, [pc, #444]	; (8001ad4 <StartRightMotor+0x204>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe02 	bl	8000524 <__aeabi_i2d>
 8001920:	4604      	mov	r4, r0
 8001922:	460d      	mov	r5, r1
 8001924:	4b6c      	ldr	r3, [pc, #432]	; (8001ad8 <StartRightMotor+0x208>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fdfb 	bl	8000524 <__aeabi_i2d>
 800192e:	a364      	add	r3, pc, #400	; (adr r3, 8001ac0 <StartRightMotor+0x1f0>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fe60 	bl	80005f8 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4620      	mov	r0, r4
 800193e:	4629      	mov	r1, r5
 8001940:	f7ff f8cc 	bl	8000adc <__aeabi_dcmplt>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d015      	beq.n	8001976 <StartRightMotor+0xa6>
				RightMotorSpeed(MaxPWM_Right*0.75);
 800194a:	4b64      	ldr	r3, [pc, #400]	; (8001adc <StartRightMotor+0x20c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fde8 	bl	8000524 <__aeabi_i2d>
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b61      	ldr	r3, [pc, #388]	; (8001ae0 <StartRightMotor+0x210>)
 800195a:	f7fe fe4d 	bl	80005f8 <__aeabi_dmul>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8e1 	bl	8000b2c <__aeabi_d2uiz>
 800196a:	4603      	mov	r3, r0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fe9a 	bl	80016a8 <RightMotorSpeed>
 8001974:	e042      	b.n	80019fc <StartRightMotor+0x12c>
			}

			else if(RightEncoderCount >=Count_Mov_Forward*0.9 && RightEncoderCount < Count_Mov_Forward){
 8001976:	4b57      	ldr	r3, [pc, #348]	; (8001ad4 <StartRightMotor+0x204>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fdd2 	bl	8000524 <__aeabi_i2d>
 8001980:	4604      	mov	r4, r0
 8001982:	460d      	mov	r5, r1
 8001984:	4b54      	ldr	r3, [pc, #336]	; (8001ad8 <StartRightMotor+0x208>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fdcb 	bl	8000524 <__aeabi_i2d>
 800198e:	a34c      	add	r3, pc, #304	; (adr r3, 8001ac0 <StartRightMotor+0x1f0>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fe30 	bl	80005f8 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	f7ff f8b0 	bl	8000b04 <__aeabi_dcmpge>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01c      	beq.n	80019e4 <StartRightMotor+0x114>
 80019aa:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <StartRightMotor+0x208>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <StartRightMotor+0x204>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dd15      	ble.n	80019e4 <StartRightMotor+0x114>
				RightMotorSpeed(MaxPWM_Right*0.5);
 80019b8:	4b48      	ldr	r3, [pc, #288]	; (8001adc <StartRightMotor+0x20c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdb1 	bl	8000524 <__aeabi_i2d>
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <StartRightMotor+0x214>)
 80019c8:	f7fe fe16 	bl	80005f8 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8aa 	bl	8000b2c <__aeabi_d2uiz>
 80019d8:	4603      	mov	r3, r0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fe63 	bl	80016a8 <RightMotorSpeed>
 80019e2:	e00b      	b.n	80019fc <StartRightMotor+0x12c>
			}
			else if(RightEncoderCount >=Count_Mov_Forward){
 80019e4:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <StartRightMotor+0x208>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <StartRightMotor+0x204>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dc04      	bgt.n	80019fc <StartRightMotor+0x12c>
				RightMotorStop();
 80019f2:	f7ff feb5 	bl	8001760 <RightMotorStop>
				Flag_RightMotor_Mov_Forward=false;
 80019f6:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <StartRightMotor+0x200>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Flag_RightMotor_Mov_RotateLeft){
 80019fc:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <StartRightMotor+0x218>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d042      	beq.n	8001a8a <StartRightMotor+0x1ba>
			if(RightEncoderCount >=Count_Mov_Forward*0.8 && RightEncoderCount < Count_Mov_Forward){
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <StartRightMotor+0x204>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd8b 	bl	8000524 <__aeabi_i2d>
 8001a0e:	4604      	mov	r4, r0
 8001a10:	460d      	mov	r5, r1
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <StartRightMotor+0x208>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd84 	bl	8000524 <__aeabi_i2d>
 8001a1c:	a326      	add	r3, pc, #152	; (adr r3, 8001ab8 <StartRightMotor+0x1e8>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fde9 	bl	80005f8 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	f7ff f869 	bl	8000b04 <__aeabi_dcmpge>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01c      	beq.n	8001a72 <StartRightMotor+0x1a2>
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <StartRightMotor+0x208>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <StartRightMotor+0x204>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dd15      	ble.n	8001a72 <StartRightMotor+0x1a2>
				RightMotorSpeed(MaxPWM_Right*0.7);
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <StartRightMotor+0x20c>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd6a 	bl	8000524 <__aeabi_i2d>
 8001a50:	a31d      	add	r3, pc, #116	; (adr r3, 8001ac8 <StartRightMotor+0x1f8>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fdcf 	bl	80005f8 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff f863 	bl	8000b2c <__aeabi_d2uiz>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fe1c 	bl	80016a8 <RightMotorSpeed>
 8001a70:	e00b      	b.n	8001a8a <StartRightMotor+0x1ba>
			}
			else if(RightEncoderCount >= Count_Mov_RotateRight){
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <StartRightMotor+0x21c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <StartRightMotor+0x204>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dc04      	bgt.n	8001a8a <StartRightMotor+0x1ba>
				RightMotorStop();
 8001a80:	f7ff fe6e 	bl	8001760 <RightMotorStop>
				Flag_RightMotor_Mov_RotateLeft=false;
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <StartRightMotor+0x218>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Flag_RightMotor_Mov_Backward){
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <StartRightMotor+0x220>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <StartRightMotor+0x1da>
			if(RightEncoderCount>=Count_Mov_Backward){
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <StartRightMotor+0x224>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <StartRightMotor+0x204>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dc04      	bgt.n	8001aaa <StartRightMotor+0x1da>
				RightMotorStop();
 8001aa0:	f7ff fe5e 	bl	8001760 <RightMotorStop>
				Flag_RightMotor_Mov_Backward = false;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <StartRightMotor+0x220>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
		}




		osDelay(1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f003 fc3c 	bl	8005328 <osDelay>
		if(Flag_RightMotor_Mov_Forward){
 8001ab0:	e712      	b.n	80018d8 <StartRightMotor+0x8>
 8001ab2:	bf00      	nop
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	9999999a 	.word	0x9999999a
 8001abc:	3fe99999 	.word	0x3fe99999
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	3feccccc 	.word	0x3feccccc
 8001ac8:	66666666 	.word	0x66666666
 8001acc:	3fe66666 	.word	0x3fe66666
 8001ad0:	200001d0 	.word	0x200001d0
 8001ad4:	200001cc 	.word	0x200001cc
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	3fe80000 	.word	0x3fe80000
 8001ae4:	3fe00000 	.word	0x3fe00000
 8001ae8:	200001d6 	.word	0x200001d6
 8001aec:	20000002 	.word	0x20000002
 8001af0:	200001d2 	.word	0x200001d2
 8001af4:	20000001 	.word	0x20000001

08001af8 <StartLeftMotor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLeftMotor */
void StartLeftMotor(void *argument)
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLeftMotor */
	/* Infinite loop */
	for(;;)
	{
		if(Flag_LeftMotor_Mov_Forward){
 8001b00:	4b7d      	ldr	r3, [pc, #500]	; (8001cf8 <StartLeftMotor+0x200>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 808d 	beq.w	8001c24 <StartLeftMotor+0x12c>

			if(LeftEncoderCount >= Count_Mov_Forward*0.8 && LeftEncoderCount < Count_Mov_Forward*0.9){
 8001b0a:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <StartLeftMotor+0x204>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd08 	bl	8000524 <__aeabi_i2d>
 8001b14:	4604      	mov	r4, r0
 8001b16:	460d      	mov	r5, r1
 8001b18:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <StartLeftMotor+0x208>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd01 	bl	8000524 <__aeabi_i2d>
 8001b22:	a36f      	add	r3, pc, #444	; (adr r3, 8001ce0 <StartLeftMotor+0x1e8>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fd66 	bl	80005f8 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe ffe6 	bl	8000b04 <__aeabi_dcmpge>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d02f      	beq.n	8001b9e <StartLeftMotor+0xa6>
 8001b3e:	4b6f      	ldr	r3, [pc, #444]	; (8001cfc <StartLeftMotor+0x204>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fcee 	bl	8000524 <__aeabi_i2d>
 8001b48:	4604      	mov	r4, r0
 8001b4a:	460d      	mov	r5, r1
 8001b4c:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <StartLeftMotor+0x208>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fce7 	bl	8000524 <__aeabi_i2d>
 8001b56:	a364      	add	r3, pc, #400	; (adr r3, 8001ce8 <StartLeftMotor+0x1f0>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4620      	mov	r0, r4
 8001b66:	4629      	mov	r1, r5
 8001b68:	f7fe ffb8 	bl	8000adc <__aeabi_dcmplt>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d015      	beq.n	8001b9e <StartLeftMotor+0xa6>
				LeftMotorSpeed(MaxPWM_Left*0.75);
 8001b72:	4b64      	ldr	r3, [pc, #400]	; (8001d04 <StartLeftMotor+0x20c>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fcd4 	bl	8000524 <__aeabi_i2d>
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b61      	ldr	r3, [pc, #388]	; (8001d08 <StartLeftMotor+0x210>)
 8001b82:	f7fe fd39 	bl	80005f8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7fe ffcd 	bl	8000b2c <__aeabi_d2uiz>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fda6 	bl	80016e8 <LeftMotorSpeed>
 8001b9c:	e042      	b.n	8001c24 <StartLeftMotor+0x12c>
			}

			else if(LeftEncoderCount >= Count_Mov_Forward*0.9 && LeftEncoderCount < Count_Mov_Forward){
 8001b9e:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <StartLeftMotor+0x204>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fcbe 	bl	8000524 <__aeabi_i2d>
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460d      	mov	r5, r1
 8001bac:	4b54      	ldr	r3, [pc, #336]	; (8001d00 <StartLeftMotor+0x208>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fcb7 	bl	8000524 <__aeabi_i2d>
 8001bb6:	a34c      	add	r3, pc, #304	; (adr r3, 8001ce8 <StartLeftMotor+0x1f0>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fd1c 	bl	80005f8 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe ff9c 	bl	8000b04 <__aeabi_dcmpge>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01c      	beq.n	8001c0c <StartLeftMotor+0x114>
 8001bd2:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <StartLeftMotor+0x208>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <StartLeftMotor+0x204>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dd15      	ble.n	8001c0c <StartLeftMotor+0x114>
				LeftMotorSpeed(MaxPWM_Left*0.5);
 8001be0:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <StartLeftMotor+0x20c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc9d 	bl	8000524 <__aeabi_i2d>
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <StartLeftMotor+0x214>)
 8001bf0:	f7fe fd02 	bl	80005f8 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7fe ff96 	bl	8000b2c <__aeabi_d2uiz>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fd6f 	bl	80016e8 <LeftMotorSpeed>
 8001c0a:	e00b      	b.n	8001c24 <StartLeftMotor+0x12c>
			}

			else if(LeftEncoderCount >= Count_Mov_Forward){
 8001c0c:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <StartLeftMotor+0x208>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <StartLeftMotor+0x204>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dc04      	bgt.n	8001c24 <StartLeftMotor+0x12c>
				LeftMotorStop();
 8001c1a:	f7ff fdcb 	bl	80017b4 <LeftMotorStop>
				Flag_LeftMotor_Mov_Forward=false;
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <StartLeftMotor+0x200>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Flag_LeftMotor_Mov_RotateRight)
 8001c24:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <StartLeftMotor+0x218>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d042      	beq.n	8001cb2 <StartLeftMotor+0x1ba>
		{
			if(LeftEncoderCount >= Count_Mov_RotateRight*0.8 && LeftEncoderCount < Count_Mov_RotateRight){
 8001c2c:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <StartLeftMotor+0x204>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc77 	bl	8000524 <__aeabi_i2d>
 8001c36:	4604      	mov	r4, r0
 8001c38:	460d      	mov	r5, r1
 8001c3a:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <StartLeftMotor+0x21c>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc70 	bl	8000524 <__aeabi_i2d>
 8001c44:	a326      	add	r3, pc, #152	; (adr r3, 8001ce0 <StartLeftMotor+0x1e8>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe fcd5 	bl	80005f8 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe ff55 	bl	8000b04 <__aeabi_dcmpge>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01c      	beq.n	8001c9a <StartLeftMotor+0x1a2>
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <StartLeftMotor+0x21c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <StartLeftMotor+0x204>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dd15      	ble.n	8001c9a <StartLeftMotor+0x1a2>
				LeftMotorSpeed(MaxPWM_Left*0.7);
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <StartLeftMotor+0x20c>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc56 	bl	8000524 <__aeabi_i2d>
 8001c78:	a31d      	add	r3, pc, #116	; (adr r3, 8001cf0 <StartLeftMotor+0x1f8>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	f7fe fcbb 	bl	80005f8 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ff4f 	bl	8000b2c <__aeabi_d2uiz>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fd28 	bl	80016e8 <LeftMotorSpeed>
 8001c98:	e00b      	b.n	8001cb2 <StartLeftMotor+0x1ba>
			}
			else if(LeftEncoderCount >= Count_Mov_RotateRight){
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <StartLeftMotor+0x21c>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <StartLeftMotor+0x204>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dc04      	bgt.n	8001cb2 <StartLeftMotor+0x1ba>
				LeftMotorStop();
 8001ca8:	f7ff fd84 	bl	80017b4 <LeftMotorStop>
				Flag_LeftMotor_Mov_RotateRight=false;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <StartLeftMotor+0x218>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Flag_LeftMotor_Mov_Backward){
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <StartLeftMotor+0x220>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <StartLeftMotor+0x1da>
			if(LeftEncoderCount >= Count_Mov_Backward){
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <StartLeftMotor+0x224>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <StartLeftMotor+0x204>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dc04      	bgt.n	8001cd2 <StartLeftMotor+0x1da>
				LeftMotorStop();
 8001cc8:	f7ff fd74 	bl	80017b4 <LeftMotorStop>
				Flag_LeftMotor_Mov_Backward = false;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <StartLeftMotor+0x220>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
			}
		}
		osDelay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f003 fb28 	bl	8005328 <osDelay>
		if(Flag_LeftMotor_Mov_Forward){
 8001cd8:	e712      	b.n	8001b00 <StartLeftMotor+0x8>
 8001cda:	bf00      	nop
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	9999999a 	.word	0x9999999a
 8001ce4:	3fe99999 	.word	0x3fe99999
 8001ce8:	cccccccd 	.word	0xcccccccd
 8001cec:	3feccccc 	.word	0x3feccccc
 8001cf0:	66666666 	.word	0x66666666
 8001cf4:	3fe66666 	.word	0x3fe66666
 8001cf8:	200001d1 	.word	0x200001d1
 8001cfc:	200001c8 	.word	0x200001c8
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000005 	.word	0x20000005
 8001d08:	3fe80000 	.word	0x3fe80000
 8001d0c:	3fe00000 	.word	0x3fe00000
 8001d10:	200001d4 	.word	0x200001d4
 8001d14:	20000002 	.word	0x20000002
 8001d18:	200001d3 	.word	0x200001d3
 8001d1c:	20000001 	.word	0x20000001

08001d20 <StartStateMachine>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateMachine */
void StartStateMachine(void *argument)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{

		// modo barata tonta
		if(Baratinha){
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <StartStateMachine+0x170>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80aa 	beq.w	8001e86 <StartStateMachine+0x166>
			switch (Barata) {
 8001d32:	4b58      	ldr	r3, [pc, #352]	; (8001e94 <StartStateMachine+0x174>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	f200 80a2 	bhi.w	8001e80 <StartStateMachine+0x160>
 8001d3c:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <StartStateMachine+0x24>)
 8001d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d42:	bf00      	nop
 8001d44:	08001d5d 	.word	0x08001d5d
 8001d48:	08001d7d 	.word	0x08001d7d
 8001d4c:	08001da1 	.word	0x08001da1
 8001d50:	08001e31 	.word	0x08001e31
 8001d54:	08001e55 	.word	0x08001e55
 8001d58:	08001e79 	.word	0x08001e79

			case AguardaBotao:

				if(!HAL_GPIO_ReadPin(Key_GPIO_Port, Key_Pin)){
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	484e      	ldr	r0, [pc, #312]	; (8001e98 <StartStateMachine+0x178>)
 8001d60:	f001 f81a 	bl	8002d98 <HAL_GPIO_ReadPin>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 808c 	bne.w	8001e84 <StartStateMachine+0x164>
					osDelay(500);
 8001d6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d70:	f003 fada 	bl	8005328 <osDelay>
					Barata = LeSensor;
 8001d74:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <StartStateMachine+0x174>)
 8001d76:	2202      	movs	r2, #2
 8001d78:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001d7a:	e083      	b.n	8001e84 <StartStateMachine+0x164>
			case Frente:

				Mov_Forward();
 8001d7c:	f7ff fd28 	bl	80017d0 <Mov_Forward>
				while(Flag_LeftMotor_Mov_Forward || Flag_RightMotor_Mov_Forward){
 8001d80:	e002      	b.n	8001d88 <StartStateMachine+0x68>
					osDelay(100);
 8001d82:	2064      	movs	r0, #100	; 0x64
 8001d84:	f003 fad0 	bl	8005328 <osDelay>
				while(Flag_LeftMotor_Mov_Forward || Flag_RightMotor_Mov_Forward){
 8001d88:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <StartStateMachine+0x17c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f8      	bne.n	8001d82 <StartStateMachine+0x62>
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <StartStateMachine+0x180>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f4      	bne.n	8001d82 <StartStateMachine+0x62>
				}
				Barata = LeSensor;
 8001d98:	4b3e      	ldr	r3, [pc, #248]	; (8001e94 <StartStateMachine+0x174>)
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	701a      	strb	r2, [r3, #0]

				break;
 8001d9e:	e072      	b.n	8001e86 <StartStateMachine+0x166>
			case LeSensor:

				LerSensores();
 8001da0:	f7ff fbbc 	bl	800151c <LerSensores>
				Print_Distance();
 8001da4:	f7ff fb64 	bl	8001470 <Print_Distance>

				if(Walle.Sensor_Esquerda < 10 || Walle.Sensor_Direita < 10 || Walle.Sensor_Frente < 10){
 8001da8:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <StartStateMachine+0x184>)
 8001daa:	88db      	ldrh	r3, [r3, #6]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d907      	bls.n	8001dc0 <StartStateMachine+0xa0>
 8001db0:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <StartStateMachine+0x184>)
 8001db2:	891b      	ldrh	r3, [r3, #8]
 8001db4:	2b09      	cmp	r3, #9
 8001db6:	d903      	bls.n	8001dc0 <StartStateMachine+0xa0>
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <StartStateMachine+0x184>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d81b      	bhi.n	8001df8 <StartStateMachine+0xd8>
					Mov_Backward();
 8001dc0:	f7ff fd24 	bl	800180c <Mov_Backward>
					while(Flag_LeftMotor_Mov_Backward || Flag_RightMotor_Mov_Backward){
 8001dc4:	e002      	b.n	8001dcc <StartStateMachine+0xac>
						osDelay(10);
 8001dc6:	200a      	movs	r0, #10
 8001dc8:	f003 faae 	bl	8005328 <osDelay>
					while(Flag_LeftMotor_Mov_Backward || Flag_RightMotor_Mov_Backward){
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <StartStateMachine+0x188>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f8      	bne.n	8001dc6 <StartStateMachine+0xa6>
 8001dd4:	4b35      	ldr	r3, [pc, #212]	; (8001eac <StartStateMachine+0x18c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f4      	bne.n	8001dc6 <StartStateMachine+0xa6>
					}
					Mov_RotateRight();
 8001ddc:	f7ff fd34 	bl	8001848 <Mov_RotateRight>
					while(Flag_LeftMotor_Mov_RotateRight || Flag_RightMotor_Mov_RotateRight){
 8001de0:	e002      	b.n	8001de8 <StartStateMachine+0xc8>
						osDelay(100);
 8001de2:	2064      	movs	r0, #100	; 0x64
 8001de4:	f003 faa0 	bl	8005328 <osDelay>
					while(Flag_LeftMotor_Mov_RotateRight || Flag_RightMotor_Mov_RotateRight){
 8001de8:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <StartStateMachine+0x190>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f8      	bne.n	8001de2 <StartStateMachine+0xc2>
 8001df0:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <StartStateMachine+0x194>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f4      	bne.n	8001de2 <StartStateMachine+0xc2>
					}
				}

				if(Walle.Sensor_Frente > 20){
 8001df8:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <StartStateMachine+0x184>)
 8001dfa:	889b      	ldrh	r3, [r3, #4]
 8001dfc:	2b14      	cmp	r3, #20
 8001dfe:	d903      	bls.n	8001e08 <StartStateMachine+0xe8>
					Barata = Frente;
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <StartStateMachine+0x174>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
				}
				else{
					Barata = AguardaBotao;
				}

				break;
 8001e06:	e03e      	b.n	8001e86 <StartStateMachine+0x166>
				else if(Walle.Sensor_Direita > 20){
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <StartStateMachine+0x184>)
 8001e0a:	891b      	ldrh	r3, [r3, #8]
 8001e0c:	2b14      	cmp	r3, #20
 8001e0e:	d903      	bls.n	8001e18 <StartStateMachine+0xf8>
					Barata = ViraDireita;
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <StartStateMachine+0x174>)
 8001e12:	2203      	movs	r2, #3
 8001e14:	701a      	strb	r2, [r3, #0]
				break;
 8001e16:	e036      	b.n	8001e86 <StartStateMachine+0x166>
				else if(Walle.Sensor_Esquerda > 20){
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <StartStateMachine+0x184>)
 8001e1a:	88db      	ldrh	r3, [r3, #6]
 8001e1c:	2b14      	cmp	r3, #20
 8001e1e:	d903      	bls.n	8001e28 <StartStateMachine+0x108>
					Barata = ViraEsquerda;
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <StartStateMachine+0x174>)
 8001e22:	2204      	movs	r2, #4
 8001e24:	701a      	strb	r2, [r3, #0]
				break;
 8001e26:	e02e      	b.n	8001e86 <StartStateMachine+0x166>
					Barata = AguardaBotao;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <StartStateMachine+0x174>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
				break;
 8001e2e:	e02a      	b.n	8001e86 <StartStateMachine+0x166>

			case ViraDireita:

				Mov_RotateRight();
 8001e30:	f7ff fd0a 	bl	8001848 <Mov_RotateRight>
				while(Flag_LeftMotor_Mov_RotateRight || Flag_RightMotor_Mov_RotateRight){
 8001e34:	e002      	b.n	8001e3c <StartStateMachine+0x11c>
					osDelay(100);
 8001e36:	2064      	movs	r0, #100	; 0x64
 8001e38:	f003 fa76 	bl	8005328 <osDelay>
				while(Flag_LeftMotor_Mov_RotateRight || Flag_RightMotor_Mov_RotateRight){
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <StartStateMachine+0x190>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f8      	bne.n	8001e36 <StartStateMachine+0x116>
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <StartStateMachine+0x194>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f4      	bne.n	8001e36 <StartStateMachine+0x116>
				}
				Barata = LeSensor;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <StartStateMachine+0x174>)
 8001e4e:	2202      	movs	r2, #2
 8001e50:	701a      	strb	r2, [r3, #0]


				break;
 8001e52:	e018      	b.n	8001e86 <StartStateMachine+0x166>
			case ViraEsquerda:

				Mov_RotateRight();
 8001e54:	f7ff fcf8 	bl	8001848 <Mov_RotateRight>
				while(Flag_LeftMotor_Mov_RotateRight || Flag_RightMotor_Mov_RotateRight){
 8001e58:	e002      	b.n	8001e60 <StartStateMachine+0x140>
					osDelay(100);
 8001e5a:	2064      	movs	r0, #100	; 0x64
 8001e5c:	f003 fa64 	bl	8005328 <osDelay>
				while(Flag_LeftMotor_Mov_RotateRight || Flag_RightMotor_Mov_RotateRight){
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <StartStateMachine+0x190>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f8      	bne.n	8001e5a <StartStateMachine+0x13a>
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <StartStateMachine+0x194>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f4      	bne.n	8001e5a <StartStateMachine+0x13a>
				}
				Barata = LeSensor;
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <StartStateMachine+0x174>)
 8001e72:	2202      	movs	r2, #2
 8001e74:	701a      	strb	r2, [r3, #0]

				break;
 8001e76:	e006      	b.n	8001e86 <StartStateMachine+0x166>
			case Achou:

				Barata = AguardaBotao;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <StartStateMachine+0x174>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]

				break;
 8001e7e:	e002      	b.n	8001e86 <StartStateMachine+0x166>
			default:
				break;
 8001e80:	bf00      	nop
 8001e82:	e000      	b.n	8001e86 <StartStateMachine+0x166>
				break;
 8001e84:	bf00      	nop
		// modo BlindSearch
		else{

		}

		osDelay(1);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f003 fa4e 	bl	8005328 <osDelay>
		if(Baratinha){
 8001e8c:	e74c      	b.n	8001d28 <StartStateMachine+0x8>
 8001e8e:	bf00      	nop
 8001e90:	20000003 	.word	0x20000003
 8001e94:	200001e2 	.word	0x200001e2
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	200001d1 	.word	0x200001d1
 8001ea0:	200001d0 	.word	0x200001d0
 8001ea4:	200001d8 	.word	0x200001d8
 8001ea8:	200001d3 	.word	0x200001d3
 8001eac:	200001d2 	.word	0x200001d2
 8001eb0:	200001d4 	.word	0x200001d4
 8001eb4:	200001d5 	.word	0x200001d5

08001eb8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001eca:	f000 fcbb 	bl	8002844 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40010000 	.word	0x40010000

08001edc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1){ };
 8001ee4:	e7fe      	b.n	8001ee4 <Error_Handler+0x8>
	...

08001ee8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_MspInit+0x54>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <HAL_MspInit+0x54>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_MspInit+0x54>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_MspInit+0x54>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_MspInit+0x54>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_MspInit+0x54>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	210f      	movs	r1, #15
 8001f2a:	f06f 0001 	mvn.w	r0, #1
 8001f2e:	f000 fd85 	bl	8002a3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800

08001f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a28      	ldr	r2, [pc, #160]	; (8002000 <HAL_I2C_MspInit+0xc0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d14a      	bne.n	8001ff8 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa0:	2312      	movs	r3, #18
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fac:	2304      	movs	r3, #4
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4814      	ldr	r0, [pc, #80]	; (8002008 <HAL_I2C_MspInit+0xc8>)
 8001fb8:	f000 fd6a 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fbc:	2310      	movs	r3, #16
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc0:	2312      	movs	r3, #18
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001fcc:	2309      	movs	r3, #9
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480d      	ldr	r0, [pc, #52]	; (800200c <HAL_I2C_MspInit+0xcc>)
 8001fd8:	f000 fd5a 	bl	8002a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001fe6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fea:	6413      	str	r3, [r2, #64]	; 0x40
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_I2C_MspInit+0xc4>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40005c00 	.word	0x40005c00
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400

08002010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002020:	d10e      	bne.n	8002040 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_TIM_Base_MspInit+0x64>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_TIM_Base_MspInit+0x64>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_TIM_Base_MspInit+0x64>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800203e:	e012      	b.n	8002066 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_TIM_Base_MspInit+0x68>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10d      	bne.n	8002066 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_TIM_Base_MspInit+0x64>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_TIM_Base_MspInit+0x64>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_TIM_Base_MspInit+0x64>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40000400 	.word	0x40000400

0800207c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10d      	bne.n	80020aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_TIM_PWM_MspInit+0x40>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_TIM_PWM_MspInit+0x40>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_TIM_PWM_MspInit+0x40>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d11e      	bne.n	8002120 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a21      	ldr	r2, [pc, #132]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80020fe:	2320      	movs	r3, #32
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210e:	2301      	movs	r3, #1
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4816      	ldr	r0, [pc, #88]	; (8002174 <HAL_TIM_MspPostInit+0xb4>)
 800211a:	f000 fcb9 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800211e:	e023      	b.n	8002168 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_TIM_MspPostInit+0xb8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d11e      	bne.n	8002168 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 8002146:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800214a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002158:	2302      	movs	r3, #2
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <HAL_TIM_MspPostInit+0xbc>)
 8002164:	f000 fc94 	bl	8002a90 <HAL_GPIO_Init>
}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40000800 	.word	0x40000800
 800217c:	40020400 	.word	0x40020400

08002180 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08c      	sub	sp, #48	; 0x30
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	4b2e      	ldr	r3, [pc, #184]	; (8002250 <HAL_InitTick+0xd0>)
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	4a2d      	ldr	r2, [pc, #180]	; (8002250 <HAL_InitTick+0xd0>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6453      	str	r3, [r2, #68]	; 0x44
 80021a0:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_InitTick+0xd0>)
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021ac:	f107 020c 	add.w	r2, r7, #12
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 feec 	bl	8003f94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021bc:	f001 fed6 	bl	8003f6c <HAL_RCC_GetPCLK2Freq>
 80021c0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_InitTick+0xd4>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9b      	lsrs	r3, r3, #18
 80021cc:	3b01      	subs	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_InitTick+0xd8>)
 80021d2:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_InitTick+0xdc>)
 80021d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_InitTick+0xd8>)
 80021d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_InitTick+0xd8>)
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_InitTick+0xd8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_InitTick+0xd8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_InitTick+0xd8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80021f6:	4818      	ldr	r0, [pc, #96]	; (8002258 <HAL_InitTick+0xd8>)
 80021f8:	f001 fefe 	bl	8003ff8 <HAL_TIM_Base_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11b      	bne.n	8002242 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800220a:	4813      	ldr	r0, [pc, #76]	; (8002258 <HAL_InitTick+0xd8>)
 800220c:	f001 ff9e 	bl	800414c <HAL_TIM_Base_Start_IT>
 8002210:	4603      	mov	r3, r0
 8002212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800221a:	2b00      	cmp	r3, #0
 800221c:	d111      	bne.n	8002242 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800221e:	2019      	movs	r0, #25
 8002220:	f000 fc28 	bl	8002a74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	d808      	bhi.n	800223c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800222a:	2200      	movs	r2, #0
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	2019      	movs	r0, #25
 8002230:	f000 fc04 	bl	8002a3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_InitTick+0xe0>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e002      	b.n	8002242 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002246:	4618      	mov	r0, r3
 8002248:	3730      	adds	r7, #48	; 0x30
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	431bde83 	.word	0x431bde83
 8002258:	200001e4 	.word	0x200001e4
 800225c:	40010000 	.word	0x40010000
 8002260:	20000014 	.word	0x20000014

08002264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <NMI_Handler+0x4>

0800226a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <HardFault_Handler+0x4>

08002270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <MemManage_Handler+0x4>

08002276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <BusFault_Handler+0x4>

0800227c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <UsageFault_Handler+0x4>

08002282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Direito_Pin);
 8002294:	2008      	movs	r0, #8
 8002296:	f000 fdb1 	bl	8002dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}

0800229e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Esquerdo_Pin);
 80022a2:	2010      	movs	r0, #16
 80022a4:	f000 fdaa 	bl	8002dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}

080022ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80022b2:	f002 f911 	bl	80044d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200001e4 	.word	0x200001e4

080022c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <_sbrk+0x5c>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <_sbrk+0x60>)
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <_sbrk+0x64>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <_sbrk+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d207      	bcs.n	8002300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f0:	f005 fd54 	bl	8007d9c <__errno>
 80022f4:	4603      	mov	r3, r0
 80022f6:	220c      	movs	r2, #12
 80022f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	e009      	b.n	8002314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <_sbrk+0x64>)
 8002310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20010000 	.word	0x20010000
 8002320:	00000400 	.word	0x00000400
 8002324:	2000022c 	.word	0x2000022c
 8002328:	20005170 	.word	0x20005170

0800232c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <SystemInit+0x20>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <SystemInit+0x20>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002388 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002354:	480d      	ldr	r0, [pc, #52]	; (800238c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002356:	490e      	ldr	r1, [pc, #56]	; (8002390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002358:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800235c:	e002      	b.n	8002364 <LoopCopyDataInit>

0800235e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002362:	3304      	adds	r3, #4

08002364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002368:	d3f9      	bcc.n	800235e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800236c:	4c0b      	ldr	r4, [pc, #44]	; (800239c <LoopFillZerobss+0x26>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002370:	e001      	b.n	8002376 <LoopFillZerobss>

08002372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002374:	3204      	adds	r2, #4

08002376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002378:	d3fb      	bcc.n	8002372 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800237a:	f7ff ffd7 	bl	800232c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237e:	f005 fd13 	bl	8007da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002382:	f7fe fd71 	bl	8000e68 <main>
  bx  lr    
 8002386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002388:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002390:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002394:	08009524 	.word	0x08009524
  ldr r2, =_sbss
 8002398:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800239c:	2000516c 	.word	0x2000516c

080023a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a0:	e7fe      	b.n	80023a0 <ADC_IRQHandler>

080023a2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af04      	add	r7, sp, #16
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	2301      	movs	r3, #1
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2301      	movs	r3, #1
 80023ca:	2200      	movs	r2, #0
 80023cc:	2178      	movs	r1, #120	; 0x78
 80023ce:	4803      	ldr	r0, [pc, #12]	; (80023dc <ssd1306_WriteCommand+0x2c>)
 80023d0:	f000 fe70 	bl	80030b4 <HAL_I2C_Mem_Write>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000008c 	.word	0x2000008c

080023e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af04      	add	r7, sp, #16
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f04f 32ff 	mov.w	r2, #4294967295
 80023f2:	9202      	str	r2, [sp, #8]
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2301      	movs	r3, #1
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	2178      	movs	r1, #120	; 0x78
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <ssd1306_WriteData+0x30>)
 8002402:	f000 fe57 	bl	80030b4 <HAL_I2C_Mem_Write>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000008c 	.word	0x2000008c

08002414 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002418:	f7ff ffc3 	bl	80023a2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800241c:	2064      	movs	r0, #100	; 0x64
 800241e:	f000 fa31 	bl	8002884 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002422:	2000      	movs	r0, #0
 8002424:	f000 f9ce 	bl	80027c4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002428:	2020      	movs	r0, #32
 800242a:	f7ff ffc1 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800242e:	2000      	movs	r0, #0
 8002430:	f7ff ffbe 	bl	80023b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002434:	20b0      	movs	r0, #176	; 0xb0
 8002436:	f7ff ffbb 	bl	80023b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800243a:	20c8      	movs	r0, #200	; 0xc8
 800243c:	f7ff ffb8 	bl	80023b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff ffb5 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002446:	2010      	movs	r0, #16
 8002448:	f7ff ffb2 	bl	80023b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800244c:	2040      	movs	r0, #64	; 0x40
 800244e:	f7ff ffaf 	bl	80023b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002452:	20ff      	movs	r0, #255	; 0xff
 8002454:	f000 f9a2 	bl	800279c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002458:	20a1      	movs	r0, #161	; 0xa1
 800245a:	f7ff ffa9 	bl	80023b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800245e:	20a6      	movs	r0, #166	; 0xa6
 8002460:	f7ff ffa6 	bl	80023b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002464:	20a8      	movs	r0, #168	; 0xa8
 8002466:	f7ff ffa3 	bl	80023b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800246a:	203f      	movs	r0, #63	; 0x3f
 800246c:	f7ff ffa0 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002470:	20a4      	movs	r0, #164	; 0xa4
 8002472:	f7ff ff9d 	bl	80023b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002476:	20d3      	movs	r0, #211	; 0xd3
 8002478:	f7ff ff9a 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800247c:	2000      	movs	r0, #0
 800247e:	f7ff ff97 	bl	80023b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002482:	20d5      	movs	r0, #213	; 0xd5
 8002484:	f7ff ff94 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002488:	20f0      	movs	r0, #240	; 0xf0
 800248a:	f7ff ff91 	bl	80023b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800248e:	20d9      	movs	r0, #217	; 0xd9
 8002490:	f7ff ff8e 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002494:	2022      	movs	r0, #34	; 0x22
 8002496:	f7ff ff8b 	bl	80023b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800249a:	20da      	movs	r0, #218	; 0xda
 800249c:	f7ff ff88 	bl	80023b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80024a0:	2012      	movs	r0, #18
 80024a2:	f7ff ff85 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80024a6:	20db      	movs	r0, #219	; 0xdb
 80024a8:	f7ff ff82 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80024ac:	2020      	movs	r0, #32
 80024ae:	f7ff ff7f 	bl	80023b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80024b2:	208d      	movs	r0, #141	; 0x8d
 80024b4:	f7ff ff7c 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80024b8:	2014      	movs	r0, #20
 80024ba:	f7ff ff79 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80024be:	2001      	movs	r0, #1
 80024c0:	f000 f980 	bl	80027c4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f000 f80f 	bl	80024e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80024ca:	f000 f825 	bl	8002518 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <ssd1306_Init+0xd0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <ssd1306_Init+0xd0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80024da:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <ssd1306_Init+0xd0>)
 80024dc:	2201      	movs	r2, #1
 80024de:	711a      	strb	r2, [r3, #4]
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000630 	.word	0x20000630

080024e8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <ssd1306_Fill+0x14>
 80024f8:	2300      	movs	r3, #0
 80024fa:	e000      	b.n	80024fe <ssd1306_Fill+0x16>
 80024fc:	23ff      	movs	r3, #255	; 0xff
 80024fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002502:	4619      	mov	r1, r3
 8002504:	4803      	ldr	r0, [pc, #12]	; (8002514 <ssd1306_Fill+0x2c>)
 8002506:	f005 fbeb 	bl	8007ce0 <memset>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000230 	.word	0x20000230

08002518 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800251e:	2300      	movs	r3, #0
 8002520:	71fb      	strb	r3, [r7, #7]
 8002522:	e016      	b.n	8002552 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	3b50      	subs	r3, #80	; 0x50
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff40 	bl	80023b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002530:	2000      	movs	r0, #0
 8002532:	f7ff ff3d 	bl	80023b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002536:	2010      	movs	r0, #16
 8002538:	f7ff ff3a 	bl	80023b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	01db      	lsls	r3, r3, #7
 8002540:	4a08      	ldr	r2, [pc, #32]	; (8002564 <ssd1306_UpdateScreen+0x4c>)
 8002542:	4413      	add	r3, r2
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff4a 	bl	80023e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	3301      	adds	r3, #1
 8002550:	71fb      	strb	r3, [r7, #7]
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2b07      	cmp	r3, #7
 8002556:	d9e5      	bls.n	8002524 <ssd1306_UpdateScreen+0xc>
    }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000230 	.word	0x20000230

08002568 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
 8002572:	460b      	mov	r3, r1
 8002574:	71bb      	strb	r3, [r7, #6]
 8002576:	4613      	mov	r3, r2
 8002578:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db3d      	blt.n	80025fe <ssd1306_DrawPixel+0x96>
 8002582:	79bb      	ldrb	r3, [r7, #6]
 8002584:	2b3f      	cmp	r3, #63	; 0x3f
 8002586:	d83a      	bhi.n	80025fe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002588:	797b      	ldrb	r3, [r7, #5]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d11a      	bne.n	80025c4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800258e:	79fa      	ldrb	r2, [r7, #7]
 8002590:	79bb      	ldrb	r3, [r7, #6]
 8002592:	08db      	lsrs	r3, r3, #3
 8002594:	b2d8      	uxtb	r0, r3
 8002596:	4603      	mov	r3, r0
 8002598:	01db      	lsls	r3, r3, #7
 800259a:	4413      	add	r3, r2
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <ssd1306_DrawPixel+0xa4>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	b25a      	sxtb	r2, r3
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	2101      	movs	r1, #1
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	4313      	orrs	r3, r2
 80025b2:	b259      	sxtb	r1, r3
 80025b4:	79fa      	ldrb	r2, [r7, #7]
 80025b6:	4603      	mov	r3, r0
 80025b8:	01db      	lsls	r3, r3, #7
 80025ba:	4413      	add	r3, r2
 80025bc:	b2c9      	uxtb	r1, r1
 80025be:	4a13      	ldr	r2, [pc, #76]	; (800260c <ssd1306_DrawPixel+0xa4>)
 80025c0:	54d1      	strb	r1, [r2, r3]
 80025c2:	e01d      	b.n	8002600 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025c4:	79fa      	ldrb	r2, [r7, #7]
 80025c6:	79bb      	ldrb	r3, [r7, #6]
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	b2d8      	uxtb	r0, r3
 80025cc:	4603      	mov	r3, r0
 80025ce:	01db      	lsls	r3, r3, #7
 80025d0:	4413      	add	r3, r2
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <ssd1306_DrawPixel+0xa4>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	b25a      	sxtb	r2, r3
 80025d8:	79bb      	ldrb	r3, [r7, #6]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	4013      	ands	r3, r2
 80025ec:	b259      	sxtb	r1, r3
 80025ee:	79fa      	ldrb	r2, [r7, #7]
 80025f0:	4603      	mov	r3, r0
 80025f2:	01db      	lsls	r3, r3, #7
 80025f4:	4413      	add	r3, r2
 80025f6:	b2c9      	uxtb	r1, r1
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <ssd1306_DrawPixel+0xa4>)
 80025fa:	54d1      	strb	r1, [r2, r3]
 80025fc:	e000      	b.n	8002600 <ssd1306_DrawPixel+0x98>
        return;
 80025fe:	bf00      	nop
    }
}
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000230 	.word	0x20000230

08002610 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	4604      	mov	r4, r0
 8002618:	1d38      	adds	r0, r7, #4
 800261a:	e880 0006 	stmia.w	r0, {r1, r2}
 800261e:	461a      	mov	r2, r3
 8002620:	4623      	mov	r3, r4
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	4613      	mov	r3, r2
 8002626:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b1f      	cmp	r3, #31
 800262c:	d902      	bls.n	8002634 <ssd1306_WriteChar+0x24>
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b7e      	cmp	r3, #126	; 0x7e
 8002632:	d901      	bls.n	8002638 <ssd1306_WriteChar+0x28>
        return 0;
 8002634:	2300      	movs	r3, #0
 8002636:	e06d      	b.n	8002714 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002638:	4b38      	ldr	r3, [pc, #224]	; (800271c <ssd1306_WriteChar+0x10c>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	793b      	ldrb	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	2b80      	cmp	r3, #128	; 0x80
 8002644:	dc06      	bgt.n	8002654 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002646:	4b35      	ldr	r3, [pc, #212]	; (800271c <ssd1306_WriteChar+0x10c>)
 8002648:	885b      	ldrh	r3, [r3, #2]
 800264a:	461a      	mov	r2, r3
 800264c:	797b      	ldrb	r3, [r7, #5]
 800264e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	dd01      	ble.n	8002658 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002654:	2300      	movs	r3, #0
 8002656:	e05d      	b.n	8002714 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	e04c      	b.n	80026f8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	3b20      	subs	r3, #32
 8002664:	7979      	ldrb	r1, [r7, #5]
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4619      	mov	r1, r3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	440b      	add	r3, r1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	e034      	b.n	80026e8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d012      	beq.n	80026b4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800268e:	4b23      	ldr	r3, [pc, #140]	; (800271c <ssd1306_WriteChar+0x10c>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4413      	add	r3, r2
 800269a:	b2d8      	uxtb	r0, r3
 800269c:	4b1f      	ldr	r3, [pc, #124]	; (800271c <ssd1306_WriteChar+0x10c>)
 800269e:	885b      	ldrh	r3, [r3, #2]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	7bba      	ldrb	r2, [r7, #14]
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7ff ff5b 	bl	8002568 <ssd1306_DrawPixel>
 80026b2:	e016      	b.n	80026e2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <ssd1306_WriteChar+0x10c>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	4413      	add	r3, r2
 80026c0:	b2d8      	uxtb	r0, r3
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <ssd1306_WriteChar+0x10c>)
 80026c4:	885b      	ldrh	r3, [r3, #2]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	b2d9      	uxtb	r1, r3
 80026d0:	7bbb      	ldrb	r3, [r7, #14]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf0c      	ite	eq
 80026d6:	2301      	moveq	r3, #1
 80026d8:	2300      	movne	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	f7ff ff43 	bl	8002568 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	793b      	ldrb	r3, [r7, #4]
 80026ea:	461a      	mov	r2, r3
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d3c5      	bcc.n	800267e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	797b      	ldrb	r3, [r7, #5]
 80026fa:	461a      	mov	r2, r3
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	4293      	cmp	r3, r2
 8002700:	d3ad      	bcc.n	800265e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <ssd1306_WriteChar+0x10c>)
 8002704:	881a      	ldrh	r2, [r3, #0]
 8002706:	793b      	ldrb	r3, [r7, #4]
 8002708:	b29b      	uxth	r3, r3
 800270a:	4413      	add	r3, r2
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <ssd1306_WriteChar+0x10c>)
 8002710:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3724      	adds	r7, #36	; 0x24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	20000630 	.word	0x20000630

08002720 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	1d38      	adds	r0, r7, #4
 800272a:	e880 0006 	stmia.w	r0, {r1, r2}
 800272e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002730:	e012      	b.n	8002758 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	7818      	ldrb	r0, [r3, #0]
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	1d3a      	adds	r2, r7, #4
 800273a:	ca06      	ldmia	r2, {r1, r2}
 800273c:	f7ff ff68 	bl	8002610 <ssd1306_WriteChar>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d002      	beq.n	8002752 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	e008      	b.n	8002764 <ssd1306_WriteString+0x44>
        }
        str++;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3301      	adds	r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e8      	bne.n	8002732 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	781b      	ldrb	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	460a      	mov	r2, r1
 8002776:	71fb      	strb	r3, [r7, #7]
 8002778:	4613      	mov	r3, r2
 800277a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <ssd1306_SetCursor+0x2c>)
 8002782:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002784:	79bb      	ldrb	r3, [r7, #6]
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <ssd1306_SetCursor+0x2c>)
 800278a:	805a      	strh	r2, [r3, #2]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000630 	.word	0x20000630

0800279c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80027a6:	2381      	movs	r3, #129	; 0x81
 80027a8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fdff 	bl	80023b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fdfb 	bl	80023b0 <ssd1306_WriteCommand>
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80027d4:	23af      	movs	r3, #175	; 0xaf
 80027d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <ssd1306_SetDisplayOn+0x38>)
 80027da:	2201      	movs	r2, #1
 80027dc:	715a      	strb	r2, [r3, #5]
 80027de:	e004      	b.n	80027ea <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80027e0:	23ae      	movs	r3, #174	; 0xae
 80027e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <ssd1306_SetDisplayOn+0x38>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fddf 	bl	80023b0 <ssd1306_WriteCommand>
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000630 	.word	0x20000630

08002800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <HAL_Init+0x40>)
 800280a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_Init+0x40>)
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a07      	ldr	r2, [pc, #28]	; (8002840 <HAL_Init+0x40>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f000 f8fc 	bl	8002a26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282e:	2005      	movs	r0, #5
 8002830:	f7ff fca6 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002834:	f7ff fb58 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023c00 	.word	0x40023c00

08002844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_IncTick+0x20>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_IncTick+0x24>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4413      	add	r3, r2
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_IncTick+0x24>)
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000018 	.word	0x20000018
 8002868:	20000638 	.word	0x20000638

0800286c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return uwTick;
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_GetTick+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000638 	.word	0x20000638

08002884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff ffee 	bl	800286c <HAL_GetTick>
 8002890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d005      	beq.n	80028aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_Delay+0x44>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028aa:	bf00      	nop
 80028ac:	f7ff ffde 	bl	800286c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d8f7      	bhi.n	80028ac <HAL_Delay+0x28>
  {
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000018 	.word	0x20000018

080028cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <__NVIC_EnableIRQ+0x38>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
         );
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ff4c 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a4e:	f7ff ff61 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	6978      	ldr	r0, [r7, #20]
 8002a5a:	f7ff ffb1 	bl	80029c0 <NVIC_EncodePriority>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff80 	bl	800296c <__NVIC_SetPriority>
}
 8002a6c:	bf00      	nop
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff54 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e159      	b.n	8002d60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f040 8148 	bne.w	8002d5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d005      	beq.n	8002ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d130      	bne.n	8002b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 0201 	and.w	r2, r3, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d017      	beq.n	8002b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d123      	bne.n	8002bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a2 	beq.w	8002d5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <HAL_GPIO_Init+0x2e8>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a56      	ldr	r2, [pc, #344]	; (8002d78 <HAL_GPIO_Init+0x2e8>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <HAL_GPIO_Init+0x2e8>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c32:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <HAL_GPIO_Init+0x2ec>)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a49      	ldr	r2, [pc, #292]	; (8002d80 <HAL_GPIO_Init+0x2f0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x202>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <HAL_GPIO_Init+0x2f4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x1fe>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a47      	ldr	r2, [pc, #284]	; (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x1fa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a46      	ldr	r2, [pc, #280]	; (8002d8c <HAL_GPIO_Init+0x2fc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x1f6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a45      	ldr	r2, [pc, #276]	; (8002d90 <HAL_GPIO_Init+0x300>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x1f2>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	e008      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c82:	2307      	movs	r3, #7
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c86:	2303      	movs	r3, #3
 8002c88:	e004      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c92:	2300      	movs	r3, #0
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f002 0203 	and.w	r2, r2, #3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_GPIO_Init+0x2ec>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb2:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cdc:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d00:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d2a:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d54:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	f67f aea2 	bls.w	8002aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40020000 	.word	0x40020000
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40013c00 	.word	0x40013c00

08002d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	887b      	ldrh	r3, [r7, #2]
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	e001      	b.n	8002dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002de4:	e003      	b.n	8002dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002de6:	887b      	ldrh	r3, [r7, #2]
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fd2c 	bl	8001878 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e12b      	b.n	8003096 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff f874 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e90:	f001 f858 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8002e94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4a81      	ldr	r2, [pc, #516]	; (80030a0 <HAL_I2C_Init+0x274>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d807      	bhi.n	8002eb0 <HAL_I2C_Init+0x84>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a80      	ldr	r2, [pc, #512]	; (80030a4 <HAL_I2C_Init+0x278>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	bf94      	ite	ls
 8002ea8:	2301      	movls	r3, #1
 8002eaa:	2300      	movhi	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e006      	b.n	8002ebe <HAL_I2C_Init+0x92>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4a7d      	ldr	r2, [pc, #500]	; (80030a8 <HAL_I2C_Init+0x27c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	bf94      	ite	ls
 8002eb8:	2301      	movls	r3, #1
 8002eba:	2300      	movhi	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0e7      	b.n	8003096 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4a78      	ldr	r2, [pc, #480]	; (80030ac <HAL_I2C_Init+0x280>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0c9b      	lsrs	r3, r3, #18
 8002ed0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a6a      	ldr	r2, [pc, #424]	; (80030a0 <HAL_I2C_Init+0x274>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d802      	bhi.n	8002f00 <HAL_I2C_Init+0xd4>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3301      	adds	r3, #1
 8002efe:	e009      	b.n	8002f14 <HAL_I2C_Init+0xe8>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	4a69      	ldr	r2, [pc, #420]	; (80030b0 <HAL_I2C_Init+0x284>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	3301      	adds	r3, #1
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	495c      	ldr	r1, [pc, #368]	; (80030a0 <HAL_I2C_Init+0x274>)
 8002f30:	428b      	cmp	r3, r1
 8002f32:	d819      	bhi.n	8002f68 <HAL_I2C_Init+0x13c>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e59      	subs	r1, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f42:	1c59      	adds	r1, r3, #1
 8002f44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f48:	400b      	ands	r3, r1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_I2C_Init+0x138>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1e59      	subs	r1, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f62:	e051      	b.n	8003008 <HAL_I2C_Init+0x1dc>
 8002f64:	2304      	movs	r3, #4
 8002f66:	e04f      	b.n	8003008 <HAL_I2C_Init+0x1dc>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d111      	bne.n	8002f94 <HAL_I2C_Init+0x168>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	440b      	add	r3, r1
 8002f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	e012      	b.n	8002fba <HAL_I2C_Init+0x18e>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1e58      	subs	r0, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	0099      	lsls	r1, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_Init+0x196>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e022      	b.n	8003008 <HAL_I2C_Init+0x1dc>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_I2C_Init+0x1bc>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1e58      	subs	r0, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6859      	ldr	r1, [r3, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	440b      	add	r3, r1
 8002fd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe6:	e00f      	b.n	8003008 <HAL_I2C_Init+0x1dc>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1e58      	subs	r0, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	0099      	lsls	r1, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffe:	3301      	adds	r3, #1
 8003000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	6809      	ldr	r1, [r1, #0]
 800300c:	4313      	orrs	r3, r2
 800300e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003036:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6911      	ldr	r1, [r2, #16]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68d2      	ldr	r2, [r2, #12]
 8003042:	4311      	orrs	r1, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	430b      	orrs	r3, r1
 800304a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	000186a0 	.word	0x000186a0
 80030a4:	001e847f 	.word	0x001e847f
 80030a8:	003d08ff 	.word	0x003d08ff
 80030ac:	431bde83 	.word	0x431bde83
 80030b0:	10624dd3 	.word	0x10624dd3

080030b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	817b      	strh	r3, [r7, #10]
 80030c6:	460b      	mov	r3, r1
 80030c8:	813b      	strh	r3, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ce:	f7ff fbcd 	bl	800286c <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b20      	cmp	r3, #32
 80030de:	f040 80d9 	bne.w	8003294 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2319      	movs	r3, #25
 80030e8:	2201      	movs	r2, #1
 80030ea:	496d      	ldr	r1, [pc, #436]	; (80032a0 <HAL_I2C_Mem_Write+0x1ec>)
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f971 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0cc      	b.n	8003296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_I2C_Mem_Write+0x56>
 8003106:	2302      	movs	r3, #2
 8003108:	e0c5      	b.n	8003296 <HAL_I2C_Mem_Write+0x1e2>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d007      	beq.n	8003130 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2221      	movs	r2, #33	; 0x21
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2240      	movs	r2, #64	; 0x40
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a3a      	ldr	r2, [r7, #32]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a4d      	ldr	r2, [pc, #308]	; (80032a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003172:	88f8      	ldrh	r0, [r7, #6]
 8003174:	893a      	ldrh	r2, [r7, #8]
 8003176:	8979      	ldrh	r1, [r7, #10]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	4603      	mov	r3, r0
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f890 	bl	80032a8 <I2C_RequestMemoryWrite>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d052      	beq.n	8003234 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e081      	b.n	8003296 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f9f2 	bl	8003580 <I2C_WaitOnTXEFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d107      	bne.n	80031ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06b      	b.n	8003296 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d11b      	bne.n	8003234 <HAL_I2C_Mem_Write+0x180>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	d017      	beq.n	8003234 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1aa      	bne.n	8003192 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f9de 	bl	8003602 <I2C_WaitOnBTFFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	2b04      	cmp	r3, #4
 8003252:	d107      	bne.n	8003264 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e016      	b.n	8003296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	00100002 	.word	0x00100002
 80032a4:	ffff0000 	.word	0xffff0000

080032a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	4608      	mov	r0, r1
 80032b2:	4611      	mov	r1, r2
 80032b4:	461a      	mov	r2, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	817b      	strh	r3, [r7, #10]
 80032ba:	460b      	mov	r3, r1
 80032bc:	813b      	strh	r3, [r7, #8]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	2200      	movs	r2, #0
 80032da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f878 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f8:	d103      	bne.n	8003302 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e05f      	b.n	80033c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003306:	897b      	ldrh	r3, [r7, #10]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	6a3a      	ldr	r2, [r7, #32]
 800331a:	492d      	ldr	r1, [pc, #180]	; (80033d0 <I2C_RequestMemoryWrite+0x128>)
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f8b0 	bl	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e04c      	b.n	80033c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	6a39      	ldr	r1, [r7, #32]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f91a 	bl	8003580 <I2C_WaitOnTXEFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00d      	beq.n	800336e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	2b04      	cmp	r3, #4
 8003358:	d107      	bne.n	800336a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e02b      	b.n	80033c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003374:	893b      	ldrh	r3, [r7, #8]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	611a      	str	r2, [r3, #16]
 800337e:	e021      	b.n	80033c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003380:	893b      	ldrh	r3, [r7, #8]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	b29b      	uxth	r3, r3
 8003386:	b2da      	uxtb	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003390:	6a39      	ldr	r1, [r7, #32]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f8f4 	bl	8003580 <I2C_WaitOnTXEFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d107      	bne.n	80033b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e005      	b.n	80033c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ba:	893b      	ldrh	r3, [r7, #8]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	00010002 	.word	0x00010002

080033d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e4:	e025      	b.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d021      	beq.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7ff fa3d 	bl	800286c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d116      	bne.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e023      	b.n	800347a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d10d      	bne.n	8003458 <I2C_WaitOnFlagUntilTimeout+0x84>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	e00c      	b.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	429a      	cmp	r2, r3
 8003476:	d0b6      	beq.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003490:	e051      	b.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	d123      	bne.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f043 0204 	orr.w	r2, r3, #4
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e046      	b.n	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d021      	beq.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7ff f9bb 	bl	800286c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d116      	bne.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e020      	b.n	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10c      	bne.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4013      	ands	r3, r2
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf14      	ite	ne
 8003552:	2301      	movne	r3, #1
 8003554:	2300      	moveq	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e00b      	b.n	8003572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d18d      	bne.n	8003492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800358c:	e02d      	b.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f878 	bl	8003684 <I2C_IsAcknowledgeFailed>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e02d      	b.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d021      	beq.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7ff f961 	bl	800286c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d116      	bne.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e007      	b.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d1ca      	bne.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800360e:	e02d      	b.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f837 	bl	8003684 <I2C_IsAcknowledgeFailed>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e02d      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d021      	beq.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003628:	f7ff f920 	bl	800286c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	d302      	bcc.n	800363e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d116      	bne.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b04      	cmp	r3, #4
 8003678:	d1ca      	bne.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d11b      	bne.n	80036d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f043 0204 	orr.w	r2, r3, #4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e267      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d075      	beq.n	80037ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003702:	4b88      	ldr	r3, [pc, #544]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b04      	cmp	r3, #4
 800370c:	d00c      	beq.n	8003728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370e:	4b85      	ldr	r3, [pc, #532]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003716:	2b08      	cmp	r3, #8
 8003718:	d112      	bne.n	8003740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371a:	4b82      	ldr	r3, [pc, #520]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003726:	d10b      	bne.n	8003740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	4b7e      	ldr	r3, [pc, #504]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d05b      	beq.n	80037ec <HAL_RCC_OscConfig+0x108>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d157      	bne.n	80037ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e242      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d106      	bne.n	8003758 <HAL_RCC_OscConfig+0x74>
 800374a:	4b76      	ldr	r3, [pc, #472]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a75      	ldr	r2, [pc, #468]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e01d      	b.n	8003794 <HAL_RCC_OscConfig+0xb0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x98>
 8003762:	4b70      	ldr	r3, [pc, #448]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6f      	ldr	r2, [pc, #444]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	4b6d      	ldr	r3, [pc, #436]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a6c      	ldr	r2, [pc, #432]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e00b      	b.n	8003794 <HAL_RCC_OscConfig+0xb0>
 800377c:	4b69      	ldr	r3, [pc, #420]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a68      	ldr	r2, [pc, #416]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	4b66      	ldr	r3, [pc, #408]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a65      	ldr	r2, [pc, #404]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800378e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7ff f866 	bl	800286c <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a4:	f7ff f862 	bl	800286c <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	; 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e207      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b5b      	ldr	r3, [pc, #364]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0xc0>
 80037c2:	e014      	b.n	80037ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7ff f852 	bl	800286c <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037cc:	f7ff f84e 	bl	800286c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1f3      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037de:	4b51      	ldr	r3, [pc, #324]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0xe8>
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d063      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fa:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380e:	2b08      	cmp	r3, #8
 8003810:	d11c      	bne.n	800384c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003812:	4b44      	ldr	r3, [pc, #272]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d116      	bne.n	800384c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_RCC_OscConfig+0x152>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d001      	beq.n	8003836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e1c7      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003836:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4937      	ldr	r1, [pc, #220]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	e03a      	b.n	80038c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d020      	beq.n	8003896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003854:	4b34      	ldr	r3, [pc, #208]	; (8003928 <HAL_RCC_OscConfig+0x244>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7ff f807 	bl	800286c <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003862:	f7ff f803 	bl	800286c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e1a8      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b28      	ldr	r3, [pc, #160]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4925      	ldr	r1, [pc, #148]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]
 8003894:	e015      	b.n	80038c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <HAL_RCC_OscConfig+0x244>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe ffe6 	bl	800286c <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a4:	f7fe ffe2 	bl	800286c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e187      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b6:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d036      	beq.n	800393c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_RCC_OscConfig+0x248>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fe ffc6 	bl	800286c <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fe ffc2 	bl	800286c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e167      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f6:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80038f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x200>
 8003902:	e01b      	b.n	800393c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_OscConfig+0x248>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390a:	f7fe ffaf 	bl	800286c <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003910:	e00e      	b.n	8003930 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003912:	f7fe ffab 	bl	800286c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d907      	bls.n	8003930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e150      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
 8003924:	40023800 	.word	0x40023800
 8003928:	42470000 	.word	0x42470000
 800392c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ea      	bne.n	8003912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8097 	beq.w	8003a78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394e:	4b81      	ldr	r3, [pc, #516]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	4b7d      	ldr	r3, [pc, #500]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	4a7c      	ldr	r2, [pc, #496]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003968:	6413      	str	r3, [r2, #64]	; 0x40
 800396a:	4b7a      	ldr	r3, [pc, #488]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397a:	4b77      	ldr	r3, [pc, #476]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d118      	bne.n	80039b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003986:	4b74      	ldr	r3, [pc, #464]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a73      	ldr	r2, [pc, #460]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 800398c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003992:	f7fe ff6b 	bl	800286c <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399a:	f7fe ff67 	bl	800286c <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e10c      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ac:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d106      	bne.n	80039ce <HAL_RCC_OscConfig+0x2ea>
 80039c0:	4b64      	ldr	r3, [pc, #400]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	4a63      	ldr	r2, [pc, #396]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70
 80039cc:	e01c      	b.n	8003a08 <HAL_RCC_OscConfig+0x324>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x30c>
 80039d6:	4b5f      	ldr	r3, [pc, #380]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a5e      	ldr	r2, [pc, #376]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039dc:	f043 0304 	orr.w	r3, r3, #4
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
 80039e2:	4b5c      	ldr	r3, [pc, #368]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	4a5b      	ldr	r2, [pc, #364]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	6713      	str	r3, [r2, #112]	; 0x70
 80039ee:	e00b      	b.n	8003a08 <HAL_RCC_OscConfig+0x324>
 80039f0:	4b58      	ldr	r3, [pc, #352]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a57      	ldr	r2, [pc, #348]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
 80039fc:	4b55      	ldr	r3, [pc, #340]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	4a54      	ldr	r2, [pc, #336]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a02:	f023 0304 	bic.w	r3, r3, #4
 8003a06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d015      	beq.n	8003a3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fe ff2c 	bl	800286c <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7fe ff28 	bl	800286c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0cb      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	4b49      	ldr	r3, [pc, #292]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0ee      	beq.n	8003a18 <HAL_RCC_OscConfig+0x334>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3c:	f7fe ff16 	bl	800286c <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f7fe ff12 	bl	800286c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e0b5      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5a:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1ee      	bne.n	8003a44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6c:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	4a38      	ldr	r2, [pc, #224]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80a1 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a82:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d05c      	beq.n	8003b48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d141      	bne.n	8003b1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a96:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <HAL_RCC_OscConfig+0x478>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fee6 	bl	800286c <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fe fee2 	bl	800286c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e087      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	019b      	lsls	r3, r3, #6
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	3b01      	subs	r3, #1
 8003adc:	041b      	lsls	r3, r3, #16
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	491b      	ldr	r1, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x478>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fe febb 	bl	800286c <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe feb7 	bl	800286c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e05c      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x416>
 8003b18:	e054      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_RCC_OscConfig+0x478>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fe fea4 	bl	800286c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fe fea0 	bl	800286c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e045      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x444>
 8003b46:	e03d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e038      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x4ec>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d028      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d121      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d11a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d111      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800

08003bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0cc      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b68      	ldr	r3, [pc, #416]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d90c      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0b8      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a52      	ldr	r2, [pc, #328]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	494d      	ldr	r1, [pc, #308]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d044      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d119      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e07f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b3f      	ldr	r3, [pc, #252]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca2:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e067      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb2:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4934      	ldr	r1, [pc, #208]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc4:	f7fe fdd2 	bl	800286c <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fe fdce 	bl	800286c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e04f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 020c 	and.w	r2, r3, #12
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d1eb      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d20c      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e032      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4916      	ldr	r1, [pc, #88]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	490e      	ldr	r1, [pc, #56]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d5a:	f000 f821 	bl	8003da0 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	490a      	ldr	r1, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	5ccb      	ldrb	r3, [r1, r3]
 8003d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fa00 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023c00 	.word	0x40023c00
 8003d90:	40023800 	.word	0x40023800
 8003d94:	0800876c 	.word	0x0800876c
 8003d98:	20000008 	.word	0x20000008
 8003d9c:	20000014 	.word	0x20000014

08003da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da4:	b090      	sub	sp, #64	; 0x40
 8003da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	637b      	str	r3, [r7, #52]	; 0x34
 8003dac:	2300      	movs	r3, #0
 8003dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db0:	2300      	movs	r3, #0
 8003db2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db8:	4b59      	ldr	r3, [pc, #356]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d00d      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x40>
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	f200 80a1 	bhi.w	8003f0c <HAL_RCC_GetSysClockFreq+0x16c>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d003      	beq.n	8003dda <HAL_RCC_GetSysClockFreq+0x3a>
 8003dd2:	e09b      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd4:	4b53      	ldr	r3, [pc, #332]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dd6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003dd8:	e09b      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dda:	4b53      	ldr	r3, [pc, #332]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ddc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dde:	e098      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de0:	4b4f      	ldr	r3, [pc, #316]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dea:	4b4d      	ldr	r3, [pc, #308]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d028      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df6:	4b4a      	ldr	r3, [pc, #296]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	099b      	lsrs	r3, r3, #6
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	623b      	str	r3, [r7, #32]
 8003e00:	627a      	str	r2, [r7, #36]	; 0x24
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4b47      	ldr	r3, [pc, #284]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e0c:	fb03 f201 	mul.w	r2, r3, r1
 8003e10:	2300      	movs	r3, #0
 8003e12:	fb00 f303 	mul.w	r3, r0, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	4a43      	ldr	r2, [pc, #268]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e1a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e20:	460a      	mov	r2, r1
 8003e22:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e26:	4413      	add	r3, r2
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	61fa      	str	r2, [r7, #28]
 8003e32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e3a:	f7fc fe97 	bl	8000b6c <__aeabi_uldivmod>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4613      	mov	r3, r2
 8003e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e46:	e053      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e48:	4b35      	ldr	r3, [pc, #212]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	099b      	lsrs	r3, r3, #6
 8003e4e:	2200      	movs	r2, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	617a      	str	r2, [r7, #20]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e5a:	f04f 0b00 	mov.w	fp, #0
 8003e5e:	4652      	mov	r2, sl
 8003e60:	465b      	mov	r3, fp
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	0159      	lsls	r1, r3, #5
 8003e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e70:	0150      	lsls	r0, r2, #5
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	ebb2 080a 	subs.w	r8, r2, sl
 8003e7a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e92:	ebb2 0408 	subs.w	r4, r2, r8
 8003e96:	eb63 0509 	sbc.w	r5, r3, r9
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	00eb      	lsls	r3, r5, #3
 8003ea4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea8:	00e2      	lsls	r2, r4, #3
 8003eaa:	4614      	mov	r4, r2
 8003eac:	461d      	mov	r5, r3
 8003eae:	eb14 030a 	adds.w	r3, r4, sl
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	eb45 030b 	adc.w	r3, r5, fp
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	028b      	lsls	r3, r1, #10
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	028a      	lsls	r2, r1, #10
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eda:	2200      	movs	r2, #0
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	60fa      	str	r2, [r7, #12]
 8003ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee4:	f7fc fe42 	bl	8000b6c <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4613      	mov	r3, r2
 8003eee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	3301      	adds	r3, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f0a:	e002      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3740      	adds	r7, #64	; 0x40
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	00f42400 	.word	0x00f42400
 8003f28:	017d7840 	.word	0x017d7840

08003f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000008 	.word	0x20000008

08003f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f48:	f7ff fff0 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0a9b      	lsrs	r3, r3, #10
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4903      	ldr	r1, [pc, #12]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	0800877c 	.word	0x0800877c

08003f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f70:	f7ff ffdc 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0b5b      	lsrs	r3, r3, #13
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	0800877c 	.word	0x0800877c

08003f94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	220f      	movs	r2, #15
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fa4:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0203 	and.w	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	08db      	lsrs	r3, r3, #3
 8003fce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fd6:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <HAL_RCC_GetClockConfig+0x60>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0207 	and.w	r2, r3, #7
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40023c00 	.word	0x40023c00

08003ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e041      	b.n	800408e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd fff6 	bl	8002010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 fd08 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d001      	beq.n	80040b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e03c      	b.n	800412a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <HAL_TIM_Base_Start+0xa0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_TIM_Base_Start+0x5c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d013      	beq.n	80040f4 <HAL_TIM_Base_Start+0x5c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1a      	ldr	r2, [pc, #104]	; (800413c <HAL_TIM_Base_Start+0xa4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_TIM_Base_Start+0x5c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a19      	ldr	r2, [pc, #100]	; (8004140 <HAL_TIM_Base_Start+0xa8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_TIM_Base_Start+0x5c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a17      	ldr	r2, [pc, #92]	; (8004144 <HAL_TIM_Base_Start+0xac>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_TIM_Base_Start+0x5c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a16      	ldr	r2, [pc, #88]	; (8004148 <HAL_TIM_Base_Start+0xb0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d111      	bne.n	8004118 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b06      	cmp	r3, #6
 8004104:	d010      	beq.n	8004128 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004116:	e007      	b.n	8004128 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40010000 	.word	0x40010000
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40000c00 	.word	0x40000c00
 8004148:	40014000 	.word	0x40014000

0800414c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d001      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e044      	b.n	80041ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1e      	ldr	r2, [pc, #120]	; (80041fc <HAL_TIM_Base_Start_IT+0xb0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d018      	beq.n	80041b8 <HAL_TIM_Base_Start_IT+0x6c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418e:	d013      	beq.n	80041b8 <HAL_TIM_Base_Start_IT+0x6c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <HAL_TIM_Base_Start_IT+0xb4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00e      	beq.n	80041b8 <HAL_TIM_Base_Start_IT+0x6c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a19      	ldr	r2, [pc, #100]	; (8004204 <HAL_TIM_Base_Start_IT+0xb8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_TIM_Base_Start_IT+0x6c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a17      	ldr	r2, [pc, #92]	; (8004208 <HAL_TIM_Base_Start_IT+0xbc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <HAL_TIM_Base_Start_IT+0x6c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a16      	ldr	r2, [pc, #88]	; (800420c <HAL_TIM_Base_Start_IT+0xc0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d111      	bne.n	80041dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d010      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041da:	e007      	b.n	80041ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40014000 	.word	0x40014000

08004210 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e041      	b.n	80042a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fd ff20 	bl	800207c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f000 fbfc 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d109      	bne.n	80042d4 <HAL_TIM_PWM_Start+0x24>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e022      	b.n	800431a <HAL_TIM_PWM_Start+0x6a>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d109      	bne.n	80042ee <HAL_TIM_PWM_Start+0x3e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	bf14      	ite	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	2300      	moveq	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	e015      	b.n	800431a <HAL_TIM_PWM_Start+0x6a>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d109      	bne.n	8004308 <HAL_TIM_PWM_Start+0x58>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e008      	b.n	800431a <HAL_TIM_PWM_Start+0x6a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e068      	b.n	80043f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <HAL_TIM_PWM_Start+0x82>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004330:	e013      	b.n	800435a <HAL_TIM_PWM_Start+0xaa>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b04      	cmp	r3, #4
 8004336:	d104      	bne.n	8004342 <HAL_TIM_PWM_Start+0x92>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	e00b      	b.n	800435a <HAL_TIM_PWM_Start+0xaa>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d104      	bne.n	8004352 <HAL_TIM_PWM_Start+0xa2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004350:	e003      	b.n	800435a <HAL_TIM_PWM_Start+0xaa>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2201      	movs	r2, #1
 8004360:	6839      	ldr	r1, [r7, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fe18 	bl	8004f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a23      	ldr	r2, [pc, #140]	; (80043fc <HAL_TIM_PWM_Start+0x14c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d107      	bne.n	8004382 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <HAL_TIM_PWM_Start+0x14c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d018      	beq.n	80043be <HAL_TIM_PWM_Start+0x10e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d013      	beq.n	80043be <HAL_TIM_PWM_Start+0x10e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a19      	ldr	r2, [pc, #100]	; (8004400 <HAL_TIM_PWM_Start+0x150>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <HAL_TIM_PWM_Start+0x10e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a17      	ldr	r2, [pc, #92]	; (8004404 <HAL_TIM_PWM_Start+0x154>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_TIM_PWM_Start+0x10e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a16      	ldr	r2, [pc, #88]	; (8004408 <HAL_TIM_PWM_Start+0x158>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_TIM_PWM_Start+0x10e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a14      	ldr	r2, [pc, #80]	; (800440c <HAL_TIM_PWM_Start+0x15c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d111      	bne.n	80043e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b06      	cmp	r3, #6
 80043ce:	d010      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e0:	e007      	b.n	80043f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40010000 	.word	0x40010000
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000

08004410 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2200      	movs	r2, #0
 8004420:	6839      	ldr	r1, [r7, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fdb8 	bl	8004f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a29      	ldr	r2, [pc, #164]	; (80044d4 <HAL_TIM_PWM_Stop+0xc4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d117      	bne.n	8004462 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a1a      	ldr	r2, [r3, #32]
 8004438:	f241 1311 	movw	r3, #4369	; 0x1111
 800443c:	4013      	ands	r3, r2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_TIM_PWM_Stop+0x52>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	f240 4344 	movw	r3, #1092	; 0x444
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d107      	bne.n	8004462 <HAL_TIM_PWM_Stop+0x52>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	f241 1311 	movw	r3, #4369	; 0x1111
 800446c:	4013      	ands	r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10f      	bne.n	8004492 <HAL_TIM_PWM_Stop+0x82>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6a1a      	ldr	r2, [r3, #32]
 8004478:	f240 4344 	movw	r3, #1092	; 0x444
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d107      	bne.n	8004492 <HAL_TIM_PWM_Stop+0x82>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d104      	bne.n	80044a2 <HAL_TIM_PWM_Stop+0x92>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a0:	e013      	b.n	80044ca <HAL_TIM_PWM_Stop+0xba>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d104      	bne.n	80044b2 <HAL_TIM_PWM_Stop+0xa2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b0:	e00b      	b.n	80044ca <HAL_TIM_PWM_Stop+0xba>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d104      	bne.n	80044c2 <HAL_TIM_PWM_Stop+0xb2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c0:	e003      	b.n	80044ca <HAL_TIM_PWM_Stop+0xba>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40010000 	.word	0x40010000

080044d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d122      	bne.n	8004534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d11b      	bne.n	8004534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0202 	mvn.w	r2, #2
 8004504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa77 	bl	8004a0e <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa69 	bl	80049fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa7a 	bl	8004a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d122      	bne.n	8004588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d11b      	bne.n	8004588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0204 	mvn.w	r2, #4
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa4d 	bl	8004a0e <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa3f 	bl	80049fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fa50 	bl	8004a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b08      	cmp	r3, #8
 8004594:	d122      	bne.n	80045dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d11b      	bne.n	80045dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0208 	mvn.w	r2, #8
 80045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2204      	movs	r2, #4
 80045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fa23 	bl	8004a0e <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa15 	bl	80049fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa26 	bl	8004a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d122      	bne.n	8004630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0210 	mvn.w	r2, #16
 8004600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2208      	movs	r2, #8
 8004606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f9f9 	bl	8004a0e <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9eb 	bl	80049fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f9fc 	bl	8004a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	d10e      	bne.n	800465c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d107      	bne.n	800465c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0201 	mvn.w	r2, #1
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fd fc2e 	bl	8001eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b80      	cmp	r3, #128	; 0x80
 8004668:	d10e      	bne.n	8004688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	d107      	bne.n	8004688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fd26 	bl	80050d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d10e      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d107      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f9c1 	bl	8004a36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d10e      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d107      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0220 	mvn.w	r2, #32
 80046d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fcf0 	bl	80050c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004702:	2302      	movs	r3, #2
 8004704:	e0ae      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b0c      	cmp	r3, #12
 8004712:	f200 809f 	bhi.w	8004854 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004716:	a201      	add	r2, pc, #4	; (adr r2, 800471c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	08004751 	.word	0x08004751
 8004720:	08004855 	.word	0x08004855
 8004724:	08004855 	.word	0x08004855
 8004728:	08004855 	.word	0x08004855
 800472c:	08004791 	.word	0x08004791
 8004730:	08004855 	.word	0x08004855
 8004734:	08004855 	.word	0x08004855
 8004738:	08004855 	.word	0x08004855
 800473c:	080047d3 	.word	0x080047d3
 8004740:	08004855 	.word	0x08004855
 8004744:	08004855 	.word	0x08004855
 8004748:	08004855 	.word	0x08004855
 800474c:	08004813 	.word	0x08004813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f9f8 	bl	8004b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0204 	bic.w	r2, r2, #4
 800477a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6999      	ldr	r1, [r3, #24]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	619a      	str	r2, [r3, #24]
      break;
 800478e:	e064      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fa3e 	bl	8004c18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6999      	ldr	r1, [r3, #24]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	021a      	lsls	r2, r3, #8
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	619a      	str	r2, [r3, #24]
      break;
 80047d0:	e043      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fa89 	bl	8004cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0208 	orr.w	r2, r2, #8
 80047ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0204 	bic.w	r2, r2, #4
 80047fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69d9      	ldr	r1, [r3, #28]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	61da      	str	r2, [r3, #28]
      break;
 8004810:	e023      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fad3 	bl	8004dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69d9      	ldr	r1, [r3, #28]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	61da      	str	r2, [r3, #28]
      break;
 8004852:	e002      	b.n	800485a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	75fb      	strb	r3, [r7, #23]
      break;
 8004858:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004862:	7dfb      	ldrb	r3, [r7, #23]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_TIM_ConfigClockSource+0x1c>
 8004884:	2302      	movs	r3, #2
 8004886:	e0b4      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x186>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c0:	d03e      	beq.n	8004940 <HAL_TIM_ConfigClockSource+0xd4>
 80048c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c6:	f200 8087 	bhi.w	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ce:	f000 8086 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x172>
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d6:	d87f      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b70      	cmp	r3, #112	; 0x70
 80048da:	d01a      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0xa6>
 80048dc:	2b70      	cmp	r3, #112	; 0x70
 80048de:	d87b      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b60      	cmp	r3, #96	; 0x60
 80048e2:	d050      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x11a>
 80048e4:	2b60      	cmp	r3, #96	; 0x60
 80048e6:	d877      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b50      	cmp	r3, #80	; 0x50
 80048ea:	d03c      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0xfa>
 80048ec:	2b50      	cmp	r3, #80	; 0x50
 80048ee:	d873      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d058      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x13a>
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d86f      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b30      	cmp	r3, #48	; 0x30
 80048fa:	d064      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x15a>
 80048fc:	2b30      	cmp	r3, #48	; 0x30
 80048fe:	d86b      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b20      	cmp	r3, #32
 8004902:	d060      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d867      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d05c      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x15a>
 800490c:	2b10      	cmp	r3, #16
 800490e:	d05a      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004910:	e062      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6899      	ldr	r1, [r3, #8]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f000 fb19 	bl	8004f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	609a      	str	r2, [r3, #8]
      break;
 800493e:	e04f      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6899      	ldr	r1, [r3, #8]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f000 fb02 	bl	8004f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004962:	609a      	str	r2, [r3, #8]
      break;
 8004964:	e03c      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6859      	ldr	r1, [r3, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	461a      	mov	r2, r3
 8004974:	f000 fa76 	bl	8004e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2150      	movs	r1, #80	; 0x50
 800497e:	4618      	mov	r0, r3
 8004980:	f000 facf 	bl	8004f22 <TIM_ITRx_SetConfig>
      break;
 8004984:	e02c      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6859      	ldr	r1, [r3, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	461a      	mov	r2, r3
 8004994:	f000 fa95 	bl	8004ec2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2160      	movs	r1, #96	; 0x60
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fabf 	bl	8004f22 <TIM_ITRx_SetConfig>
      break;
 80049a4:	e01c      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f000 fa56 	bl	8004e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2140      	movs	r1, #64	; 0x40
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 faaf 	bl	8004f22 <TIM_ITRx_SetConfig>
      break;
 80049c4:	e00c      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4619      	mov	r1, r3
 80049d0:	4610      	mov	r0, r2
 80049d2:	f000 faa6 	bl	8004f22 <TIM_ITRx_SetConfig>
      break;
 80049d6:	e003      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
      break;
 80049dc:	e000      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a34      	ldr	r2, [pc, #208]	; (8004b30 <TIM_Base_SetConfig+0xe4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00f      	beq.n	8004a84 <TIM_Base_SetConfig+0x38>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6a:	d00b      	beq.n	8004a84 <TIM_Base_SetConfig+0x38>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a31      	ldr	r2, [pc, #196]	; (8004b34 <TIM_Base_SetConfig+0xe8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d007      	beq.n	8004a84 <TIM_Base_SetConfig+0x38>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a30      	ldr	r2, [pc, #192]	; (8004b38 <TIM_Base_SetConfig+0xec>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_Base_SetConfig+0x38>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a2f      	ldr	r2, [pc, #188]	; (8004b3c <TIM_Base_SetConfig+0xf0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d108      	bne.n	8004a96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <TIM_Base_SetConfig+0xe4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01b      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa4:	d017      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <TIM_Base_SetConfig+0xe8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a21      	ldr	r2, [pc, #132]	; (8004b38 <TIM_Base_SetConfig+0xec>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00f      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a20      	ldr	r2, [pc, #128]	; (8004b3c <TIM_Base_SetConfig+0xf0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00b      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <TIM_Base_SetConfig+0xf4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d007      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <TIM_Base_SetConfig+0xf8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d003      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <TIM_Base_SetConfig+0xfc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d108      	bne.n	8004ae8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <TIM_Base_SetConfig+0xe4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d103      	bne.n	8004b1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	615a      	str	r2, [r3, #20]
}
 8004b22:	bf00      	nop
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800

08004b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f023 0302 	bic.w	r3, r3, #2
 8004b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1c      	ldr	r2, [pc, #112]	; (8004c14 <TIM_OC1_SetConfig+0xc8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d10c      	bne.n	8004bc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f023 0308 	bic.w	r3, r3, #8
 8004bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <TIM_OC1_SetConfig+0xc8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d111      	bne.n	8004bee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40010000 	.word	0x40010000

08004c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f023 0210 	bic.w	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0320 	bic.w	r3, r3, #32
 8004c62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <TIM_OC2_SetConfig+0xd4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d10d      	bne.n	8004c94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a15      	ldr	r2, [pc, #84]	; (8004cec <TIM_OC2_SetConfig+0xd4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d113      	bne.n	8004cc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004caa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40010000 	.word	0x40010000

08004cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <TIM_OC3_SetConfig+0xd0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10d      	bne.n	8004d6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a14      	ldr	r2, [pc, #80]	; (8004dc0 <TIM_OC3_SetConfig+0xd0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d113      	bne.n	8004d9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	621a      	str	r2, [r3, #32]
}
 8004db4:	bf00      	nop
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	40010000 	.word	0x40010000

08004dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <TIM_OC4_SetConfig+0x9c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d109      	bne.n	8004e38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40010000 	.word	0x40010000

08004e64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f023 0201 	bic.w	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 030a 	bic.w	r3, r3, #10
 8004ea0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b087      	sub	sp, #28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0210 	bic.w	r2, r3, #16
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	031b      	lsls	r3, r3, #12
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004efe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	621a      	str	r2, [r3, #32]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f043 0307 	orr.w	r3, r3, #7
 8004f44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	609a      	str	r2, [r3, #8]
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	021a      	lsls	r2, r3, #8
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	609a      	str	r2, [r3, #8]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 031f 	and.w	r3, r3, #31
 8004faa:	2201      	movs	r2, #1
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a1a      	ldr	r2, [r3, #32]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	401a      	ands	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1a      	ldr	r2, [r3, #32]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e050      	b.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1c      	ldr	r2, [pc, #112]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d018      	beq.n	8005072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005048:	d013      	beq.n	8005072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d10c      	bne.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4313      	orrs	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40000c00 	.word	0x40000c00
 80050bc:	40014000 	.word	0x40014000

080050c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <__NVIC_SetPriority>:
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	6039      	str	r1, [r7, #0]
 80050f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	db0a      	blt.n	8005112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	490c      	ldr	r1, [pc, #48]	; (8005134 <__NVIC_SetPriority+0x4c>)
 8005102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005106:	0112      	lsls	r2, r2, #4
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	440b      	add	r3, r1
 800510c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005110:	e00a      	b.n	8005128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	4908      	ldr	r1, [pc, #32]	; (8005138 <__NVIC_SetPriority+0x50>)
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	3b04      	subs	r3, #4
 8005120:	0112      	lsls	r2, r2, #4
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	440b      	add	r3, r1
 8005126:	761a      	strb	r2, [r3, #24]
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	e000e100 	.word	0xe000e100
 8005138:	e000ed00 	.word	0xe000ed00

0800513c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <SysTick_Handler+0x1c>)
 8005142:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005144:	f001 fd28 	bl	8006b98 <xTaskGetSchedulerState>
 8005148:	4603      	mov	r3, r0
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800514e:	f002 fb13 	bl	8007778 <xPortSysTickHandler>
  }
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	e000e010 	.word	0xe000e010

0800515c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005160:	2100      	movs	r1, #0
 8005162:	f06f 0004 	mvn.w	r0, #4
 8005166:	f7ff ffbf 	bl	80050e8 <__NVIC_SetPriority>
#endif
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005176:	f3ef 8305 	mrs	r3, IPSR
 800517a:	603b      	str	r3, [r7, #0]
  return(result);
 800517c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005182:	f06f 0305 	mvn.w	r3, #5
 8005186:	607b      	str	r3, [r7, #4]
 8005188:	e00c      	b.n	80051a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <osKernelInitialize+0x44>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d105      	bne.n	800519e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005192:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <osKernelInitialize+0x44>)
 8005194:	2201      	movs	r2, #1
 8005196:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005198:	2300      	movs	r3, #0
 800519a:	607b      	str	r3, [r7, #4]
 800519c:	e002      	b.n	80051a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
 80051a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051a4:	687b      	ldr	r3, [r7, #4]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	2000063c 	.word	0x2000063c

080051b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051be:	f3ef 8305 	mrs	r3, IPSR
 80051c2:	603b      	str	r3, [r7, #0]
  return(result);
 80051c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80051ca:	f06f 0305 	mvn.w	r3, #5
 80051ce:	607b      	str	r3, [r7, #4]
 80051d0:	e010      	b.n	80051f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <osKernelStart+0x48>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d109      	bne.n	80051ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80051da:	f7ff ffbf 	bl	800515c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051de:	4b08      	ldr	r3, [pc, #32]	; (8005200 <osKernelStart+0x48>)
 80051e0:	2202      	movs	r2, #2
 80051e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051e4:	f001 f87c 	bl	80062e0 <vTaskStartScheduler>
      stat = osOK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	e002      	b.n	80051f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051ee:	f04f 33ff 	mov.w	r3, #4294967295
 80051f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051f4:	687b      	ldr	r3, [r7, #4]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	2000063c 	.word	0x2000063c

08005204 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b08e      	sub	sp, #56	; 0x38
 8005208:	af04      	add	r7, sp, #16
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005214:	f3ef 8305 	mrs	r3, IPSR
 8005218:	617b      	str	r3, [r7, #20]
  return(result);
 800521a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800521c:	2b00      	cmp	r3, #0
 800521e:	d17e      	bne.n	800531e <osThreadNew+0x11a>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d07b      	beq.n	800531e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005226:	2380      	movs	r3, #128	; 0x80
 8005228:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800522a:	2318      	movs	r3, #24
 800522c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005232:	f04f 33ff 	mov.w	r3, #4294967295
 8005236:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d045      	beq.n	80052ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <osThreadNew+0x48>
        name = attr->name;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <osThreadNew+0x6e>
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b38      	cmp	r3, #56	; 0x38
 8005264:	d805      	bhi.n	8005272 <osThreadNew+0x6e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <osThreadNew+0x72>
        return (NULL);
 8005272:	2300      	movs	r3, #0
 8005274:	e054      	b.n	8005320 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00e      	beq.n	80052ac <osThreadNew+0xa8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	2ba7      	cmp	r3, #167	; 0xa7
 8005294:	d90a      	bls.n	80052ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800529a:	2b00      	cmp	r3, #0
 800529c:	d006      	beq.n	80052ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <osThreadNew+0xa8>
        mem = 1;
 80052a6:	2301      	movs	r3, #1
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	e010      	b.n	80052ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10c      	bne.n	80052ce <osThreadNew+0xca>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d108      	bne.n	80052ce <osThreadNew+0xca>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <osThreadNew+0xca>
          mem = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	e001      	b.n	80052ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d110      	bne.n	80052f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052dc:	9202      	str	r2, [sp, #8]
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	6a3a      	ldr	r2, [r7, #32]
 80052e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fe0c 	bl	8005f08 <xTaskCreateStatic>
 80052f0:	4603      	mov	r3, r0
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	e013      	b.n	800531e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d110      	bne.n	800531e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	f107 0310 	add.w	r3, r7, #16
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fe57 	bl	8005fc2 <xTaskCreate>
 8005314:	4603      	mov	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d001      	beq.n	800531e <osThreadNew+0x11a>
            hTask = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800531e:	693b      	ldr	r3, [r7, #16]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3728      	adds	r7, #40	; 0x28
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005330:	f3ef 8305 	mrs	r3, IPSR
 8005334:	60bb      	str	r3, [r7, #8]
  return(result);
 8005336:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <osDelay+0x1c>
    stat = osErrorISR;
 800533c:	f06f 0305 	mvn.w	r3, #5
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e007      	b.n	8005354 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <osDelay+0x2c>
      vTaskDelay(ticks);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 ff92 	bl	8006278 <vTaskDelay>
    }
  }

  return (stat);
 8005354:	68fb      	ldr	r3, [r7, #12]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a07      	ldr	r2, [pc, #28]	; (800538c <vApplicationGetIdleTaskMemory+0x2c>)
 8005370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4a06      	ldr	r2, [pc, #24]	; (8005390 <vApplicationGetIdleTaskMemory+0x30>)
 8005376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2280      	movs	r2, #128	; 0x80
 800537c:	601a      	str	r2, [r3, #0]
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000640 	.word	0x20000640
 8005390:	200006e8 	.word	0x200006e8

08005394 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80053a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a06      	ldr	r2, [pc, #24]	; (80053c4 <vApplicationGetTimerTaskMemory+0x30>)
 80053aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053b2:	601a      	str	r2, [r3, #0]
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	200008e8 	.word	0x200008e8
 80053c4:	20000990 	.word	0x20000990

080053c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f103 0208 	add.w	r2, r3, #8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f04f 32ff 	mov.w	r2, #4294967295
 80053e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f103 0208 	add.w	r2, r3, #8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f103 0208 	add.w	r2, r3, #8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]
}
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d103      	bne.n	800548a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	e00c      	b.n	80054a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3308      	adds	r3, #8
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e002      	b.n	8005498 <vListInsert+0x2e>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d2f6      	bcs.n	8005492 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
}
 80054d0:	bf00      	nop
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6892      	ldr	r2, [r2, #8]
 80054f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d103      	bne.n	8005510 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	1e5a      	subs	r2, r3, #1
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800555a:	f002 f87b 	bl	8007654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	441a      	add	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	3b01      	subs	r3, #1
 800558c:	68f9      	ldr	r1, [r7, #12]
 800558e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	441a      	add	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	22ff      	movs	r2, #255	; 0xff
 800559e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	22ff      	movs	r2, #255	; 0xff
 80055a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d114      	bne.n	80055da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01a      	beq.n	80055ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3310      	adds	r3, #16
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 f929 	bl	8006814 <xTaskRemoveFromEventList>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d012      	beq.n	80055ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055c8:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <xQueueGenericReset+0xcc>)
 80055ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	e009      	b.n	80055ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3310      	adds	r3, #16
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff fef2 	bl	80053c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3324      	adds	r3, #36	; 0x24
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff feed 	bl	80053c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055ee:	f002 f861 	bl	80076b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055f2:	2301      	movs	r3, #1
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	e000ed04 	.word	0xe000ed04

08005600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08e      	sub	sp, #56	; 0x38
 8005604:	af02      	add	r7, sp, #8
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <xQueueGenericCreateStatic+0x52>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <xQueueGenericCreateStatic+0x56>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <xQueueGenericCreateStatic+0x58>
 8005656:	2300      	movs	r3, #0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	623b      	str	r3, [r7, #32]
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <xQueueGenericCreateStatic+0x7e>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <xQueueGenericCreateStatic+0x82>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <xQueueGenericCreateStatic+0x84>
 8005682:	2300      	movs	r3, #0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	61fb      	str	r3, [r7, #28]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800569e:	2350      	movs	r3, #80	; 0x50
 80056a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b50      	cmp	r3, #80	; 0x50
 80056a6:	d00a      	beq.n	80056be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61bb      	str	r3, [r7, #24]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00d      	beq.n	80056e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f805 	bl	80056f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3730      	adds	r7, #48	; 0x30
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d103      	bne.n	800570c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e002      	b.n	8005712 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800571e:	2101      	movs	r1, #1
 8005720:	69b8      	ldr	r0, [r7, #24]
 8005722:	f7ff ff05 	bl	8005530 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	78fa      	ldrb	r2, [r7, #3]
 800572a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005746:	2300      	movs	r3, #0
 8005748:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <xQueueGenericSend+0x32>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <xQueueGenericSend+0x40>
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <xQueueGenericSend+0x44>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <xQueueGenericSend+0x46>
 800577c:	2300      	movs	r3, #0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <xQueueGenericSend+0x60>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d103      	bne.n	80057a6 <xQueueGenericSend+0x6e>
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <xQueueGenericSend+0x72>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <xQueueGenericSend+0x74>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	623b      	str	r3, [r7, #32]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057c6:	f001 f9e7 	bl	8006b98 <xTaskGetSchedulerState>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d102      	bne.n	80057d6 <xQueueGenericSend+0x9e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <xQueueGenericSend+0xa2>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <xQueueGenericSend+0xa4>
 80057da:	2300      	movs	r3, #0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10a      	bne.n	80057f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	61fb      	str	r3, [r7, #28]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057f6:	f001 ff2d 	bl	8007654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <xQueueGenericSend+0xd4>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d129      	bne.n	8005860 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005812:	f000 fa0b 	bl	8005c2c <prvCopyDataToQueue>
 8005816:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	d010      	beq.n	8005842 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	3324      	adds	r3, #36	; 0x24
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fff5 	bl	8006814 <xTaskRemoveFromEventList>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d013      	beq.n	8005858 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005830:	4b3f      	ldr	r3, [pc, #252]	; (8005930 <xQueueGenericSend+0x1f8>)
 8005832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	e00a      	b.n	8005858 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005848:	4b39      	ldr	r3, [pc, #228]	; (8005930 <xQueueGenericSend+0x1f8>)
 800584a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005858:	f001 ff2c 	bl	80076b4 <vPortExitCritical>
				return pdPASS;
 800585c:	2301      	movs	r3, #1
 800585e:	e063      	b.n	8005928 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005866:	f001 ff25 	bl	80076b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800586a:	2300      	movs	r3, #0
 800586c:	e05c      	b.n	8005928 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005874:	f107 0314 	add.w	r3, r7, #20
 8005878:	4618      	mov	r0, r3
 800587a:	f001 f82f 	bl	80068dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800587e:	2301      	movs	r3, #1
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005882:	f001 ff17 	bl	80076b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005886:	f000 fd9b 	bl	80063c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800588a:	f001 fee3 	bl	8007654 <vPortEnterCritical>
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005894:	b25b      	sxtb	r3, r3
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d103      	bne.n	80058a4 <xQueueGenericSend+0x16c>
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058aa:	b25b      	sxtb	r3, r3
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d103      	bne.n	80058ba <xQueueGenericSend+0x182>
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ba:	f001 fefb 	bl	80076b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058be:	1d3a      	adds	r2, r7, #4
 80058c0:	f107 0314 	add.w	r3, r7, #20
 80058c4:	4611      	mov	r1, r2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 f81e 	bl	8006908 <xTaskCheckForTimeOut>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d124      	bne.n	800591c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058d4:	f000 faa2 	bl	8005e1c <prvIsQueueFull>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d018      	beq.n	8005910 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	3310      	adds	r3, #16
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 ff44 	bl	8006774 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ee:	f000 fa2d 	bl	8005d4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058f2:	f000 fd73 	bl	80063dc <xTaskResumeAll>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f47f af7c 	bne.w	80057f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <xQueueGenericSend+0x1f8>)
 8005900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	e772      	b.n	80057f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005912:	f000 fa1b 	bl	8005d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005916:	f000 fd61 	bl	80063dc <xTaskResumeAll>
 800591a:	e76c      	b.n	80057f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800591c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800591e:	f000 fa15 	bl	8005d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005922:	f000 fd5b 	bl	80063dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005926:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005928:	4618      	mov	r0, r3
 800592a:	3738      	adds	r7, #56	; 0x38
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b090      	sub	sp, #64	; 0x40
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10a      	bne.n	8005962 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800595e:	bf00      	nop
 8005960:	e7fe      	b.n	8005960 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d103      	bne.n	8005970 <xQueueGenericSendFromISR+0x3c>
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <xQueueGenericSendFromISR+0x40>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <xQueueGenericSendFromISR+0x42>
 8005974:	2300      	movs	r3, #0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800598c:	bf00      	nop
 800598e:	e7fe      	b.n	800598e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d103      	bne.n	800599e <xQueueGenericSendFromISR+0x6a>
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <xQueueGenericSendFromISR+0x6e>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <xQueueGenericSendFromISR+0x70>
 80059a2:	2300      	movs	r3, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	623b      	str	r3, [r7, #32]
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059be:	f001 ff2b 	bl	8007818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059c2:	f3ef 8211 	mrs	r2, BASEPRI
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	61fa      	str	r2, [r7, #28]
 80059d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d302      	bcc.n	80059f0 <xQueueGenericSendFromISR+0xbc>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d12f      	bne.n	8005a50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a06:	f000 f911 	bl	8005c2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d112      	bne.n	8005a3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d016      	beq.n	8005a4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	3324      	adds	r3, #36	; 0x24
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fef7 	bl	8006814 <xTaskRemoveFromEventList>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00e      	beq.n	8005a4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00b      	beq.n	8005a4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e007      	b.n	8005a4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a3e:	3301      	adds	r3, #1
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	b25a      	sxtb	r2, r3
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a4e:	e001      	b.n	8005a54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3740      	adds	r7, #64	; 0x40
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08c      	sub	sp, #48	; 0x30
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <xQueueReceive+0x30>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	623b      	str	r3, [r7, #32]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <xQueueReceive+0x3e>
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <xQueueReceive+0x42>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <xQueueReceive+0x44>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueReceive+0x5e>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	61fb      	str	r3, [r7, #28]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aca:	f001 f865 	bl	8006b98 <xTaskGetSchedulerState>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <xQueueReceive+0x6e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <xQueueReceive+0x72>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <xQueueReceive+0x74>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <xQueueReceive+0x8e>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	61bb      	str	r3, [r7, #24]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005afa:	f001 fdab 	bl	8007654 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01f      	beq.n	8005b4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0e:	f000 f8f7 	bl	8005d00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	1e5a      	subs	r2, r3, #1
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00f      	beq.n	8005b42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	3310      	adds	r3, #16
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fe74 	bl	8006814 <xTaskRemoveFromEventList>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b32:	4b3d      	ldr	r3, [pc, #244]	; (8005c28 <xQueueReceive+0x1bc>)
 8005b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b42:	f001 fdb7 	bl	80076b4 <vPortExitCritical>
				return pdPASS;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e069      	b.n	8005c1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b50:	f001 fdb0 	bl	80076b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e062      	b.n	8005c1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b5e:	f107 0310 	add.w	r3, r7, #16
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 feba 	bl	80068dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b6c:	f001 fda2 	bl	80076b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b70:	f000 fc26 	bl	80063c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b74:	f001 fd6e 	bl	8007654 <vPortEnterCritical>
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b7e:	b25b      	sxtb	r3, r3
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b84:	d103      	bne.n	8005b8e <xQueueReceive+0x122>
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b94:	b25b      	sxtb	r3, r3
 8005b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9a:	d103      	bne.n	8005ba4 <xQueueReceive+0x138>
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ba4:	f001 fd86 	bl	80076b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba8:	1d3a      	adds	r2, r7, #4
 8005baa:	f107 0310 	add.w	r3, r7, #16
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fea9 	bl	8006908 <xTaskCheckForTimeOut>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d123      	bne.n	8005c04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bbe:	f000 f917 	bl	8005df0 <prvIsQueueEmpty>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d017      	beq.n	8005bf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	3324      	adds	r3, #36	; 0x24
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fdcf 	bl	8006774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd8:	f000 f8b8 	bl	8005d4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bdc:	f000 fbfe 	bl	80063dc <xTaskResumeAll>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d189      	bne.n	8005afa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <xQueueReceive+0x1bc>)
 8005be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	e780      	b.n	8005afa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bfa:	f000 f8a7 	bl	8005d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bfe:	f000 fbed 	bl	80063dc <xTaskResumeAll>
 8005c02:	e77a      	b.n	8005afa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c06:	f000 f8a1 	bl	8005d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c0a:	f000 fbe7 	bl	80063dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c10:	f000 f8ee 	bl	8005df0 <prvIsQueueEmpty>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f43f af6f 	beq.w	8005afa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3730      	adds	r7, #48	; 0x30
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d14d      	bne.n	8005cee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 ffbc 	bl	8006bd4 <xTaskPriorityDisinherit>
 8005c5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	609a      	str	r2, [r3, #8]
 8005c64:	e043      	b.n	8005cee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d119      	bne.n	8005ca0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6858      	ldr	r0, [r3, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	461a      	mov	r2, r3
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	f002 f8bc 	bl	8007df4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	441a      	add	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d32b      	bcc.n	8005cee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	e026      	b.n	8005cee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68d8      	ldr	r0, [r3, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	f002 f8a2 	bl	8007df4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	425b      	negs	r3, r3
 8005cba:	441a      	add	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d207      	bcs.n	8005cdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	441a      	add	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d105      	bne.n	8005cee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d018      	beq.n	8005d44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d303      	bcc.n	8005d34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68d9      	ldr	r1, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6838      	ldr	r0, [r7, #0]
 8005d40:	f002 f858 	bl	8007df4 <memcpy>
	}
}
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d54:	f001 fc7e 	bl	8007654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d60:	e011      	b.n	8005d86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d012      	beq.n	8005d90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3324      	adds	r3, #36	; 0x24
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fd50 	bl	8006814 <xTaskRemoveFromEventList>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d7a:	f000 fe27 	bl	80069cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	dce9      	bgt.n	8005d62 <prvUnlockQueue+0x16>
 8005d8e:	e000      	b.n	8005d92 <prvUnlockQueue+0x46>
					break;
 8005d90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	22ff      	movs	r2, #255	; 0xff
 8005d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d9a:	f001 fc8b 	bl	80076b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d9e:	f001 fc59 	bl	8007654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005da8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005daa:	e011      	b.n	8005dd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d012      	beq.n	8005dda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3310      	adds	r3, #16
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fd2b 	bl	8006814 <xTaskRemoveFromEventList>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dc4:	f000 fe02 	bl	80069cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dce9      	bgt.n	8005dac <prvUnlockQueue+0x60>
 8005dd8:	e000      	b.n	8005ddc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	22ff      	movs	r2, #255	; 0xff
 8005de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005de4:	f001 fc66 	bl	80076b4 <vPortExitCritical>
}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005df8:	f001 fc2c 	bl	8007654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e001      	b.n	8005e0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e0e:	f001 fc51 	bl	80076b4 <vPortExitCritical>

	return xReturn;
 8005e12:	68fb      	ldr	r3, [r7, #12]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e24:	f001 fc16 	bl	8007654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d102      	bne.n	8005e3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e34:	2301      	movs	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e001      	b.n	8005e3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e3e:	f001 fc39 	bl	80076b4 <vPortExitCritical>

	return xReturn;
 8005e42:	68fb      	ldr	r3, [r7, #12]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	e014      	b.n	8005e86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e5c:	4a0f      	ldr	r2, [pc, #60]	; (8005e9c <vQueueAddToRegistry+0x50>)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10b      	bne.n	8005e80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e68:	490c      	ldr	r1, [pc, #48]	; (8005e9c <vQueueAddToRegistry+0x50>)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e72:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <vQueueAddToRegistry+0x50>)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4413      	add	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e7e:	e006      	b.n	8005e8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3301      	adds	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b07      	cmp	r3, #7
 8005e8a:	d9e7      	bls.n	8005e5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	20000d90 	.word	0x20000d90

08005ea0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005eb0:	f001 fbd0 	bl	8007654 <vPortEnterCritical>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eba:	b25b      	sxtb	r3, r3
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d103      	bne.n	8005eca <vQueueWaitForMessageRestricted+0x2a>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ed0:	b25b      	sxtb	r3, r3
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d103      	bne.n	8005ee0 <vQueueWaitForMessageRestricted+0x40>
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ee0:	f001 fbe8 	bl	80076b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	3324      	adds	r3, #36	; 0x24
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 fc61 	bl	80067bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005efa:	6978      	ldr	r0, [r7, #20]
 8005efc:	f7ff ff26 	bl	8005d4c <prvUnlockQueue>
	}
 8005f00:	bf00      	nop
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08e      	sub	sp, #56	; 0x38
 8005f0c:	af04      	add	r7, sp, #16
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	623b      	str	r3, [r7, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xTaskCreateStatic+0x46>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	61fb      	str	r3, [r7, #28]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f4e:	23a8      	movs	r3, #168	; 0xa8
 8005f50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2ba8      	cmp	r3, #168	; 0xa8
 8005f56:	d00a      	beq.n	8005f6e <xTaskCreateStatic+0x66>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	61bb      	str	r3, [r7, #24]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01e      	beq.n	8005fb4 <xTaskCreateStatic+0xac>
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9303      	str	r3, [sp, #12]
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	f107 0314 	add.w	r3, r7, #20
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f850 	bl	800604c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fae:	f000 f8f3 	bl	8006198 <prvAddNewTaskToReadyList>
 8005fb2:	e001      	b.n	8005fb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fb8:	697b      	ldr	r3, [r7, #20]
	}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3728      	adds	r7, #40	; 0x28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b08c      	sub	sp, #48	; 0x30
 8005fc6:	af04      	add	r7, sp, #16
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 fc5e 	bl	8007898 <pvPortMalloc>
 8005fdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00e      	beq.n	8006002 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fe4:	20a8      	movs	r0, #168	; 0xa8
 8005fe6:	f001 fc57 	bl	8007898 <pvPortMalloc>
 8005fea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff8:	e005      	b.n	8006006 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ffa:	6978      	ldr	r0, [r7, #20]
 8005ffc:	f001 fd18 	bl	8007a30 <vPortFree>
 8006000:	e001      	b.n	8006006 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006002:	2300      	movs	r3, #0
 8006004:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d017      	beq.n	800603c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006014:	88fa      	ldrh	r2, [r7, #6]
 8006016:	2300      	movs	r3, #0
 8006018:	9303      	str	r3, [sp, #12]
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	9302      	str	r3, [sp, #8]
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f80e 	bl	800604c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006030:	69f8      	ldr	r0, [r7, #28]
 8006032:	f000 f8b1 	bl	8006198 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006036:	2301      	movs	r3, #1
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	e002      	b.n	8006042 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800603c:	f04f 33ff 	mov.w	r3, #4294967295
 8006040:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006042:	69bb      	ldr	r3, [r7, #24]
	}
 8006044:	4618      	mov	r0, r3
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	461a      	mov	r2, r3
 8006064:	21a5      	movs	r1, #165	; 0xa5
 8006066:	f001 fe3b 	bl	8007ce0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006074:	3b01      	subs	r3, #1
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f023 0307 	bic.w	r3, r3, #7
 8006082:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	617b      	str	r3, [r7, #20]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01f      	beq.n	80060ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	e012      	b.n	80060d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	7819      	ldrb	r1, [r3, #0]
 80060b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	3334      	adds	r3, #52	; 0x34
 80060c0:	460a      	mov	r2, r1
 80060c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d006      	beq.n	80060de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	3301      	adds	r3, #1
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	2b0f      	cmp	r3, #15
 80060da:	d9e9      	bls.n	80060b0 <prvInitialiseNewTask+0x64>
 80060dc:	e000      	b.n	80060e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80060de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060e8:	e003      	b.n	80060f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	2b37      	cmp	r3, #55	; 0x37
 80060f6:	d901      	bls.n	80060fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060f8:	2337      	movs	r3, #55	; 0x37
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006100:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006106:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	2200      	movs	r2, #0
 800610c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	3304      	adds	r3, #4
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff f978 	bl	8005408 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	3318      	adds	r3, #24
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff f973 	bl	8005408 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006126:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006136:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	2200      	movs	r2, #0
 8006144:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	3354      	adds	r3, #84	; 0x54
 800614c:	224c      	movs	r2, #76	; 0x4c
 800614e:	2100      	movs	r1, #0
 8006150:	4618      	mov	r0, r3
 8006152:	f001 fdc5 	bl	8007ce0 <memset>
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	4a0c      	ldr	r2, [pc, #48]	; (800618c <prvInitialiseNewTask+0x140>)
 800615a:	659a      	str	r2, [r3, #88]	; 0x58
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	4a0c      	ldr	r2, [pc, #48]	; (8006190 <prvInitialiseNewTask+0x144>)
 8006160:	65da      	str	r2, [r3, #92]	; 0x5c
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	4a0b      	ldr	r2, [pc, #44]	; (8006194 <prvInitialiseNewTask+0x148>)
 8006166:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	68f9      	ldr	r1, [r7, #12]
 800616c:	69b8      	ldr	r0, [r7, #24]
 800616e:	f001 f941 	bl	80073f4 <pxPortInitialiseStack>
 8006172:	4602      	mov	r2, r0
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006182:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006184:	bf00      	nop
 8006186:	3720      	adds	r7, #32
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20005024 	.word	0x20005024
 8006190:	2000508c 	.word	0x2000508c
 8006194:	200050f4 	.word	0x200050f4

08006198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061a0:	f001 fa58 	bl	8007654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061a4:	4b2d      	ldr	r3, [pc, #180]	; (800625c <prvAddNewTaskToReadyList+0xc4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3301      	adds	r3, #1
 80061aa:	4a2c      	ldr	r2, [pc, #176]	; (800625c <prvAddNewTaskToReadyList+0xc4>)
 80061ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061ae:	4b2c      	ldr	r3, [pc, #176]	; (8006260 <prvAddNewTaskToReadyList+0xc8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061b6:	4a2a      	ldr	r2, [pc, #168]	; (8006260 <prvAddNewTaskToReadyList+0xc8>)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061bc:	4b27      	ldr	r3, [pc, #156]	; (800625c <prvAddNewTaskToReadyList+0xc4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d110      	bne.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061c4:	f000 fc26 	bl	8006a14 <prvInitialiseTaskLists>
 80061c8:	e00d      	b.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061ca:	4b26      	ldr	r3, [pc, #152]	; (8006264 <prvAddNewTaskToReadyList+0xcc>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061d2:	4b23      	ldr	r3, [pc, #140]	; (8006260 <prvAddNewTaskToReadyList+0xc8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	429a      	cmp	r2, r3
 80061de:	d802      	bhi.n	80061e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061e0:	4a1f      	ldr	r2, [pc, #124]	; (8006260 <prvAddNewTaskToReadyList+0xc8>)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061e6:	4b20      	ldr	r3, [pc, #128]	; (8006268 <prvAddNewTaskToReadyList+0xd0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <prvAddNewTaskToReadyList+0xd0>)
 80061ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061f0:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <prvAddNewTaskToReadyList+0xd0>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fc:	4b1b      	ldr	r3, [pc, #108]	; (800626c <prvAddNewTaskToReadyList+0xd4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <prvAddNewTaskToReadyList+0x74>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	4a18      	ldr	r2, [pc, #96]	; (800626c <prvAddNewTaskToReadyList+0xd4>)
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <prvAddNewTaskToReadyList+0xd8>)
 800621a:	441a      	add	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f7ff f8fd 	bl	8005422 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006228:	f001 fa44 	bl	80076b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800622c:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <prvAddNewTaskToReadyList+0xcc>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00e      	beq.n	8006252 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <prvAddNewTaskToReadyList+0xc8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	429a      	cmp	r2, r3
 8006240:	d207      	bcs.n	8006252 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006242:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <prvAddNewTaskToReadyList+0xdc>)
 8006244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	200012a4 	.word	0x200012a4
 8006260:	20000dd0 	.word	0x20000dd0
 8006264:	200012b0 	.word	0x200012b0
 8006268:	200012c0 	.word	0x200012c0
 800626c:	200012ac 	.word	0x200012ac
 8006270:	20000dd4 	.word	0x20000dd4
 8006274:	e000ed04 	.word	0xe000ed04

08006278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d017      	beq.n	80062ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800628a:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <vTaskDelay+0x60>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <vTaskDelay+0x30>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60bb      	str	r3, [r7, #8]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062a8:	f000 f88a 	bl	80063c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062ac:	2100      	movs	r1, #0
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fcfe 	bl	8006cb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062b4:	f000 f892 	bl	80063dc <xTaskResumeAll>
 80062b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d107      	bne.n	80062d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <vTaskDelay+0x64>)
 80062c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	200012cc 	.word	0x200012cc
 80062dc:	e000ed04 	.word	0xe000ed04

080062e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08a      	sub	sp, #40	; 0x28
 80062e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062ee:	463a      	mov	r2, r7
 80062f0:	1d39      	adds	r1, r7, #4
 80062f2:	f107 0308 	add.w	r3, r7, #8
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff f832 	bl	8005360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	9202      	str	r2, [sp, #8]
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	2300      	movs	r3, #0
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	2300      	movs	r3, #0
 800630c:	460a      	mov	r2, r1
 800630e:	4924      	ldr	r1, [pc, #144]	; (80063a0 <vTaskStartScheduler+0xc0>)
 8006310:	4824      	ldr	r0, [pc, #144]	; (80063a4 <vTaskStartScheduler+0xc4>)
 8006312:	f7ff fdf9 	bl	8005f08 <xTaskCreateStatic>
 8006316:	4603      	mov	r3, r0
 8006318:	4a23      	ldr	r2, [pc, #140]	; (80063a8 <vTaskStartScheduler+0xc8>)
 800631a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800631c:	4b22      	ldr	r3, [pc, #136]	; (80063a8 <vTaskStartScheduler+0xc8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006324:	2301      	movs	r3, #1
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	e001      	b.n	800632e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800632a:	2300      	movs	r3, #0
 800632c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d102      	bne.n	800633a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006334:	f000 fd10 	bl	8006d58 <xTimerCreateTimerTask>
 8006338:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d11b      	bne.n	8006378 <vTaskStartScheduler+0x98>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	613b      	str	r3, [r7, #16]
}
 8006352:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006354:	4b15      	ldr	r3, [pc, #84]	; (80063ac <vTaskStartScheduler+0xcc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3354      	adds	r3, #84	; 0x54
 800635a:	4a15      	ldr	r2, [pc, #84]	; (80063b0 <vTaskStartScheduler+0xd0>)
 800635c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800635e:	4b15      	ldr	r3, [pc, #84]	; (80063b4 <vTaskStartScheduler+0xd4>)
 8006360:	f04f 32ff 	mov.w	r2, #4294967295
 8006364:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <vTaskStartScheduler+0xd8>)
 8006368:	2201      	movs	r2, #1
 800636a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800636c:	4b13      	ldr	r3, [pc, #76]	; (80063bc <vTaskStartScheduler+0xdc>)
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006372:	f001 f8cd 	bl	8007510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006376:	e00e      	b.n	8006396 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637e:	d10a      	bne.n	8006396 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60fb      	str	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <vTaskStartScheduler+0xb4>
}
 8006396:	bf00      	nop
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	080086c4 	.word	0x080086c4
 80063a4:	080069e5 	.word	0x080069e5
 80063a8:	200012c8 	.word	0x200012c8
 80063ac:	20000dd0 	.word	0x20000dd0
 80063b0:	2000006c 	.word	0x2000006c
 80063b4:	200012c4 	.word	0x200012c4
 80063b8:	200012b0 	.word	0x200012b0
 80063bc:	200012a8 	.word	0x200012a8

080063c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <vTaskSuspendAll+0x18>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	4a03      	ldr	r2, [pc, #12]	; (80063d8 <vTaskSuspendAll+0x18>)
 80063cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063ce:	bf00      	nop
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	200012cc 	.word	0x200012cc

080063dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063ea:	4b42      	ldr	r3, [pc, #264]	; (80064f4 <xTaskResumeAll+0x118>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <xTaskResumeAll+0x2c>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	603b      	str	r3, [r7, #0]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006408:	f001 f924 	bl	8007654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800640c:	4b39      	ldr	r3, [pc, #228]	; (80064f4 <xTaskResumeAll+0x118>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3b01      	subs	r3, #1
 8006412:	4a38      	ldr	r2, [pc, #224]	; (80064f4 <xTaskResumeAll+0x118>)
 8006414:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006416:	4b37      	ldr	r3, [pc, #220]	; (80064f4 <xTaskResumeAll+0x118>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d162      	bne.n	80064e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800641e:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <xTaskResumeAll+0x11c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d05e      	beq.n	80064e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006426:	e02f      	b.n	8006488 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006428:	4b34      	ldr	r3, [pc, #208]	; (80064fc <xTaskResumeAll+0x120>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3318      	adds	r3, #24
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff f851 	bl	80054dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3304      	adds	r3, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff f84c 	bl	80054dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4b2d      	ldr	r3, [pc, #180]	; (8006500 <xTaskResumeAll+0x124>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d903      	bls.n	8006458 <xTaskResumeAll+0x7c>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a2a      	ldr	r2, [pc, #168]	; (8006500 <xTaskResumeAll+0x124>)
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4a27      	ldr	r2, [pc, #156]	; (8006504 <xTaskResumeAll+0x128>)
 8006466:	441a      	add	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3304      	adds	r3, #4
 800646c:	4619      	mov	r1, r3
 800646e:	4610      	mov	r0, r2
 8006470:	f7fe ffd7 	bl	8005422 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4b23      	ldr	r3, [pc, #140]	; (8006508 <xTaskResumeAll+0x12c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	429a      	cmp	r2, r3
 8006480:	d302      	bcc.n	8006488 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006482:	4b22      	ldr	r3, [pc, #136]	; (800650c <xTaskResumeAll+0x130>)
 8006484:	2201      	movs	r2, #1
 8006486:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006488:	4b1c      	ldr	r3, [pc, #112]	; (80064fc <xTaskResumeAll+0x120>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1cb      	bne.n	8006428 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006496:	f000 fb5f 	bl	8006b58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800649a:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <xTaskResumeAll+0x134>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d010      	beq.n	80064c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064a6:	f000 f847 	bl	8006538 <xTaskIncrementTick>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064b0:	4b16      	ldr	r3, [pc, #88]	; (800650c <xTaskResumeAll+0x130>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f1      	bne.n	80064a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064c2:	4b13      	ldr	r3, [pc, #76]	; (8006510 <xTaskResumeAll+0x134>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064c8:	4b10      	ldr	r3, [pc, #64]	; (800650c <xTaskResumeAll+0x130>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d009      	beq.n	80064e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064d4:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <xTaskResumeAll+0x138>)
 80064d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064e4:	f001 f8e6 	bl	80076b4 <vPortExitCritical>

	return xAlreadyYielded;
 80064e8:	68bb      	ldr	r3, [r7, #8]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	200012cc 	.word	0x200012cc
 80064f8:	200012a4 	.word	0x200012a4
 80064fc:	20001264 	.word	0x20001264
 8006500:	200012ac 	.word	0x200012ac
 8006504:	20000dd4 	.word	0x20000dd4
 8006508:	20000dd0 	.word	0x20000dd0
 800650c:	200012b8 	.word	0x200012b8
 8006510:	200012b4 	.word	0x200012b4
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <xTaskGetTickCount+0x1c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006524:	687b      	ldr	r3, [r7, #4]
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	200012a8 	.word	0x200012a8

08006538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006542:	4b4f      	ldr	r3, [pc, #316]	; (8006680 <xTaskIncrementTick+0x148>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f040 808f 	bne.w	800666a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800654c:	4b4d      	ldr	r3, [pc, #308]	; (8006684 <xTaskIncrementTick+0x14c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3301      	adds	r3, #1
 8006552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006554:	4a4b      	ldr	r2, [pc, #300]	; (8006684 <xTaskIncrementTick+0x14c>)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d120      	bne.n	80065a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006560:	4b49      	ldr	r3, [pc, #292]	; (8006688 <xTaskIncrementTick+0x150>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <xTaskIncrementTick+0x48>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	603b      	str	r3, [r7, #0]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <xTaskIncrementTick+0x46>
 8006580:	4b41      	ldr	r3, [pc, #260]	; (8006688 <xTaskIncrementTick+0x150>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	4b41      	ldr	r3, [pc, #260]	; (800668c <xTaskIncrementTick+0x154>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a3f      	ldr	r2, [pc, #252]	; (8006688 <xTaskIncrementTick+0x150>)
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	4a3f      	ldr	r2, [pc, #252]	; (800668c <xTaskIncrementTick+0x154>)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	4b3e      	ldr	r3, [pc, #248]	; (8006690 <xTaskIncrementTick+0x158>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	4a3d      	ldr	r2, [pc, #244]	; (8006690 <xTaskIncrementTick+0x158>)
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	f000 fadb 	bl	8006b58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065a2:	4b3c      	ldr	r3, [pc, #240]	; (8006694 <xTaskIncrementTick+0x15c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d349      	bcc.n	8006640 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ac:	4b36      	ldr	r3, [pc, #216]	; (8006688 <xTaskIncrementTick+0x150>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d104      	bne.n	80065c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b6:	4b37      	ldr	r3, [pc, #220]	; (8006694 <xTaskIncrementTick+0x15c>)
 80065b8:	f04f 32ff 	mov.w	r2, #4294967295
 80065bc:	601a      	str	r2, [r3, #0]
					break;
 80065be:	e03f      	b.n	8006640 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c0:	4b31      	ldr	r3, [pc, #196]	; (8006688 <xTaskIncrementTick+0x150>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d203      	bcs.n	80065e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065d8:	4a2e      	ldr	r2, [pc, #184]	; (8006694 <xTaskIncrementTick+0x15c>)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065de:	e02f      	b.n	8006640 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe ff79 	bl	80054dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	3318      	adds	r3, #24
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe ff70 	bl	80054dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <xTaskIncrementTick+0x160>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d903      	bls.n	8006610 <xTaskIncrementTick+0xd8>
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	4a22      	ldr	r2, [pc, #136]	; (8006698 <xTaskIncrementTick+0x160>)
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4a1f      	ldr	r2, [pc, #124]	; (800669c <xTaskIncrementTick+0x164>)
 800661e:	441a      	add	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	3304      	adds	r3, #4
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f7fe fefb 	bl	8005422 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <xTaskIncrementTick+0x168>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	429a      	cmp	r2, r3
 8006638:	d3b8      	bcc.n	80065ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800663a:	2301      	movs	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800663e:	e7b5      	b.n	80065ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006640:	4b17      	ldr	r3, [pc, #92]	; (80066a0 <xTaskIncrementTick+0x168>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006646:	4915      	ldr	r1, [pc, #84]	; (800669c <xTaskIncrementTick+0x164>)
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	440b      	add	r3, r1
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d901      	bls.n	800665c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006658:	2301      	movs	r3, #1
 800665a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800665c:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <xTaskIncrementTick+0x16c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006664:	2301      	movs	r3, #1
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	e004      	b.n	8006674 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800666a:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <xTaskIncrementTick+0x170>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3301      	adds	r3, #1
 8006670:	4a0d      	ldr	r2, [pc, #52]	; (80066a8 <xTaskIncrementTick+0x170>)
 8006672:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006674:	697b      	ldr	r3, [r7, #20]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200012cc 	.word	0x200012cc
 8006684:	200012a8 	.word	0x200012a8
 8006688:	2000125c 	.word	0x2000125c
 800668c:	20001260 	.word	0x20001260
 8006690:	200012bc 	.word	0x200012bc
 8006694:	200012c4 	.word	0x200012c4
 8006698:	200012ac 	.word	0x200012ac
 800669c:	20000dd4 	.word	0x20000dd4
 80066a0:	20000dd0 	.word	0x20000dd0
 80066a4:	200012b8 	.word	0x200012b8
 80066a8:	200012b4 	.word	0x200012b4

080066ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066b2:	4b2a      	ldr	r3, [pc, #168]	; (800675c <vTaskSwitchContext+0xb0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066ba:	4b29      	ldr	r3, [pc, #164]	; (8006760 <vTaskSwitchContext+0xb4>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066c0:	e046      	b.n	8006750 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80066c2:	4b27      	ldr	r3, [pc, #156]	; (8006760 <vTaskSwitchContext+0xb4>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c8:	4b26      	ldr	r3, [pc, #152]	; (8006764 <vTaskSwitchContext+0xb8>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	e010      	b.n	80066f2 <vTaskSwitchContext+0x46>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <vTaskSwitchContext+0x40>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	607b      	str	r3, [r7, #4]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <vTaskSwitchContext+0x3e>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	491d      	ldr	r1, [pc, #116]	; (8006768 <vTaskSwitchContext+0xbc>)
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0e4      	beq.n	80066d0 <vTaskSwitchContext+0x24>
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4a15      	ldr	r2, [pc, #84]	; (8006768 <vTaskSwitchContext+0xbc>)
 8006712:	4413      	add	r3, r2
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	605a      	str	r2, [r3, #4]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	3308      	adds	r3, #8
 8006728:	429a      	cmp	r2, r3
 800672a:	d104      	bne.n	8006736 <vTaskSwitchContext+0x8a>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	4a0b      	ldr	r2, [pc, #44]	; (800676c <vTaskSwitchContext+0xc0>)
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	4a08      	ldr	r2, [pc, #32]	; (8006764 <vTaskSwitchContext+0xb8>)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006746:	4b09      	ldr	r3, [pc, #36]	; (800676c <vTaskSwitchContext+0xc0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3354      	adds	r3, #84	; 0x54
 800674c:	4a08      	ldr	r2, [pc, #32]	; (8006770 <vTaskSwitchContext+0xc4>)
 800674e:	6013      	str	r3, [r2, #0]
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	200012cc 	.word	0x200012cc
 8006760:	200012b8 	.word	0x200012b8
 8006764:	200012ac 	.word	0x200012ac
 8006768:	20000dd4 	.word	0x20000dd4
 800676c:	20000dd0 	.word	0x20000dd0
 8006770:	2000006c 	.word	0x2000006c

08006774 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	60fb      	str	r3, [r7, #12]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800679a:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <vTaskPlaceOnEventList+0x44>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3318      	adds	r3, #24
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fe fe61 	bl	800546a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067a8:	2101      	movs	r1, #1
 80067aa:	6838      	ldr	r0, [r7, #0]
 80067ac:	f000 fa80 	bl	8006cb0 <prvAddCurrentTaskToDelayedList>
}
 80067b0:	bf00      	nop
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20000dd0 	.word	0x20000dd0

080067bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	617b      	str	r3, [r7, #20]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067e4:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <vTaskPlaceOnEventListRestricted+0x54>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3318      	adds	r3, #24
 80067ea:	4619      	mov	r1, r3
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7fe fe18 	bl	8005422 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067f8:	f04f 33ff 	mov.w	r3, #4294967295
 80067fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	68b8      	ldr	r0, [r7, #8]
 8006802:	f000 fa55 	bl	8006cb0 <prvAddCurrentTaskToDelayedList>
	}
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000dd0 	.word	0x20000dd0

08006814 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	60fb      	str	r3, [r7, #12]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3318      	adds	r3, #24
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fe49 	bl	80054dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800684a:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <xTaskRemoveFromEventList+0xb0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d11d      	bne.n	800688e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3304      	adds	r3, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fe40 	bl	80054dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <xTaskRemoveFromEventList+0xb4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d903      	bls.n	8006870 <xTaskRemoveFromEventList+0x5c>
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a16      	ldr	r2, [pc, #88]	; (80068c8 <xTaskRemoveFromEventList+0xb4>)
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4a13      	ldr	r2, [pc, #76]	; (80068cc <xTaskRemoveFromEventList+0xb8>)
 800687e:	441a      	add	r2, r3
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f7fe fdcb 	bl	8005422 <vListInsertEnd>
 800688c:	e005      	b.n	800689a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	3318      	adds	r3, #24
 8006892:	4619      	mov	r1, r3
 8006894:	480e      	ldr	r0, [pc, #56]	; (80068d0 <xTaskRemoveFromEventList+0xbc>)
 8006896:	f7fe fdc4 	bl	8005422 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689e:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <xTaskRemoveFromEventList+0xc0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d905      	bls.n	80068b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068a8:	2301      	movs	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068ac:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <xTaskRemoveFromEventList+0xc4>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	e001      	b.n	80068b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068b8:	697b      	ldr	r3, [r7, #20]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	200012cc 	.word	0x200012cc
 80068c8:	200012ac 	.word	0x200012ac
 80068cc:	20000dd4 	.word	0x20000dd4
 80068d0:	20001264 	.word	0x20001264
 80068d4:	20000dd0 	.word	0x20000dd0
 80068d8:	200012b8 	.word	0x200012b8

080068dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068e4:	4b06      	ldr	r3, [pc, #24]	; (8006900 <vTaskInternalSetTimeOutState+0x24>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <vTaskInternalSetTimeOutState+0x28>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	605a      	str	r2, [r3, #4]
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	200012bc 	.word	0x200012bc
 8006904:	200012a8 	.word	0x200012a8

08006908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	613b      	str	r3, [r7, #16]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	60fb      	str	r3, [r7, #12]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800694a:	f000 fe83 	bl	8007654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800694e:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <xTaskCheckForTimeOut+0xbc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d102      	bne.n	800696e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006968:	2300      	movs	r3, #0
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	e023      	b.n	80069b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <xTaskCheckForTimeOut+0xc0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	429a      	cmp	r2, r3
 8006978:	d007      	beq.n	800698a <xTaskCheckForTimeOut+0x82>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	429a      	cmp	r2, r3
 8006982:	d302      	bcc.n	800698a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006984:	2301      	movs	r3, #1
 8006986:	61fb      	str	r3, [r7, #28]
 8006988:	e015      	b.n	80069b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	429a      	cmp	r2, r3
 8006992:	d20b      	bcs.n	80069ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ff9b 	bl	80068dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	e004      	b.n	80069b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069b2:	2301      	movs	r3, #1
 80069b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069b6:	f000 fe7d 	bl	80076b4 <vPortExitCritical>

	return xReturn;
 80069ba:	69fb      	ldr	r3, [r7, #28]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3720      	adds	r7, #32
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	200012a8 	.word	0x200012a8
 80069c8:	200012bc 	.word	0x200012bc

080069cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069d0:	4b03      	ldr	r3, [pc, #12]	; (80069e0 <vTaskMissedYield+0x14>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
}
 80069d6:	bf00      	nop
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	200012b8 	.word	0x200012b8

080069e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069ec:	f000 f852 	bl	8006a94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <prvIdleTask+0x28>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d9f9      	bls.n	80069ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <prvIdleTask+0x2c>)
 80069fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a08:	e7f0      	b.n	80069ec <prvIdleTask+0x8>
 8006a0a:	bf00      	nop
 8006a0c:	20000dd4 	.word	0x20000dd4
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	607b      	str	r3, [r7, #4]
 8006a1e:	e00c      	b.n	8006a3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <prvInitialiseTaskLists+0x60>)
 8006a2c:	4413      	add	r3, r2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fcca 	bl	80053c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3301      	adds	r3, #1
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b37      	cmp	r3, #55	; 0x37
 8006a3e:	d9ef      	bls.n	8006a20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a40:	480d      	ldr	r0, [pc, #52]	; (8006a78 <prvInitialiseTaskLists+0x64>)
 8006a42:	f7fe fcc1 	bl	80053c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a46:	480d      	ldr	r0, [pc, #52]	; (8006a7c <prvInitialiseTaskLists+0x68>)
 8006a48:	f7fe fcbe 	bl	80053c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a4c:	480c      	ldr	r0, [pc, #48]	; (8006a80 <prvInitialiseTaskLists+0x6c>)
 8006a4e:	f7fe fcbb 	bl	80053c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a52:	480c      	ldr	r0, [pc, #48]	; (8006a84 <prvInitialiseTaskLists+0x70>)
 8006a54:	f7fe fcb8 	bl	80053c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a58:	480b      	ldr	r0, [pc, #44]	; (8006a88 <prvInitialiseTaskLists+0x74>)
 8006a5a:	f7fe fcb5 	bl	80053c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <prvInitialiseTaskLists+0x78>)
 8006a60:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <prvInitialiseTaskLists+0x64>)
 8006a62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <prvInitialiseTaskLists+0x7c>)
 8006a66:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <prvInitialiseTaskLists+0x68>)
 8006a68:	601a      	str	r2, [r3, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000dd4 	.word	0x20000dd4
 8006a78:	20001234 	.word	0x20001234
 8006a7c:	20001248 	.word	0x20001248
 8006a80:	20001264 	.word	0x20001264
 8006a84:	20001278 	.word	0x20001278
 8006a88:	20001290 	.word	0x20001290
 8006a8c:	2000125c 	.word	0x2000125c
 8006a90:	20001260 	.word	0x20001260

08006a94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a9a:	e019      	b.n	8006ad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a9c:	f000 fdda 	bl	8007654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa0:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <prvCheckTasksWaitingTermination+0x50>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe fd15 	bl	80054dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <prvCheckTasksWaitingTermination+0x54>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	4a0b      	ldr	r2, [pc, #44]	; (8006ae8 <prvCheckTasksWaitingTermination+0x54>)
 8006aba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006abc:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <prvCheckTasksWaitingTermination+0x58>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <prvCheckTasksWaitingTermination+0x58>)
 8006ac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ac6:	f000 fdf5 	bl	80076b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f810 	bl	8006af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ad0:	4b06      	ldr	r3, [pc, #24]	; (8006aec <prvCheckTasksWaitingTermination+0x58>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e1      	bne.n	8006a9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20001278 	.word	0x20001278
 8006ae8:	200012a4 	.word	0x200012a4
 8006aec:	2000128c 	.word	0x2000128c

08006af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3354      	adds	r3, #84	; 0x54
 8006afc:	4618      	mov	r0, r3
 8006afe:	f001 f8f7 	bl	8007cf0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d108      	bne.n	8006b1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 ff8d 	bl	8007a30 <vPortFree>
				vPortFree( pxTCB );
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 ff8a 	bl	8007a30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b1c:	e018      	b.n	8006b50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d103      	bne.n	8006b30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 ff81 	bl	8007a30 <vPortFree>
	}
 8006b2e:	e00f      	b.n	8006b50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d00a      	beq.n	8006b50 <prvDeleteTCB+0x60>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	60fb      	str	r3, [r7, #12]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <prvDeleteTCB+0x5e>
	}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b5e:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <prvResetNextTaskUnblockTime+0x38>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b68:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <prvResetNextTaskUnblockTime+0x3c>)
 8006b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b70:	e008      	b.n	8006b84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b72:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <prvResetNextTaskUnblockTime+0x38>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	4a04      	ldr	r2, [pc, #16]	; (8006b94 <prvResetNextTaskUnblockTime+0x3c>)
 8006b82:	6013      	str	r3, [r2, #0]
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	2000125c 	.word	0x2000125c
 8006b94:	200012c4 	.word	0x200012c4

08006b98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <xTaskGetSchedulerState+0x34>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	607b      	str	r3, [r7, #4]
 8006baa:	e008      	b.n	8006bbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bac:	4b08      	ldr	r3, [pc, #32]	; (8006bd0 <xTaskGetSchedulerState+0x38>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	607b      	str	r3, [r7, #4]
 8006bb8:	e001      	b.n	8006bbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bbe:	687b      	ldr	r3, [r7, #4]
	}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	200012b0 	.word	0x200012b0
 8006bd0:	200012cc 	.word	0x200012cc

08006bd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d056      	beq.n	8006c98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bea:	4b2e      	ldr	r3, [pc, #184]	; (8006ca4 <xTaskPriorityDisinherit+0xd0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d00a      	beq.n	8006c0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	60fb      	str	r3, [r7, #12]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	60bb      	str	r3, [r7, #8]
}
 8006c24:	bf00      	nop
 8006c26:	e7fe      	b.n	8006c26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2c:	1e5a      	subs	r2, r3, #1
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d02c      	beq.n	8006c98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d128      	bne.n	8006c98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe fc46 	bl	80054dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	4b0f      	ldr	r3, [pc, #60]	; (8006ca8 <xTaskPriorityDisinherit+0xd4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d903      	bls.n	8006c78 <xTaskPriorityDisinherit+0xa4>
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <xTaskPriorityDisinherit+0xd4>)
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4a09      	ldr	r2, [pc, #36]	; (8006cac <xTaskPriorityDisinherit+0xd8>)
 8006c86:	441a      	add	r2, r3
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f7fe fbc7 	bl	8005422 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c94:	2301      	movs	r3, #1
 8006c96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c98:	697b      	ldr	r3, [r7, #20]
	}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000dd0 	.word	0x20000dd0
 8006ca8:	200012ac 	.word	0x200012ac
 8006cac:	20000dd4 	.word	0x20000dd4

08006cb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cba:	4b21      	ldr	r3, [pc, #132]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x90>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cc0:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fc08 	bl	80054dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d10a      	bne.n	8006cea <prvAddCurrentTaskToDelayedList+0x3a>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cda:	4b1a      	ldr	r3, [pc, #104]	; (8006d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4819      	ldr	r0, [pc, #100]	; (8006d48 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ce4:	f7fe fb9d 	bl	8005422 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ce8:	e026      	b.n	8006d38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4413      	add	r3, r2
 8006cf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d209      	bcs.n	8006d16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d02:	4b12      	ldr	r3, [pc, #72]	; (8006d4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	4b0f      	ldr	r3, [pc, #60]	; (8006d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f7fe fbab 	bl	800546a <vListInsert>
}
 8006d14:	e010      	b.n	8006d38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d16:	4b0e      	ldr	r3, [pc, #56]	; (8006d50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f7fe fba1 	bl	800546a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d202      	bcs.n	8006d38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d32:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	6013      	str	r3, [r2, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	200012a8 	.word	0x200012a8
 8006d44:	20000dd0 	.word	0x20000dd0
 8006d48:	20001290 	.word	0x20001290
 8006d4c:	20001260 	.word	0x20001260
 8006d50:	2000125c 	.word	0x2000125c
 8006d54:	200012c4 	.word	0x200012c4

08006d58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d62:	f000 fb07 	bl	8007374 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d66:	4b1c      	ldr	r3, [pc, #112]	; (8006dd8 <xTimerCreateTimerTask+0x80>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d021      	beq.n	8006db2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d76:	1d3a      	adds	r2, r7, #4
 8006d78:	f107 0108 	add.w	r1, r7, #8
 8006d7c:	f107 030c 	add.w	r3, r7, #12
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe fb07 	bl	8005394 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	9202      	str	r2, [sp, #8]
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	2302      	movs	r3, #2
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	2300      	movs	r3, #0
 8006d96:	460a      	mov	r2, r1
 8006d98:	4910      	ldr	r1, [pc, #64]	; (8006ddc <xTimerCreateTimerTask+0x84>)
 8006d9a:	4811      	ldr	r0, [pc, #68]	; (8006de0 <xTimerCreateTimerTask+0x88>)
 8006d9c:	f7ff f8b4 	bl	8005f08 <xTaskCreateStatic>
 8006da0:	4603      	mov	r3, r0
 8006da2:	4a10      	ldr	r2, [pc, #64]	; (8006de4 <xTimerCreateTimerTask+0x8c>)
 8006da4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006da6:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <xTimerCreateTimerTask+0x8c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006dae:	2301      	movs	r3, #1
 8006db0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10a      	bne.n	8006dce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	613b      	str	r3, [r7, #16]
}
 8006dca:	bf00      	nop
 8006dcc:	e7fe      	b.n	8006dcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006dce:	697b      	ldr	r3, [r7, #20]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20001300 	.word	0x20001300
 8006ddc:	080086cc 	.word	0x080086cc
 8006de0:	08006f1d 	.word	0x08006f1d
 8006de4:	20001304 	.word	0x20001304

08006de8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	; 0x28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	623b      	str	r3, [r7, #32]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e16:	4b1a      	ldr	r3, [pc, #104]	; (8006e80 <xTimerGenericCommand+0x98>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d02a      	beq.n	8006e74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b05      	cmp	r3, #5
 8006e2e:	dc18      	bgt.n	8006e62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e30:	f7ff feb2 	bl	8006b98 <xTaskGetSchedulerState>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d109      	bne.n	8006e4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e3a:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <xTimerGenericCommand+0x98>)
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	f107 0110 	add.w	r1, r7, #16
 8006e42:	2300      	movs	r3, #0
 8006e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e46:	f7fe fc77 	bl	8005738 <xQueueGenericSend>
 8006e4a:	6278      	str	r0, [r7, #36]	; 0x24
 8006e4c:	e012      	b.n	8006e74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <xTimerGenericCommand+0x98>)
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	f107 0110 	add.w	r1, r7, #16
 8006e56:	2300      	movs	r3, #0
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f7fe fc6d 	bl	8005738 <xQueueGenericSend>
 8006e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e60:	e008      	b.n	8006e74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e62:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <xTimerGenericCommand+0x98>)
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	f107 0110 	add.w	r1, r7, #16
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	f7fe fd61 	bl	8005934 <xQueueGenericSendFromISR>
 8006e72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3728      	adds	r7, #40	; 0x28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20001300 	.word	0x20001300

08006e84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e8e:	4b22      	ldr	r3, [pc, #136]	; (8006f18 <prvProcessExpiredTimer+0x94>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fb1d 	bl	80054dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d022      	beq.n	8006ef6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	18d1      	adds	r1, r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	6978      	ldr	r0, [r7, #20]
 8006ebe:	f000 f8d1 	bl	8007064 <prvInsertTimerInActiveList>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01f      	beq.n	8006f08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	6978      	ldr	r0, [r7, #20]
 8006ed4:	f7ff ff88 	bl	8006de8 <xTimerGenericCommand>
 8006ed8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d113      	bne.n	8006f08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	60fb      	str	r3, [r7, #12]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006efc:	f023 0301 	bic.w	r3, r3, #1
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	6978      	ldr	r0, [r7, #20]
 8006f0e:	4798      	blx	r3
}
 8006f10:	bf00      	nop
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	200012f8 	.word	0x200012f8

08006f1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f24:	f107 0308 	add.w	r3, r7, #8
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f857 	bl	8006fdc <prvGetNextExpireTime>
 8006f2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4619      	mov	r1, r3
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f803 	bl	8006f40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f3a:	f000 f8d5 	bl	80070e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f3e:	e7f1      	b.n	8006f24 <prvTimerTask+0x8>

08006f40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f4a:	f7ff fa39 	bl	80063c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f4e:	f107 0308 	add.w	r3, r7, #8
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f866 	bl	8007024 <prvSampleTimeNow>
 8006f58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d130      	bne.n	8006fc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <prvProcessTimerOrBlockTask+0x3c>
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d806      	bhi.n	8006f7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f6e:	f7ff fa35 	bl	80063dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff ff85 	bl	8006e84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f7a:	e024      	b.n	8006fc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f82:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <prvProcessTimerOrBlockTask+0x90>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <prvProcessTimerOrBlockTask+0x50>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e000      	b.n	8006f92 <prvProcessTimerOrBlockTask+0x52>
 8006f90:	2300      	movs	r3, #0
 8006f92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <prvProcessTimerOrBlockTask+0x94>)
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f7fe ff7d 	bl	8005ea0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006fa6:	f7ff fa19 	bl	80063dc <xTaskResumeAll>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fb0:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <prvProcessTimerOrBlockTask+0x98>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
}
 8006fc0:	e001      	b.n	8006fc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fc2:	f7ff fa0b 	bl	80063dc <xTaskResumeAll>
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	200012fc 	.word	0x200012fc
 8006fd4:	20001300 	.word	0x20001300
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <prvGetNextExpireTime+0x44>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <prvGetNextExpireTime+0x16>
 8006fee:	2201      	movs	r2, #1
 8006ff0:	e000      	b.n	8006ff4 <prvGetNextExpireTime+0x18>
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d105      	bne.n	800700c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007000:	4b07      	ldr	r3, [pc, #28]	; (8007020 <prvGetNextExpireTime+0x44>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e001      	b.n	8007010 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007010:	68fb      	ldr	r3, [r7, #12]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	200012f8 	.word	0x200012f8

08007024 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800702c:	f7ff fa74 	bl	8006518 <xTaskGetTickCount>
 8007030:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007032:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <prvSampleTimeNow+0x3c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	429a      	cmp	r2, r3
 800703a:	d205      	bcs.n	8007048 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800703c:	f000 f936 	bl	80072ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	e002      	b.n	800704e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800704e:	4a04      	ldr	r2, [pc, #16]	; (8007060 <prvSampleTimeNow+0x3c>)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007054:	68fb      	ldr	r3, [r7, #12]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20001308 	.word	0x20001308

08007064 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	429a      	cmp	r2, r3
 8007088:	d812      	bhi.n	80070b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	429a      	cmp	r2, r3
 8007096:	d302      	bcc.n	800709e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e01b      	b.n	80070d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800709e:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <prvInsertTimerInActiveList+0x7c>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fe f9de 	bl	800546a <vListInsert>
 80070ae:	e012      	b.n	80070d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d206      	bcs.n	80070c6 <prvInsertTimerInActiveList+0x62>
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d302      	bcc.n	80070c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	e007      	b.n	80070d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070c6:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <prvInsertTimerInActiveList+0x80>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f7fe f9ca 	bl	800546a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070d6:	697b      	ldr	r3, [r7, #20]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	200012fc 	.word	0x200012fc
 80070e4:	200012f8 	.word	0x200012f8

080070e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08e      	sub	sp, #56	; 0x38
 80070ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ee:	e0ca      	b.n	8007286 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da18      	bge.n	8007128 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070f6:	1d3b      	adds	r3, r7, #4
 80070f8:	3304      	adds	r3, #4
 80070fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	61fb      	str	r3, [r7, #28]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800711e:	6850      	ldr	r0, [r2, #4]
 8007120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007122:	6892      	ldr	r2, [r2, #8]
 8007124:	4611      	mov	r1, r2
 8007126:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	f2c0 80ab 	blt.w	8007286 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	3304      	adds	r3, #4
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe f9cb 	bl	80054dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007146:	463b      	mov	r3, r7
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff ff6b 	bl	8007024 <prvSampleTimeNow>
 800714e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b09      	cmp	r3, #9
 8007154:	f200 8096 	bhi.w	8007284 <prvProcessReceivedCommands+0x19c>
 8007158:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <prvProcessReceivedCommands+0x78>)
 800715a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715e:	bf00      	nop
 8007160:	08007189 	.word	0x08007189
 8007164:	08007189 	.word	0x08007189
 8007168:	08007189 	.word	0x08007189
 800716c:	080071fd 	.word	0x080071fd
 8007170:	08007211 	.word	0x08007211
 8007174:	0800725b 	.word	0x0800725b
 8007178:	08007189 	.word	0x08007189
 800717c:	08007189 	.word	0x08007189
 8007180:	080071fd 	.word	0x080071fd
 8007184:	08007211 	.word	0x08007211
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	b2da      	uxtb	r2, r3
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	18d1      	adds	r1, r2, r3
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a8:	f7ff ff5c 	bl	8007064 <prvInsertTimerInActiveList>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d069      	beq.n	8007286 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d05e      	beq.n	8007286 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	441a      	add	r2, r3
 80071d0:	2300      	movs	r3, #0
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	2100      	movs	r1, #0
 80071d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071da:	f7ff fe05 	bl	8006de8 <xTimerGenericCommand>
 80071de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d14f      	bne.n	8007286 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	61bb      	str	r3, [r7, #24]
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007202:	f023 0301 	bic.w	r3, r3, #1
 8007206:	b2da      	uxtb	r2, r3
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800720e:	e03a      	b.n	8007286 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007216:	f043 0301 	orr.w	r3, r3, #1
 800721a:	b2da      	uxtb	r2, r3
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	617b      	str	r3, [r7, #20]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	18d1      	adds	r1, r2, r3
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007254:	f7ff ff06 	bl	8007064 <prvInsertTimerInActiveList>
					break;
 8007258:	e015      	b.n	8007286 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800726a:	f000 fbe1 	bl	8007a30 <vPortFree>
 800726e:	e00a      	b.n	8007286 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007276:	f023 0301 	bic.w	r3, r3, #1
 800727a:	b2da      	uxtb	r2, r3
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007282:	e000      	b.n	8007286 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007284:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007286:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <prvProcessReceivedCommands+0x1c0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	1d39      	adds	r1, r7, #4
 800728c:	2200      	movs	r2, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fbec 	bl	8005a6c <xQueueReceive>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	f47f af2a 	bne.w	80070f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	3730      	adds	r7, #48	; 0x30
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20001300 	.word	0x20001300

080072ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072b2:	e048      	b.n	8007346 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072b4:	4b2d      	ldr	r3, [pc, #180]	; (800736c <prvSwitchTimerLists+0xc0>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072be:	4b2b      	ldr	r3, [pc, #172]	; (800736c <prvSwitchTimerLists+0xc0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe f905 	bl	80054dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d02e      	beq.n	8007346 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	4413      	add	r3, r2
 80072f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d90e      	bls.n	8007318 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007306:	4b19      	ldr	r3, [pc, #100]	; (800736c <prvSwitchTimerLists+0xc0>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3304      	adds	r3, #4
 800730e:	4619      	mov	r1, r3
 8007310:	4610      	mov	r0, r2
 8007312:	f7fe f8aa 	bl	800546a <vListInsert>
 8007316:	e016      	b.n	8007346 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007318:	2300      	movs	r3, #0
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	2300      	movs	r3, #0
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	2100      	movs	r1, #0
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f7ff fd60 	bl	8006de8 <xTimerGenericCommand>
 8007328:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	603b      	str	r3, [r7, #0]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <prvSwitchTimerLists+0xc0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1b1      	bne.n	80072b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007350:	4b06      	ldr	r3, [pc, #24]	; (800736c <prvSwitchTimerLists+0xc0>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007356:	4b06      	ldr	r3, [pc, #24]	; (8007370 <prvSwitchTimerLists+0xc4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a04      	ldr	r2, [pc, #16]	; (800736c <prvSwitchTimerLists+0xc0>)
 800735c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800735e:	4a04      	ldr	r2, [pc, #16]	; (8007370 <prvSwitchTimerLists+0xc4>)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	6013      	str	r3, [r2, #0]
}
 8007364:	bf00      	nop
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	200012f8 	.word	0x200012f8
 8007370:	200012fc 	.word	0x200012fc

08007374 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800737a:	f000 f96b 	bl	8007654 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800737e:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <prvCheckForValidListAndQueue+0x60>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d120      	bne.n	80073c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007386:	4814      	ldr	r0, [pc, #80]	; (80073d8 <prvCheckForValidListAndQueue+0x64>)
 8007388:	f7fe f81e 	bl	80053c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800738c:	4813      	ldr	r0, [pc, #76]	; (80073dc <prvCheckForValidListAndQueue+0x68>)
 800738e:	f7fe f81b 	bl	80053c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007392:	4b13      	ldr	r3, [pc, #76]	; (80073e0 <prvCheckForValidListAndQueue+0x6c>)
 8007394:	4a10      	ldr	r2, [pc, #64]	; (80073d8 <prvCheckForValidListAndQueue+0x64>)
 8007396:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007398:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <prvCheckForValidListAndQueue+0x70>)
 800739a:	4a10      	ldr	r2, [pc, #64]	; (80073dc <prvCheckForValidListAndQueue+0x68>)
 800739c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800739e:	2300      	movs	r3, #0
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	4b11      	ldr	r3, [pc, #68]	; (80073e8 <prvCheckForValidListAndQueue+0x74>)
 80073a4:	4a11      	ldr	r2, [pc, #68]	; (80073ec <prvCheckForValidListAndQueue+0x78>)
 80073a6:	2110      	movs	r1, #16
 80073a8:	200a      	movs	r0, #10
 80073aa:	f7fe f929 	bl	8005600 <xQueueGenericCreateStatic>
 80073ae:	4603      	mov	r3, r0
 80073b0:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <prvCheckForValidListAndQueue+0x60>)
 80073b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073b4:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <prvCheckForValidListAndQueue+0x60>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <prvCheckForValidListAndQueue+0x60>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	490b      	ldr	r1, [pc, #44]	; (80073f0 <prvCheckForValidListAndQueue+0x7c>)
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fd42 	bl	8005e4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073c8:	f000 f974 	bl	80076b4 <vPortExitCritical>
}
 80073cc:	bf00      	nop
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20001300 	.word	0x20001300
 80073d8:	200012d0 	.word	0x200012d0
 80073dc:	200012e4 	.word	0x200012e4
 80073e0:	200012f8 	.word	0x200012f8
 80073e4:	200012fc 	.word	0x200012fc
 80073e8:	200013ac 	.word	0x200013ac
 80073ec:	2000130c 	.word	0x2000130c
 80073f0:	080086d4 	.word	0x080086d4

080073f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3b04      	subs	r3, #4
 8007404:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800740c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3b04      	subs	r3, #4
 8007412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f023 0201 	bic.w	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3b04      	subs	r3, #4
 8007422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007424:	4a0c      	ldr	r2, [pc, #48]	; (8007458 <pxPortInitialiseStack+0x64>)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3b14      	subs	r3, #20
 800742e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3b04      	subs	r3, #4
 800743a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f06f 0202 	mvn.w	r2, #2
 8007442:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3b20      	subs	r3, #32
 8007448:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800744a:	68fb      	ldr	r3, [r7, #12]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	0800745d 	.word	0x0800745d

0800745c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007466:	4b12      	ldr	r3, [pc, #72]	; (80074b0 <prvTaskExitError+0x54>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746e:	d00a      	beq.n	8007486 <prvTaskExitError+0x2a>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <prvTaskExitError+0x28>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	60bb      	str	r3, [r7, #8]
}
 8007498:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800749a:	bf00      	nop
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0fc      	beq.n	800749c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	2000001c 	.word	0x2000001c
	...

080074c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <pxCurrentTCBConst2>)
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	6808      	ldr	r0, [r1, #0]
 80074c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	f380 8809 	msr	PSP, r0
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8811 	msr	BASEPRI, r0
 80074da:	4770      	bx	lr
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst2>:
 80074e0:	20000dd0 	.word	0x20000dd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074e8:	4808      	ldr	r0, [pc, #32]	; (800750c <prvPortStartFirstTask+0x24>)
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	6800      	ldr	r0, [r0, #0]
 80074ee:	f380 8808 	msr	MSP, r0
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f380 8814 	msr	CONTROL, r0
 80074fa:	b662      	cpsie	i
 80074fc:	b661      	cpsie	f
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	df00      	svc	0
 8007508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800750a:	bf00      	nop
 800750c:	e000ed08 	.word	0xe000ed08

08007510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007516:	4b46      	ldr	r3, [pc, #280]	; (8007630 <xPortStartScheduler+0x120>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a46      	ldr	r2, [pc, #280]	; (8007634 <xPortStartScheduler+0x124>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10a      	bne.n	8007536 <xPortStartScheduler+0x26>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	613b      	str	r3, [r7, #16]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007536:	4b3e      	ldr	r3, [pc, #248]	; (8007630 <xPortStartScheduler+0x120>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a3f      	ldr	r2, [pc, #252]	; (8007638 <xPortStartScheduler+0x128>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d10a      	bne.n	8007556 <xPortStartScheduler+0x46>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	60fb      	str	r3, [r7, #12]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007556:	4b39      	ldr	r3, [pc, #228]	; (800763c <xPortStartScheduler+0x12c>)
 8007558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	22ff      	movs	r2, #255	; 0xff
 8007566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007578:	b2da      	uxtb	r2, r3
 800757a:	4b31      	ldr	r3, [pc, #196]	; (8007640 <xPortStartScheduler+0x130>)
 800757c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800757e:	4b31      	ldr	r3, [pc, #196]	; (8007644 <xPortStartScheduler+0x134>)
 8007580:	2207      	movs	r2, #7
 8007582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007584:	e009      	b.n	800759a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007586:	4b2f      	ldr	r3, [pc, #188]	; (8007644 <xPortStartScheduler+0x134>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3b01      	subs	r3, #1
 800758c:	4a2d      	ldr	r2, [pc, #180]	; (8007644 <xPortStartScheduler+0x134>)
 800758e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	b2db      	uxtb	r3, r3
 8007598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a2:	2b80      	cmp	r3, #128	; 0x80
 80075a4:	d0ef      	beq.n	8007586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075a6:	4b27      	ldr	r3, [pc, #156]	; (8007644 <xPortStartScheduler+0x134>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f1c3 0307 	rsb	r3, r3, #7
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d00a      	beq.n	80075c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60bb      	str	r3, [r7, #8]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075c8:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <xPortStartScheduler+0x134>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	021b      	lsls	r3, r3, #8
 80075ce:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <xPortStartScheduler+0x134>)
 80075d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075d2:	4b1c      	ldr	r3, [pc, #112]	; (8007644 <xPortStartScheduler+0x134>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075da:	4a1a      	ldr	r2, [pc, #104]	; (8007644 <xPortStartScheduler+0x134>)
 80075dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075e6:	4b18      	ldr	r3, [pc, #96]	; (8007648 <xPortStartScheduler+0x138>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a17      	ldr	r2, [pc, #92]	; (8007648 <xPortStartScheduler+0x138>)
 80075ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075f2:	4b15      	ldr	r3, [pc, #84]	; (8007648 <xPortStartScheduler+0x138>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a14      	ldr	r2, [pc, #80]	; (8007648 <xPortStartScheduler+0x138>)
 80075f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075fe:	f000 f8dd 	bl	80077bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <xPortStartScheduler+0x13c>)
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007608:	f000 f8fc 	bl	8007804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800760c:	4b10      	ldr	r3, [pc, #64]	; (8007650 <xPortStartScheduler+0x140>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a0f      	ldr	r2, [pc, #60]	; (8007650 <xPortStartScheduler+0x140>)
 8007612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007618:	f7ff ff66 	bl	80074e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800761c:	f7ff f846 	bl	80066ac <vTaskSwitchContext>
	prvTaskExitError();
 8007620:	f7ff ff1c 	bl	800745c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	e000ed00 	.word	0xe000ed00
 8007634:	410fc271 	.word	0x410fc271
 8007638:	410fc270 	.word	0x410fc270
 800763c:	e000e400 	.word	0xe000e400
 8007640:	200013fc 	.word	0x200013fc
 8007644:	20001400 	.word	0x20001400
 8007648:	e000ed20 	.word	0xe000ed20
 800764c:	2000001c 	.word	0x2000001c
 8007650:	e000ef34 	.word	0xe000ef34

08007654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	607b      	str	r3, [r7, #4]
}
 800766c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800766e:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <vPortEnterCritical+0x58>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3301      	adds	r3, #1
 8007674:	4a0d      	ldr	r2, [pc, #52]	; (80076ac <vPortEnterCritical+0x58>)
 8007676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007678:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <vPortEnterCritical+0x58>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d10f      	bne.n	80076a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <vPortEnterCritical+0x5c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	603b      	str	r3, [r7, #0]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <vPortEnterCritical+0x4a>
	}
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	2000001c 	.word	0x2000001c
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ba:	4b12      	ldr	r3, [pc, #72]	; (8007704 <vPortExitCritical+0x50>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10a      	bne.n	80076d8 <vPortExitCritical+0x24>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	607b      	str	r3, [r7, #4]
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <vPortExitCritical+0x50>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3b01      	subs	r3, #1
 80076de:	4a09      	ldr	r2, [pc, #36]	; (8007704 <vPortExitCritical+0x50>)
 80076e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076e2:	4b08      	ldr	r3, [pc, #32]	; (8007704 <vPortExitCritical+0x50>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d105      	bne.n	80076f6 <vPortExitCritical+0x42>
 80076ea:	2300      	movs	r3, #0
 80076ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	f383 8811 	msr	BASEPRI, r3
}
 80076f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	2000001c 	.word	0x2000001c
	...

08007710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007710:	f3ef 8009 	mrs	r0, PSP
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	4b15      	ldr	r3, [pc, #84]	; (8007770 <pxCurrentTCBConst>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	f01e 0f10 	tst.w	lr, #16
 8007720:	bf08      	it	eq
 8007722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007734:	f380 8811 	msr	BASEPRI, r0
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f7fe ffb4 	bl	80066ac <vTaskSwitchContext>
 8007744:	f04f 0000 	mov.w	r0, #0
 8007748:	f380 8811 	msr	BASEPRI, r0
 800774c:	bc09      	pop	{r0, r3}
 800774e:	6819      	ldr	r1, [r3, #0]
 8007750:	6808      	ldr	r0, [r1, #0]
 8007752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007756:	f01e 0f10 	tst.w	lr, #16
 800775a:	bf08      	it	eq
 800775c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007760:	f380 8809 	msr	PSP, r0
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w

08007770 <pxCurrentTCBConst>:
 8007770:	20000dd0 	.word	0x20000dd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
}
 8007790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007792:	f7fe fed1 	bl	8006538 <xTaskIncrementTick>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <xPortSysTickHandler+0x40>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	2300      	movs	r3, #0
 80077a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f383 8811 	msr	BASEPRI, r3
}
 80077ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <vPortSetupTimerInterrupt+0x34>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077c6:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <vPortSetupTimerInterrupt+0x38>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077cc:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <vPortSetupTimerInterrupt+0x3c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <vPortSetupTimerInterrupt+0x40>)
 80077d2:	fba2 2303 	umull	r2, r3, r2, r3
 80077d6:	099b      	lsrs	r3, r3, #6
 80077d8:	4a09      	ldr	r2, [pc, #36]	; (8007800 <vPortSetupTimerInterrupt+0x44>)
 80077da:	3b01      	subs	r3, #1
 80077dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077de:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <vPortSetupTimerInterrupt+0x34>)
 80077e0:	2207      	movs	r2, #7
 80077e2:	601a      	str	r2, [r3, #0]
}
 80077e4:	bf00      	nop
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	e000e010 	.word	0xe000e010
 80077f4:	e000e018 	.word	0xe000e018
 80077f8:	20000008 	.word	0x20000008
 80077fc:	10624dd3 	.word	0x10624dd3
 8007800:	e000e014 	.word	0xe000e014

08007804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007814 <vPortEnableVFP+0x10>
 8007808:	6801      	ldr	r1, [r0, #0]
 800780a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800780e:	6001      	str	r1, [r0, #0]
 8007810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007812:	bf00      	nop
 8007814:	e000ed88 	.word	0xe000ed88

08007818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800781e:	f3ef 8305 	mrs	r3, IPSR
 8007822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b0f      	cmp	r3, #15
 8007828:	d914      	bls.n	8007854 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800782a:	4a17      	ldr	r2, [pc, #92]	; (8007888 <vPortValidateInterruptPriority+0x70>)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007834:	4b15      	ldr	r3, [pc, #84]	; (800788c <vPortValidateInterruptPriority+0x74>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	7afa      	ldrb	r2, [r7, #11]
 800783a:	429a      	cmp	r2, r3
 800783c:	d20a      	bcs.n	8007854 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	607b      	str	r3, [r7, #4]
}
 8007850:	bf00      	nop
 8007852:	e7fe      	b.n	8007852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007854:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <vPortValidateInterruptPriority+0x78>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800785c:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <vPortValidateInterruptPriority+0x7c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d90a      	bls.n	800787a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	603b      	str	r3, [r7, #0]
}
 8007876:	bf00      	nop
 8007878:	e7fe      	b.n	8007878 <vPortValidateInterruptPriority+0x60>
	}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	e000e3f0 	.word	0xe000e3f0
 800788c:	200013fc 	.word	0x200013fc
 8007890:	e000ed0c 	.word	0xe000ed0c
 8007894:	20001400 	.word	0x20001400

08007898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078a4:	f7fe fd8c 	bl	80063c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078a8:	4b5b      	ldr	r3, [pc, #364]	; (8007a18 <pvPortMalloc+0x180>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078b0:	f000 f920 	bl	8007af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078b4:	4b59      	ldr	r3, [pc, #356]	; (8007a1c <pvPortMalloc+0x184>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f040 8093 	bne.w	80079e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01d      	beq.n	8007904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078c8:	2208      	movs	r2, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d014      	beq.n	8007904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f023 0307 	bic.w	r3, r3, #7
 80078e0:	3308      	adds	r3, #8
 80078e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <pvPortMalloc+0x6c>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	617b      	str	r3, [r7, #20]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d06e      	beq.n	80079e8 <pvPortMalloc+0x150>
 800790a:	4b45      	ldr	r3, [pc, #276]	; (8007a20 <pvPortMalloc+0x188>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d869      	bhi.n	80079e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007914:	4b43      	ldr	r3, [pc, #268]	; (8007a24 <pvPortMalloc+0x18c>)
 8007916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007918:	4b42      	ldr	r3, [pc, #264]	; (8007a24 <pvPortMalloc+0x18c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800791e:	e004      	b.n	800792a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	429a      	cmp	r2, r3
 8007932:	d903      	bls.n	800793c <pvPortMalloc+0xa4>
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f1      	bne.n	8007920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800793c:	4b36      	ldr	r3, [pc, #216]	; (8007a18 <pvPortMalloc+0x180>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007942:	429a      	cmp	r2, r3
 8007944:	d050      	beq.n	80079e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2208      	movs	r2, #8
 800794c:	4413      	add	r3, r2
 800794e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	2308      	movs	r3, #8
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	429a      	cmp	r2, r3
 8007966:	d91f      	bls.n	80079a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4413      	add	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <pvPortMalloc+0xf8>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	613b      	str	r3, [r7, #16]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	1ad2      	subs	r2, r2, r3
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079a2:	69b8      	ldr	r0, [r7, #24]
 80079a4:	f000 f908 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079a8:	4b1d      	ldr	r3, [pc, #116]	; (8007a20 <pvPortMalloc+0x188>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	4a1b      	ldr	r2, [pc, #108]	; (8007a20 <pvPortMalloc+0x188>)
 80079b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079b6:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <pvPortMalloc+0x188>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <pvPortMalloc+0x190>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d203      	bcs.n	80079ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079c2:	4b17      	ldr	r3, [pc, #92]	; (8007a20 <pvPortMalloc+0x188>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a18      	ldr	r2, [pc, #96]	; (8007a28 <pvPortMalloc+0x190>)
 80079c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <pvPortMalloc+0x184>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079de:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <pvPortMalloc+0x194>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3301      	adds	r3, #1
 80079e4:	4a11      	ldr	r2, [pc, #68]	; (8007a2c <pvPortMalloc+0x194>)
 80079e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079e8:	f7fe fcf8 	bl	80063dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <pvPortMalloc+0x174>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60fb      	str	r3, [r7, #12]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <pvPortMalloc+0x172>
	return pvReturn;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3728      	adds	r7, #40	; 0x28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	2000500c 	.word	0x2000500c
 8007a1c:	20005020 	.word	0x20005020
 8007a20:	20005010 	.word	0x20005010
 8007a24:	20005004 	.word	0x20005004
 8007a28:	20005014 	.word	0x20005014
 8007a2c:	20005018 	.word	0x20005018

08007a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d04d      	beq.n	8007ade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a42:	2308      	movs	r3, #8
 8007a44:	425b      	negs	r3, r3
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4413      	add	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <vPortFree+0xb8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10a      	bne.n	8007a74 <vPortFree+0x44>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	60fb      	str	r3, [r7, #12]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <vPortFree+0x62>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	60bb      	str	r3, [r7, #8]
}
 8007a8e:	bf00      	nop
 8007a90:	e7fe      	b.n	8007a90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <vPortFree+0xb8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01e      	beq.n	8007ade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d11a      	bne.n	8007ade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <vPortFree+0xb8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	401a      	ands	r2, r3
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ab8:	f7fe fc82 	bl	80063c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <vPortFree+0xbc>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	4a09      	ldr	r2, [pc, #36]	; (8007aec <vPortFree+0xbc>)
 8007ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aca:	6938      	ldr	r0, [r7, #16]
 8007acc:	f000 f874 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <vPortFree+0xc0>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <vPortFree+0xc0>)
 8007ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ada:	f7fe fc7f 	bl	80063dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20005020 	.word	0x20005020
 8007aec:	20005010 	.word	0x20005010
 8007af0:	2000501c 	.word	0x2000501c

08007af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007afa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b00:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <prvHeapInit+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00c      	beq.n	8007b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3307      	adds	r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0307 	bic.w	r3, r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <prvHeapInit+0xac>)
 8007b24:	4413      	add	r3, r2
 8007b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ba4 <prvHeapInit+0xb0>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b32:	4b1c      	ldr	r3, [pc, #112]	; (8007ba4 <prvHeapInit+0xb0>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b40:	2208      	movs	r2, #8
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b5e:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b74:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <prvHeapInit+0xb8>)
 8007b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <prvHeapInit+0xbc>)
 8007b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b8c:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <prvHeapInit+0xc0>)
 8007b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b92:	601a      	str	r2, [r3, #0]
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	20001404 	.word	0x20001404
 8007ba4:	20005004 	.word	0x20005004
 8007ba8:	2000500c 	.word	0x2000500c
 8007bac:	20005014 	.word	0x20005014
 8007bb0:	20005010 	.word	0x20005010
 8007bb4:	20005020 	.word	0x20005020

08007bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <prvInsertBlockIntoFreeList+0xac>)
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e002      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x14>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d8f7      	bhi.n	8007bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d108      	bne.n	8007bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	441a      	add	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d118      	bne.n	8007c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d00d      	beq.n	8007c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	441a      	add	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e008      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e003      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d002      	beq.n	8007c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20005004 	.word	0x20005004
 8007c68:	2000500c 	.word	0x2000500c

08007c6c <siprintf>:
 8007c6c:	b40e      	push	{r1, r2, r3}
 8007c6e:	b500      	push	{lr}
 8007c70:	b09c      	sub	sp, #112	; 0x70
 8007c72:	ab1d      	add	r3, sp, #116	; 0x74
 8007c74:	9002      	str	r0, [sp, #8]
 8007c76:	9006      	str	r0, [sp, #24]
 8007c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c7c:	4809      	ldr	r0, [pc, #36]	; (8007ca4 <siprintf+0x38>)
 8007c7e:	9107      	str	r1, [sp, #28]
 8007c80:	9104      	str	r1, [sp, #16]
 8007c82:	4909      	ldr	r1, [pc, #36]	; (8007ca8 <siprintf+0x3c>)
 8007c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c88:	9105      	str	r1, [sp, #20]
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	a902      	add	r1, sp, #8
 8007c90:	f000 fa10 	bl	80080b4 <_svfiprintf_r>
 8007c94:	9b02      	ldr	r3, [sp, #8]
 8007c96:	2200      	movs	r2, #0
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	b01c      	add	sp, #112	; 0x70
 8007c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ca0:	b003      	add	sp, #12
 8007ca2:	4770      	bx	lr
 8007ca4:	2000006c 	.word	0x2000006c
 8007ca8:	ffff0208 	.word	0xffff0208

08007cac <memmove>:
 8007cac:	4288      	cmp	r0, r1
 8007cae:	b510      	push	{r4, lr}
 8007cb0:	eb01 0402 	add.w	r4, r1, r2
 8007cb4:	d902      	bls.n	8007cbc <memmove+0x10>
 8007cb6:	4284      	cmp	r4, r0
 8007cb8:	4623      	mov	r3, r4
 8007cba:	d807      	bhi.n	8007ccc <memmove+0x20>
 8007cbc:	1e43      	subs	r3, r0, #1
 8007cbe:	42a1      	cmp	r1, r4
 8007cc0:	d008      	beq.n	8007cd4 <memmove+0x28>
 8007cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cca:	e7f8      	b.n	8007cbe <memmove+0x12>
 8007ccc:	4402      	add	r2, r0
 8007cce:	4601      	mov	r1, r0
 8007cd0:	428a      	cmp	r2, r1
 8007cd2:	d100      	bne.n	8007cd6 <memmove+0x2a>
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cde:	e7f7      	b.n	8007cd0 <memmove+0x24>

08007ce0 <memset>:
 8007ce0:	4402      	add	r2, r0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d100      	bne.n	8007cea <memset+0xa>
 8007ce8:	4770      	bx	lr
 8007cea:	f803 1b01 	strb.w	r1, [r3], #1
 8007cee:	e7f9      	b.n	8007ce4 <memset+0x4>

08007cf0 <_reclaim_reent>:
 8007cf0:	4b29      	ldr	r3, [pc, #164]	; (8007d98 <_reclaim_reent+0xa8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4283      	cmp	r3, r0
 8007cf6:	b570      	push	{r4, r5, r6, lr}
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	d04b      	beq.n	8007d94 <_reclaim_reent+0xa4>
 8007cfc:	69c3      	ldr	r3, [r0, #28]
 8007cfe:	b143      	cbz	r3, 8007d12 <_reclaim_reent+0x22>
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d144      	bne.n	8007d90 <_reclaim_reent+0xa0>
 8007d06:	69e3      	ldr	r3, [r4, #28]
 8007d08:	6819      	ldr	r1, [r3, #0]
 8007d0a:	b111      	cbz	r1, 8007d12 <_reclaim_reent+0x22>
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 f87f 	bl	8007e10 <_free_r>
 8007d12:	6961      	ldr	r1, [r4, #20]
 8007d14:	b111      	cbz	r1, 8007d1c <_reclaim_reent+0x2c>
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 f87a 	bl	8007e10 <_free_r>
 8007d1c:	69e1      	ldr	r1, [r4, #28]
 8007d1e:	b111      	cbz	r1, 8007d26 <_reclaim_reent+0x36>
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 f875 	bl	8007e10 <_free_r>
 8007d26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007d28:	b111      	cbz	r1, 8007d30 <_reclaim_reent+0x40>
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 f870 	bl	8007e10 <_free_r>
 8007d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d32:	b111      	cbz	r1, 8007d3a <_reclaim_reent+0x4a>
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 f86b 	bl	8007e10 <_free_r>
 8007d3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d3c:	b111      	cbz	r1, 8007d44 <_reclaim_reent+0x54>
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 f866 	bl	8007e10 <_free_r>
 8007d44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007d46:	b111      	cbz	r1, 8007d4e <_reclaim_reent+0x5e>
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 f861 	bl	8007e10 <_free_r>
 8007d4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007d50:	b111      	cbz	r1, 8007d58 <_reclaim_reent+0x68>
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 f85c 	bl	8007e10 <_free_r>
 8007d58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007d5a:	b111      	cbz	r1, 8007d62 <_reclaim_reent+0x72>
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 f857 	bl	8007e10 <_free_r>
 8007d62:	6a23      	ldr	r3, [r4, #32]
 8007d64:	b1b3      	cbz	r3, 8007d94 <_reclaim_reent+0xa4>
 8007d66:	4620      	mov	r0, r4
 8007d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d6c:	4718      	bx	r3
 8007d6e:	5949      	ldr	r1, [r1, r5]
 8007d70:	b941      	cbnz	r1, 8007d84 <_reclaim_reent+0x94>
 8007d72:	3504      	adds	r5, #4
 8007d74:	69e3      	ldr	r3, [r4, #28]
 8007d76:	2d80      	cmp	r5, #128	; 0x80
 8007d78:	68d9      	ldr	r1, [r3, #12]
 8007d7a:	d1f8      	bne.n	8007d6e <_reclaim_reent+0x7e>
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 f847 	bl	8007e10 <_free_r>
 8007d82:	e7c0      	b.n	8007d06 <_reclaim_reent+0x16>
 8007d84:	680e      	ldr	r6, [r1, #0]
 8007d86:	4620      	mov	r0, r4
 8007d88:	f000 f842 	bl	8007e10 <_free_r>
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	e7ef      	b.n	8007d70 <_reclaim_reent+0x80>
 8007d90:	2500      	movs	r5, #0
 8007d92:	e7ef      	b.n	8007d74 <_reclaim_reent+0x84>
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
 8007d96:	bf00      	nop
 8007d98:	2000006c 	.word	0x2000006c

08007d9c <__errno>:
 8007d9c:	4b01      	ldr	r3, [pc, #4]	; (8007da4 <__errno+0x8>)
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	2000006c 	.word	0x2000006c

08007da8 <__libc_init_array>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	4d0d      	ldr	r5, [pc, #52]	; (8007de0 <__libc_init_array+0x38>)
 8007dac:	4c0d      	ldr	r4, [pc, #52]	; (8007de4 <__libc_init_array+0x3c>)
 8007dae:	1b64      	subs	r4, r4, r5
 8007db0:	10a4      	asrs	r4, r4, #2
 8007db2:	2600      	movs	r6, #0
 8007db4:	42a6      	cmp	r6, r4
 8007db6:	d109      	bne.n	8007dcc <__libc_init_array+0x24>
 8007db8:	4d0b      	ldr	r5, [pc, #44]	; (8007de8 <__libc_init_array+0x40>)
 8007dba:	4c0c      	ldr	r4, [pc, #48]	; (8007dec <__libc_init_array+0x44>)
 8007dbc:	f000 fc50 	bl	8008660 <_init>
 8007dc0:	1b64      	subs	r4, r4, r5
 8007dc2:	10a4      	asrs	r4, r4, #2
 8007dc4:	2600      	movs	r6, #0
 8007dc6:	42a6      	cmp	r6, r4
 8007dc8:	d105      	bne.n	8007dd6 <__libc_init_array+0x2e>
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd0:	4798      	blx	r3
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	e7ee      	b.n	8007db4 <__libc_init_array+0xc>
 8007dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dda:	4798      	blx	r3
 8007ddc:	3601      	adds	r6, #1
 8007dde:	e7f2      	b.n	8007dc6 <__libc_init_array+0x1e>
 8007de0:	0800951c 	.word	0x0800951c
 8007de4:	0800951c 	.word	0x0800951c
 8007de8:	0800951c 	.word	0x0800951c
 8007dec:	08009520 	.word	0x08009520

08007df0 <__retarget_lock_acquire_recursive>:
 8007df0:	4770      	bx	lr

08007df2 <__retarget_lock_release_recursive>:
 8007df2:	4770      	bx	lr

08007df4 <memcpy>:
 8007df4:	440a      	add	r2, r1
 8007df6:	4291      	cmp	r1, r2
 8007df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dfc:	d100      	bne.n	8007e00 <memcpy+0xc>
 8007dfe:	4770      	bx	lr
 8007e00:	b510      	push	{r4, lr}
 8007e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e0a:	4291      	cmp	r1, r2
 8007e0c:	d1f9      	bne.n	8007e02 <memcpy+0xe>
 8007e0e:	bd10      	pop	{r4, pc}

08007e10 <_free_r>:
 8007e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e12:	2900      	cmp	r1, #0
 8007e14:	d044      	beq.n	8007ea0 <_free_r+0x90>
 8007e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e1a:	9001      	str	r0, [sp, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e22:	bfb8      	it	lt
 8007e24:	18e4      	addlt	r4, r4, r3
 8007e26:	f000 f8df 	bl	8007fe8 <__malloc_lock>
 8007e2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <_free_r+0x94>)
 8007e2c:	9801      	ldr	r0, [sp, #4]
 8007e2e:	6813      	ldr	r3, [r2, #0]
 8007e30:	b933      	cbnz	r3, 8007e40 <_free_r+0x30>
 8007e32:	6063      	str	r3, [r4, #4]
 8007e34:	6014      	str	r4, [r2, #0]
 8007e36:	b003      	add	sp, #12
 8007e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e3c:	f000 b8da 	b.w	8007ff4 <__malloc_unlock>
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	d908      	bls.n	8007e56 <_free_r+0x46>
 8007e44:	6825      	ldr	r5, [r4, #0]
 8007e46:	1961      	adds	r1, r4, r5
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	bf01      	itttt	eq
 8007e4c:	6819      	ldreq	r1, [r3, #0]
 8007e4e:	685b      	ldreq	r3, [r3, #4]
 8007e50:	1949      	addeq	r1, r1, r5
 8007e52:	6021      	streq	r1, [r4, #0]
 8007e54:	e7ed      	b.n	8007e32 <_free_r+0x22>
 8007e56:	461a      	mov	r2, r3
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	b10b      	cbz	r3, 8007e60 <_free_r+0x50>
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	d9fa      	bls.n	8007e56 <_free_r+0x46>
 8007e60:	6811      	ldr	r1, [r2, #0]
 8007e62:	1855      	adds	r5, r2, r1
 8007e64:	42a5      	cmp	r5, r4
 8007e66:	d10b      	bne.n	8007e80 <_free_r+0x70>
 8007e68:	6824      	ldr	r4, [r4, #0]
 8007e6a:	4421      	add	r1, r4
 8007e6c:	1854      	adds	r4, r2, r1
 8007e6e:	42a3      	cmp	r3, r4
 8007e70:	6011      	str	r1, [r2, #0]
 8007e72:	d1e0      	bne.n	8007e36 <_free_r+0x26>
 8007e74:	681c      	ldr	r4, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	6053      	str	r3, [r2, #4]
 8007e7a:	440c      	add	r4, r1
 8007e7c:	6014      	str	r4, [r2, #0]
 8007e7e:	e7da      	b.n	8007e36 <_free_r+0x26>
 8007e80:	d902      	bls.n	8007e88 <_free_r+0x78>
 8007e82:	230c      	movs	r3, #12
 8007e84:	6003      	str	r3, [r0, #0]
 8007e86:	e7d6      	b.n	8007e36 <_free_r+0x26>
 8007e88:	6825      	ldr	r5, [r4, #0]
 8007e8a:	1961      	adds	r1, r4, r5
 8007e8c:	428b      	cmp	r3, r1
 8007e8e:	bf04      	itt	eq
 8007e90:	6819      	ldreq	r1, [r3, #0]
 8007e92:	685b      	ldreq	r3, [r3, #4]
 8007e94:	6063      	str	r3, [r4, #4]
 8007e96:	bf04      	itt	eq
 8007e98:	1949      	addeq	r1, r1, r5
 8007e9a:	6021      	streq	r1, [r4, #0]
 8007e9c:	6054      	str	r4, [r2, #4]
 8007e9e:	e7ca      	b.n	8007e36 <_free_r+0x26>
 8007ea0:	b003      	add	sp, #12
 8007ea2:	bd30      	pop	{r4, r5, pc}
 8007ea4:	20005164 	.word	0x20005164

08007ea8 <sbrk_aligned>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	4e0e      	ldr	r6, [pc, #56]	; (8007ee4 <sbrk_aligned+0x3c>)
 8007eac:	460c      	mov	r4, r1
 8007eae:	6831      	ldr	r1, [r6, #0]
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	b911      	cbnz	r1, 8007eba <sbrk_aligned+0x12>
 8007eb4:	f000 fb8c 	bl	80085d0 <_sbrk_r>
 8007eb8:	6030      	str	r0, [r6, #0]
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 fb87 	bl	80085d0 <_sbrk_r>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	d00a      	beq.n	8007edc <sbrk_aligned+0x34>
 8007ec6:	1cc4      	adds	r4, r0, #3
 8007ec8:	f024 0403 	bic.w	r4, r4, #3
 8007ecc:	42a0      	cmp	r0, r4
 8007ece:	d007      	beq.n	8007ee0 <sbrk_aligned+0x38>
 8007ed0:	1a21      	subs	r1, r4, r0
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 fb7c 	bl	80085d0 <_sbrk_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d101      	bne.n	8007ee0 <sbrk_aligned+0x38>
 8007edc:	f04f 34ff 	mov.w	r4, #4294967295
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	20005168 	.word	0x20005168

08007ee8 <_malloc_r>:
 8007ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eec:	1ccd      	adds	r5, r1, #3
 8007eee:	f025 0503 	bic.w	r5, r5, #3
 8007ef2:	3508      	adds	r5, #8
 8007ef4:	2d0c      	cmp	r5, #12
 8007ef6:	bf38      	it	cc
 8007ef8:	250c      	movcc	r5, #12
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	4607      	mov	r7, r0
 8007efe:	db01      	blt.n	8007f04 <_malloc_r+0x1c>
 8007f00:	42a9      	cmp	r1, r5
 8007f02:	d905      	bls.n	8007f10 <_malloc_r+0x28>
 8007f04:	230c      	movs	r3, #12
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	2600      	movs	r6, #0
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007fe4 <_malloc_r+0xfc>
 8007f14:	f000 f868 	bl	8007fe8 <__malloc_lock>
 8007f18:	f8d8 3000 	ldr.w	r3, [r8]
 8007f1c:	461c      	mov	r4, r3
 8007f1e:	bb5c      	cbnz	r4, 8007f78 <_malloc_r+0x90>
 8007f20:	4629      	mov	r1, r5
 8007f22:	4638      	mov	r0, r7
 8007f24:	f7ff ffc0 	bl	8007ea8 <sbrk_aligned>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	d155      	bne.n	8007fda <_malloc_r+0xf2>
 8007f2e:	f8d8 4000 	ldr.w	r4, [r8]
 8007f32:	4626      	mov	r6, r4
 8007f34:	2e00      	cmp	r6, #0
 8007f36:	d145      	bne.n	8007fc4 <_malloc_r+0xdc>
 8007f38:	2c00      	cmp	r4, #0
 8007f3a:	d048      	beq.n	8007fce <_malloc_r+0xe6>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4638      	mov	r0, r7
 8007f42:	eb04 0903 	add.w	r9, r4, r3
 8007f46:	f000 fb43 	bl	80085d0 <_sbrk_r>
 8007f4a:	4581      	cmp	r9, r0
 8007f4c:	d13f      	bne.n	8007fce <_malloc_r+0xe6>
 8007f4e:	6821      	ldr	r1, [r4, #0]
 8007f50:	1a6d      	subs	r5, r5, r1
 8007f52:	4629      	mov	r1, r5
 8007f54:	4638      	mov	r0, r7
 8007f56:	f7ff ffa7 	bl	8007ea8 <sbrk_aligned>
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d037      	beq.n	8007fce <_malloc_r+0xe6>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	442b      	add	r3, r5
 8007f62:	6023      	str	r3, [r4, #0]
 8007f64:	f8d8 3000 	ldr.w	r3, [r8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d038      	beq.n	8007fde <_malloc_r+0xf6>
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	42a2      	cmp	r2, r4
 8007f70:	d12b      	bne.n	8007fca <_malloc_r+0xe2>
 8007f72:	2200      	movs	r2, #0
 8007f74:	605a      	str	r2, [r3, #4]
 8007f76:	e00f      	b.n	8007f98 <_malloc_r+0xb0>
 8007f78:	6822      	ldr	r2, [r4, #0]
 8007f7a:	1b52      	subs	r2, r2, r5
 8007f7c:	d41f      	bmi.n	8007fbe <_malloc_r+0xd6>
 8007f7e:	2a0b      	cmp	r2, #11
 8007f80:	d917      	bls.n	8007fb2 <_malloc_r+0xca>
 8007f82:	1961      	adds	r1, r4, r5
 8007f84:	42a3      	cmp	r3, r4
 8007f86:	6025      	str	r5, [r4, #0]
 8007f88:	bf18      	it	ne
 8007f8a:	6059      	strne	r1, [r3, #4]
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	bf08      	it	eq
 8007f90:	f8c8 1000 	streq.w	r1, [r8]
 8007f94:	5162      	str	r2, [r4, r5]
 8007f96:	604b      	str	r3, [r1, #4]
 8007f98:	4638      	mov	r0, r7
 8007f9a:	f104 060b 	add.w	r6, r4, #11
 8007f9e:	f000 f829 	bl	8007ff4 <__malloc_unlock>
 8007fa2:	f026 0607 	bic.w	r6, r6, #7
 8007fa6:	1d23      	adds	r3, r4, #4
 8007fa8:	1af2      	subs	r2, r6, r3
 8007faa:	d0ae      	beq.n	8007f0a <_malloc_r+0x22>
 8007fac:	1b9b      	subs	r3, r3, r6
 8007fae:	50a3      	str	r3, [r4, r2]
 8007fb0:	e7ab      	b.n	8007f0a <_malloc_r+0x22>
 8007fb2:	42a3      	cmp	r3, r4
 8007fb4:	6862      	ldr	r2, [r4, #4]
 8007fb6:	d1dd      	bne.n	8007f74 <_malloc_r+0x8c>
 8007fb8:	f8c8 2000 	str.w	r2, [r8]
 8007fbc:	e7ec      	b.n	8007f98 <_malloc_r+0xb0>
 8007fbe:	4623      	mov	r3, r4
 8007fc0:	6864      	ldr	r4, [r4, #4]
 8007fc2:	e7ac      	b.n	8007f1e <_malloc_r+0x36>
 8007fc4:	4634      	mov	r4, r6
 8007fc6:	6876      	ldr	r6, [r6, #4]
 8007fc8:	e7b4      	b.n	8007f34 <_malloc_r+0x4c>
 8007fca:	4613      	mov	r3, r2
 8007fcc:	e7cc      	b.n	8007f68 <_malloc_r+0x80>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	603b      	str	r3, [r7, #0]
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	f000 f80e 	bl	8007ff4 <__malloc_unlock>
 8007fd8:	e797      	b.n	8007f0a <_malloc_r+0x22>
 8007fda:	6025      	str	r5, [r4, #0]
 8007fdc:	e7dc      	b.n	8007f98 <_malloc_r+0xb0>
 8007fde:	605b      	str	r3, [r3, #4]
 8007fe0:	deff      	udf	#255	; 0xff
 8007fe2:	bf00      	nop
 8007fe4:	20005164 	.word	0x20005164

08007fe8 <__malloc_lock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__malloc_lock+0x8>)
 8007fea:	f7ff bf01 	b.w	8007df0 <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20005160 	.word	0x20005160

08007ff4 <__malloc_unlock>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	; (8007ffc <__malloc_unlock+0x8>)
 8007ff6:	f7ff befc 	b.w	8007df2 <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	20005160 	.word	0x20005160

08008000 <__ssputs_r>:
 8008000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	688e      	ldr	r6, [r1, #8]
 8008006:	461f      	mov	r7, r3
 8008008:	42be      	cmp	r6, r7
 800800a:	680b      	ldr	r3, [r1, #0]
 800800c:	4682      	mov	sl, r0
 800800e:	460c      	mov	r4, r1
 8008010:	4690      	mov	r8, r2
 8008012:	d82c      	bhi.n	800806e <__ssputs_r+0x6e>
 8008014:	898a      	ldrh	r2, [r1, #12]
 8008016:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800801a:	d026      	beq.n	800806a <__ssputs_r+0x6a>
 800801c:	6965      	ldr	r5, [r4, #20]
 800801e:	6909      	ldr	r1, [r1, #16]
 8008020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008024:	eba3 0901 	sub.w	r9, r3, r1
 8008028:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800802c:	1c7b      	adds	r3, r7, #1
 800802e:	444b      	add	r3, r9
 8008030:	106d      	asrs	r5, r5, #1
 8008032:	429d      	cmp	r5, r3
 8008034:	bf38      	it	cc
 8008036:	461d      	movcc	r5, r3
 8008038:	0553      	lsls	r3, r2, #21
 800803a:	d527      	bpl.n	800808c <__ssputs_r+0x8c>
 800803c:	4629      	mov	r1, r5
 800803e:	f7ff ff53 	bl	8007ee8 <_malloc_r>
 8008042:	4606      	mov	r6, r0
 8008044:	b360      	cbz	r0, 80080a0 <__ssputs_r+0xa0>
 8008046:	6921      	ldr	r1, [r4, #16]
 8008048:	464a      	mov	r2, r9
 800804a:	f7ff fed3 	bl	8007df4 <memcpy>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	6126      	str	r6, [r4, #16]
 800805c:	6165      	str	r5, [r4, #20]
 800805e:	444e      	add	r6, r9
 8008060:	eba5 0509 	sub.w	r5, r5, r9
 8008064:	6026      	str	r6, [r4, #0]
 8008066:	60a5      	str	r5, [r4, #8]
 8008068:	463e      	mov	r6, r7
 800806a:	42be      	cmp	r6, r7
 800806c:	d900      	bls.n	8008070 <__ssputs_r+0x70>
 800806e:	463e      	mov	r6, r7
 8008070:	6820      	ldr	r0, [r4, #0]
 8008072:	4632      	mov	r2, r6
 8008074:	4641      	mov	r1, r8
 8008076:	f7ff fe19 	bl	8007cac <memmove>
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	1b9b      	subs	r3, r3, r6
 800807e:	60a3      	str	r3, [r4, #8]
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	4433      	add	r3, r6
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	2000      	movs	r0, #0
 8008088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808c:	462a      	mov	r2, r5
 800808e:	f000 faaf 	bl	80085f0 <_realloc_r>
 8008092:	4606      	mov	r6, r0
 8008094:	2800      	cmp	r0, #0
 8008096:	d1e0      	bne.n	800805a <__ssputs_r+0x5a>
 8008098:	6921      	ldr	r1, [r4, #16]
 800809a:	4650      	mov	r0, sl
 800809c:	f7ff feb8 	bl	8007e10 <_free_r>
 80080a0:	230c      	movs	r3, #12
 80080a2:	f8ca 3000 	str.w	r3, [sl]
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	f04f 30ff 	mov.w	r0, #4294967295
 80080b2:	e7e9      	b.n	8008088 <__ssputs_r+0x88>

080080b4 <_svfiprintf_r>:
 80080b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b8:	4698      	mov	r8, r3
 80080ba:	898b      	ldrh	r3, [r1, #12]
 80080bc:	061b      	lsls	r3, r3, #24
 80080be:	b09d      	sub	sp, #116	; 0x74
 80080c0:	4607      	mov	r7, r0
 80080c2:	460d      	mov	r5, r1
 80080c4:	4614      	mov	r4, r2
 80080c6:	d50e      	bpl.n	80080e6 <_svfiprintf_r+0x32>
 80080c8:	690b      	ldr	r3, [r1, #16]
 80080ca:	b963      	cbnz	r3, 80080e6 <_svfiprintf_r+0x32>
 80080cc:	2140      	movs	r1, #64	; 0x40
 80080ce:	f7ff ff0b 	bl	8007ee8 <_malloc_r>
 80080d2:	6028      	str	r0, [r5, #0]
 80080d4:	6128      	str	r0, [r5, #16]
 80080d6:	b920      	cbnz	r0, 80080e2 <_svfiprintf_r+0x2e>
 80080d8:	230c      	movs	r3, #12
 80080da:	603b      	str	r3, [r7, #0]
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e0d0      	b.n	8008284 <_svfiprintf_r+0x1d0>
 80080e2:	2340      	movs	r3, #64	; 0x40
 80080e4:	616b      	str	r3, [r5, #20]
 80080e6:	2300      	movs	r3, #0
 80080e8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ea:	2320      	movs	r3, #32
 80080ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80080f4:	2330      	movs	r3, #48	; 0x30
 80080f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800829c <_svfiprintf_r+0x1e8>
 80080fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080fe:	f04f 0901 	mov.w	r9, #1
 8008102:	4623      	mov	r3, r4
 8008104:	469a      	mov	sl, r3
 8008106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800810a:	b10a      	cbz	r2, 8008110 <_svfiprintf_r+0x5c>
 800810c:	2a25      	cmp	r2, #37	; 0x25
 800810e:	d1f9      	bne.n	8008104 <_svfiprintf_r+0x50>
 8008110:	ebba 0b04 	subs.w	fp, sl, r4
 8008114:	d00b      	beq.n	800812e <_svfiprintf_r+0x7a>
 8008116:	465b      	mov	r3, fp
 8008118:	4622      	mov	r2, r4
 800811a:	4629      	mov	r1, r5
 800811c:	4638      	mov	r0, r7
 800811e:	f7ff ff6f 	bl	8008000 <__ssputs_r>
 8008122:	3001      	adds	r0, #1
 8008124:	f000 80a9 	beq.w	800827a <_svfiprintf_r+0x1c6>
 8008128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800812a:	445a      	add	r2, fp
 800812c:	9209      	str	r2, [sp, #36]	; 0x24
 800812e:	f89a 3000 	ldrb.w	r3, [sl]
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 80a1 	beq.w	800827a <_svfiprintf_r+0x1c6>
 8008138:	2300      	movs	r3, #0
 800813a:	f04f 32ff 	mov.w	r2, #4294967295
 800813e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008142:	f10a 0a01 	add.w	sl, sl, #1
 8008146:	9304      	str	r3, [sp, #16]
 8008148:	9307      	str	r3, [sp, #28]
 800814a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800814e:	931a      	str	r3, [sp, #104]	; 0x68
 8008150:	4654      	mov	r4, sl
 8008152:	2205      	movs	r2, #5
 8008154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008158:	4850      	ldr	r0, [pc, #320]	; (800829c <_svfiprintf_r+0x1e8>)
 800815a:	f7f8 f841 	bl	80001e0 <memchr>
 800815e:	9a04      	ldr	r2, [sp, #16]
 8008160:	b9d8      	cbnz	r0, 800819a <_svfiprintf_r+0xe6>
 8008162:	06d0      	lsls	r0, r2, #27
 8008164:	bf44      	itt	mi
 8008166:	2320      	movmi	r3, #32
 8008168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800816c:	0711      	lsls	r1, r2, #28
 800816e:	bf44      	itt	mi
 8008170:	232b      	movmi	r3, #43	; 0x2b
 8008172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008176:	f89a 3000 	ldrb.w	r3, [sl]
 800817a:	2b2a      	cmp	r3, #42	; 0x2a
 800817c:	d015      	beq.n	80081aa <_svfiprintf_r+0xf6>
 800817e:	9a07      	ldr	r2, [sp, #28]
 8008180:	4654      	mov	r4, sl
 8008182:	2000      	movs	r0, #0
 8008184:	f04f 0c0a 	mov.w	ip, #10
 8008188:	4621      	mov	r1, r4
 800818a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800818e:	3b30      	subs	r3, #48	; 0x30
 8008190:	2b09      	cmp	r3, #9
 8008192:	d94d      	bls.n	8008230 <_svfiprintf_r+0x17c>
 8008194:	b1b0      	cbz	r0, 80081c4 <_svfiprintf_r+0x110>
 8008196:	9207      	str	r2, [sp, #28]
 8008198:	e014      	b.n	80081c4 <_svfiprintf_r+0x110>
 800819a:	eba0 0308 	sub.w	r3, r0, r8
 800819e:	fa09 f303 	lsl.w	r3, r9, r3
 80081a2:	4313      	orrs	r3, r2
 80081a4:	9304      	str	r3, [sp, #16]
 80081a6:	46a2      	mov	sl, r4
 80081a8:	e7d2      	b.n	8008150 <_svfiprintf_r+0x9c>
 80081aa:	9b03      	ldr	r3, [sp, #12]
 80081ac:	1d19      	adds	r1, r3, #4
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	9103      	str	r1, [sp, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bfbb      	ittet	lt
 80081b6:	425b      	neglt	r3, r3
 80081b8:	f042 0202 	orrlt.w	r2, r2, #2
 80081bc:	9307      	strge	r3, [sp, #28]
 80081be:	9307      	strlt	r3, [sp, #28]
 80081c0:	bfb8      	it	lt
 80081c2:	9204      	strlt	r2, [sp, #16]
 80081c4:	7823      	ldrb	r3, [r4, #0]
 80081c6:	2b2e      	cmp	r3, #46	; 0x2e
 80081c8:	d10c      	bne.n	80081e4 <_svfiprintf_r+0x130>
 80081ca:	7863      	ldrb	r3, [r4, #1]
 80081cc:	2b2a      	cmp	r3, #42	; 0x2a
 80081ce:	d134      	bne.n	800823a <_svfiprintf_r+0x186>
 80081d0:	9b03      	ldr	r3, [sp, #12]
 80081d2:	1d1a      	adds	r2, r3, #4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	9203      	str	r2, [sp, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	bfb8      	it	lt
 80081dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80081e0:	3402      	adds	r4, #2
 80081e2:	9305      	str	r3, [sp, #20]
 80081e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80082ac <_svfiprintf_r+0x1f8>
 80081e8:	7821      	ldrb	r1, [r4, #0]
 80081ea:	2203      	movs	r2, #3
 80081ec:	4650      	mov	r0, sl
 80081ee:	f7f7 fff7 	bl	80001e0 <memchr>
 80081f2:	b138      	cbz	r0, 8008204 <_svfiprintf_r+0x150>
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	eba0 000a 	sub.w	r0, r0, sl
 80081fa:	2240      	movs	r2, #64	; 0x40
 80081fc:	4082      	lsls	r2, r0
 80081fe:	4313      	orrs	r3, r2
 8008200:	3401      	adds	r4, #1
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008208:	4825      	ldr	r0, [pc, #148]	; (80082a0 <_svfiprintf_r+0x1ec>)
 800820a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800820e:	2206      	movs	r2, #6
 8008210:	f7f7 ffe6 	bl	80001e0 <memchr>
 8008214:	2800      	cmp	r0, #0
 8008216:	d038      	beq.n	800828a <_svfiprintf_r+0x1d6>
 8008218:	4b22      	ldr	r3, [pc, #136]	; (80082a4 <_svfiprintf_r+0x1f0>)
 800821a:	bb1b      	cbnz	r3, 8008264 <_svfiprintf_r+0x1b0>
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	3307      	adds	r3, #7
 8008220:	f023 0307 	bic.w	r3, r3, #7
 8008224:	3308      	adds	r3, #8
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822a:	4433      	add	r3, r6
 800822c:	9309      	str	r3, [sp, #36]	; 0x24
 800822e:	e768      	b.n	8008102 <_svfiprintf_r+0x4e>
 8008230:	fb0c 3202 	mla	r2, ip, r2, r3
 8008234:	460c      	mov	r4, r1
 8008236:	2001      	movs	r0, #1
 8008238:	e7a6      	b.n	8008188 <_svfiprintf_r+0xd4>
 800823a:	2300      	movs	r3, #0
 800823c:	3401      	adds	r4, #1
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	4619      	mov	r1, r3
 8008242:	f04f 0c0a 	mov.w	ip, #10
 8008246:	4620      	mov	r0, r4
 8008248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800824c:	3a30      	subs	r2, #48	; 0x30
 800824e:	2a09      	cmp	r2, #9
 8008250:	d903      	bls.n	800825a <_svfiprintf_r+0x1a6>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0c6      	beq.n	80081e4 <_svfiprintf_r+0x130>
 8008256:	9105      	str	r1, [sp, #20]
 8008258:	e7c4      	b.n	80081e4 <_svfiprintf_r+0x130>
 800825a:	fb0c 2101 	mla	r1, ip, r1, r2
 800825e:	4604      	mov	r4, r0
 8008260:	2301      	movs	r3, #1
 8008262:	e7f0      	b.n	8008246 <_svfiprintf_r+0x192>
 8008264:	ab03      	add	r3, sp, #12
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	462a      	mov	r2, r5
 800826a:	4b0f      	ldr	r3, [pc, #60]	; (80082a8 <_svfiprintf_r+0x1f4>)
 800826c:	a904      	add	r1, sp, #16
 800826e:	4638      	mov	r0, r7
 8008270:	f3af 8000 	nop.w
 8008274:	1c42      	adds	r2, r0, #1
 8008276:	4606      	mov	r6, r0
 8008278:	d1d6      	bne.n	8008228 <_svfiprintf_r+0x174>
 800827a:	89ab      	ldrh	r3, [r5, #12]
 800827c:	065b      	lsls	r3, r3, #25
 800827e:	f53f af2d 	bmi.w	80080dc <_svfiprintf_r+0x28>
 8008282:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008284:	b01d      	add	sp, #116	; 0x74
 8008286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828a:	ab03      	add	r3, sp, #12
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	462a      	mov	r2, r5
 8008290:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <_svfiprintf_r+0x1f4>)
 8008292:	a904      	add	r1, sp, #16
 8008294:	4638      	mov	r0, r7
 8008296:	f000 f879 	bl	800838c <_printf_i>
 800829a:	e7eb      	b.n	8008274 <_svfiprintf_r+0x1c0>
 800829c:	080094e0 	.word	0x080094e0
 80082a0:	080094ea 	.word	0x080094ea
 80082a4:	00000000 	.word	0x00000000
 80082a8:	08008001 	.word	0x08008001
 80082ac:	080094e6 	.word	0x080094e6

080082b0 <_printf_common>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	4616      	mov	r6, r2
 80082b6:	4699      	mov	r9, r3
 80082b8:	688a      	ldr	r2, [r1, #8]
 80082ba:	690b      	ldr	r3, [r1, #16]
 80082bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082c0:	4293      	cmp	r3, r2
 80082c2:	bfb8      	it	lt
 80082c4:	4613      	movlt	r3, r2
 80082c6:	6033      	str	r3, [r6, #0]
 80082c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082cc:	4607      	mov	r7, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	b10a      	cbz	r2, 80082d6 <_printf_common+0x26>
 80082d2:	3301      	adds	r3, #1
 80082d4:	6033      	str	r3, [r6, #0]
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	0699      	lsls	r1, r3, #26
 80082da:	bf42      	ittt	mi
 80082dc:	6833      	ldrmi	r3, [r6, #0]
 80082de:	3302      	addmi	r3, #2
 80082e0:	6033      	strmi	r3, [r6, #0]
 80082e2:	6825      	ldr	r5, [r4, #0]
 80082e4:	f015 0506 	ands.w	r5, r5, #6
 80082e8:	d106      	bne.n	80082f8 <_printf_common+0x48>
 80082ea:	f104 0a19 	add.w	sl, r4, #25
 80082ee:	68e3      	ldr	r3, [r4, #12]
 80082f0:	6832      	ldr	r2, [r6, #0]
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	42ab      	cmp	r3, r5
 80082f6:	dc26      	bgt.n	8008346 <_printf_common+0x96>
 80082f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082fc:	1e13      	subs	r3, r2, #0
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	bf18      	it	ne
 8008302:	2301      	movne	r3, #1
 8008304:	0692      	lsls	r2, r2, #26
 8008306:	d42b      	bmi.n	8008360 <_printf_common+0xb0>
 8008308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800830c:	4649      	mov	r1, r9
 800830e:	4638      	mov	r0, r7
 8008310:	47c0      	blx	r8
 8008312:	3001      	adds	r0, #1
 8008314:	d01e      	beq.n	8008354 <_printf_common+0xa4>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	6922      	ldr	r2, [r4, #16]
 800831a:	f003 0306 	and.w	r3, r3, #6
 800831e:	2b04      	cmp	r3, #4
 8008320:	bf02      	ittt	eq
 8008322:	68e5      	ldreq	r5, [r4, #12]
 8008324:	6833      	ldreq	r3, [r6, #0]
 8008326:	1aed      	subeq	r5, r5, r3
 8008328:	68a3      	ldr	r3, [r4, #8]
 800832a:	bf0c      	ite	eq
 800832c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008330:	2500      	movne	r5, #0
 8008332:	4293      	cmp	r3, r2
 8008334:	bfc4      	itt	gt
 8008336:	1a9b      	subgt	r3, r3, r2
 8008338:	18ed      	addgt	r5, r5, r3
 800833a:	2600      	movs	r6, #0
 800833c:	341a      	adds	r4, #26
 800833e:	42b5      	cmp	r5, r6
 8008340:	d11a      	bne.n	8008378 <_printf_common+0xc8>
 8008342:	2000      	movs	r0, #0
 8008344:	e008      	b.n	8008358 <_printf_common+0xa8>
 8008346:	2301      	movs	r3, #1
 8008348:	4652      	mov	r2, sl
 800834a:	4649      	mov	r1, r9
 800834c:	4638      	mov	r0, r7
 800834e:	47c0      	blx	r8
 8008350:	3001      	adds	r0, #1
 8008352:	d103      	bne.n	800835c <_printf_common+0xac>
 8008354:	f04f 30ff 	mov.w	r0, #4294967295
 8008358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835c:	3501      	adds	r5, #1
 800835e:	e7c6      	b.n	80082ee <_printf_common+0x3e>
 8008360:	18e1      	adds	r1, r4, r3
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	2030      	movs	r0, #48	; 0x30
 8008366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800836a:	4422      	add	r2, r4
 800836c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008374:	3302      	adds	r3, #2
 8008376:	e7c7      	b.n	8008308 <_printf_common+0x58>
 8008378:	2301      	movs	r3, #1
 800837a:	4622      	mov	r2, r4
 800837c:	4649      	mov	r1, r9
 800837e:	4638      	mov	r0, r7
 8008380:	47c0      	blx	r8
 8008382:	3001      	adds	r0, #1
 8008384:	d0e6      	beq.n	8008354 <_printf_common+0xa4>
 8008386:	3601      	adds	r6, #1
 8008388:	e7d9      	b.n	800833e <_printf_common+0x8e>
	...

0800838c <_printf_i>:
 800838c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	7e0f      	ldrb	r7, [r1, #24]
 8008392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008394:	2f78      	cmp	r7, #120	; 0x78
 8008396:	4691      	mov	r9, r2
 8008398:	4680      	mov	r8, r0
 800839a:	460c      	mov	r4, r1
 800839c:	469a      	mov	sl, r3
 800839e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083a2:	d807      	bhi.n	80083b4 <_printf_i+0x28>
 80083a4:	2f62      	cmp	r7, #98	; 0x62
 80083a6:	d80a      	bhi.n	80083be <_printf_i+0x32>
 80083a8:	2f00      	cmp	r7, #0
 80083aa:	f000 80d4 	beq.w	8008556 <_printf_i+0x1ca>
 80083ae:	2f58      	cmp	r7, #88	; 0x58
 80083b0:	f000 80c0 	beq.w	8008534 <_printf_i+0x1a8>
 80083b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083bc:	e03a      	b.n	8008434 <_printf_i+0xa8>
 80083be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083c2:	2b15      	cmp	r3, #21
 80083c4:	d8f6      	bhi.n	80083b4 <_printf_i+0x28>
 80083c6:	a101      	add	r1, pc, #4	; (adr r1, 80083cc <_printf_i+0x40>)
 80083c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083cc:	08008425 	.word	0x08008425
 80083d0:	08008439 	.word	0x08008439
 80083d4:	080083b5 	.word	0x080083b5
 80083d8:	080083b5 	.word	0x080083b5
 80083dc:	080083b5 	.word	0x080083b5
 80083e0:	080083b5 	.word	0x080083b5
 80083e4:	08008439 	.word	0x08008439
 80083e8:	080083b5 	.word	0x080083b5
 80083ec:	080083b5 	.word	0x080083b5
 80083f0:	080083b5 	.word	0x080083b5
 80083f4:	080083b5 	.word	0x080083b5
 80083f8:	0800853d 	.word	0x0800853d
 80083fc:	08008465 	.word	0x08008465
 8008400:	080084f7 	.word	0x080084f7
 8008404:	080083b5 	.word	0x080083b5
 8008408:	080083b5 	.word	0x080083b5
 800840c:	0800855f 	.word	0x0800855f
 8008410:	080083b5 	.word	0x080083b5
 8008414:	08008465 	.word	0x08008465
 8008418:	080083b5 	.word	0x080083b5
 800841c:	080083b5 	.word	0x080083b5
 8008420:	080084ff 	.word	0x080084ff
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	1d1a      	adds	r2, r3, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	602a      	str	r2, [r5, #0]
 800842c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008434:	2301      	movs	r3, #1
 8008436:	e09f      	b.n	8008578 <_printf_i+0x1ec>
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	682b      	ldr	r3, [r5, #0]
 800843c:	0607      	lsls	r7, r0, #24
 800843e:	f103 0104 	add.w	r1, r3, #4
 8008442:	6029      	str	r1, [r5, #0]
 8008444:	d501      	bpl.n	800844a <_printf_i+0xbe>
 8008446:	681e      	ldr	r6, [r3, #0]
 8008448:	e003      	b.n	8008452 <_printf_i+0xc6>
 800844a:	0646      	lsls	r6, r0, #25
 800844c:	d5fb      	bpl.n	8008446 <_printf_i+0xba>
 800844e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008452:	2e00      	cmp	r6, #0
 8008454:	da03      	bge.n	800845e <_printf_i+0xd2>
 8008456:	232d      	movs	r3, #45	; 0x2d
 8008458:	4276      	negs	r6, r6
 800845a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800845e:	485a      	ldr	r0, [pc, #360]	; (80085c8 <_printf_i+0x23c>)
 8008460:	230a      	movs	r3, #10
 8008462:	e012      	b.n	800848a <_printf_i+0xfe>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	6820      	ldr	r0, [r4, #0]
 8008468:	1d19      	adds	r1, r3, #4
 800846a:	6029      	str	r1, [r5, #0]
 800846c:	0605      	lsls	r5, r0, #24
 800846e:	d501      	bpl.n	8008474 <_printf_i+0xe8>
 8008470:	681e      	ldr	r6, [r3, #0]
 8008472:	e002      	b.n	800847a <_printf_i+0xee>
 8008474:	0641      	lsls	r1, r0, #25
 8008476:	d5fb      	bpl.n	8008470 <_printf_i+0xe4>
 8008478:	881e      	ldrh	r6, [r3, #0]
 800847a:	4853      	ldr	r0, [pc, #332]	; (80085c8 <_printf_i+0x23c>)
 800847c:	2f6f      	cmp	r7, #111	; 0x6f
 800847e:	bf0c      	ite	eq
 8008480:	2308      	moveq	r3, #8
 8008482:	230a      	movne	r3, #10
 8008484:	2100      	movs	r1, #0
 8008486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800848a:	6865      	ldr	r5, [r4, #4]
 800848c:	60a5      	str	r5, [r4, #8]
 800848e:	2d00      	cmp	r5, #0
 8008490:	bfa2      	ittt	ge
 8008492:	6821      	ldrge	r1, [r4, #0]
 8008494:	f021 0104 	bicge.w	r1, r1, #4
 8008498:	6021      	strge	r1, [r4, #0]
 800849a:	b90e      	cbnz	r6, 80084a0 <_printf_i+0x114>
 800849c:	2d00      	cmp	r5, #0
 800849e:	d04b      	beq.n	8008538 <_printf_i+0x1ac>
 80084a0:	4615      	mov	r5, r2
 80084a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80084a6:	fb03 6711 	mls	r7, r3, r1, r6
 80084aa:	5dc7      	ldrb	r7, [r0, r7]
 80084ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084b0:	4637      	mov	r7, r6
 80084b2:	42bb      	cmp	r3, r7
 80084b4:	460e      	mov	r6, r1
 80084b6:	d9f4      	bls.n	80084a2 <_printf_i+0x116>
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	d10b      	bne.n	80084d4 <_printf_i+0x148>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	07de      	lsls	r6, r3, #31
 80084c0:	d508      	bpl.n	80084d4 <_printf_i+0x148>
 80084c2:	6923      	ldr	r3, [r4, #16]
 80084c4:	6861      	ldr	r1, [r4, #4]
 80084c6:	4299      	cmp	r1, r3
 80084c8:	bfde      	ittt	le
 80084ca:	2330      	movle	r3, #48	; 0x30
 80084cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084d4:	1b52      	subs	r2, r2, r5
 80084d6:	6122      	str	r2, [r4, #16]
 80084d8:	f8cd a000 	str.w	sl, [sp]
 80084dc:	464b      	mov	r3, r9
 80084de:	aa03      	add	r2, sp, #12
 80084e0:	4621      	mov	r1, r4
 80084e2:	4640      	mov	r0, r8
 80084e4:	f7ff fee4 	bl	80082b0 <_printf_common>
 80084e8:	3001      	adds	r0, #1
 80084ea:	d14a      	bne.n	8008582 <_printf_i+0x1f6>
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	b004      	add	sp, #16
 80084f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	f043 0320 	orr.w	r3, r3, #32
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	4833      	ldr	r0, [pc, #204]	; (80085cc <_printf_i+0x240>)
 8008500:	2778      	movs	r7, #120	; 0x78
 8008502:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	6829      	ldr	r1, [r5, #0]
 800850a:	061f      	lsls	r7, r3, #24
 800850c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008510:	d402      	bmi.n	8008518 <_printf_i+0x18c>
 8008512:	065f      	lsls	r7, r3, #25
 8008514:	bf48      	it	mi
 8008516:	b2b6      	uxthmi	r6, r6
 8008518:	07df      	lsls	r7, r3, #31
 800851a:	bf48      	it	mi
 800851c:	f043 0320 	orrmi.w	r3, r3, #32
 8008520:	6029      	str	r1, [r5, #0]
 8008522:	bf48      	it	mi
 8008524:	6023      	strmi	r3, [r4, #0]
 8008526:	b91e      	cbnz	r6, 8008530 <_printf_i+0x1a4>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	f023 0320 	bic.w	r3, r3, #32
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	2310      	movs	r3, #16
 8008532:	e7a7      	b.n	8008484 <_printf_i+0xf8>
 8008534:	4824      	ldr	r0, [pc, #144]	; (80085c8 <_printf_i+0x23c>)
 8008536:	e7e4      	b.n	8008502 <_printf_i+0x176>
 8008538:	4615      	mov	r5, r2
 800853a:	e7bd      	b.n	80084b8 <_printf_i+0x12c>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	6826      	ldr	r6, [r4, #0]
 8008540:	6961      	ldr	r1, [r4, #20]
 8008542:	1d18      	adds	r0, r3, #4
 8008544:	6028      	str	r0, [r5, #0]
 8008546:	0635      	lsls	r5, r6, #24
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	d501      	bpl.n	8008550 <_printf_i+0x1c4>
 800854c:	6019      	str	r1, [r3, #0]
 800854e:	e002      	b.n	8008556 <_printf_i+0x1ca>
 8008550:	0670      	lsls	r0, r6, #25
 8008552:	d5fb      	bpl.n	800854c <_printf_i+0x1c0>
 8008554:	8019      	strh	r1, [r3, #0]
 8008556:	2300      	movs	r3, #0
 8008558:	6123      	str	r3, [r4, #16]
 800855a:	4615      	mov	r5, r2
 800855c:	e7bc      	b.n	80084d8 <_printf_i+0x14c>
 800855e:	682b      	ldr	r3, [r5, #0]
 8008560:	1d1a      	adds	r2, r3, #4
 8008562:	602a      	str	r2, [r5, #0]
 8008564:	681d      	ldr	r5, [r3, #0]
 8008566:	6862      	ldr	r2, [r4, #4]
 8008568:	2100      	movs	r1, #0
 800856a:	4628      	mov	r0, r5
 800856c:	f7f7 fe38 	bl	80001e0 <memchr>
 8008570:	b108      	cbz	r0, 8008576 <_printf_i+0x1ea>
 8008572:	1b40      	subs	r0, r0, r5
 8008574:	6060      	str	r0, [r4, #4]
 8008576:	6863      	ldr	r3, [r4, #4]
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	2300      	movs	r3, #0
 800857c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008580:	e7aa      	b.n	80084d8 <_printf_i+0x14c>
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	462a      	mov	r2, r5
 8008586:	4649      	mov	r1, r9
 8008588:	4640      	mov	r0, r8
 800858a:	47d0      	blx	sl
 800858c:	3001      	adds	r0, #1
 800858e:	d0ad      	beq.n	80084ec <_printf_i+0x160>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	079b      	lsls	r3, r3, #30
 8008594:	d413      	bmi.n	80085be <_printf_i+0x232>
 8008596:	68e0      	ldr	r0, [r4, #12]
 8008598:	9b03      	ldr	r3, [sp, #12]
 800859a:	4298      	cmp	r0, r3
 800859c:	bfb8      	it	lt
 800859e:	4618      	movlt	r0, r3
 80085a0:	e7a6      	b.n	80084f0 <_printf_i+0x164>
 80085a2:	2301      	movs	r3, #1
 80085a4:	4632      	mov	r2, r6
 80085a6:	4649      	mov	r1, r9
 80085a8:	4640      	mov	r0, r8
 80085aa:	47d0      	blx	sl
 80085ac:	3001      	adds	r0, #1
 80085ae:	d09d      	beq.n	80084ec <_printf_i+0x160>
 80085b0:	3501      	adds	r5, #1
 80085b2:	68e3      	ldr	r3, [r4, #12]
 80085b4:	9903      	ldr	r1, [sp, #12]
 80085b6:	1a5b      	subs	r3, r3, r1
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	dcf2      	bgt.n	80085a2 <_printf_i+0x216>
 80085bc:	e7eb      	b.n	8008596 <_printf_i+0x20a>
 80085be:	2500      	movs	r5, #0
 80085c0:	f104 0619 	add.w	r6, r4, #25
 80085c4:	e7f5      	b.n	80085b2 <_printf_i+0x226>
 80085c6:	bf00      	nop
 80085c8:	080094f1 	.word	0x080094f1
 80085cc:	08009502 	.word	0x08009502

080085d0 <_sbrk_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_sbrk_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	f7f9 fe70 	bl	80022c0 <_sbrk>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_sbrk_r+0x1a>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_sbrk_r+0x1a>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	2000515c 	.word	0x2000515c

080085f0 <_realloc_r>:
 80085f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f4:	4680      	mov	r8, r0
 80085f6:	4614      	mov	r4, r2
 80085f8:	460e      	mov	r6, r1
 80085fa:	b921      	cbnz	r1, 8008606 <_realloc_r+0x16>
 80085fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	4611      	mov	r1, r2
 8008602:	f7ff bc71 	b.w	8007ee8 <_malloc_r>
 8008606:	b92a      	cbnz	r2, 8008614 <_realloc_r+0x24>
 8008608:	f7ff fc02 	bl	8007e10 <_free_r>
 800860c:	4625      	mov	r5, r4
 800860e:	4628      	mov	r0, r5
 8008610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008614:	f000 f81b 	bl	800864e <_malloc_usable_size_r>
 8008618:	4284      	cmp	r4, r0
 800861a:	4607      	mov	r7, r0
 800861c:	d802      	bhi.n	8008624 <_realloc_r+0x34>
 800861e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008622:	d812      	bhi.n	800864a <_realloc_r+0x5a>
 8008624:	4621      	mov	r1, r4
 8008626:	4640      	mov	r0, r8
 8008628:	f7ff fc5e 	bl	8007ee8 <_malloc_r>
 800862c:	4605      	mov	r5, r0
 800862e:	2800      	cmp	r0, #0
 8008630:	d0ed      	beq.n	800860e <_realloc_r+0x1e>
 8008632:	42bc      	cmp	r4, r7
 8008634:	4622      	mov	r2, r4
 8008636:	4631      	mov	r1, r6
 8008638:	bf28      	it	cs
 800863a:	463a      	movcs	r2, r7
 800863c:	f7ff fbda 	bl	8007df4 <memcpy>
 8008640:	4631      	mov	r1, r6
 8008642:	4640      	mov	r0, r8
 8008644:	f7ff fbe4 	bl	8007e10 <_free_r>
 8008648:	e7e1      	b.n	800860e <_realloc_r+0x1e>
 800864a:	4635      	mov	r5, r6
 800864c:	e7df      	b.n	800860e <_realloc_r+0x1e>

0800864e <_malloc_usable_size_r>:
 800864e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008652:	1f18      	subs	r0, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	bfbc      	itt	lt
 8008658:	580b      	ldrlt	r3, [r1, r0]
 800865a:	18c0      	addlt	r0, r0, r3
 800865c:	4770      	bx	lr
	...

08008660 <_init>:
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	bf00      	nop
 8008664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008666:	bc08      	pop	{r3}
 8008668:	469e      	mov	lr, r3
 800866a:	4770      	bx	lr

0800866c <_fini>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	bf00      	nop
 8008670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008672:	bc08      	pop	{r3}
 8008674:	469e      	mov	lr, r3
 8008676:	4770      	bx	lr
