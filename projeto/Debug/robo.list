
robo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005798  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f8  080059f8  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a00  08005a00  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a04  08005a04  00015a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf0  20000064  08005a6c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  08005a6c  00024c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000148fe  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002edd  00000000  00000000  000349d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  000378b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dea  00000000  00000000  00038ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d49  00000000  00000000  000398b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e94  00000000  00000000  0003c5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094dad  00000000  00000000  0004f48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e80  00000000  00000000  000e423c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e90bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005920 	.word	0x08005920

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08005920 	.word	0x08005920

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fd26 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f848 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f91e 	bl	8000728 <MX_GPIO_Init>
  MX_TIM4_Init();
 80004ec:	f000 f8a2 	bl	8000634 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  TIM4->CCR1 = MaxPWM;
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <main+0x70>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <main+0x74>)
 80004f6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = MaxPWM;
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <main+0x70>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <main+0x74>)
 80004fe:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3 = MaxPWM;
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <main+0x70>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <main+0x74>)
 8000506:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = MaxPWM;
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <main+0x70>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <main+0x74>)
 800050e:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000510:	f002 fba4 	bl	8002c5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <main+0x78>)
 8000516:	2100      	movs	r1, #0
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x7c>)
 800051a:	f002 fbe9 	bl	8002cf0 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <main+0x80>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of RightMotor */
  RightMotorHandle = osThreadNew(StartRightMotor, NULL, &RightMotor_attributes);
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <main+0x84>)
 8000526:	2100      	movs	r1, #0
 8000528:	480e      	ldr	r0, [pc, #56]	; (8000564 <main+0x88>)
 800052a:	f002 fbe1 	bl	8002cf0 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <main+0x8c>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of LeftMotor */
  LeftMotorHandle = osThreadNew(StartLeftMotor, NULL, &LeftMotor_attributes);
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <main+0x90>)
 8000536:	2100      	movs	r1, #0
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <main+0x94>)
 800053a:	f002 fbd9 	bl	8002cf0 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <main+0x98>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f002 fbae 	bl	8002ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x6c>
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000
 8000550:	40000800 	.word	0x40000800
 8000554:	08005974 	.word	0x08005974
 8000558:	08000a49 	.word	0x08000a49
 800055c:	200000c8 	.word	0x200000c8
 8000560:	08005998 	.word	0x08005998
 8000564:	08000aed 	.word	0x08000aed
 8000568:	200000cc 	.word	0x200000cc
 800056c:	080059bc 	.word	0x080059bc
 8000570:	08000b85 	.word	0x08000b85
 8000574:	200000d0 	.word	0x200000d0

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f005 f8e0 	bl	800574c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xb4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xb4>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xb4>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <SystemClock_Config+0xb8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <SystemClock_Config+0xb8>)
 80005c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <SystemClock_Config+0xb8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 ffb6 	bl	800155c <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005f6:	f000 fb31 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005fe:	2301      	movs	r3, #1
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fa19 	bl	8001a4c <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000620:	f000 fb1c 	bl	8000c5c <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	; 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <MX_TIM4_Init+0xec>)
 8000658:	4a32      	ldr	r2, [pc, #200]	; (8000724 <MX_TIM4_Init+0xf0>)
 800065a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 250;
 800065c:	4b30      	ldr	r3, [pc, #192]	; (8000720 <MX_TIM4_Init+0xec>)
 800065e:	22fa      	movs	r2, #250	; 0xfa
 8000660:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <MX_TIM4_Init+0xec>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_TIM4_Init+0xec>)
 800066a:	2263      	movs	r2, #99	; 0x63
 800066c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066e:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <MX_TIM4_Init+0xec>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <MX_TIM4_Init+0xec>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800067a:	4829      	ldr	r0, [pc, #164]	; (8000720 <MX_TIM4_Init+0xec>)
 800067c:	f001 fca0 	bl	8001fc0 <HAL_TIM_PWM_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000686:	f000 fae9 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4619      	mov	r1, r3
 8000698:	4821      	ldr	r0, [pc, #132]	; (8000720 <MX_TIM4_Init+0xec>)
 800069a:	f002 fa19 	bl	8002ad0 <HAL_TIMEx_MasterConfigSynchronization>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80006a4:	f000 fada 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a8:	2360      	movs	r3, #96	; 0x60
 80006aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 80006ac:	2331      	movs	r3, #49	; 0x31
 80006ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	4818      	ldr	r0, [pc, #96]	; (8000720 <MX_TIM4_Init+0xec>)
 80006c0:	f001 feea 	bl	8002498 <HAL_TIM_PWM_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80006ca:	f000 fac7 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2204      	movs	r2, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	4812      	ldr	r0, [pc, #72]	; (8000720 <MX_TIM4_Init+0xec>)
 80006d6:	f001 fedf 	bl	8002498 <HAL_TIM_PWM_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80006e0:	f000 fabc 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2208      	movs	r2, #8
 80006e8:	4619      	mov	r1, r3
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_TIM4_Init+0xec>)
 80006ec:	f001 fed4 	bl	8002498 <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80006f6:	f000 fab1 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	220c      	movs	r2, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <MX_TIM4_Init+0xec>)
 8000702:	f001 fec9 	bl	8002498 <HAL_TIM_PWM_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 800070c:	f000 faa6 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000710:	4803      	ldr	r0, [pc, #12]	; (8000720 <MX_TIM4_Init+0xec>)
 8000712:	f000 faf7 	bl	8000d04 <HAL_TIM_MspPostInit>

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000080 	.word	0x20000080
 8000724:	40000800 	.word	0x40000800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b48      	ldr	r3, [pc, #288]	; (8000864 <MX_GPIO_Init+0x13c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a47      	ldr	r2, [pc, #284]	; (8000864 <MX_GPIO_Init+0x13c>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b45      	ldr	r3, [pc, #276]	; (8000864 <MX_GPIO_Init+0x13c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b41      	ldr	r3, [pc, #260]	; (8000864 <MX_GPIO_Init+0x13c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a40      	ldr	r2, [pc, #256]	; (8000864 <MX_GPIO_Init+0x13c>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <MX_GPIO_Init+0x13c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <MX_GPIO_Init+0x13c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a39      	ldr	r2, [pc, #228]	; (8000864 <MX_GPIO_Init+0x13c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b37      	ldr	r3, [pc, #220]	; (8000864 <MX_GPIO_Init+0x13c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <MX_GPIO_Init+0x13c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a32      	ldr	r2, [pc, #200]	; (8000864 <MX_GPIO_Init+0x13c>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b30      	ldr	r3, [pc, #192]	; (8000864 <MX_GPIO_Init+0x13c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	482c      	ldr	r0, [pc, #176]	; (8000868 <MX_GPIO_Init+0x140>)
 80007b6:	f000 fe9f 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4825      	ldr	r0, [pc, #148]	; (8000868 <MX_GPIO_Init+0x140>)
 80007d4:	f000 fcf4 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key_Pin Sensor_Direita_Pin */
  GPIO_InitStruct.Pin = Key_Pin|Sensor_Direita_Pin;
 80007d8:	2305      	movs	r3, #5
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4820      	ldr	r0, [pc, #128]	; (800086c <MX_GPIO_Init+0x144>)
 80007ec:	f000 fce8 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_Pin */
  GPIO_InitStruct.Pin = test_Pin;
 80007f0:	2302      	movs	r3, #2
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	481a      	ldr	r0, [pc, #104]	; (800086c <MX_GPIO_Init+0x144>)
 8000804:	f000 fcdc 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_Direito_Pin Encoder_Esquerdo_Pin */
  GPIO_InitStruct.Pin = Encoder_Direito_Pin|Encoder_Esquerdo_Pin;
 8000808:	2318      	movs	r3, #24
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <MX_GPIO_Init+0x144>)
 800081e:	f000 fccf 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Esquerda_Pin */
  GPIO_InitStruct.Pin = Sensor_Esquerda_Pin;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082c:	2301      	movs	r3, #1
 800082e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sensor_Esquerda_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480e      	ldr	r0, [pc, #56]	; (8000870 <MX_GPIO_Init+0x148>)
 8000838:	f000 fcc2 	bl	80011c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2105      	movs	r1, #5
 8000840:	2009      	movs	r0, #9
 8000842:	f000 fc93 	bl	800116c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000846:	2009      	movs	r0, #9
 8000848:	f000 fcac 	bl	80011a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2105      	movs	r1, #5
 8000850:	200a      	movs	r0, #10
 8000852:	f000 fc8b 	bl	800116c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000856:	200a      	movs	r0, #10
 8000858:	f000 fca4 	bl	80011a4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020800 	.word	0x40020800
 800086c:	40020000 	.word	0x40020000
 8000870:	40020400 	.word	0x40020400

08000874 <SetDefaultSpeed>:

/* USER CODE BEGIN 4 */
void SetDefaultSpeed(){
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	TIM4->CCR1 = MaxPWM;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <SetDefaultSpeed+0x30>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <SetDefaultSpeed+0x34>)
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = MaxPWM;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <SetDefaultSpeed+0x30>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <SetDefaultSpeed+0x34>)
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = MaxPWM;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <SetDefaultSpeed+0x30>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SetDefaultSpeed+0x34>)
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = MaxPWM;
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SetDefaultSpeed+0x30>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SetDefaultSpeed+0x34>)
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000000 	.word	0x20000000
 80008a8:	40000800 	.word	0x40000800

080008ac <RightMotorSpeed>:

void RightMotorSpeed(uint8_t speed){
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	  if (speed<20)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b13      	cmp	r3, #19
 80008ba:	d801      	bhi.n	80008c0 <RightMotorSpeed+0x14>
		  speed=20;
 80008bc:	2314      	movs	r3, #20
 80008be:	71fb      	strb	r3, [r7, #7]

	  if (speed>100)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b64      	cmp	r3, #100	; 0x64
 80008c4:	d901      	bls.n	80008ca <RightMotorSpeed+0x1e>
		  speed=100;
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	71fb      	strb	r3, [r7, #7]

	  TIM4->CCR1 = speed-1;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	1e5a      	subs	r2, r3, #1
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <RightMotorSpeed+0x3c>)
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM4->CCR2 = speed-1;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	1e5a      	subs	r2, r3, #1
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <RightMotorSpeed+0x3c>)
 80008d8:	639a      	str	r2, [r3, #56]	; 0x38
 }
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40000800 	.word	0x40000800

080008ec <LeftMotorSpeed>:

 void LeftMotorSpeed(uint8_t speed){
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	  if (speed<20)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b13      	cmp	r3, #19
 80008fa:	d801      	bhi.n	8000900 <LeftMotorSpeed+0x14>
		  speed=20;
 80008fc:	2314      	movs	r3, #20
 80008fe:	71fb      	strb	r3, [r7, #7]

	  if (speed>100)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b64      	cmp	r3, #100	; 0x64
 8000904:	d901      	bls.n	800090a <LeftMotorSpeed+0x1e>
		  speed=100;
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	71fb      	strb	r3, [r7, #7]

	  TIM4->CCR3 = speed-1;
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <LeftMotorSpeed+0x3c>)
 8000910:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM4->CCR4 = speed-1;
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <LeftMotorSpeed+0x3c>)
 8000918:	641a      	str	r2, [r3, #64]	; 0x40
 }
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40000800 	.word	0x40000800

0800092c <RightMotorForward>:

void RightMotorForward(){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8000930:	2104      	movs	r1, #4
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <RightMotorForward+0x18>)
 8000934:	f001 fb94 	bl	8002060 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
 8000938:	2100      	movs	r1, #0
 800093a:	4802      	ldr	r0, [pc, #8]	; (8000944 <RightMotorForward+0x18>)
 800093c:	f001 fc40 	bl	80021c0 <HAL_TIM_PWM_Stop>

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000080 	.word	0x20000080

08000948 <RightMotorStop>:
void RightMotorBackward(){
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);
}

void RightMotorStop(){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
 800094c:	2100      	movs	r1, #0
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <RightMotorStop+0x18>)
 8000950:	f001 fc36 	bl	80021c0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);
 8000954:	2104      	movs	r1, #4
 8000956:	4802      	ldr	r0, [pc, #8]	; (8000960 <RightMotorStop+0x18>)
 8000958:	f001 fc32 	bl	80021c0 <HAL_TIM_PWM_Stop>

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000080 	.word	0x20000080

08000964 <LeftMotorForward>:

void LeftMotorForward(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000968:	2108      	movs	r1, #8
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <LeftMotorForward+0x18>)
 800096c:	f001 fb78 	bl	8002060 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 8000970:	210c      	movs	r1, #12
 8000972:	4802      	ldr	r0, [pc, #8]	; (800097c <LeftMotorForward+0x18>)
 8000974:	f001 fc24 	bl	80021c0 <HAL_TIM_PWM_Stop>

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000080 	.word	0x20000080

08000980 <LeftMotorStop>:
void LeftMotorBackward(){
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_3);
}

void LeftMotorStop(){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_3);
 8000984:	2108      	movs	r1, #8
 8000986:	4804      	ldr	r0, [pc, #16]	; (8000998 <LeftMotorStop+0x18>)
 8000988:	f001 fc1a 	bl	80021c0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 800098c:	210c      	movs	r1, #12
 800098e:	4802      	ldr	r0, [pc, #8]	; (8000998 <LeftMotorStop+0x18>)
 8000990:	f001 fc16 	bl	80021c0 <HAL_TIM_PWM_Stop>

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000080 	.word	0x20000080

0800099c <moveFoward>:


void moveFoward(){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

	RightEncoderCount=0;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <moveFoward+0x2c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <moveFoward+0x30>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]

	Flag_RightMotor_MoveFoward=true;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <moveFoward+0x34>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
	Flag_LeftMotor_MoveFoward=true;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <moveFoward+0x38>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]

	SetDefaultSpeed();
 80009b8:	f7ff ff5c 	bl	8000874 <SetDefaultSpeed>

	RightMotorForward();
 80009bc:	f7ff ffb6 	bl	800092c <RightMotorForward>
	LeftMotorForward();
 80009c0:	f7ff ffd0 	bl	8000964 <LeftMotorForward>

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000d8 	.word	0x200000d8
 80009cc:	200000d4 	.word	0x200000d4
 80009d0:	200000dc 	.word	0x200000dc
 80009d4:	200000dd 	.word	0x200000dd

080009d8 <RotateRight>:

void RotateRight(){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

	RightEncoderCount=0;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <RotateRight+0x24>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <RotateRight+0x28>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]

	Flag_LeftMotor_RotateRight=true;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <RotateRight+0x2c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]

	SetDefaultSpeed();
 80009ee:	f7ff ff41 	bl	8000874 <SetDefaultSpeed>

	LeftMotorForward();
 80009f2:	f7ff ffb7 	bl	8000964 <LeftMotorForward>


}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000d8 	.word	0x200000d8
 8000a00:	200000d4 	.word	0x200000d4
 8000a04:	200000de 	.word	0x200000de

08000a08 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_4){
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	2b10      	cmp	r3, #16
 8000a16:	d104      	bne.n	8000a22 <HAL_GPIO_EXTI_Callback+0x1a>
		LeftEncoderCount++;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a20:	6013      	str	r3, [r2, #0]
		}
	if(GPIO_Pin == GPIO_PIN_3){
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	d104      	bne.n	8000a32 <HAL_GPIO_EXTI_Callback+0x2a>
		RightEncoderCount++;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a30:	6013      	str	r3, [r2, #0]
		}

}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200000d4 	.word	0x200000d4
 8000a44:	200000d8 	.word	0x200000d8

08000a48 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  if(!HAL_GPIO_ReadPin(Key_GPIO_Port, Key_Pin)){
 8000a50:	2101      	movs	r1, #1
 8000a52:	4821      	ldr	r0, [pc, #132]	; (8000ad8 <StartDefaultTask+0x90>)
 8000a54:	f000 fd38 	bl	80014c8 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d137      	bne.n	8000ace <StartDefaultTask+0x86>

		  	  moveFoward();
 8000a5e:	f7ff ff9d 	bl	800099c <moveFoward>
		  	  while(Flag_LeftMotor_MoveFoward || Flag_RightMotor_MoveFoward);
 8000a62:	bf00      	nop
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <StartDefaultTask+0x94>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1fb      	bne.n	8000a64 <StartDefaultTask+0x1c>
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <StartDefaultTask+0x98>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f7      	bne.n	8000a64 <StartDefaultTask+0x1c>
		  	  HAL_Delay(500);
 8000a74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a78:	f000 fa9c 	bl	8000fb4 <HAL_Delay>
		  	  RotateRight();
 8000a7c:	f7ff ffac 	bl	80009d8 <RotateRight>
		  	  while(Flag_LeftMotor_RotateRight || Flag_RightMotor_RotateRight);
 8000a80:	bf00      	nop
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <StartDefaultTask+0x9c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1fb      	bne.n	8000a82 <StartDefaultTask+0x3a>
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <StartDefaultTask+0xa0>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1f7      	bne.n	8000a82 <StartDefaultTask+0x3a>
		  	  HAL_Delay(500);
 8000a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a96:	f000 fa8d 	bl	8000fb4 <HAL_Delay>
			  RotateRight();
 8000a9a:	f7ff ff9d 	bl	80009d8 <RotateRight>
			  while(Flag_LeftMotor_RotateRight || Flag_RightMotor_RotateRight);
 8000a9e:	bf00      	nop
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <StartDefaultTask+0x9c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1fb      	bne.n	8000aa0 <StartDefaultTask+0x58>
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <StartDefaultTask+0xa0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f7      	bne.n	8000aa0 <StartDefaultTask+0x58>
			  HAL_Delay(500);
 8000ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab4:	f000 fa7e 	bl	8000fb4 <HAL_Delay>
			  moveFoward();
 8000ab8:	f7ff ff70 	bl	800099c <moveFoward>
			  while(Flag_LeftMotor_MoveFoward || Flag_RightMotor_MoveFoward);
 8000abc:	bf00      	nop
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <StartDefaultTask+0x94>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1fb      	bne.n	8000abe <StartDefaultTask+0x76>
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <StartDefaultTask+0x98>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f7      	bne.n	8000abe <StartDefaultTask+0x76>

	  }

	  osDelay(10);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f002 f9a0 	bl	8002e14 <osDelay>
	  if(!HAL_GPIO_ReadPin(Key_GPIO_Port, Key_Pin)){
 8000ad4:	e7bc      	b.n	8000a50 <StartDefaultTask+0x8>
 8000ad6:	bf00      	nop
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	200000dd 	.word	0x200000dd
 8000ae0:	200000dc 	.word	0x200000dc
 8000ae4:	200000de 	.word	0x200000de
 8000ae8:	200000df 	.word	0x200000df

08000aec <StartRightMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRightMotor */
void StartRightMotor(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRightMotor */
  /* Infinite loop */
  for(;;)
  {
	if(Flag_RightMotor_MoveFoward){
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <StartRightMotor+0x8c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d038      	beq.n	8000b6e <StartRightMotor+0x82>

		if(RightEncoderCount >=0 && RightEncoderCount < 5){
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <StartRightMotor+0x90>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0b      	blt.n	8000b1c <StartRightMotor+0x30>
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <StartRightMotor+0x90>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	dc07      	bgt.n	8000b1c <StartRightMotor+0x30>
			RightMotorSpeed(MaxPWM-5);
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <StartRightMotor+0x94>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	3b05      	subs	r3, #5
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fec8 	bl	80008ac <RightMotorSpeed>
		}

		if(RightEncoderCount >=5 && RightEncoderCount < 10){
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <StartRightMotor+0x90>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b04      	cmp	r3, #4
 8000b22:	dd0b      	ble.n	8000b3c <StartRightMotor+0x50>
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <StartRightMotor+0x90>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b09      	cmp	r3, #9
 8000b2a:	dc07      	bgt.n	8000b3c <StartRightMotor+0x50>
			RightMotorSpeed(MaxPWM-10);
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <StartRightMotor+0x94>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	3b0a      	subs	r3, #10
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff feb8 	bl	80008ac <RightMotorSpeed>
		}

		if(RightEncoderCount >=10 && RightEncoderCount < 15){
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <StartRightMotor+0x90>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b09      	cmp	r3, #9
 8000b42:	dd0b      	ble.n	8000b5c <StartRightMotor+0x70>
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <StartRightMotor+0x90>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b0e      	cmp	r3, #14
 8000b4a:	dc07      	bgt.n	8000b5c <StartRightMotor+0x70>
			RightMotorSpeed(MaxPWM-15);
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <StartRightMotor+0x94>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	3b0f      	subs	r3, #15
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fea8 	bl	80008ac <RightMotorSpeed>
		}

		if(RightEncoderCount >=15){
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <StartRightMotor+0x90>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b0e      	cmp	r3, #14
 8000b62:	dd04      	ble.n	8000b6e <StartRightMotor+0x82>
			RightMotorStop();
 8000b64:	f7ff fef0 	bl	8000948 <RightMotorStop>
			Flag_RightMotor_MoveFoward=false;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <StartRightMotor+0x8c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
		}

	}

    osDelay(1);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f002 f950 	bl	8002e14 <osDelay>
	if(Flag_RightMotor_MoveFoward){
 8000b74:	e7be      	b.n	8000af4 <StartRightMotor+0x8>
 8000b76:	bf00      	nop
 8000b78:	200000dc 	.word	0x200000dc
 8000b7c:	200000d8 	.word	0x200000d8
 8000b80:	20000000 	.word	0x20000000

08000b84 <StartLeftMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLeftMotor */
void StartLeftMotor(void *argument)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLeftMotor */
  /* Infinite loop */
  for(;;)
  {
	if(Flag_LeftMotor_MoveFoward){
 8000b8c:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <StartLeftMotor+0xa4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d038      	beq.n	8000c06 <StartLeftMotor+0x82>


		if(LeftEncoderCount >=0 && LeftEncoderCount < 5){
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <StartLeftMotor+0xa8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0b      	blt.n	8000bb4 <StartLeftMotor+0x30>
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <StartLeftMotor+0xa8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	dc07      	bgt.n	8000bb4 <StartLeftMotor+0x30>
			LeftMotorSpeed(MaxPWM-5);
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <StartLeftMotor+0xac>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	3b05      	subs	r3, #5
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fe9c 	bl	80008ec <LeftMotorSpeed>
		}

		if(LeftEncoderCount >=5 && LeftEncoderCount < 10){
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <StartLeftMotor+0xa8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	dd0b      	ble.n	8000bd4 <StartLeftMotor+0x50>
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <StartLeftMotor+0xa8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b09      	cmp	r3, #9
 8000bc2:	dc07      	bgt.n	8000bd4 <StartLeftMotor+0x50>
			LeftMotorSpeed(MaxPWM-10);
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <StartLeftMotor+0xac>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	3b0a      	subs	r3, #10
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fe8c 	bl	80008ec <LeftMotorSpeed>
		}

		if(LeftEncoderCount >=10 && LeftEncoderCount < 15){
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <StartLeftMotor+0xa8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b09      	cmp	r3, #9
 8000bda:	dd0b      	ble.n	8000bf4 <StartLeftMotor+0x70>
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <StartLeftMotor+0xa8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b0e      	cmp	r3, #14
 8000be2:	dc07      	bgt.n	8000bf4 <StartLeftMotor+0x70>
			LeftMotorSpeed(MaxPWM-15);
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <StartLeftMotor+0xac>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	3b0f      	subs	r3, #15
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fe7c 	bl	80008ec <LeftMotorSpeed>
		}

		if(LeftEncoderCount >=15){
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <StartLeftMotor+0xa8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b0e      	cmp	r3, #14
 8000bfa:	dd04      	ble.n	8000c06 <StartLeftMotor+0x82>
			LeftMotorStop();
 8000bfc:	f7ff fec0 	bl	8000980 <LeftMotorStop>
			Flag_LeftMotor_MoveFoward=false;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <StartLeftMotor+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		}
	}

	if(Flag_LeftMotor_RotateRight){
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <StartLeftMotor+0xb0>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d008      	beq.n	8000c20 <StartLeftMotor+0x9c>
		if(LeftEncoderCount >=10){
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <StartLeftMotor+0xa8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b09      	cmp	r3, #9
 8000c14:	dd04      	ble.n	8000c20 <StartLeftMotor+0x9c>
			LeftMotorStop();
 8000c16:	f7ff feb3 	bl	8000980 <LeftMotorStop>
			Flag_LeftMotor_RotateRight=false;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <StartLeftMotor+0xb0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
		}
	}
    osDelay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f002 f8f7 	bl	8002e14 <osDelay>
	if(Flag_LeftMotor_MoveFoward){
 8000c26:	e7b1      	b.n	8000b8c <StartLeftMotor+0x8>
 8000c28:	200000dd 	.word	0x200000dd
 8000c2c:	200000d4 	.word	0x200000d4
 8000c30:	20000000 	.word	0x20000000
 8000c34:	200000de 	.word	0x200000de

08000c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4a:	f000 f993 	bl	8000f74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010000 	.word	0x40010000

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_MspInit+0x54>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <HAL_MspInit+0x54>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_MspInit+0x54>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_MspInit+0x54>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_MspInit+0x54>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_MspInit+0x54>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	210f      	movs	r1, #15
 8000caa:	f06f 0001 	mvn.w	r0, #1
 8000cae:	f000 fa5d 	bl	800116c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_TIM_PWM_MspInit+0x3c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10d      	bne.n	8000cee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_TIM_PWM_MspInit+0x40>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_TIM_PWM_MspInit+0x40>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_TIM_PWM_MspInit+0x40>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40000800 	.word	0x40000800
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <HAL_TIM_MspPostInit+0x68>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d11e      	bne.n	8000d64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_TIM_MspPostInit+0x6c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_TIM_MspPostInit+0x6c>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_TIM_MspPostInit+0x6c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d42:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_TIM_MspPostInit+0x70>)
 8000d60:	f000 fa2e 	bl	80011c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40000800 	.word	0x40000800
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020400 	.word	0x40020400

08000d78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <HAL_InitTick+0xd0>)
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d90:	4a2d      	ldr	r2, [pc, #180]	; (8000e48 <HAL_InitTick+0xd0>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6453      	str	r3, [r2, #68]	; 0x44
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <HAL_InitTick+0xd0>)
 8000d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da4:	f107 020c 	add.w	r2, r7, #12
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 f818 	bl	8001de4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000db4:	f001 f802 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 8000db8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbc:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <HAL_InitTick+0xd4>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	0c9b      	lsrs	r3, r3, #18
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_InitTick+0xd8>)
 8000dca:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <HAL_InitTick+0xdc>)
 8000dcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <HAL_InitTick+0xd8>)
 8000dd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_InitTick+0xd8>)
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dda:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_InitTick+0xd8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_InitTick+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_InitTick+0xd8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000dee:	4818      	ldr	r0, [pc, #96]	; (8000e50 <HAL_InitTick+0xd8>)
 8000df0:	f001 f82a 	bl	8001e48 <HAL_TIM_Base_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d11b      	bne.n	8000e3a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e02:	4813      	ldr	r0, [pc, #76]	; (8000e50 <HAL_InitTick+0xd8>)
 8000e04:	f001 f87a 	bl	8001efc <HAL_TIM_Base_Start_IT>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d111      	bne.n	8000e3a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e16:	2019      	movs	r0, #25
 8000e18:	f000 f9c4 	bl	80011a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b0f      	cmp	r3, #15
 8000e20:	d808      	bhi.n	8000e34 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e22:	2200      	movs	r2, #0
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	2019      	movs	r0, #25
 8000e28:	f000 f9a0 	bl	800116c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_InitTick+0xe0>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e002      	b.n	8000e3a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3730      	adds	r7, #48	; 0x30
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	431bde83 	.word	0x431bde83
 8000e50:	200000e0 	.word	0x200000e0
 8000e54:	40010000 	.word	0x40010000
 8000e58:	20000008 	.word	0x20000008

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Direito_Pin);
 8000e8c:	2008      	movs	r0, #8
 8000e8e:	f000 fb4d 	bl	800152c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Esquerdo_Pin);
 8000e9a:	2010      	movs	r0, #16
 8000e9c:	f000 fb46 	bl	800152c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000eaa:	f001 f9ed 	bl	8002288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000e0 	.word	0x200000e0

08000eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ee2:	490e      	ldr	r1, [pc, #56]	; (8000f1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef8:	4c0b      	ldr	r4, [pc, #44]	; (8000f28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f06:	f7ff ffd7 	bl	8000eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f004 fc7d 	bl	8005808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0e:	f7ff fae5 	bl	80004dc <main>
  bx  lr    
 8000f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000f20:	08005a08 	.word	0x08005a08
  ldr r2, =_sbss
 8000f24:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000f28:	20004c54 	.word	0x20004c54

08000f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <HAL_Init+0x40>)
 8000f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_Init+0x40>)
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_Init+0x40>)
 8000f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f8fc 	bl	8001156 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	200f      	movs	r0, #15
 8000f60:	f7ff ff0a 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fe80 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023c00 	.word	0x40023c00

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2000000c 	.word	0x2000000c
 8000f98:	20000128 	.word	0x20000128

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000128 	.word	0x20000128

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff ffee 	bl	8000f9c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffde 	bl	8000f9c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000000c 	.word	0x2000000c

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db0b      	blt.n	800108a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 021f 	and.w	r2, r3, #31
 8001078:	4907      	ldr	r1, [pc, #28]	; (8001098 <__NVIC_EnableIRQ+0x38>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	2001      	movs	r0, #1
 8001082:	fa00 f202 	lsl.w	r2, r0, r2
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e100 	.word	0xe000e100

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	; (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff4c 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117e:	f7ff ff61 	bl	8001044 <__NVIC_GetPriorityGrouping>
 8001182:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	6978      	ldr	r0, [r7, #20]
 800118a:	f7ff ffb1 	bl	80010f0 <NVIC_EncodePriority>
 800118e:	4602      	mov	r2, r0
 8001190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff80 	bl	800109c <__NVIC_SetPriority>
}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff54 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	e159      	b.n	8001490 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011dc:	2201      	movs	r2, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	f040 8148 	bne.w	800148a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d005      	beq.n	8001212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	2b02      	cmp	r3, #2
 8001210:	d130      	bne.n	8001274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001248:	2201      	movs	r2, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 0201 	and.w	r2, r3, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b03      	cmp	r3, #3
 800127e:	d017      	beq.n	80012b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d123      	bne.n	8001304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	69b9      	ldr	r1, [r7, #24]
 8001300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0203 	and.w	r2, r3, #3
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80a2 	beq.w	800148a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b57      	ldr	r3, [pc, #348]	; (80014a8 <HAL_GPIO_Init+0x2e8>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a56      	ldr	r2, [pc, #344]	; (80014a8 <HAL_GPIO_Init+0x2e8>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <HAL_GPIO_Init+0x2e8>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001362:	4a52      	ldr	r2, [pc, #328]	; (80014ac <HAL_GPIO_Init+0x2ec>)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a49      	ldr	r2, [pc, #292]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d019      	beq.n	80013c2 <HAL_GPIO_Init+0x202>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a48      	ldr	r2, [pc, #288]	; (80014b4 <HAL_GPIO_Init+0x2f4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x1fe>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a47      	ldr	r2, [pc, #284]	; (80014b8 <HAL_GPIO_Init+0x2f8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x1fa>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a46      	ldr	r2, [pc, #280]	; (80014bc <HAL_GPIO_Init+0x2fc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x1f6>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a45      	ldr	r2, [pc, #276]	; (80014c0 <HAL_GPIO_Init+0x300>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x1f2>
 80013ae:	2304      	movs	r3, #4
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x204>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x204>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x204>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x204>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x204>
 80013c2:	2300      	movs	r3, #0
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <HAL_GPIO_Init+0x2ec>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <HAL_GPIO_Init+0x304>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <HAL_GPIO_Init+0x304>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <HAL_GPIO_Init+0x304>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <HAL_GPIO_Init+0x304>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <HAL_GPIO_Init+0x304>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145a:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <HAL_GPIO_Init+0x304>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_GPIO_Init+0x304>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001484:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_GPIO_Init+0x304>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f aea2 	bls.w	80011dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e001      	b.n	80014ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d006      	beq.n	8001550 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fa5c 	bl	8000a08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40013c00 	.word	0x40013c00

0800155c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e267      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d075      	beq.n	8001666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157a:	4b88      	ldr	r3, [pc, #544]	; (800179c <HAL_RCC_OscConfig+0x240>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b04      	cmp	r3, #4
 8001584:	d00c      	beq.n	80015a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001586:	4b85      	ldr	r3, [pc, #532]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800158e:	2b08      	cmp	r3, #8
 8001590:	d112      	bne.n	80015b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001592:	4b82      	ldr	r3, [pc, #520]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800159e:	d10b      	bne.n	80015b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	4b7e      	ldr	r3, [pc, #504]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d05b      	beq.n	8001664 <HAL_RCC_OscConfig+0x108>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d157      	bne.n	8001664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e242      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x74>
 80015c2:	4b76      	ldr	r3, [pc, #472]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a75      	ldr	r2, [pc, #468]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e01d      	b.n	800160c <HAL_RCC_OscConfig+0xb0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x98>
 80015da:	4b70      	ldr	r3, [pc, #448]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a6f      	ldr	r2, [pc, #444]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b6d      	ldr	r3, [pc, #436]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a6c      	ldr	r2, [pc, #432]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0xb0>
 80015f4:	4b69      	ldr	r3, [pc, #420]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a68      	ldr	r2, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b66      	ldr	r3, [pc, #408]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a65      	ldr	r2, [pc, #404]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fcc2 	bl	8000f9c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fcbe 	bl	8000f9c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e207      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b5b      	ldr	r3, [pc, #364]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0xc0>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fcae 	bl	8000f9c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fcaa 	bl	8000f9c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1f3      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0xe8>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d063      	beq.n	800173a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001686:	2b08      	cmp	r3, #8
 8001688:	d11c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <HAL_RCC_OscConfig+0x240>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d116      	bne.n	80016c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x152>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e1c7      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b3b      	ldr	r3, [pc, #236]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4937      	ldr	r1, [pc, #220]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	e03a      	b.n	800173a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016cc:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <HAL_RCC_OscConfig+0x244>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7ff fc63 	bl	8000f9c <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fc5f 	bl	8000f9c <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1a8      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_RCC_OscConfig+0x240>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4925      	ldr	r1, [pc, #148]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e015      	b.n	800173a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_OscConfig+0x244>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fc42 	bl	8000f9c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fc3e 	bl	8000f9c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e187      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d036      	beq.n	80017b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d016      	beq.n	800177c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_RCC_OscConfig+0x248>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fc22 	bl	8000f9c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fc1e 	bl	8000f9c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e167      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_OscConfig+0x240>)
 8001770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x200>
 800177a:	e01b      	b.n	80017b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_RCC_OscConfig+0x248>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff fc0b 	bl	8000f9c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	e00e      	b.n	80017a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff fc07 	bl	8000f9c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d907      	bls.n	80017a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e150      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
 800179c:	40023800 	.word	0x40023800
 80017a0:	42470000 	.word	0x42470000
 80017a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	4b88      	ldr	r3, [pc, #544]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80017aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ea      	bne.n	800178a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8097 	beq.w	80018f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4b81      	ldr	r3, [pc, #516]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10f      	bne.n	80017f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b7d      	ldr	r3, [pc, #500]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a7c      	ldr	r2, [pc, #496]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	4b77      	ldr	r3, [pc, #476]	; (80019d0 <HAL_RCC_OscConfig+0x474>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d118      	bne.n	8001830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fe:	4b74      	ldr	r3, [pc, #464]	; (80019d0 <HAL_RCC_OscConfig+0x474>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a73      	ldr	r2, [pc, #460]	; (80019d0 <HAL_RCC_OscConfig+0x474>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180a:	f7ff fbc7 	bl	8000f9c <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7ff fbc3 	bl	8000f9c <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e10c      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	4b6a      	ldr	r3, [pc, #424]	; (80019d0 <HAL_RCC_OscConfig+0x474>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x2ea>
 8001838:	4b64      	ldr	r3, [pc, #400]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a63      	ldr	r2, [pc, #396]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
 8001844:	e01c      	b.n	8001880 <HAL_RCC_OscConfig+0x324>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b05      	cmp	r3, #5
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x30c>
 800184e:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001852:	4a5e      	ldr	r2, [pc, #376]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	6713      	str	r3, [r2, #112]	; 0x70
 800185a:	4b5c      	ldr	r3, [pc, #368]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185e:	4a5b      	ldr	r2, [pc, #364]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6713      	str	r3, [r2, #112]	; 0x70
 8001866:	e00b      	b.n	8001880 <HAL_RCC_OscConfig+0x324>
 8001868:	4b58      	ldr	r3, [pc, #352]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	4a57      	ldr	r2, [pc, #348]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	6713      	str	r3, [r2, #112]	; 0x70
 8001874:	4b55      	ldr	r3, [pc, #340]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	4a54      	ldr	r2, [pc, #336]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 800187a:	f023 0304 	bic.w	r3, r3, #4
 800187e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d015      	beq.n	80018b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001888:	f7ff fb88 	bl	8000f9c <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f7ff fb84 	bl	8000f9c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e0cb      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a6:	4b49      	ldr	r3, [pc, #292]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0ee      	beq.n	8001890 <HAL_RCC_OscConfig+0x334>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7ff fb72 	bl	8000f9c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018bc:	f7ff fb6e 	bl	8000f9c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e0b5      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d2:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1ee      	bne.n	80018bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018de:	7dfb      	ldrb	r3, [r7, #23]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e4:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	4a38      	ldr	r2, [pc, #224]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80018ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a1 	beq.w	8001a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018fa:	4b34      	ldr	r3, [pc, #208]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b08      	cmp	r3, #8
 8001904:	d05c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d141      	bne.n	8001992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_RCC_OscConfig+0x478>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fb42 	bl	8000f9c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff fb3e 	bl	8000f9c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e087      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69da      	ldr	r2, [r3, #28]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	019b      	lsls	r3, r3, #6
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	3b01      	subs	r3, #1
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	491b      	ldr	r1, [pc, #108]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_RCC_OscConfig+0x478>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff fb17 	bl	8000f9c <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff fb13 	bl	8000f9c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e05c      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x416>
 8001990:	e054      	b.n	8001a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_RCC_OscConfig+0x478>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fb00 	bl	8000f9c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fafc 	bl	8000f9c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e045      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_OscConfig+0x470>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x444>
 80019be:	e03d      	b.n	8001a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e038      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40007000 	.word	0x40007000
 80019d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_RCC_OscConfig+0x4ec>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d028      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d121      	bne.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d11a      	bne.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a08:	4013      	ands	r3, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d111      	bne.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	3b01      	subs	r3, #1
 8001a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0cc      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d90c      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b8      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	494d      	ldr	r1, [pc, #308]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d044      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d119      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0a:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e06f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e067      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f023 0203 	bic.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4934      	ldr	r1, [pc, #208]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b3c:	f7ff fa2e 	bl	8000f9c <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7ff fa2a 	bl	8000f9c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e04f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 020c 	and.w	r2, r3, #12
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1eb      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d20c      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e032      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4916      	ldr	r1, [pc, #88]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	490e      	ldr	r1, [pc, #56]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bd2:	f000 f821 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	490a      	ldr	r1, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f8c0 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	080059e0 	.word	0x080059e0
 8001c10:	20000004 	.word	0x20000004
 8001c14:	20000008 	.word	0x20000008

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c1c:	b090      	sub	sp, #64	; 0x40
 8001c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
 8001c24:	2300      	movs	r3, #0
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d00d      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x40>
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	f200 80a1 	bhi.w	8001d84 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x34>
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c4a:	e09b      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c50:	e09b      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c52:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c56:	e098      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c58:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c62:	4b4d      	ldr	r3, [pc, #308]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d028      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	099b      	lsrs	r3, r3, #6
 8001c74:	2200      	movs	r2, #0
 8001c76:	623b      	str	r3, [r7, #32]
 8001c78:	627a      	str	r2, [r7, #36]	; 0x24
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c80:	2100      	movs	r1, #0
 8001c82:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c84:	fb03 f201 	mul.w	r2, r3, r1
 8001c88:	2300      	movs	r3, #0
 8001c8a:	fb00 f303 	mul.w	r3, r0, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a43      	ldr	r2, [pc, #268]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c92:	fba0 1202 	umull	r1, r2, r0, r2
 8001c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c98:	460a      	mov	r2, r1
 8001c9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c9e:	4413      	add	r3, r2
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	61fa      	str	r2, [r7, #28]
 8001caa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cb2:	f7fe fa95 	bl	80001e0 <__aeabi_uldivmod>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4613      	mov	r3, r2
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cbe:	e053      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	617a      	str	r2, [r7, #20]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cd2:	f04f 0b00 	mov.w	fp, #0
 8001cd6:	4652      	mov	r2, sl
 8001cd8:	465b      	mov	r3, fp
 8001cda:	f04f 0000 	mov.w	r0, #0
 8001cde:	f04f 0100 	mov.w	r1, #0
 8001ce2:	0159      	lsls	r1, r3, #5
 8001ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce8:	0150      	lsls	r0, r2, #5
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	ebb2 080a 	subs.w	r8, r2, sl
 8001cf2:	eb63 090b 	sbc.w	r9, r3, fp
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d0a:	ebb2 0408 	subs.w	r4, r2, r8
 8001d0e:	eb63 0509 	sbc.w	r5, r3, r9
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	00eb      	lsls	r3, r5, #3
 8001d1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d20:	00e2      	lsls	r2, r4, #3
 8001d22:	4614      	mov	r4, r2
 8001d24:	461d      	mov	r5, r3
 8001d26:	eb14 030a 	adds.w	r3, r4, sl
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	eb45 030b 	adc.w	r3, r5, fp
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d3e:	4629      	mov	r1, r5
 8001d40:	028b      	lsls	r3, r1, #10
 8001d42:	4621      	mov	r1, r4
 8001d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d48:	4621      	mov	r1, r4
 8001d4a:	028a      	lsls	r2, r1, #10
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d52:	2200      	movs	r2, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	60fa      	str	r2, [r7, #12]
 8001d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d5c:	f7fe fa40 	bl	80001e0 <__aeabi_uldivmod>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4613      	mov	r3, r2
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d82:	e002      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x184>)
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3740      	adds	r7, #64	; 0x40
 8001d90:	46bd      	mov	sp, r7
 8001d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	00f42400 	.word	0x00f42400
 8001da0:	017d7840 	.word	0x017d7840

08001da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dc0:	f7ff fff0 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0b5b      	lsrs	r3, r3, #13
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4903      	ldr	r1, [pc, #12]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	080059f0 	.word	0x080059f0

08001de4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	220f      	movs	r2, #15
 8001df2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCC_GetClockConfig+0x5c>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0203 	and.w	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_RCC_GetClockConfig+0x5c>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <HAL_RCC_GetClockConfig+0x60>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0207 	and.w	r2, r3, #7
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	601a      	str	r2, [r3, #0]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e041      	b.n	8001ede <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f839 	bl	8001ee6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3304      	adds	r3, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f000 fbf0 	bl	800266c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d001      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e044      	b.n	8001f9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <HAL_TIM_Base_Start_IT+0xb0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d018      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x6c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3e:	d013      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x6c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1a      	ldr	r2, [pc, #104]	; (8001fb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00e      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x6c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x6c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x6c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a16      	ldr	r2, [pc, #88]	; (8001fbc <HAL_TIM_Base_Start_IT+0xc0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d111      	bne.n	8001f8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d010      	beq.n	8001f9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0201 	orr.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8a:	e007      	b.n	8001f9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40000800 	.word	0x40000800
 8001fb8:	40000c00 	.word	0x40000c00
 8001fbc:	40014000 	.word	0x40014000

08001fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e041      	b.n	8002056 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fe6a 	bl	8000cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f000 fb34 	bl	800266c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_TIM_PWM_Start+0x24>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e022      	b.n	80020ca <HAL_TIM_PWM_Start+0x6a>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b04      	cmp	r3, #4
 8002088:	d109      	bne.n	800209e <HAL_TIM_PWM_Start+0x3e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b01      	cmp	r3, #1
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	e015      	b.n	80020ca <HAL_TIM_PWM_Start+0x6a>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d109      	bne.n	80020b8 <HAL_TIM_PWM_Start+0x58>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e008      	b.n	80020ca <HAL_TIM_PWM_Start+0x6a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e068      	b.n	80021a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <HAL_TIM_PWM_Start+0x82>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e0:	e013      	b.n	800210a <HAL_TIM_PWM_Start+0xaa>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d104      	bne.n	80020f2 <HAL_TIM_PWM_Start+0x92>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f0:	e00b      	b.n	800210a <HAL_TIM_PWM_Start+0xaa>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d104      	bne.n	8002102 <HAL_TIM_PWM_Start+0xa2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002100:	e003      	b.n	800210a <HAL_TIM_PWM_Start+0xaa>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2201      	movs	r2, #1
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fcb6 	bl	8002a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a23      	ldr	r2, [pc, #140]	; (80021ac <HAL_TIM_PWM_Start+0x14c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d107      	bne.n	8002132 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_TIM_PWM_Start+0x14c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d018      	beq.n	800216e <HAL_TIM_PWM_Start+0x10e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002144:	d013      	beq.n	800216e <HAL_TIM_PWM_Start+0x10e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a19      	ldr	r2, [pc, #100]	; (80021b0 <HAL_TIM_PWM_Start+0x150>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00e      	beq.n	800216e <HAL_TIM_PWM_Start+0x10e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_TIM_PWM_Start+0x154>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_TIM_PWM_Start+0x10e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <HAL_TIM_PWM_Start+0x158>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_TIM_PWM_Start+0x10e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_TIM_PWM_Start+0x15c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d111      	bne.n	8002192 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b06      	cmp	r3, #6
 800217e:	d010      	beq.n	80021a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002190:	e007      	b.n	80021a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40000800 	.word	0x40000800
 80021b8:	40000c00 	.word	0x40000c00
 80021bc:	40014000 	.word	0x40014000

080021c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fc56 	bl	8002a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a29      	ldr	r2, [pc, #164]	; (8002284 <HAL_TIM_PWM_Stop+0xc4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d117      	bne.n	8002212 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <HAL_TIM_PWM_Stop+0x52>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	f240 4344 	movw	r3, #1092	; 0x444
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d107      	bne.n	8002212 <HAL_TIM_PWM_Stop+0x52>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002210:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a1a      	ldr	r2, [r3, #32]
 8002218:	f241 1311 	movw	r3, #4369	; 0x1111
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10f      	bne.n	8002242 <HAL_TIM_PWM_Stop+0x82>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	f240 4344 	movw	r3, #1092	; 0x444
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <HAL_TIM_PWM_Stop+0x82>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <HAL_TIM_PWM_Stop+0x92>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002250:	e013      	b.n	800227a <HAL_TIM_PWM_Stop+0xba>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d104      	bne.n	8002262 <HAL_TIM_PWM_Stop+0xa2>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002260:	e00b      	b.n	800227a <HAL_TIM_PWM_Stop+0xba>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b08      	cmp	r3, #8
 8002266:	d104      	bne.n	8002272 <HAL_TIM_PWM_Stop+0xb2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002270:	e003      	b.n	800227a <HAL_TIM_PWM_Stop+0xba>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40010000 	.word	0x40010000

08002288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d122      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d11b      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0202 	mvn.w	r2, #2
 80022b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f9b0 	bl	8002630 <HAL_TIM_IC_CaptureCallback>
 80022d0:	e005      	b.n	80022de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f9a2 	bl	800261c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f9b3 	bl	8002644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d122      	bne.n	8002338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d11b      	bne.n	8002338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0204 	mvn.w	r2, #4
 8002308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f986 	bl	8002630 <HAL_TIM_IC_CaptureCallback>
 8002324:	e005      	b.n	8002332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f978 	bl	800261c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f989 	bl	8002644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b08      	cmp	r3, #8
 8002344:	d122      	bne.n	800238c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b08      	cmp	r3, #8
 8002352:	d11b      	bne.n	800238c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0208 	mvn.w	r2, #8
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2204      	movs	r2, #4
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f95c 	bl	8002630 <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f94e 	bl	800261c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f95f 	bl	8002644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b10      	cmp	r3, #16
 8002398:	d122      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d11b      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0210 	mvn.w	r2, #16
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2208      	movs	r2, #8
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f932 	bl	8002630 <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f924 	bl	800261c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f935 	bl	8002644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10e      	bne.n	800240c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0201 	mvn.w	r2, #1
 8002404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fc16 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b80      	cmp	r3, #128	; 0x80
 8002418:	d10e      	bne.n	8002438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002424:	2b80      	cmp	r3, #128	; 0x80
 8002426:	d107      	bne.n	8002438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fbc4 	bl	8002bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d10e      	bne.n	8002464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002450:	2b40      	cmp	r3, #64	; 0x40
 8002452:	d107      	bne.n	8002464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8fa 	bl	8002658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b20      	cmp	r3, #32
 8002470:	d10e      	bne.n	8002490 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b20      	cmp	r3, #32
 800247e:	d107      	bne.n	8002490 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0220 	mvn.w	r2, #32
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fb8e 	bl	8002bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e0ae      	b.n	8002614 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	f200 809f 	bhi.w	8002604 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	08002501 	.word	0x08002501
 80024d0:	08002605 	.word	0x08002605
 80024d4:	08002605 	.word	0x08002605
 80024d8:	08002605 	.word	0x08002605
 80024dc:	08002541 	.word	0x08002541
 80024e0:	08002605 	.word	0x08002605
 80024e4:	08002605 	.word	0x08002605
 80024e8:	08002605 	.word	0x08002605
 80024ec:	08002583 	.word	0x08002583
 80024f0:	08002605 	.word	0x08002605
 80024f4:	08002605 	.word	0x08002605
 80024f8:	08002605 	.word	0x08002605
 80024fc:	080025c3 	.word	0x080025c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f930 	bl	800276c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0208 	orr.w	r2, r2, #8
 800251a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0204 	bic.w	r2, r2, #4
 800252a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6999      	ldr	r1, [r3, #24]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	619a      	str	r2, [r3, #24]
      break;
 800253e:	e064      	b.n	800260a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f976 	bl	8002838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800255a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6999      	ldr	r1, [r3, #24]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	021a      	lsls	r2, r3, #8
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	619a      	str	r2, [r3, #24]
      break;
 8002580:	e043      	b.n	800260a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f9c1 	bl	8002910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0208 	orr.w	r2, r2, #8
 800259c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0204 	bic.w	r2, r2, #4
 80025ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69d9      	ldr	r1, [r3, #28]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	61da      	str	r2, [r3, #28]
      break;
 80025c0:	e023      	b.n	800260a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fa0b 	bl	80029e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69d9      	ldr	r1, [r3, #28]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	61da      	str	r2, [r3, #28]
      break;
 8002602:	e002      	b.n	800260a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	75fb      	strb	r3, [r7, #23]
      break;
 8002608:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002612:	7dfb      	ldrb	r3, [r7, #23]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a34      	ldr	r2, [pc, #208]	; (8002750 <TIM_Base_SetConfig+0xe4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00f      	beq.n	80026a4 <TIM_Base_SetConfig+0x38>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268a:	d00b      	beq.n	80026a4 <TIM_Base_SetConfig+0x38>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a31      	ldr	r2, [pc, #196]	; (8002754 <TIM_Base_SetConfig+0xe8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <TIM_Base_SetConfig+0x38>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a30      	ldr	r2, [pc, #192]	; (8002758 <TIM_Base_SetConfig+0xec>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <TIM_Base_SetConfig+0x38>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a2f      	ldr	r2, [pc, #188]	; (800275c <TIM_Base_SetConfig+0xf0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d108      	bne.n	80026b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a25      	ldr	r2, [pc, #148]	; (8002750 <TIM_Base_SetConfig+0xe4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01b      	beq.n	80026f6 <TIM_Base_SetConfig+0x8a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c4:	d017      	beq.n	80026f6 <TIM_Base_SetConfig+0x8a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <TIM_Base_SetConfig+0xe8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <TIM_Base_SetConfig+0x8a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <TIM_Base_SetConfig+0xec>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00f      	beq.n	80026f6 <TIM_Base_SetConfig+0x8a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a20      	ldr	r2, [pc, #128]	; (800275c <TIM_Base_SetConfig+0xf0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00b      	beq.n	80026f6 <TIM_Base_SetConfig+0x8a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <TIM_Base_SetConfig+0xf4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <TIM_Base_SetConfig+0x8a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <TIM_Base_SetConfig+0xf8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d003      	beq.n	80026f6 <TIM_Base_SetConfig+0x8a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <TIM_Base_SetConfig+0xfc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d108      	bne.n	8002708 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a08      	ldr	r2, [pc, #32]	; (8002750 <TIM_Base_SetConfig+0xe4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d103      	bne.n	800273c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	615a      	str	r2, [r3, #20]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40010000 	.word	0x40010000
 8002754:	40000400 	.word	0x40000400
 8002758:	40000800 	.word	0x40000800
 800275c:	40000c00 	.word	0x40000c00
 8002760:	40014000 	.word	0x40014000
 8002764:	40014400 	.word	0x40014400
 8002768:	40014800 	.word	0x40014800

0800276c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f023 0201 	bic.w	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f023 0302 	bic.w	r3, r3, #2
 80027b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <TIM_OC1_SetConfig+0xc8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10c      	bne.n	80027e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f023 0308 	bic.w	r3, r3, #8
 80027ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a13      	ldr	r2, [pc, #76]	; (8002834 <TIM_OC1_SetConfig+0xc8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d111      	bne.n	800280e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	621a      	str	r2, [r3, #32]
}
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40010000 	.word	0x40010000

08002838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f023 0210 	bic.w	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f023 0320 	bic.w	r3, r3, #32
 8002882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <TIM_OC2_SetConfig+0xd4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d10d      	bne.n	80028b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800289e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a15      	ldr	r2, [pc, #84]	; (800290c <TIM_OC2_SetConfig+0xd4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d113      	bne.n	80028e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	621a      	str	r2, [r3, #32]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000

08002910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0303 	bic.w	r3, r3, #3
 8002946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <TIM_OC3_SetConfig+0xd0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10d      	bne.n	800298a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <TIM_OC3_SetConfig+0xd0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d113      	bne.n	80029ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	621a      	str	r2, [r3, #32]
}
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	40010000 	.word	0x40010000

080029e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	031b      	lsls	r3, r3, #12
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <TIM_OC4_SetConfig+0x9c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d109      	bne.n	8002a58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	621a      	str	r2, [r3, #32]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40010000 	.word	0x40010000

08002a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2201      	movs	r2, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	621a      	str	r2, [r3, #32]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e050      	b.n	8002b8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d018      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b34:	d013      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a18      	ldr	r2, [pc, #96]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00e      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a16      	ldr	r2, [pc, #88]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10c      	bne.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40000c00 	.word	0x40000c00
 8002ba8:	40014000 	.word	0x40014000

08002bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <__NVIC_SetPriority>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6039      	str	r1, [r7, #0]
 8002bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db0a      	blt.n	8002bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	490c      	ldr	r1, [pc, #48]	; (8002c20 <__NVIC_SetPriority+0x4c>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	0112      	lsls	r2, r2, #4
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bfc:	e00a      	b.n	8002c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4908      	ldr	r1, [pc, #32]	; (8002c24 <__NVIC_SetPriority+0x50>)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	3b04      	subs	r3, #4
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	440b      	add	r3, r1
 8002c12:	761a      	strb	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <SysTick_Handler+0x1c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002c30:	f001 fd28 	bl	8004684 <xTaskGetSchedulerState>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c3a:	f002 fb0d 	bl	8005258 <xPortSysTickHandler>
  }
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	f06f 0004 	mvn.w	r0, #4
 8002c52:	f7ff ffbf 	bl	8002bd4 <__NVIC_SetPriority>
#endif
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c62:	f3ef 8305 	mrs	r3, IPSR
 8002c66:	603b      	str	r3, [r7, #0]
  return(result);
 8002c68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c6e:	f06f 0305 	mvn.w	r3, #5
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	e00c      	b.n	8002c90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <osKernelInitialize+0x44>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <osKernelInitialize+0x44>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	e002      	b.n	8002c90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c90:	687b      	ldr	r3, [r7, #4]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	2000012c 	.word	0x2000012c

08002ca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002caa:	f3ef 8305 	mrs	r3, IPSR
 8002cae:	603b      	str	r3, [r7, #0]
  return(result);
 8002cb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8002cb6:	f06f 0305 	mvn.w	r3, #5
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	e010      	b.n	8002ce0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <osKernelStart+0x48>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d109      	bne.n	8002cda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002cc6:	f7ff ffbf 	bl	8002c48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <osKernelStart+0x48>)
 8002ccc:	2202      	movs	r2, #2
 8002cce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002cd0:	f001 f87c 	bl	8003dcc <vTaskStartScheduler>
      stat = osOK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	e002      	b.n	8002ce0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ce0:	687b      	ldr	r3, [r7, #4]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000012c 	.word	0x2000012c

08002cf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af04      	add	r7, sp, #16
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d00:	f3ef 8305 	mrs	r3, IPSR
 8002d04:	617b      	str	r3, [r7, #20]
  return(result);
 8002d06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d17e      	bne.n	8002e0a <osThreadNew+0x11a>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d07b      	beq.n	8002e0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002d16:	2318      	movs	r3, #24
 8002d18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d045      	beq.n	8002db6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <osThreadNew+0x48>
        name = attr->name;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <osThreadNew+0x6e>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b38      	cmp	r3, #56	; 0x38
 8002d50:	d805      	bhi.n	8002d5e <osThreadNew+0x6e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <osThreadNew+0x72>
        return (NULL);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e054      	b.n	8002e0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00e      	beq.n	8002d98 <osThreadNew+0xa8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2ba7      	cmp	r3, #167	; 0xa7
 8002d80:	d90a      	bls.n	8002d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <osThreadNew+0xa8>
        mem = 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e010      	b.n	8002dba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10c      	bne.n	8002dba <osThreadNew+0xca>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d108      	bne.n	8002dba <osThreadNew+0xca>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d104      	bne.n	8002dba <osThreadNew+0xca>
          mem = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e001      	b.n	8002dba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d110      	bne.n	8002de2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dc8:	9202      	str	r2, [sp, #8]
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6a3a      	ldr	r2, [r7, #32]
 8002dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fe0c 	bl	80039f4 <xTaskCreateStatic>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	e013      	b.n	8002e0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d110      	bne.n	8002e0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fe57 	bl	8003aae <xTaskCreate>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d001      	beq.n	8002e0a <osThreadNew+0x11a>
            hTask = NULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e0a:	693b      	ldr	r3, [r7, #16]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3728      	adds	r7, #40	; 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e1c:	f3ef 8305 	mrs	r3, IPSR
 8002e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <osDelay+0x1c>
    stat = osErrorISR;
 8002e28:	f06f 0305 	mvn.w	r3, #5
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	e007      	b.n	8002e40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 ff92 	bl	8003d64 <vTaskDelay>
    }
  }

  return (stat);
 8002e40:	68fb      	ldr	r3, [r7, #12]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <vApplicationGetIdleTaskMemory+0x30>)
 8002e62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	601a      	str	r2, [r3, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000130 	.word	0x20000130
 8002e7c:	200001d8 	.word	0x200001d8

08002e80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a07      	ldr	r2, [pc, #28]	; (8002eac <vApplicationGetTimerTaskMemory+0x2c>)
 8002e90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4a06      	ldr	r2, [pc, #24]	; (8002eb0 <vApplicationGetTimerTaskMemory+0x30>)
 8002e96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e9e:	601a      	str	r2, [r3, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	200003d8 	.word	0x200003d8
 8002eb0:	20000480 	.word	0x20000480

08002eb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f103 0208 	add.w	r2, r3, #8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f103 0208 	add.w	r2, r3, #8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f103 0208 	add.w	r2, r3, #8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	601a      	str	r2, [r3, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d103      	bne.n	8002f76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e00c      	b.n	8002f90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3308      	adds	r3, #8
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e002      	b.n	8002f84 <vListInsert+0x2e>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d2f6      	bcs.n	8002f7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	601a      	str	r2, [r3, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6852      	ldr	r2, [r2, #4]
 8002fe8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d103      	bne.n	8002ffc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1e5a      	subs	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003042:	bf00      	nop
 8003044:	e7fe      	b.n	8003044 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003046:	f002 f875 	bl	8005134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	441a      	add	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	3b01      	subs	r3, #1
 8003078:	68f9      	ldr	r1, [r7, #12]
 800307a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	441a      	add	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	22ff      	movs	r2, #255	; 0xff
 800308a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	22ff      	movs	r2, #255	; 0xff
 8003092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d114      	bne.n	80030c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01a      	beq.n	80030da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3310      	adds	r3, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 f929 	bl	8004300 <xTaskRemoveFromEventList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d012      	beq.n	80030da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <xQueueGenericReset+0xcc>)
 80030b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	e009      	b.n	80030da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3310      	adds	r3, #16
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fef2 	bl	8002eb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3324      	adds	r3, #36	; 0x24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff feed 	bl	8002eb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030da:	f002 f85b 	bl	8005194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	e000ed04 	.word	0xe000ed04

080030ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800312e:	bf00      	nop
 8003130:	e7fe      	b.n	8003130 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <xQueueGenericCreateStatic+0x52>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <xQueueGenericCreateStatic+0x56>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <xQueueGenericCreateStatic+0x58>
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	623b      	str	r3, [r7, #32]
}
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d102      	bne.n	800316a <xQueueGenericCreateStatic+0x7e>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <xQueueGenericCreateStatic+0x82>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <xQueueGenericCreateStatic+0x84>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	61fb      	str	r3, [r7, #28]
}
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800318a:	2350      	movs	r3, #80	; 0x50
 800318c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b50      	cmp	r3, #80	; 0x50
 8003192:	d00a      	beq.n	80031aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	61bb      	str	r3, [r7, #24]
}
 80031a6:	bf00      	nop
 80031a8:	e7fe      	b.n	80031a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80031aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f805 	bl	80031dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3730      	adds	r7, #48	; 0x30
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e002      	b.n	80031fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800320a:	2101      	movs	r1, #1
 800320c:	69b8      	ldr	r0, [r7, #24]
 800320e:	f7ff ff05 	bl	800301c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08e      	sub	sp, #56	; 0x38
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003232:	2300      	movs	r3, #0
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xQueueGenericSend+0x32>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d103      	bne.n	8003264 <xQueueGenericSend+0x40>
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <xQueueGenericSend+0x44>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <xQueueGenericSend+0x46>
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <xQueueGenericSend+0x60>
	__asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003280:	bf00      	nop
 8003282:	e7fe      	b.n	8003282 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d103      	bne.n	8003292 <xQueueGenericSend+0x6e>
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <xQueueGenericSend+0x72>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <xQueueGenericSend+0x74>
 8003296:	2300      	movs	r3, #0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	623b      	str	r3, [r7, #32]
}
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032b2:	f001 f9e7 	bl	8004684 <xTaskGetSchedulerState>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <xQueueGenericSend+0x9e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <xQueueGenericSend+0xa2>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <xQueueGenericSend+0xa4>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	61fb      	str	r3, [r7, #28]
}
 80032de:	bf00      	nop
 80032e0:	e7fe      	b.n	80032e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032e2:	f001 ff27 	bl	8005134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <xQueueGenericSend+0xd4>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d129      	bne.n	800334c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032fe:	f000 fa0b 	bl	8003718 <prvCopyDataToQueue>
 8003302:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	3324      	adds	r3, #36	; 0x24
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fff5 	bl	8004300 <xTaskRemoveFromEventList>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800331c:	4b3f      	ldr	r3, [pc, #252]	; (800341c <xQueueGenericSend+0x1f8>)
 800331e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	e00a      	b.n	8003344 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <xQueueGenericSend+0x1f8>)
 8003336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003344:	f001 ff26 	bl	8005194 <vPortExitCritical>
				return pdPASS;
 8003348:	2301      	movs	r3, #1
 800334a:	e063      	b.n	8003414 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003352:	f001 ff1f 	bl	8005194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003356:	2300      	movs	r3, #0
 8003358:	e05c      	b.n	8003414 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	4618      	mov	r0, r3
 8003366:	f001 f82f 	bl	80043c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800336a:	2301      	movs	r3, #1
 800336c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800336e:	f001 ff11 	bl	8005194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003372:	f000 fd9b 	bl	8003eac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003376:	f001 fedd 	bl	8005134 <vPortEnterCritical>
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003380:	b25b      	sxtb	r3, r3
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d103      	bne.n	8003390 <xQueueGenericSend+0x16c>
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003396:	b25b      	sxtb	r3, r3
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d103      	bne.n	80033a6 <xQueueGenericSend+0x182>
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033a6:	f001 fef5 	bl	8005194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033aa:	1d3a      	adds	r2, r7, #4
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 f81e 	bl	80043f4 <xTaskCheckForTimeOut>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d124      	bne.n	8003408 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033c0:	f000 faa2 	bl	8003908 <prvIsQueueFull>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d018      	beq.n	80033fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	3310      	adds	r3, #16
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 ff44 	bl	8004260 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033da:	f000 fa2d 	bl	8003838 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033de:	f000 fd73 	bl	8003ec8 <xTaskResumeAll>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f47f af7c 	bne.w	80032e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <xQueueGenericSend+0x1f8>)
 80033ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	e772      	b.n	80032e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033fe:	f000 fa1b 	bl	8003838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003402:	f000 fd61 	bl	8003ec8 <xTaskResumeAll>
 8003406:	e76c      	b.n	80032e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800340a:	f000 fa15 	bl	8003838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800340e:	f000 fd5b 	bl	8003ec8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003412:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003414:	4618      	mov	r0, r3
 8003416:	3738      	adds	r7, #56	; 0x38
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	e000ed04 	.word	0xe000ed04

08003420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b090      	sub	sp, #64	; 0x40
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800344a:	bf00      	nop
 800344c:	e7fe      	b.n	800344c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d103      	bne.n	800345c <xQueueGenericSendFromISR+0x3c>
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <xQueueGenericSendFromISR+0x40>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <xQueueGenericSendFromISR+0x42>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d103      	bne.n	800348a <xQueueGenericSendFromISR+0x6a>
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <xQueueGenericSendFromISR+0x6e>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <xQueueGenericSendFromISR+0x70>
 800348e:	2300      	movs	r3, #0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	623b      	str	r3, [r7, #32]
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034aa:	f001 ff25 	bl	80052f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034ae:	f3ef 8211 	mrs	r2, BASEPRI
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	61fa      	str	r2, [r7, #28]
 80034c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <xQueueGenericSendFromISR+0xbc>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d12f      	bne.n	800353c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034f2:	f000 f911 	bl	8003718 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d112      	bne.n	8003526 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	2b00      	cmp	r3, #0
 8003506:	d016      	beq.n	8003536 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	3324      	adds	r3, #36	; 0x24
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fef7 	bl	8004300 <xTaskRemoveFromEventList>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e007      	b.n	8003536 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003526:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800352a:	3301      	adds	r3, #1
 800352c:	b2db      	uxtb	r3, r3
 800352e:	b25a      	sxtb	r2, r3
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003536:	2301      	movs	r3, #1
 8003538:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800353a:	e001      	b.n	8003540 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800353c:	2300      	movs	r3, #0
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003542:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800354a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800354e:	4618      	mov	r0, r3
 8003550:	3740      	adds	r7, #64	; 0x40
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08c      	sub	sp, #48	; 0x30
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <xQueueReceive+0x30>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	623b      	str	r3, [r7, #32]
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d103      	bne.n	8003596 <xQueueReceive+0x3e>
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <xQueueReceive+0x42>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <xQueueReceive+0x44>
 800359a:	2300      	movs	r3, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xQueueReceive+0x5e>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	61fb      	str	r3, [r7, #28]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035b6:	f001 f865 	bl	8004684 <xTaskGetSchedulerState>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <xQueueReceive+0x6e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <xQueueReceive+0x72>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <xQueueReceive+0x74>
 80035ca:	2300      	movs	r3, #0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <xQueueReceive+0x8e>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	61bb      	str	r3, [r7, #24]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035e6:	f001 fda5 	bl	8005134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d01f      	beq.n	8003636 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035fa:	f000 f8f7 	bl	80037ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	1e5a      	subs	r2, r3, #1
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00f      	beq.n	800362e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	3310      	adds	r3, #16
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fe74 	bl	8004300 <xTaskRemoveFromEventList>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800361e:	4b3d      	ldr	r3, [pc, #244]	; (8003714 <xQueueReceive+0x1bc>)
 8003620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800362e:	f001 fdb1 	bl	8005194 <vPortExitCritical>
				return pdPASS;
 8003632:	2301      	movs	r3, #1
 8003634:	e069      	b.n	800370a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d103      	bne.n	8003644 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800363c:	f001 fdaa 	bl	8005194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003640:	2300      	movs	r3, #0
 8003642:	e062      	b.n	800370a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800364a:	f107 0310 	add.w	r3, r7, #16
 800364e:	4618      	mov	r0, r3
 8003650:	f000 feba 	bl	80043c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003654:	2301      	movs	r3, #1
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003658:	f001 fd9c 	bl	8005194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800365c:	f000 fc26 	bl	8003eac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003660:	f001 fd68 	bl	8005134 <vPortEnterCritical>
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800366a:	b25b      	sxtb	r3, r3
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d103      	bne.n	800367a <xQueueReceive+0x122>
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003680:	b25b      	sxtb	r3, r3
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d103      	bne.n	8003690 <xQueueReceive+0x138>
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003690:	f001 fd80 	bl	8005194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003694:	1d3a      	adds	r2, r7, #4
 8003696:	f107 0310 	add.w	r3, r7, #16
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fea9 	bl	80043f4 <xTaskCheckForTimeOut>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d123      	bne.n	80036f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036aa:	f000 f917 	bl	80038dc <prvIsQueueEmpty>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d017      	beq.n	80036e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	3324      	adds	r3, #36	; 0x24
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fdcf 	bl	8004260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036c4:	f000 f8b8 	bl	8003838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036c8:	f000 fbfe 	bl	8003ec8 <xTaskResumeAll>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d189      	bne.n	80035e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <xQueueReceive+0x1bc>)
 80036d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	e780      	b.n	80035e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036e6:	f000 f8a7 	bl	8003838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036ea:	f000 fbed 	bl	8003ec8 <xTaskResumeAll>
 80036ee:	e77a      	b.n	80035e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036f2:	f000 f8a1 	bl	8003838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036f6:	f000 fbe7 	bl	8003ec8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036fc:	f000 f8ee 	bl	80038dc <prvIsQueueEmpty>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	f43f af6f 	beq.w	80035e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003708:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800370a:	4618      	mov	r0, r3
 800370c:	3730      	adds	r7, #48	; 0x30
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	e000ed04 	.word	0xe000ed04

08003718 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d14d      	bne.n	80037da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4618      	mov	r0, r3
 8003744:	f000 ffbc 	bl	80046c0 <xTaskPriorityDisinherit>
 8003748:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	e043      	b.n	80037da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d119      	bne.n	800378c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6858      	ldr	r0, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	461a      	mov	r2, r3
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	f002 f876 	bl	8005854 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	441a      	add	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d32b      	bcc.n	80037da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	e026      	b.n	80037da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68d8      	ldr	r0, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	461a      	mov	r2, r3
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	f002 f85c 	bl	8005854 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	425b      	negs	r3, r3
 80037a6:	441a      	add	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d207      	bcs.n	80037c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	425b      	negs	r3, r3
 80037c2:	441a      	add	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d105      	bne.n	80037da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037e2:	697b      	ldr	r3, [r7, #20]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d018      	beq.n	8003830 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	441a      	add	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d303      	bcc.n	8003820 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68d9      	ldr	r1, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	461a      	mov	r2, r3
 800382a:	6838      	ldr	r0, [r7, #0]
 800382c:	f002 f812 	bl	8005854 <memcpy>
	}
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003840:	f001 fc78 	bl	8005134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800384a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800384c:	e011      	b.n	8003872 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	d012      	beq.n	800387c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3324      	adds	r3, #36	; 0x24
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fd50 	bl	8004300 <xTaskRemoveFromEventList>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003866:	f000 fe27 	bl	80044b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	3b01      	subs	r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	dce9      	bgt.n	800384e <prvUnlockQueue+0x16>
 800387a:	e000      	b.n	800387e <prvUnlockQueue+0x46>
					break;
 800387c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	22ff      	movs	r2, #255	; 0xff
 8003882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003886:	f001 fc85 	bl	8005194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800388a:	f001 fc53 	bl	8005134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003894:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003896:	e011      	b.n	80038bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3310      	adds	r3, #16
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fd2b 	bl	8004300 <xTaskRemoveFromEventList>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038b0:	f000 fe02 	bl	80044b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038b4:	7bbb      	ldrb	r3, [r7, #14]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	dce9      	bgt.n	8003898 <prvUnlockQueue+0x60>
 80038c4:	e000      	b.n	80038c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038d0:	f001 fc60 	bl	8005194 <vPortExitCritical>
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038e4:	f001 fc26 	bl	8005134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e001      	b.n	80038fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038fa:	f001 fc4b 	bl	8005194 <vPortExitCritical>

	return xReturn;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003910:	f001 fc10 	bl	8005134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	429a      	cmp	r2, r3
 800391e:	d102      	bne.n	8003926 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003920:	2301      	movs	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e001      	b.n	800392a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800392a:	f001 fc33 	bl	8005194 <vPortExitCritical>

	return xReturn;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e014      	b.n	8003972 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003948:	4a0f      	ldr	r2, [pc, #60]	; (8003988 <vQueueAddToRegistry+0x50>)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003954:	490c      	ldr	r1, [pc, #48]	; (8003988 <vQueueAddToRegistry+0x50>)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800395e:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <vQueueAddToRegistry+0x50>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800396a:	e006      	b.n	800397a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b07      	cmp	r3, #7
 8003976:	d9e7      	bls.n	8003948 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000880 	.word	0x20000880

0800398c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800399c:	f001 fbca 	bl	8005134 <vPortEnterCritical>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d103      	bne.n	80039b6 <vQueueWaitForMessageRestricted+0x2a>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039bc:	b25b      	sxtb	r3, r3
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d103      	bne.n	80039cc <vQueueWaitForMessageRestricted+0x40>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039cc:	f001 fbe2 	bl	8005194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fc61 	bl	80042a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039e6:	6978      	ldr	r0, [r7, #20]
 80039e8:	f7ff ff26 	bl	8003838 <prvUnlockQueue>
	}
 80039ec:	bf00      	nop
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08e      	sub	sp, #56	; 0x38
 80039f8:	af04      	add	r7, sp, #16
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	623b      	str	r3, [r7, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xTaskCreateStatic+0x46>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	61fb      	str	r3, [r7, #28]
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a3a:	23a8      	movs	r3, #168	; 0xa8
 8003a3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2ba8      	cmp	r3, #168	; 0xa8
 8003a42:	d00a      	beq.n	8003a5a <xTaskCreateStatic+0x66>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	61bb      	str	r3, [r7, #24]
}
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01e      	beq.n	8003aa0 <xTaskCreateStatic+0xac>
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01b      	beq.n	8003aa0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	2202      	movs	r2, #2
 8003a76:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9303      	str	r3, [sp, #12]
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	9302      	str	r3, [sp, #8]
 8003a82:	f107 0314 	add.w	r3, r7, #20
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f850 	bl	8003b38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a9a:	f000 f8f3 	bl	8003c84 <prvAddNewTaskToReadyList>
 8003a9e:	e001      	b.n	8003aa4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003aa4:	697b      	ldr	r3, [r7, #20]
	}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3728      	adds	r7, #40	; 0x28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b08c      	sub	sp, #48	; 0x30
 8003ab2:	af04      	add	r7, sp, #16
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	4613      	mov	r3, r2
 8003abc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 fc58 	bl	8005378 <pvPortMalloc>
 8003ac8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00e      	beq.n	8003aee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ad0:	20a8      	movs	r0, #168	; 0xa8
 8003ad2:	f001 fc51 	bl	8005378 <pvPortMalloc>
 8003ad6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ae4:	e005      	b.n	8003af2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ae6:	6978      	ldr	r0, [r7, #20]
 8003ae8:	f001 fd12 	bl	8005510 <vPortFree>
 8003aec:	e001      	b.n	8003af2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d017      	beq.n	8003b28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	2300      	movs	r3, #0
 8003b04:	9303      	str	r3, [sp, #12]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	9302      	str	r3, [sp, #8]
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f80e 	bl	8003b38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b1c:	69f8      	ldr	r0, [r7, #28]
 8003b1e:	f000 f8b1 	bl	8003c84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b22:	2301      	movs	r3, #1
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	e002      	b.n	8003b2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
	}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	461a      	mov	r2, r3
 8003b50:	21a5      	movs	r1, #165	; 0xa5
 8003b52:	f001 fdfb 	bl	800574c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b60:	3b01      	subs	r3, #1
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f023 0307 	bic.w	r3, r3, #7
 8003b6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	617b      	str	r3, [r7, #20]
}
 8003b8c:	bf00      	nop
 8003b8e:	e7fe      	b.n	8003b8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01f      	beq.n	8003bd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	e012      	b.n	8003bc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	7819      	ldrb	r1, [r3, #0]
 8003ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	3334      	adds	r3, #52	; 0x34
 8003bac:	460a      	mov	r2, r1
 8003bae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d006      	beq.n	8003bca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	2b0f      	cmp	r3, #15
 8003bc6:	d9e9      	bls.n	8003b9c <prvInitialiseNewTask+0x64>
 8003bc8:	e000      	b.n	8003bcc <prvInitialiseNewTask+0x94>
			{
				break;
 8003bca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd4:	e003      	b.n	8003bde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	2b37      	cmp	r3, #55	; 0x37
 8003be2:	d901      	bls.n	8003be8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003be4:	2337      	movs	r3, #55	; 0x37
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff f978 	bl	8002ef4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	3318      	adds	r3, #24
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff f973 	bl	8002ef4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	3354      	adds	r3, #84	; 0x54
 8003c38:	224c      	movs	r2, #76	; 0x4c
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 fd85 	bl	800574c <memset>
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <prvInitialiseNewTask+0x140>)
 8003c46:	659a      	str	r2, [r3, #88]	; 0x58
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <prvInitialiseNewTask+0x144>)
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <prvInitialiseNewTask+0x148>)
 8003c52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	69b8      	ldr	r0, [r7, #24]
 8003c5a:	f001 f941 	bl	8004ee0 <pxPortInitialiseStack>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c70:	bf00      	nop
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20004b14 	.word	0x20004b14
 8003c7c:	20004b7c 	.word	0x20004b7c
 8003c80:	20004be4 	.word	0x20004be4

08003c84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c8c:	f001 fa52 	bl	8005134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c90:	4b2d      	ldr	r3, [pc, #180]	; (8003d48 <prvAddNewTaskToReadyList+0xc4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <prvAddNewTaskToReadyList+0xc4>)
 8003c98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <prvAddNewTaskToReadyList+0xc8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ca2:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <prvAddNewTaskToReadyList+0xc8>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ca8:	4b27      	ldr	r3, [pc, #156]	; (8003d48 <prvAddNewTaskToReadyList+0xc4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d110      	bne.n	8003cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cb0:	f000 fc26 	bl	8004500 <prvInitialiseTaskLists>
 8003cb4:	e00d      	b.n	8003cd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cb6:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <prvAddNewTaskToReadyList+0xcc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cbe:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <prvAddNewTaskToReadyList+0xc8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d802      	bhi.n	8003cd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ccc:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <prvAddNewTaskToReadyList+0xc8>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <prvAddNewTaskToReadyList+0xd0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <prvAddNewTaskToReadyList+0xd0>)
 8003cda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <prvAddNewTaskToReadyList+0xd0>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <prvAddNewTaskToReadyList+0xd4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d903      	bls.n	8003cf8 <prvAddNewTaskToReadyList+0x74>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <prvAddNewTaskToReadyList+0xd4>)
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <prvAddNewTaskToReadyList+0xd8>)
 8003d06:	441a      	add	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f7ff f8fd 	bl	8002f0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d14:	f001 fa3e 	bl	8005194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d18:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <prvAddNewTaskToReadyList+0xcc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00e      	beq.n	8003d3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <prvAddNewTaskToReadyList+0xc8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d207      	bcs.n	8003d3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <prvAddNewTaskToReadyList+0xdc>)
 8003d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000d94 	.word	0x20000d94
 8003d4c:	200008c0 	.word	0x200008c0
 8003d50:	20000da0 	.word	0x20000da0
 8003d54:	20000db0 	.word	0x20000db0
 8003d58:	20000d9c 	.word	0x20000d9c
 8003d5c:	200008c4 	.word	0x200008c4
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d017      	beq.n	8003da6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d76:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <vTaskDelay+0x60>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <vTaskDelay+0x30>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60bb      	str	r3, [r7, #8]
}
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d94:	f000 f88a 	bl	8003eac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d98:	2100      	movs	r1, #0
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fcfe 	bl	800479c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003da0:	f000 f892 	bl	8003ec8 <xTaskResumeAll>
 8003da4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <vTaskDelay+0x64>)
 8003dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000dbc 	.word	0x20000dbc
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dda:	463a      	mov	r2, r7
 8003ddc:	1d39      	adds	r1, r7, #4
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff f832 	bl	8002e4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	9202      	str	r2, [sp, #8]
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2300      	movs	r3, #0
 8003df8:	460a      	mov	r2, r1
 8003dfa:	4924      	ldr	r1, [pc, #144]	; (8003e8c <vTaskStartScheduler+0xc0>)
 8003dfc:	4824      	ldr	r0, [pc, #144]	; (8003e90 <vTaskStartScheduler+0xc4>)
 8003dfe:	f7ff fdf9 	bl	80039f4 <xTaskCreateStatic>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4a23      	ldr	r2, [pc, #140]	; (8003e94 <vTaskStartScheduler+0xc8>)
 8003e06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e08:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <vTaskStartScheduler+0xc8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e10:	2301      	movs	r3, #1
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	e001      	b.n	8003e1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d102      	bne.n	8003e26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e20:	f000 fd10 	bl	8004844 <xTimerCreateTimerTask>
 8003e24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d11b      	bne.n	8003e64 <vTaskStartScheduler+0x98>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	613b      	str	r3, [r7, #16]
}
 8003e3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e40:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <vTaskStartScheduler+0xcc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3354      	adds	r3, #84	; 0x54
 8003e46:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <vTaskStartScheduler+0xd0>)
 8003e48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <vTaskStartScheduler+0xd4>)
 8003e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <vTaskStartScheduler+0xd8>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <vTaskStartScheduler+0xdc>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e5e:	f001 f8c7 	bl	8004ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e62:	e00e      	b.n	8003e82 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d10a      	bne.n	8003e82 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	60fb      	str	r3, [r7, #12]
}
 8003e7e:	bf00      	nop
 8003e80:	e7fe      	b.n	8003e80 <vTaskStartScheduler+0xb4>
}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	0800595c 	.word	0x0800595c
 8003e90:	080044d1 	.word	0x080044d1
 8003e94:	20000db8 	.word	0x20000db8
 8003e98:	200008c0 	.word	0x200008c0
 8003e9c:	20000060 	.word	0x20000060
 8003ea0:	20000db4 	.word	0x20000db4
 8003ea4:	20000da0 	.word	0x20000da0
 8003ea8:	20000d98 	.word	0x20000d98

08003eac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <vTaskSuspendAll+0x18>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	4a03      	ldr	r2, [pc, #12]	; (8003ec4 <vTaskSuspendAll+0x18>)
 8003eb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	20000dbc 	.word	0x20000dbc

08003ec8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ed6:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <xTaskResumeAll+0x118>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	603b      	str	r3, [r7, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ef4:	f001 f91e 	bl	8005134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ef8:	4b39      	ldr	r3, [pc, #228]	; (8003fe0 <xTaskResumeAll+0x118>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	4a38      	ldr	r2, [pc, #224]	; (8003fe0 <xTaskResumeAll+0x118>)
 8003f00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f02:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <xTaskResumeAll+0x118>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d162      	bne.n	8003fd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f0a:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <xTaskResumeAll+0x11c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d05e      	beq.n	8003fd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f12:	e02f      	b.n	8003f74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f14:	4b34      	ldr	r3, [pc, #208]	; (8003fe8 <xTaskResumeAll+0x120>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3318      	adds	r3, #24
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f851 	bl	8002fc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f84c 	bl	8002fc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	4b2d      	ldr	r3, [pc, #180]	; (8003fec <xTaskResumeAll+0x124>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d903      	bls.n	8003f44 <xTaskResumeAll+0x7c>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a2a      	ldr	r2, [pc, #168]	; (8003fec <xTaskResumeAll+0x124>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4a27      	ldr	r2, [pc, #156]	; (8003ff0 <xTaskResumeAll+0x128>)
 8003f52:	441a      	add	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f7fe ffd7 	bl	8002f0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <xTaskResumeAll+0x12c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d302      	bcc.n	8003f74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f6e:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <xTaskResumeAll+0x130>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f74:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <xTaskResumeAll+0x120>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1cb      	bne.n	8003f14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f82:	f000 fb5f 	bl	8004644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f86:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <xTaskResumeAll+0x134>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d010      	beq.n	8003fb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f92:	f000 f847 	bl	8004024 <xTaskIncrementTick>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f9c:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <xTaskResumeAll+0x130>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f1      	bne.n	8003f92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <xTaskResumeAll+0x134>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <xTaskResumeAll+0x130>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <xTaskResumeAll+0x138>)
 8003fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fd0:	f001 f8e0 	bl	8005194 <vPortExitCritical>

	return xAlreadyYielded;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000dbc 	.word	0x20000dbc
 8003fe4:	20000d94 	.word	0x20000d94
 8003fe8:	20000d54 	.word	0x20000d54
 8003fec:	20000d9c 	.word	0x20000d9c
 8003ff0:	200008c4 	.word	0x200008c4
 8003ff4:	200008c0 	.word	0x200008c0
 8003ff8:	20000da8 	.word	0x20000da8
 8003ffc:	20000da4 	.word	0x20000da4
 8004000:	e000ed04 	.word	0xe000ed04

08004004 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <xTaskGetTickCount+0x1c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004010:	687b      	ldr	r3, [r7, #4]
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000d98 	.word	0x20000d98

08004024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800402e:	4b4f      	ldr	r3, [pc, #316]	; (800416c <xTaskIncrementTick+0x148>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 808f 	bne.w	8004156 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004038:	4b4d      	ldr	r3, [pc, #308]	; (8004170 <xTaskIncrementTick+0x14c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3301      	adds	r3, #1
 800403e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004040:	4a4b      	ldr	r2, [pc, #300]	; (8004170 <xTaskIncrementTick+0x14c>)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d120      	bne.n	800408e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800404c:	4b49      	ldr	r3, [pc, #292]	; (8004174 <xTaskIncrementTick+0x150>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <xTaskIncrementTick+0x48>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	603b      	str	r3, [r7, #0]
}
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <xTaskIncrementTick+0x46>
 800406c:	4b41      	ldr	r3, [pc, #260]	; (8004174 <xTaskIncrementTick+0x150>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	4b41      	ldr	r3, [pc, #260]	; (8004178 <xTaskIncrementTick+0x154>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <xTaskIncrementTick+0x150>)
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4a3f      	ldr	r2, [pc, #252]	; (8004178 <xTaskIncrementTick+0x154>)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	4b3e      	ldr	r3, [pc, #248]	; (800417c <xTaskIncrementTick+0x158>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	4a3d      	ldr	r2, [pc, #244]	; (800417c <xTaskIncrementTick+0x158>)
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	f000 fadb 	bl	8004644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800408e:	4b3c      	ldr	r3, [pc, #240]	; (8004180 <xTaskIncrementTick+0x15c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	429a      	cmp	r2, r3
 8004096:	d349      	bcc.n	800412c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004098:	4b36      	ldr	r3, [pc, #216]	; (8004174 <xTaskIncrementTick+0x150>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d104      	bne.n	80040ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a2:	4b37      	ldr	r3, [pc, #220]	; (8004180 <xTaskIncrementTick+0x15c>)
 80040a4:	f04f 32ff 	mov.w	r2, #4294967295
 80040a8:	601a      	str	r2, [r3, #0]
					break;
 80040aa:	e03f      	b.n	800412c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ac:	4b31      	ldr	r3, [pc, #196]	; (8004174 <xTaskIncrementTick+0x150>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d203      	bcs.n	80040cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040c4:	4a2e      	ldr	r2, [pc, #184]	; (8004180 <xTaskIncrementTick+0x15c>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040ca:	e02f      	b.n	800412c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe ff79 	bl	8002fc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3318      	adds	r3, #24
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe ff70 	bl	8002fc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <xTaskIncrementTick+0x160>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d903      	bls.n	80040fc <xTaskIncrementTick+0xd8>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	4a22      	ldr	r2, [pc, #136]	; (8004184 <xTaskIncrementTick+0x160>)
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <xTaskIncrementTick+0x164>)
 800410a:	441a      	add	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f7fe fefb 	bl	8002f0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <xTaskIncrementTick+0x168>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	429a      	cmp	r2, r3
 8004124:	d3b8      	bcc.n	8004098 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004126:	2301      	movs	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800412a:	e7b5      	b.n	8004098 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800412c:	4b17      	ldr	r3, [pc, #92]	; (800418c <xTaskIncrementTick+0x168>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004132:	4915      	ldr	r1, [pc, #84]	; (8004188 <xTaskIncrementTick+0x164>)
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d901      	bls.n	8004148 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004144:	2301      	movs	r3, #1
 8004146:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <xTaskIncrementTick+0x16c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e004      	b.n	8004160 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004156:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <xTaskIncrementTick+0x170>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <xTaskIncrementTick+0x170>)
 800415e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004160:	697b      	ldr	r3, [r7, #20]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000dbc 	.word	0x20000dbc
 8004170:	20000d98 	.word	0x20000d98
 8004174:	20000d4c 	.word	0x20000d4c
 8004178:	20000d50 	.word	0x20000d50
 800417c:	20000dac 	.word	0x20000dac
 8004180:	20000db4 	.word	0x20000db4
 8004184:	20000d9c 	.word	0x20000d9c
 8004188:	200008c4 	.word	0x200008c4
 800418c:	200008c0 	.word	0x200008c0
 8004190:	20000da8 	.word	0x20000da8
 8004194:	20000da4 	.word	0x20000da4

08004198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800419e:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <vTaskSwitchContext+0xb0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041a6:	4b29      	ldr	r3, [pc, #164]	; (800424c <vTaskSwitchContext+0xb4>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041ac:	e046      	b.n	800423c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80041ae:	4b27      	ldr	r3, [pc, #156]	; (800424c <vTaskSwitchContext+0xb4>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b4:	4b26      	ldr	r3, [pc, #152]	; (8004250 <vTaskSwitchContext+0xb8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e010      	b.n	80041de <vTaskSwitchContext+0x46>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	607b      	str	r3, [r7, #4]
}
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <vTaskSwitchContext+0x3e>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3b01      	subs	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	491d      	ldr	r1, [pc, #116]	; (8004254 <vTaskSwitchContext+0xbc>)
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0e4      	beq.n	80041bc <vTaskSwitchContext+0x24>
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4a15      	ldr	r2, [pc, #84]	; (8004254 <vTaskSwitchContext+0xbc>)
 80041fe:	4413      	add	r3, r2
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	3308      	adds	r3, #8
 8004214:	429a      	cmp	r2, r3
 8004216:	d104      	bne.n	8004222 <vTaskSwitchContext+0x8a>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <vTaskSwitchContext+0xc0>)
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4a08      	ldr	r2, [pc, #32]	; (8004250 <vTaskSwitchContext+0xb8>)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <vTaskSwitchContext+0xc0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3354      	adds	r3, #84	; 0x54
 8004238:	4a08      	ldr	r2, [pc, #32]	; (800425c <vTaskSwitchContext+0xc4>)
 800423a:	6013      	str	r3, [r2, #0]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	20000dbc 	.word	0x20000dbc
 800424c:	20000da8 	.word	0x20000da8
 8004250:	20000d9c 	.word	0x20000d9c
 8004254:	200008c4 	.word	0x200008c4
 8004258:	200008c0 	.word	0x200008c0
 800425c:	20000060 	.word	0x20000060

08004260 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60fb      	str	r3, [r7, #12]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <vTaskPlaceOnEventList+0x44>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3318      	adds	r3, #24
 800428c:	4619      	mov	r1, r3
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fe fe61 	bl	8002f56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004294:	2101      	movs	r1, #1
 8004296:	6838      	ldr	r0, [r7, #0]
 8004298:	f000 fa80 	bl	800479c <prvAddCurrentTaskToDelayedList>
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	200008c0 	.word	0x200008c0

080042a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	617b      	str	r3, [r7, #20]
}
 80042cc:	bf00      	nop
 80042ce:	e7fe      	b.n	80042ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <vTaskPlaceOnEventListRestricted+0x54>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3318      	adds	r3, #24
 80042d6:	4619      	mov	r1, r3
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7fe fe18 	bl	8002f0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80042e4:	f04f 33ff 	mov.w	r3, #4294967295
 80042e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	68b8      	ldr	r0, [r7, #8]
 80042ee:	f000 fa55 	bl	800479c <prvAddCurrentTaskToDelayedList>
	}
 80042f2:	bf00      	nop
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200008c0 	.word	0x200008c0

08004300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	60fb      	str	r3, [r7, #12]
}
 8004328:	bf00      	nop
 800432a:	e7fe      	b.n	800432a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	3318      	adds	r3, #24
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fe49 	bl	8002fc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004336:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <xTaskRemoveFromEventList+0xb0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11d      	bne.n	800437a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	3304      	adds	r3, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fe40 	bl	8002fc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <xTaskRemoveFromEventList+0xb4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d903      	bls.n	800435c <xTaskRemoveFromEventList+0x5c>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <xTaskRemoveFromEventList+0xb4>)
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <xTaskRemoveFromEventList+0xb8>)
 800436a:	441a      	add	r2, r3
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f7fe fdcb 	bl	8002f0e <vListInsertEnd>
 8004378:	e005      	b.n	8004386 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	3318      	adds	r3, #24
 800437e:	4619      	mov	r1, r3
 8004380:	480e      	ldr	r0, [pc, #56]	; (80043bc <xTaskRemoveFromEventList+0xbc>)
 8004382:	f7fe fdc4 	bl	8002f0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438a:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <xTaskRemoveFromEventList+0xc0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d905      	bls.n	80043a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004394:	2301      	movs	r3, #1
 8004396:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <xTaskRemoveFromEventList+0xc4>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	e001      	b.n	80043a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043a4:	697b      	ldr	r3, [r7, #20]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000dbc 	.word	0x20000dbc
 80043b4:	20000d9c 	.word	0x20000d9c
 80043b8:	200008c4 	.word	0x200008c4
 80043bc:	20000d54 	.word	0x20000d54
 80043c0:	200008c0 	.word	0x200008c0
 80043c4:	20000da8 	.word	0x20000da8

080043c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <vTaskInternalSetTimeOutState+0x24>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <vTaskInternalSetTimeOutState+0x28>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	605a      	str	r2, [r3, #4]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	20000dac 	.word	0x20000dac
 80043f0:	20000d98 	.word	0x20000d98

080043f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	613b      	str	r3, [r7, #16]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	60fb      	str	r3, [r7, #12]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004436:	f000 fe7d 	bl	8005134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800443a:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <xTaskCheckForTimeOut+0xbc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d102      	bne.n	800445a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	e023      	b.n	80044a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <xTaskCheckForTimeOut+0xc0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d007      	beq.n	8004476 <xTaskCheckForTimeOut+0x82>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	429a      	cmp	r2, r3
 800446e:	d302      	bcc.n	8004476 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004470:	2301      	movs	r3, #1
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	e015      	b.n	80044a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	429a      	cmp	r2, r3
 800447e:	d20b      	bcs.n	8004498 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	1ad2      	subs	r2, r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff ff9b 	bl	80043c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	e004      	b.n	80044a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800449e:	2301      	movs	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044a2:	f000 fe77 	bl	8005194 <vPortExitCritical>

	return xReturn;
 80044a6:	69fb      	ldr	r3, [r7, #28]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000d98 	.word	0x20000d98
 80044b4:	20000dac 	.word	0x20000dac

080044b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <vTaskMissedYield+0x14>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	20000da8 	.word	0x20000da8

080044d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044d8:	f000 f852 	bl	8004580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <prvIdleTask+0x28>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d9f9      	bls.n	80044d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <prvIdleTask+0x2c>)
 80044e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044f4:	e7f0      	b.n	80044d8 <prvIdleTask+0x8>
 80044f6:	bf00      	nop
 80044f8:	200008c4 	.word	0x200008c4
 80044fc:	e000ed04 	.word	0xe000ed04

08004500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004506:	2300      	movs	r3, #0
 8004508:	607b      	str	r3, [r7, #4]
 800450a:	e00c      	b.n	8004526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4a12      	ldr	r2, [pc, #72]	; (8004560 <prvInitialiseTaskLists+0x60>)
 8004518:	4413      	add	r3, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fcca 	bl	8002eb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3301      	adds	r3, #1
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b37      	cmp	r3, #55	; 0x37
 800452a:	d9ef      	bls.n	800450c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800452c:	480d      	ldr	r0, [pc, #52]	; (8004564 <prvInitialiseTaskLists+0x64>)
 800452e:	f7fe fcc1 	bl	8002eb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004532:	480d      	ldr	r0, [pc, #52]	; (8004568 <prvInitialiseTaskLists+0x68>)
 8004534:	f7fe fcbe 	bl	8002eb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004538:	480c      	ldr	r0, [pc, #48]	; (800456c <prvInitialiseTaskLists+0x6c>)
 800453a:	f7fe fcbb 	bl	8002eb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800453e:	480c      	ldr	r0, [pc, #48]	; (8004570 <prvInitialiseTaskLists+0x70>)
 8004540:	f7fe fcb8 	bl	8002eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004544:	480b      	ldr	r0, [pc, #44]	; (8004574 <prvInitialiseTaskLists+0x74>)
 8004546:	f7fe fcb5 	bl	8002eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <prvInitialiseTaskLists+0x78>)
 800454c:	4a05      	ldr	r2, [pc, #20]	; (8004564 <prvInitialiseTaskLists+0x64>)
 800454e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <prvInitialiseTaskLists+0x7c>)
 8004552:	4a05      	ldr	r2, [pc, #20]	; (8004568 <prvInitialiseTaskLists+0x68>)
 8004554:	601a      	str	r2, [r3, #0]
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	200008c4 	.word	0x200008c4
 8004564:	20000d24 	.word	0x20000d24
 8004568:	20000d38 	.word	0x20000d38
 800456c:	20000d54 	.word	0x20000d54
 8004570:	20000d68 	.word	0x20000d68
 8004574:	20000d80 	.word	0x20000d80
 8004578:	20000d4c 	.word	0x20000d4c
 800457c:	20000d50 	.word	0x20000d50

08004580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004586:	e019      	b.n	80045bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004588:	f000 fdd4 	bl	8005134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458c:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <prvCheckTasksWaitingTermination+0x50>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe fd15 	bl	8002fc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800459e:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <prvCheckTasksWaitingTermination+0x54>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	4a0b      	ldr	r2, [pc, #44]	; (80045d4 <prvCheckTasksWaitingTermination+0x54>)
 80045a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <prvCheckTasksWaitingTermination+0x58>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <prvCheckTasksWaitingTermination+0x58>)
 80045b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045b2:	f000 fdef 	bl	8005194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f810 	bl	80045dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <prvCheckTasksWaitingTermination+0x58>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e1      	bne.n	8004588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000d68 	.word	0x20000d68
 80045d4:	20000d94 	.word	0x20000d94
 80045d8:	20000d7c 	.word	0x20000d7c

080045dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3354      	adds	r3, #84	; 0x54
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 f8b7 	bl	800575c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d108      	bne.n	800460a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 ff87 	bl	8005510 <vPortFree>
				vPortFree( pxTCB );
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 ff84 	bl	8005510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004608:	e018      	b.n	800463c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004610:	2b01      	cmp	r3, #1
 8004612:	d103      	bne.n	800461c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 ff7b 	bl	8005510 <vPortFree>
	}
 800461a:	e00f      	b.n	800463c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004622:	2b02      	cmp	r3, #2
 8004624:	d00a      	beq.n	800463c <prvDeleteTCB+0x60>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60fb      	str	r3, [r7, #12]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <prvDeleteTCB+0x5e>
	}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800464a:	4b0c      	ldr	r3, [pc, #48]	; (800467c <prvResetNextTaskUnblockTime+0x38>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d104      	bne.n	800465e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <prvResetNextTaskUnblockTime+0x3c>)
 8004656:	f04f 32ff 	mov.w	r2, #4294967295
 800465a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800465c:	e008      	b.n	8004670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <prvResetNextTaskUnblockTime+0x38>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <prvResetNextTaskUnblockTime+0x3c>)
 800466e:	6013      	str	r3, [r2, #0]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	20000d4c 	.word	0x20000d4c
 8004680:	20000db4 	.word	0x20000db4

08004684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <xTaskGetSchedulerState+0x34>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004692:	2301      	movs	r3, #1
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	e008      	b.n	80046aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004698:	4b08      	ldr	r3, [pc, #32]	; (80046bc <xTaskGetSchedulerState+0x38>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046a0:	2302      	movs	r3, #2
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	e001      	b.n	80046aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046aa:	687b      	ldr	r3, [r7, #4]
	}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	20000da0 	.word	0x20000da0
 80046bc:	20000dbc 	.word	0x20000dbc

080046c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d056      	beq.n	8004784 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <xTaskPriorityDisinherit+0xd0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d00a      	beq.n	80046f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60fb      	str	r3, [r7, #12]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	60bb      	str	r3, [r7, #8]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004718:	1e5a      	subs	r2, r3, #1
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004726:	429a      	cmp	r2, r3
 8004728:	d02c      	beq.n	8004784 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	2b00      	cmp	r3, #0
 8004730:	d128      	bne.n	8004784 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3304      	adds	r3, #4
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe fc46 	bl	8002fc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <xTaskPriorityDisinherit+0xd4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d903      	bls.n	8004764 <xTaskPriorityDisinherit+0xa4>
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <xTaskPriorityDisinherit+0xd4>)
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4a09      	ldr	r2, [pc, #36]	; (8004798 <xTaskPriorityDisinherit+0xd8>)
 8004772:	441a      	add	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	3304      	adds	r3, #4
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f7fe fbc7 	bl	8002f0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004784:	697b      	ldr	r3, [r7, #20]
	}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	200008c0 	.word	0x200008c0
 8004794:	20000d9c 	.word	0x20000d9c
 8004798:	200008c4 	.word	0x200008c4

0800479c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047a6:	4b21      	ldr	r3, [pc, #132]	; (800482c <prvAddCurrentTaskToDelayedList+0x90>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ac:	4b20      	ldr	r3, [pc, #128]	; (8004830 <prvAddCurrentTaskToDelayedList+0x94>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fc08 	bl	8002fc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d10a      	bne.n	80047d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047c6:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <prvAddCurrentTaskToDelayedList+0x94>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4819      	ldr	r0, [pc, #100]	; (8004834 <prvAddCurrentTaskToDelayedList+0x98>)
 80047d0:	f7fe fb9d 	bl	8002f0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047d4:	e026      	b.n	8004824 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4413      	add	r3, r2
 80047dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d209      	bcs.n	8004802 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <prvAddCurrentTaskToDelayedList+0x9c>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f7fe fbab 	bl	8002f56 <vListInsert>
}
 8004800:	e010      	b.n	8004824 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004802:	4b0e      	ldr	r3, [pc, #56]	; (800483c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <prvAddCurrentTaskToDelayedList+0x94>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f7fe fba1 	bl	8002f56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	d202      	bcs.n	8004824 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800481e:	4a08      	ldr	r2, [pc, #32]	; (8004840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6013      	str	r3, [r2, #0]
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000d98 	.word	0x20000d98
 8004830:	200008c0 	.word	0x200008c0
 8004834:	20000d80 	.word	0x20000d80
 8004838:	20000d50 	.word	0x20000d50
 800483c:	20000d4c 	.word	0x20000d4c
 8004840:	20000db4 	.word	0x20000db4

08004844 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800484e:	f000 fb07 	bl	8004e60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004852:	4b1c      	ldr	r3, [pc, #112]	; (80048c4 <xTimerCreateTimerTask+0x80>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d021      	beq.n	800489e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004862:	1d3a      	adds	r2, r7, #4
 8004864:	f107 0108 	add.w	r1, r7, #8
 8004868:	f107 030c 	add.w	r3, r7, #12
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fb07 	bl	8002e80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	9202      	str	r2, [sp, #8]
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	2302      	movs	r3, #2
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	2300      	movs	r3, #0
 8004882:	460a      	mov	r2, r1
 8004884:	4910      	ldr	r1, [pc, #64]	; (80048c8 <xTimerCreateTimerTask+0x84>)
 8004886:	4811      	ldr	r0, [pc, #68]	; (80048cc <xTimerCreateTimerTask+0x88>)
 8004888:	f7ff f8b4 	bl	80039f4 <xTaskCreateStatic>
 800488c:	4603      	mov	r3, r0
 800488e:	4a10      	ldr	r2, [pc, #64]	; (80048d0 <xTimerCreateTimerTask+0x8c>)
 8004890:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004892:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <xTimerCreateTimerTask+0x8c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800489a:	2301      	movs	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	613b      	str	r3, [r7, #16]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048ba:	697b      	ldr	r3, [r7, #20]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000df0 	.word	0x20000df0
 80048c8:	08005964 	.word	0x08005964
 80048cc:	08004a09 	.word	0x08004a09
 80048d0:	20000df4 	.word	0x20000df4

080048d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xTimerGenericCommand+0x2e>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	623b      	str	r3, [r7, #32]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <xTimerGenericCommand+0x98>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d02a      	beq.n	8004960 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b05      	cmp	r3, #5
 800491a:	dc18      	bgt.n	800494e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800491c:	f7ff feb2 	bl	8004684 <xTaskGetSchedulerState>
 8004920:	4603      	mov	r3, r0
 8004922:	2b02      	cmp	r3, #2
 8004924:	d109      	bne.n	800493a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <xTimerGenericCommand+0x98>)
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	f107 0110 	add.w	r1, r7, #16
 800492e:	2300      	movs	r3, #0
 8004930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004932:	f7fe fc77 	bl	8003224 <xQueueGenericSend>
 8004936:	6278      	str	r0, [r7, #36]	; 0x24
 8004938:	e012      	b.n	8004960 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800493a:	4b0c      	ldr	r3, [pc, #48]	; (800496c <xTimerGenericCommand+0x98>)
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	f107 0110 	add.w	r1, r7, #16
 8004942:	2300      	movs	r3, #0
 8004944:	2200      	movs	r2, #0
 8004946:	f7fe fc6d 	bl	8003224 <xQueueGenericSend>
 800494a:	6278      	str	r0, [r7, #36]	; 0x24
 800494c:	e008      	b.n	8004960 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <xTimerGenericCommand+0x98>)
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	f107 0110 	add.w	r1, r7, #16
 8004956:	2300      	movs	r3, #0
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	f7fe fd61 	bl	8003420 <xQueueGenericSendFromISR>
 800495e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004962:	4618      	mov	r0, r3
 8004964:	3728      	adds	r7, #40	; 0x28
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000df0 	.word	0x20000df0

08004970 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af02      	add	r7, sp, #8
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497a:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <prvProcessExpiredTimer+0x94>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe fb1d 	bl	8002fc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d022      	beq.n	80049e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	18d1      	adds	r1, r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	6978      	ldr	r0, [r7, #20]
 80049aa:	f000 f8d1 	bl	8004b50 <prvInsertTimerInActiveList>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01f      	beq.n	80049f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049b4:	2300      	movs	r3, #0
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2300      	movs	r3, #0
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	2100      	movs	r1, #0
 80049be:	6978      	ldr	r0, [r7, #20]
 80049c0:	f7ff ff88 	bl	80048d4 <xTimerGenericCommand>
 80049c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d113      	bne.n	80049f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	60fb      	str	r3, [r7, #12]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	6978      	ldr	r0, [r7, #20]
 80049fa:	4798      	blx	r3
}
 80049fc:	bf00      	nop
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000de8 	.word	0x20000de8

08004a08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a10:	f107 0308 	add.w	r3, r7, #8
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 f857 	bl	8004ac8 <prvGetNextExpireTime>
 8004a1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f803 	bl	8004a2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a26:	f000 f8d5 	bl	8004bd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a2a:	e7f1      	b.n	8004a10 <prvTimerTask+0x8>

08004a2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a36:	f7ff fa39 	bl	8003eac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a3a:	f107 0308 	add.w	r3, r7, #8
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f866 	bl	8004b10 <prvSampleTimeNow>
 8004a44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d130      	bne.n	8004aae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <prvProcessTimerOrBlockTask+0x3c>
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d806      	bhi.n	8004a68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a5a:	f7ff fa35 	bl	8003ec8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a5e:	68f9      	ldr	r1, [r7, #12]
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff ff85 	bl	8004970 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a66:	e024      	b.n	8004ab2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a6e:	4b13      	ldr	r3, [pc, #76]	; (8004abc <prvProcessTimerOrBlockTask+0x90>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <prvProcessTimerOrBlockTask+0x50>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <prvProcessTimerOrBlockTask+0x52>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <prvProcessTimerOrBlockTask+0x94>)
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f7fe ff7d 	bl	800398c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a92:	f7ff fa19 	bl	8003ec8 <xTaskResumeAll>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <prvProcessTimerOrBlockTask+0x98>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
}
 8004aac:	e001      	b.n	8004ab2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004aae:	f7ff fa0b 	bl	8003ec8 <xTaskResumeAll>
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000dec 	.word	0x20000dec
 8004ac0:	20000df0 	.word	0x20000df0
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <prvGetNextExpireTime+0x44>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <prvGetNextExpireTime+0x16>
 8004ada:	2201      	movs	r2, #1
 8004adc:	e000      	b.n	8004ae0 <prvGetNextExpireTime+0x18>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aec:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <prvGetNextExpireTime+0x44>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e001      	b.n	8004afc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004afc:	68fb      	ldr	r3, [r7, #12]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000de8 	.word	0x20000de8

08004b10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b18:	f7ff fa74 	bl	8004004 <xTaskGetTickCount>
 8004b1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <prvSampleTimeNow+0x3c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d205      	bcs.n	8004b34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b28:	f000 f936 	bl	8004d98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e002      	b.n	8004b3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b3a:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <prvSampleTimeNow+0x3c>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b40:	68fb      	ldr	r3, [r7, #12]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000df8 	.word	0x20000df8

08004b50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d812      	bhi.n	8004b9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	1ad2      	subs	r2, r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e01b      	b.n	8004bc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <prvInsertTimerInActiveList+0x7c>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3304      	adds	r3, #4
 8004b92:	4619      	mov	r1, r3
 8004b94:	4610      	mov	r0, r2
 8004b96:	f7fe f9de 	bl	8002f56 <vListInsert>
 8004b9a:	e012      	b.n	8004bc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d206      	bcs.n	8004bb2 <prvInsertTimerInActiveList+0x62>
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d302      	bcc.n	8004bb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e007      	b.n	8004bc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <prvInsertTimerInActiveList+0x80>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f7fe f9ca 	bl	8002f56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000dec 	.word	0x20000dec
 8004bd0:	20000de8 	.word	0x20000de8

08004bd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08e      	sub	sp, #56	; 0x38
 8004bd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bda:	e0ca      	b.n	8004d72 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	da18      	bge.n	8004c14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004be2:	1d3b      	adds	r3, r7, #4
 8004be4:	3304      	adds	r3, #4
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	61fb      	str	r3, [r7, #28]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c0a:	6850      	ldr	r0, [r2, #4]
 8004c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c0e:	6892      	ldr	r2, [r2, #8]
 8004c10:	4611      	mov	r1, r2
 8004c12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f2c0 80ab 	blt.w	8004d72 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe f9cb 	bl	8002fc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c32:	463b      	mov	r3, r7
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff6b 	bl	8004b10 <prvSampleTimeNow>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b09      	cmp	r3, #9
 8004c40:	f200 8096 	bhi.w	8004d70 <prvProcessReceivedCommands+0x19c>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <prvProcessReceivedCommands+0x78>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c75 	.word	0x08004c75
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08004c75 	.word	0x08004c75
 8004c58:	08004ce9 	.word	0x08004ce9
 8004c5c:	08004cfd 	.word	0x08004cfd
 8004c60:	08004d47 	.word	0x08004d47
 8004c64:	08004c75 	.word	0x08004c75
 8004c68:	08004c75 	.word	0x08004c75
 8004c6c:	08004ce9 	.word	0x08004ce9
 8004c70:	08004cfd 	.word	0x08004cfd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	18d1      	adds	r1, r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c94:	f7ff ff5c 	bl	8004b50 <prvInsertTimerInActiveList>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d069      	beq.n	8004d72 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d05e      	beq.n	8004d72 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	441a      	add	r2, r3
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc6:	f7ff fe05 	bl	80048d4 <xTimerGenericCommand>
 8004cca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d14f      	bne.n	8004d72 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	61bb      	str	r3, [r7, #24]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004cfa:	e03a      	b.n	8004d72 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	617b      	str	r3, [r7, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	18d1      	adds	r1, r2, r3
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d40:	f7ff ff06 	bl	8004b50 <prvInsertTimerInActiveList>
					break;
 8004d44:	e015      	b.n	8004d72 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d103      	bne.n	8004d5c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d56:	f000 fbdb 	bl	8005510 <vPortFree>
 8004d5a:	e00a      	b.n	8004d72 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d6e:	e000      	b.n	8004d72 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004d70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d72:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <prvProcessReceivedCommands+0x1c0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	1d39      	adds	r1, r7, #4
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fbec 	bl	8003558 <xQueueReceive>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f47f af2a 	bne.w	8004bdc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	3730      	adds	r7, #48	; 0x30
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000df0 	.word	0x20000df0

08004d98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d9e:	e048      	b.n	8004e32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004da0:	4b2d      	ldr	r3, [pc, #180]	; (8004e58 <prvSwitchTimerLists+0xc0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004daa:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <prvSwitchTimerLists+0xc0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fe f905 	bl	8002fc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d02e      	beq.n	8004e32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4413      	add	r3, r2
 8004ddc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d90e      	bls.n	8004e04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004df2:	4b19      	ldr	r3, [pc, #100]	; (8004e58 <prvSwitchTimerLists+0xc0>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f7fe f8aa 	bl	8002f56 <vListInsert>
 8004e02:	e016      	b.n	8004e32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e04:	2300      	movs	r3, #0
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff fd60 	bl	80048d4 <xTimerGenericCommand>
 8004e14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	603b      	str	r3, [r7, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <prvSwitchTimerLists+0xc0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1b1      	bne.n	8004da0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <prvSwitchTimerLists+0xc0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <prvSwitchTimerLists+0xc4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a04      	ldr	r2, [pc, #16]	; (8004e58 <prvSwitchTimerLists+0xc0>)
 8004e48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e4a:	4a04      	ldr	r2, [pc, #16]	; (8004e5c <prvSwitchTimerLists+0xc4>)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	6013      	str	r3, [r2, #0]
}
 8004e50:	bf00      	nop
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000de8 	.word	0x20000de8
 8004e5c:	20000dec 	.word	0x20000dec

08004e60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e66:	f000 f965 	bl	8005134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <prvCheckForValidListAndQueue+0x60>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d120      	bne.n	8004eb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e72:	4814      	ldr	r0, [pc, #80]	; (8004ec4 <prvCheckForValidListAndQueue+0x64>)
 8004e74:	f7fe f81e 	bl	8002eb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e78:	4813      	ldr	r0, [pc, #76]	; (8004ec8 <prvCheckForValidListAndQueue+0x68>)
 8004e7a:	f7fe f81b 	bl	8002eb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <prvCheckForValidListAndQueue+0x6c>)
 8004e80:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <prvCheckForValidListAndQueue+0x64>)
 8004e82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e84:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <prvCheckForValidListAndQueue+0x70>)
 8004e86:	4a10      	ldr	r2, [pc, #64]	; (8004ec8 <prvCheckForValidListAndQueue+0x68>)
 8004e88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <prvCheckForValidListAndQueue+0x74>)
 8004e90:	4a11      	ldr	r2, [pc, #68]	; (8004ed8 <prvCheckForValidListAndQueue+0x78>)
 8004e92:	2110      	movs	r1, #16
 8004e94:	200a      	movs	r0, #10
 8004e96:	f7fe f929 	bl	80030ec <xQueueGenericCreateStatic>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <prvCheckForValidListAndQueue+0x60>)
 8004e9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <prvCheckForValidListAndQueue+0x60>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <prvCheckForValidListAndQueue+0x60>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	490b      	ldr	r1, [pc, #44]	; (8004edc <prvCheckForValidListAndQueue+0x7c>)
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fd42 	bl	8003938 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004eb4:	f000 f96e 	bl	8005194 <vPortExitCritical>
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000df0 	.word	0x20000df0
 8004ec4:	20000dc0 	.word	0x20000dc0
 8004ec8:	20000dd4 	.word	0x20000dd4
 8004ecc:	20000de8 	.word	0x20000de8
 8004ed0:	20000dec 	.word	0x20000dec
 8004ed4:	20000e9c 	.word	0x20000e9c
 8004ed8:	20000dfc 	.word	0x20000dfc
 8004edc:	0800596c 	.word	0x0800596c

08004ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3b04      	subs	r3, #4
 8004ef0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3b04      	subs	r3, #4
 8004f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f10:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <pxPortInitialiseStack+0x64>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b14      	subs	r3, #20
 8004f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3b04      	subs	r3, #4
 8004f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f06f 0202 	mvn.w	r2, #2
 8004f2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3b20      	subs	r3, #32
 8004f34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	08004f49 	.word	0x08004f49

08004f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <prvTaskExitError+0x54>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d00a      	beq.n	8004f72 <prvTaskExitError+0x2a>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60fb      	str	r3, [r7, #12]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <prvTaskExitError+0x28>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60bb      	str	r3, [r7, #8]
}
 8004f84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f86:	bf00      	nop
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0fc      	beq.n	8004f88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f8e:	bf00      	nop
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	20000010 	.word	0x20000010

08004fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <pxCurrentTCBConst2>)
 8004fa2:	6819      	ldr	r1, [r3, #0]
 8004fa4:	6808      	ldr	r0, [r1, #0]
 8004fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	f380 8809 	msr	PSP, r0
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8811 	msr	BASEPRI, r0
 8004fba:	4770      	bx	lr
 8004fbc:	f3af 8000 	nop.w

08004fc0 <pxCurrentTCBConst2>:
 8004fc0:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fc8:	4808      	ldr	r0, [pc, #32]	; (8004fec <prvPortStartFirstTask+0x24>)
 8004fca:	6800      	ldr	r0, [r0, #0]
 8004fcc:	6800      	ldr	r0, [r0, #0]
 8004fce:	f380 8808 	msr	MSP, r0
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8814 	msr	CONTROL, r0
 8004fda:	b662      	cpsie	i
 8004fdc:	b661      	cpsie	f
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	df00      	svc	0
 8004fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fea:	bf00      	nop
 8004fec:	e000ed08 	.word	0xe000ed08

08004ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ff6:	4b46      	ldr	r3, [pc, #280]	; (8005110 <xPortStartScheduler+0x120>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a46      	ldr	r2, [pc, #280]	; (8005114 <xPortStartScheduler+0x124>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10a      	bne.n	8005016 <xPortStartScheduler+0x26>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	613b      	str	r3, [r7, #16]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005016:	4b3e      	ldr	r3, [pc, #248]	; (8005110 <xPortStartScheduler+0x120>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a3f      	ldr	r2, [pc, #252]	; (8005118 <xPortStartScheduler+0x128>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d10a      	bne.n	8005036 <xPortStartScheduler+0x46>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60fb      	str	r3, [r7, #12]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005036:	4b39      	ldr	r3, [pc, #228]	; (800511c <xPortStartScheduler+0x12c>)
 8005038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005058:	b2da      	uxtb	r2, r3
 800505a:	4b31      	ldr	r3, [pc, #196]	; (8005120 <xPortStartScheduler+0x130>)
 800505c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800505e:	4b31      	ldr	r3, [pc, #196]	; (8005124 <xPortStartScheduler+0x134>)
 8005060:	2207      	movs	r2, #7
 8005062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005064:	e009      	b.n	800507a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <xPortStartScheduler+0x134>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3b01      	subs	r3, #1
 800506c:	4a2d      	ldr	r2, [pc, #180]	; (8005124 <xPortStartScheduler+0x134>)
 800506e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005082:	2b80      	cmp	r3, #128	; 0x80
 8005084:	d0ef      	beq.n	8005066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005086:	4b27      	ldr	r3, [pc, #156]	; (8005124 <xPortStartScheduler+0x134>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f1c3 0307 	rsb	r3, r3, #7
 800508e:	2b04      	cmp	r3, #4
 8005090:	d00a      	beq.n	80050a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	60bb      	str	r3, [r7, #8]
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050a8:	4b1e      	ldr	r3, [pc, #120]	; (8005124 <xPortStartScheduler+0x134>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <xPortStartScheduler+0x134>)
 80050b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050b2:	4b1c      	ldr	r3, [pc, #112]	; (8005124 <xPortStartScheduler+0x134>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050ba:	4a1a      	ldr	r2, [pc, #104]	; (8005124 <xPortStartScheduler+0x134>)
 80050bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050c6:	4b18      	ldr	r3, [pc, #96]	; (8005128 <xPortStartScheduler+0x138>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <xPortStartScheduler+0x138>)
 80050cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050d2:	4b15      	ldr	r3, [pc, #84]	; (8005128 <xPortStartScheduler+0x138>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a14      	ldr	r2, [pc, #80]	; (8005128 <xPortStartScheduler+0x138>)
 80050d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050de:	f000 f8dd 	bl	800529c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050e2:	4b12      	ldr	r3, [pc, #72]	; (800512c <xPortStartScheduler+0x13c>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050e8:	f000 f8fc 	bl	80052e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050ec:	4b10      	ldr	r3, [pc, #64]	; (8005130 <xPortStartScheduler+0x140>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0f      	ldr	r2, [pc, #60]	; (8005130 <xPortStartScheduler+0x140>)
 80050f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050f8:	f7ff ff66 	bl	8004fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050fc:	f7ff f84c 	bl	8004198 <vTaskSwitchContext>
	prvTaskExitError();
 8005100:	f7ff ff22 	bl	8004f48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	e000ed00 	.word	0xe000ed00
 8005114:	410fc271 	.word	0x410fc271
 8005118:	410fc270 	.word	0x410fc270
 800511c:	e000e400 	.word	0xe000e400
 8005120:	20000eec 	.word	0x20000eec
 8005124:	20000ef0 	.word	0x20000ef0
 8005128:	e000ed20 	.word	0xe000ed20
 800512c:	20000010 	.word	0x20000010
 8005130:	e000ef34 	.word	0xe000ef34

08005134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	607b      	str	r3, [r7, #4]
}
 800514c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <vPortEnterCritical+0x58>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3301      	adds	r3, #1
 8005154:	4a0d      	ldr	r2, [pc, #52]	; (800518c <vPortEnterCritical+0x58>)
 8005156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <vPortEnterCritical+0x58>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10f      	bne.n	8005180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <vPortEnterCritical+0x5c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <vPortEnterCritical+0x4c>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	603b      	str	r3, [r7, #0]
}
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <vPortEnterCritical+0x4a>
	}
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000010 	.word	0x20000010
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <vPortExitCritical+0x50>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <vPortExitCritical+0x24>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	607b      	str	r3, [r7, #4]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051b8:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <vPortExitCritical+0x50>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3b01      	subs	r3, #1
 80051be:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <vPortExitCritical+0x50>)
 80051c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051c2:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <vPortExitCritical+0x50>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d105      	bne.n	80051d6 <vPortExitCritical+0x42>
 80051ca:	2300      	movs	r3, #0
 80051cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	f383 8811 	msr	BASEPRI, r3
}
 80051d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000010 	.word	0x20000010
	...

080051f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051f0:	f3ef 8009 	mrs	r0, PSP
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	4b15      	ldr	r3, [pc, #84]	; (8005250 <pxCurrentTCBConst>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f01e 0f10 	tst.w	lr, #16
 8005200:	bf08      	it	eq
 8005202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	6010      	str	r0, [r2, #0]
 800520c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005214:	f380 8811 	msr	BASEPRI, r0
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f7fe ffba 	bl	8004198 <vTaskSwitchContext>
 8005224:	f04f 0000 	mov.w	r0, #0
 8005228:	f380 8811 	msr	BASEPRI, r0
 800522c:	bc09      	pop	{r0, r3}
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	6808      	ldr	r0, [r1, #0]
 8005232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005236:	f01e 0f10 	tst.w	lr, #16
 800523a:	bf08      	it	eq
 800523c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005240:	f380 8809 	msr	PSP, r0
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	f3af 8000 	nop.w

08005250 <pxCurrentTCBConst>:
 8005250:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop

08005258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	607b      	str	r3, [r7, #4]
}
 8005270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005272:	f7fe fed7 	bl	8004024 <xTaskIncrementTick>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <xPortSysTickHandler+0x40>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	2300      	movs	r3, #0
 8005286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f383 8811 	msr	BASEPRI, r3
}
 800528e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <vPortSetupTimerInterrupt+0x38>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <vPortSetupTimerInterrupt+0x3c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <vPortSetupTimerInterrupt+0x40>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <vPortSetupTimerInterrupt+0x44>)
 80052ba:	3b01      	subs	r3, #1
 80052bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052c0:	2207      	movs	r2, #7
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	e000e010 	.word	0xe000e010
 80052d4:	e000e018 	.word	0xe000e018
 80052d8:	20000004 	.word	0x20000004
 80052dc:	51eb851f 	.word	0x51eb851f
 80052e0:	e000e014 	.word	0xe000e014

080052e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052f4 <vPortEnableVFP+0x10>
 80052e8:	6801      	ldr	r1, [r0, #0]
 80052ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052ee:	6001      	str	r1, [r0, #0]
 80052f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052f2:	bf00      	nop
 80052f4:	e000ed88 	.word	0xe000ed88

080052f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052fe:	f3ef 8305 	mrs	r3, IPSR
 8005302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d914      	bls.n	8005334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800530a:	4a17      	ldr	r2, [pc, #92]	; (8005368 <vPortValidateInterruptPriority+0x70>)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005314:	4b15      	ldr	r3, [pc, #84]	; (800536c <vPortValidateInterruptPriority+0x74>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	7afa      	ldrb	r2, [r7, #11]
 800531a:	429a      	cmp	r2, r3
 800531c:	d20a      	bcs.n	8005334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	607b      	str	r3, [r7, #4]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005334:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <vPortValidateInterruptPriority+0x78>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800533c:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <vPortValidateInterruptPriority+0x7c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d90a      	bls.n	800535a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	603b      	str	r3, [r7, #0]
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <vPortValidateInterruptPriority+0x60>
	}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e000e3f0 	.word	0xe000e3f0
 800536c:	20000eec 	.word	0x20000eec
 8005370:	e000ed0c 	.word	0xe000ed0c
 8005374:	20000ef0 	.word	0x20000ef0

08005378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005384:	f7fe fd92 	bl	8003eac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005388:	4b5b      	ldr	r3, [pc, #364]	; (80054f8 <pvPortMalloc+0x180>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005390:	f000 f920 	bl	80055d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005394:	4b59      	ldr	r3, [pc, #356]	; (80054fc <pvPortMalloc+0x184>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4013      	ands	r3, r2
 800539c:	2b00      	cmp	r3, #0
 800539e:	f040 8093 	bne.w	80054c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01d      	beq.n	80053e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053a8:	2208      	movs	r2, #8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d014      	beq.n	80053e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f023 0307 	bic.w	r3, r3, #7
 80053c0:	3308      	adds	r3, #8
 80053c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <pvPortMalloc+0x6c>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	617b      	str	r3, [r7, #20]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d06e      	beq.n	80054c8 <pvPortMalloc+0x150>
 80053ea:	4b45      	ldr	r3, [pc, #276]	; (8005500 <pvPortMalloc+0x188>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d869      	bhi.n	80054c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053f4:	4b43      	ldr	r3, [pc, #268]	; (8005504 <pvPortMalloc+0x18c>)
 80053f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053f8:	4b42      	ldr	r3, [pc, #264]	; (8005504 <pvPortMalloc+0x18c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053fe:	e004      	b.n	800540a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d903      	bls.n	800541c <pvPortMalloc+0xa4>
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f1      	bne.n	8005400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800541c:	4b36      	ldr	r3, [pc, #216]	; (80054f8 <pvPortMalloc+0x180>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005422:	429a      	cmp	r2, r3
 8005424:	d050      	beq.n	80054c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2208      	movs	r2, #8
 800542c:	4413      	add	r3, r2
 800542e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	2308      	movs	r3, #8
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	429a      	cmp	r2, r3
 8005446:	d91f      	bls.n	8005488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4413      	add	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <pvPortMalloc+0xf8>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	613b      	str	r3, [r7, #16]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005482:	69b8      	ldr	r0, [r7, #24]
 8005484:	f000 f908 	bl	8005698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005488:	4b1d      	ldr	r3, [pc, #116]	; (8005500 <pvPortMalloc+0x188>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <pvPortMalloc+0x188>)
 8005494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005496:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <pvPortMalloc+0x188>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <pvPortMalloc+0x190>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d203      	bcs.n	80054aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054a2:	4b17      	ldr	r3, [pc, #92]	; (8005500 <pvPortMalloc+0x188>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a18      	ldr	r2, [pc, #96]	; (8005508 <pvPortMalloc+0x190>)
 80054a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	4b13      	ldr	r3, [pc, #76]	; (80054fc <pvPortMalloc+0x184>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054be:	4b13      	ldr	r3, [pc, #76]	; (800550c <pvPortMalloc+0x194>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a11      	ldr	r2, [pc, #68]	; (800550c <pvPortMalloc+0x194>)
 80054c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054c8:	f7fe fcfe 	bl	8003ec8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <pvPortMalloc+0x174>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	60fb      	str	r3, [r7, #12]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <pvPortMalloc+0x172>
	return pvReturn;
 80054ec:	69fb      	ldr	r3, [r7, #28]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3728      	adds	r7, #40	; 0x28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20004afc 	.word	0x20004afc
 80054fc:	20004b10 	.word	0x20004b10
 8005500:	20004b00 	.word	0x20004b00
 8005504:	20004af4 	.word	0x20004af4
 8005508:	20004b04 	.word	0x20004b04
 800550c:	20004b08 	.word	0x20004b08

08005510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d04d      	beq.n	80055be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005522:	2308      	movs	r3, #8
 8005524:	425b      	negs	r3, r3
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4413      	add	r3, r2
 800552a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	4b24      	ldr	r3, [pc, #144]	; (80055c8 <vPortFree+0xb8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4013      	ands	r3, r2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <vPortFree+0x44>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	60fb      	str	r3, [r7, #12]
}
 8005550:	bf00      	nop
 8005552:	e7fe      	b.n	8005552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <vPortFree+0x62>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60bb      	str	r3, [r7, #8]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <vPortFree+0xb8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4013      	ands	r3, r2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01e      	beq.n	80055be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d11a      	bne.n	80055be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <vPortFree+0xb8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	43db      	mvns	r3, r3
 8005592:	401a      	ands	r2, r3
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005598:	f7fe fc88 	bl	8003eac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <vPortFree+0xbc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4413      	add	r3, r2
 80055a6:	4a09      	ldr	r2, [pc, #36]	; (80055cc <vPortFree+0xbc>)
 80055a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055aa:	6938      	ldr	r0, [r7, #16]
 80055ac:	f000 f874 	bl	8005698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055b0:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <vPortFree+0xc0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	4a06      	ldr	r2, [pc, #24]	; (80055d0 <vPortFree+0xc0>)
 80055b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055ba:	f7fe fc85 	bl	8003ec8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055be:	bf00      	nop
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20004b10 	.word	0x20004b10
 80055cc:	20004b00 	.word	0x20004b00
 80055d0:	20004b0c 	.word	0x20004b0c

080055d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055e0:	4b27      	ldr	r3, [pc, #156]	; (8005680 <prvHeapInit+0xac>)
 80055e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00c      	beq.n	8005608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3307      	adds	r3, #7
 80055f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0307 	bic.w	r3, r3, #7
 80055fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	4a1f      	ldr	r2, [pc, #124]	; (8005680 <prvHeapInit+0xac>)
 8005604:	4413      	add	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800560c:	4a1d      	ldr	r2, [pc, #116]	; (8005684 <prvHeapInit+0xb0>)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <prvHeapInit+0xb0>)
 8005614:	2200      	movs	r2, #0
 8005616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	4413      	add	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005620:	2208      	movs	r2, #8
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0307 	bic.w	r3, r3, #7
 800562e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4a15      	ldr	r2, [pc, #84]	; (8005688 <prvHeapInit+0xb4>)
 8005634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005636:	4b14      	ldr	r3, [pc, #80]	; (8005688 <prvHeapInit+0xb4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800563e:	4b12      	ldr	r3, [pc, #72]	; (8005688 <prvHeapInit+0xb4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	1ad2      	subs	r2, r2, r3
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <prvHeapInit+0xb4>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	4a0a      	ldr	r2, [pc, #40]	; (800568c <prvHeapInit+0xb8>)
 8005662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a09      	ldr	r2, [pc, #36]	; (8005690 <prvHeapInit+0xbc>)
 800566a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800566c:	4b09      	ldr	r3, [pc, #36]	; (8005694 <prvHeapInit+0xc0>)
 800566e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005672:	601a      	str	r2, [r3, #0]
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	20000ef4 	.word	0x20000ef4
 8005684:	20004af4 	.word	0x20004af4
 8005688:	20004afc 	.word	0x20004afc
 800568c:	20004b04 	.word	0x20004b04
 8005690:	20004b00 	.word	0x20004b00
 8005694:	20004b10 	.word	0x20004b10

08005698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056a0:	4b28      	ldr	r3, [pc, #160]	; (8005744 <prvInsertBlockIntoFreeList+0xac>)
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e002      	b.n	80056ac <prvInsertBlockIntoFreeList+0x14>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d8f7      	bhi.n	80056a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4413      	add	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d108      	bne.n	80056da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	441a      	add	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	441a      	add	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d118      	bne.n	8005720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <prvInsertBlockIntoFreeList+0xb0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d00d      	beq.n	8005716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	441a      	add	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e008      	b.n	8005728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <prvInsertBlockIntoFreeList+0xb0>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e003      	b.n	8005728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	429a      	cmp	r2, r3
 800572e:	d002      	beq.n	8005736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20004af4 	.word	0x20004af4
 8005748:	20004afc 	.word	0x20004afc

0800574c <memset>:
 800574c:	4402      	add	r2, r0
 800574e:	4603      	mov	r3, r0
 8005750:	4293      	cmp	r3, r2
 8005752:	d100      	bne.n	8005756 <memset+0xa>
 8005754:	4770      	bx	lr
 8005756:	f803 1b01 	strb.w	r1, [r3], #1
 800575a:	e7f9      	b.n	8005750 <memset+0x4>

0800575c <_reclaim_reent>:
 800575c:	4b29      	ldr	r3, [pc, #164]	; (8005804 <_reclaim_reent+0xa8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4283      	cmp	r3, r0
 8005762:	b570      	push	{r4, r5, r6, lr}
 8005764:	4604      	mov	r4, r0
 8005766:	d04b      	beq.n	8005800 <_reclaim_reent+0xa4>
 8005768:	69c3      	ldr	r3, [r0, #28]
 800576a:	b143      	cbz	r3, 800577e <_reclaim_reent+0x22>
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d144      	bne.n	80057fc <_reclaim_reent+0xa0>
 8005772:	69e3      	ldr	r3, [r4, #28]
 8005774:	6819      	ldr	r1, [r3, #0]
 8005776:	b111      	cbz	r1, 800577e <_reclaim_reent+0x22>
 8005778:	4620      	mov	r0, r4
 800577a:	f000 f879 	bl	8005870 <_free_r>
 800577e:	6961      	ldr	r1, [r4, #20]
 8005780:	b111      	cbz	r1, 8005788 <_reclaim_reent+0x2c>
 8005782:	4620      	mov	r0, r4
 8005784:	f000 f874 	bl	8005870 <_free_r>
 8005788:	69e1      	ldr	r1, [r4, #28]
 800578a:	b111      	cbz	r1, 8005792 <_reclaim_reent+0x36>
 800578c:	4620      	mov	r0, r4
 800578e:	f000 f86f 	bl	8005870 <_free_r>
 8005792:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005794:	b111      	cbz	r1, 800579c <_reclaim_reent+0x40>
 8005796:	4620      	mov	r0, r4
 8005798:	f000 f86a 	bl	8005870 <_free_r>
 800579c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800579e:	b111      	cbz	r1, 80057a6 <_reclaim_reent+0x4a>
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 f865 	bl	8005870 <_free_r>
 80057a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80057a8:	b111      	cbz	r1, 80057b0 <_reclaim_reent+0x54>
 80057aa:	4620      	mov	r0, r4
 80057ac:	f000 f860 	bl	8005870 <_free_r>
 80057b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80057b2:	b111      	cbz	r1, 80057ba <_reclaim_reent+0x5e>
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 f85b 	bl	8005870 <_free_r>
 80057ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80057bc:	b111      	cbz	r1, 80057c4 <_reclaim_reent+0x68>
 80057be:	4620      	mov	r0, r4
 80057c0:	f000 f856 	bl	8005870 <_free_r>
 80057c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80057c6:	b111      	cbz	r1, 80057ce <_reclaim_reent+0x72>
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 f851 	bl	8005870 <_free_r>
 80057ce:	6a23      	ldr	r3, [r4, #32]
 80057d0:	b1b3      	cbz	r3, 8005800 <_reclaim_reent+0xa4>
 80057d2:	4620      	mov	r0, r4
 80057d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057d8:	4718      	bx	r3
 80057da:	5949      	ldr	r1, [r1, r5]
 80057dc:	b941      	cbnz	r1, 80057f0 <_reclaim_reent+0x94>
 80057de:	3504      	adds	r5, #4
 80057e0:	69e3      	ldr	r3, [r4, #28]
 80057e2:	2d80      	cmp	r5, #128	; 0x80
 80057e4:	68d9      	ldr	r1, [r3, #12]
 80057e6:	d1f8      	bne.n	80057da <_reclaim_reent+0x7e>
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 f841 	bl	8005870 <_free_r>
 80057ee:	e7c0      	b.n	8005772 <_reclaim_reent+0x16>
 80057f0:	680e      	ldr	r6, [r1, #0]
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 f83c 	bl	8005870 <_free_r>
 80057f8:	4631      	mov	r1, r6
 80057fa:	e7ef      	b.n	80057dc <_reclaim_reent+0x80>
 80057fc:	2500      	movs	r5, #0
 80057fe:	e7ef      	b.n	80057e0 <_reclaim_reent+0x84>
 8005800:	bd70      	pop	{r4, r5, r6, pc}
 8005802:	bf00      	nop
 8005804:	20000060 	.word	0x20000060

08005808 <__libc_init_array>:
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	4d0d      	ldr	r5, [pc, #52]	; (8005840 <__libc_init_array+0x38>)
 800580c:	4c0d      	ldr	r4, [pc, #52]	; (8005844 <__libc_init_array+0x3c>)
 800580e:	1b64      	subs	r4, r4, r5
 8005810:	10a4      	asrs	r4, r4, #2
 8005812:	2600      	movs	r6, #0
 8005814:	42a6      	cmp	r6, r4
 8005816:	d109      	bne.n	800582c <__libc_init_array+0x24>
 8005818:	4d0b      	ldr	r5, [pc, #44]	; (8005848 <__libc_init_array+0x40>)
 800581a:	4c0c      	ldr	r4, [pc, #48]	; (800584c <__libc_init_array+0x44>)
 800581c:	f000 f880 	bl	8005920 <_init>
 8005820:	1b64      	subs	r4, r4, r5
 8005822:	10a4      	asrs	r4, r4, #2
 8005824:	2600      	movs	r6, #0
 8005826:	42a6      	cmp	r6, r4
 8005828:	d105      	bne.n	8005836 <__libc_init_array+0x2e>
 800582a:	bd70      	pop	{r4, r5, r6, pc}
 800582c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005830:	4798      	blx	r3
 8005832:	3601      	adds	r6, #1
 8005834:	e7ee      	b.n	8005814 <__libc_init_array+0xc>
 8005836:	f855 3b04 	ldr.w	r3, [r5], #4
 800583a:	4798      	blx	r3
 800583c:	3601      	adds	r6, #1
 800583e:	e7f2      	b.n	8005826 <__libc_init_array+0x1e>
 8005840:	08005a00 	.word	0x08005a00
 8005844:	08005a00 	.word	0x08005a00
 8005848:	08005a00 	.word	0x08005a00
 800584c:	08005a04 	.word	0x08005a04

08005850 <__retarget_lock_acquire_recursive>:
 8005850:	4770      	bx	lr

08005852 <__retarget_lock_release_recursive>:
 8005852:	4770      	bx	lr

08005854 <memcpy>:
 8005854:	440a      	add	r2, r1
 8005856:	4291      	cmp	r1, r2
 8005858:	f100 33ff 	add.w	r3, r0, #4294967295
 800585c:	d100      	bne.n	8005860 <memcpy+0xc>
 800585e:	4770      	bx	lr
 8005860:	b510      	push	{r4, lr}
 8005862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800586a:	4291      	cmp	r1, r2
 800586c:	d1f9      	bne.n	8005862 <memcpy+0xe>
 800586e:	bd10      	pop	{r4, pc}

08005870 <_free_r>:
 8005870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005872:	2900      	cmp	r1, #0
 8005874:	d044      	beq.n	8005900 <_free_r+0x90>
 8005876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587a:	9001      	str	r0, [sp, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f1a1 0404 	sub.w	r4, r1, #4
 8005882:	bfb8      	it	lt
 8005884:	18e4      	addlt	r4, r4, r3
 8005886:	f000 f83f 	bl	8005908 <__malloc_lock>
 800588a:	4a1e      	ldr	r2, [pc, #120]	; (8005904 <_free_r+0x94>)
 800588c:	9801      	ldr	r0, [sp, #4]
 800588e:	6813      	ldr	r3, [r2, #0]
 8005890:	b933      	cbnz	r3, 80058a0 <_free_r+0x30>
 8005892:	6063      	str	r3, [r4, #4]
 8005894:	6014      	str	r4, [r2, #0]
 8005896:	b003      	add	sp, #12
 8005898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800589c:	f000 b83a 	b.w	8005914 <__malloc_unlock>
 80058a0:	42a3      	cmp	r3, r4
 80058a2:	d908      	bls.n	80058b6 <_free_r+0x46>
 80058a4:	6825      	ldr	r5, [r4, #0]
 80058a6:	1961      	adds	r1, r4, r5
 80058a8:	428b      	cmp	r3, r1
 80058aa:	bf01      	itttt	eq
 80058ac:	6819      	ldreq	r1, [r3, #0]
 80058ae:	685b      	ldreq	r3, [r3, #4]
 80058b0:	1949      	addeq	r1, r1, r5
 80058b2:	6021      	streq	r1, [r4, #0]
 80058b4:	e7ed      	b.n	8005892 <_free_r+0x22>
 80058b6:	461a      	mov	r2, r3
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	b10b      	cbz	r3, 80058c0 <_free_r+0x50>
 80058bc:	42a3      	cmp	r3, r4
 80058be:	d9fa      	bls.n	80058b6 <_free_r+0x46>
 80058c0:	6811      	ldr	r1, [r2, #0]
 80058c2:	1855      	adds	r5, r2, r1
 80058c4:	42a5      	cmp	r5, r4
 80058c6:	d10b      	bne.n	80058e0 <_free_r+0x70>
 80058c8:	6824      	ldr	r4, [r4, #0]
 80058ca:	4421      	add	r1, r4
 80058cc:	1854      	adds	r4, r2, r1
 80058ce:	42a3      	cmp	r3, r4
 80058d0:	6011      	str	r1, [r2, #0]
 80058d2:	d1e0      	bne.n	8005896 <_free_r+0x26>
 80058d4:	681c      	ldr	r4, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	6053      	str	r3, [r2, #4]
 80058da:	440c      	add	r4, r1
 80058dc:	6014      	str	r4, [r2, #0]
 80058de:	e7da      	b.n	8005896 <_free_r+0x26>
 80058e0:	d902      	bls.n	80058e8 <_free_r+0x78>
 80058e2:	230c      	movs	r3, #12
 80058e4:	6003      	str	r3, [r0, #0]
 80058e6:	e7d6      	b.n	8005896 <_free_r+0x26>
 80058e8:	6825      	ldr	r5, [r4, #0]
 80058ea:	1961      	adds	r1, r4, r5
 80058ec:	428b      	cmp	r3, r1
 80058ee:	bf04      	itt	eq
 80058f0:	6819      	ldreq	r1, [r3, #0]
 80058f2:	685b      	ldreq	r3, [r3, #4]
 80058f4:	6063      	str	r3, [r4, #4]
 80058f6:	bf04      	itt	eq
 80058f8:	1949      	addeq	r1, r1, r5
 80058fa:	6021      	streq	r1, [r4, #0]
 80058fc:	6054      	str	r4, [r2, #4]
 80058fe:	e7ca      	b.n	8005896 <_free_r+0x26>
 8005900:	b003      	add	sp, #12
 8005902:	bd30      	pop	{r4, r5, pc}
 8005904:	20004c50 	.word	0x20004c50

08005908 <__malloc_lock>:
 8005908:	4801      	ldr	r0, [pc, #4]	; (8005910 <__malloc_lock+0x8>)
 800590a:	f7ff bfa1 	b.w	8005850 <__retarget_lock_acquire_recursive>
 800590e:	bf00      	nop
 8005910:	20004c4c 	.word	0x20004c4c

08005914 <__malloc_unlock>:
 8005914:	4801      	ldr	r0, [pc, #4]	; (800591c <__malloc_unlock+0x8>)
 8005916:	f7ff bf9c 	b.w	8005852 <__retarget_lock_release_recursive>
 800591a:	bf00      	nop
 800591c:	20004c4c 	.word	0x20004c4c

08005920 <_init>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	bf00      	nop
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr

0800592c <_fini>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr
