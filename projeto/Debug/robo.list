
robo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b468  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000334c  0800b608  0800b608  0001b608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e954  0800e954  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800e954  0800e954  0001e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e95c  0800e95c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e95c  0800e95c  0001e95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e960  0800e960  0001e960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800e964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000515c  20000214  0800eb78  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005370  0800eb78  00025370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198d8  00000000  00000000  00020287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038ec  00000000  00000000  00039b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001738  00000000  00000000  0003d450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011fc  00000000  00000000  0003eb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004bbc  00000000  00000000  0003fd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197a6  00000000  00000000  00044940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009afba  00000000  00000000  0005e0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007398  00000000  00000000  000f90a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00100438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b5f0 	.word	0x0800b5f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	0800b5f0 	.word	0x0800b5f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef8:	f002 fa52 	bl	80033a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000efc:	f000 f872 	bl	8000fe4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f00:	f000 fa28 	bl	8001354 <MX_GPIO_Init>
	MX_TIM4_Init();
 8000f04:	f000 f9ac 	bl	8001260 <MX_TIM4_Init>
	MX_TIM2_Init();
 8000f08:	f000 f904 	bl	8001114 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000f0c:	f000 f95a 	bl	80011c4 <MX_TIM3_Init>
	MX_I2C3_Init();
 8000f10:	f000 f8d2 	bl	80010b8 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */


	//inicializacao do display
	ssd1306_Init();
 8000f14:	f002 f84e 	bl	8002fb4 <ssd1306_Init>
	ssd1306_Fill(White);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f002 f8b5 	bl	8003088 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000f1e:	f002 f8cb 	bl	80030b8 <ssd1306_UpdateScreen>


	//inicializacao dos sensores
	HAL_TIM_Base_Start(&htim3);
 8000f22:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <main+0xb0>)
 8000f24:	f003 fea2 	bl	8004c6c <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SensorFrenteTrigger_GPIO_Port, SensorFrenteTrigger_Pin , GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <main+0xb4>)
 8000f2e:	f002 fd1b 	bl	8003968 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SensorEsquerdaTrigger_GPIO_Port, SensorEsquerdaTrigger_Pin , GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f38:	481c      	ldr	r0, [pc, #112]	; (8000fac <main+0xb8>)
 8000f3a:	f002 fd15 	bl	8003968 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SensorDireitoTrigger_GPIO_Port, SensorDireitoTrigger_Pin , GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2104      	movs	r1, #4
 8000f42:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <main+0xb4>)
 8000f44:	f002 fd10 	bl	8003968 <HAL_GPIO_WritePin>


	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000f48:	f004 fefc 	bl	8005d44 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <main+0xbc>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <main+0xc0>)
 8000f52:	f004 ff41 	bl	8005dd8 <osThreadNew>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <main+0xc4>)
 8000f5a:	6013      	str	r3, [r2, #0]

	/* creation of RightMotor */
	RightMotorHandle = osThreadNew(StartRightMotor, NULL, &RightMotor_attributes);
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <main+0xc8>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <main+0xcc>)
 8000f62:	f004 ff39 	bl	8005dd8 <osThreadNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <main+0xd0>)
 8000f6a:	6013      	str	r3, [r2, #0]

	/* creation of LeftMotor */
	LeftMotorHandle = osThreadNew(StartLeftMotor, NULL, &LeftMotor_attributes);
 8000f6c:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <main+0xd4>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <main+0xd8>)
 8000f72:	f004 ff31 	bl	8005dd8 <osThreadNew>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <main+0xdc>)
 8000f7a:	6013      	str	r3, [r2, #0]

	/* creation of StateMachine */
	StateMachineHandle = osThreadNew(StartStateMachine, NULL, &StateMachine_attributes);
 8000f7c:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <main+0xe0>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <main+0xe4>)
 8000f82:	f004 ff29 	bl	8005dd8 <osThreadNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <main+0xe8>)
 8000f8a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f8c:	f004 fefe 	bl	8005d8c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	Walle.Sensor_Frente = 0;
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <main+0xec>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
	Walle.Sensor_Direita = 0;
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <main+0xec>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
	Walle.Sensor_Esquerda = 0;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <main+0xec>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
	while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <main+0xae>
 8000fa4:	200002cc 	.word	0x200002cc
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	0800b734 	.word	0x0800b734
 8000fb4:	08002149 	.word	0x08002149
 8000fb8:	2000035c 	.word	0x2000035c
 8000fbc:	0800b758 	.word	0x0800b758
 8000fc0:	08002161 	.word	0x08002161
 8000fc4:	20000360 	.word	0x20000360
 8000fc8:	0800b77c 	.word	0x0800b77c
 8000fcc:	08002401 	.word	0x08002401
 8000fd0:	20000364 	.word	0x20000364
 8000fd4:	0800b7a0 	.word	0x0800b7a0
 8000fd8:	080026a1 	.word	0x080026a1
 8000fdc:	20000368 	.word	0x20000368
 8000fe0:	200003cc 	.word	0x200003cc

08000fe4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	; 0x50
 8000fe8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	2230      	movs	r2, #48	; 0x30
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 f9c7 	bl	8009386 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <SystemClock_Config+0xcc>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <SystemClock_Config+0xcc>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <SystemClock_Config+0xcc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <SystemClock_Config+0xd0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001030:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <SystemClock_Config+0xd0>)
 8001032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <SystemClock_Config+0xd0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104c:	2310      	movs	r3, #16
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001050:	2302      	movs	r3, #2
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001054:	2300      	movs	r3, #0
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001058:	2308      	movs	r3, #8
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800105c:	2354      	movs	r3, #84	; 0x54
 800105e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001060:	2302      	movs	r3, #2
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001064:	2304      	movs	r3, #4
 8001066:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4618      	mov	r0, r3
 800106e:	f003 f923 	bl	80042b8 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001078:	f001 fc68 	bl	800294c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2302      	movs	r3, #2
 8001082:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2102      	movs	r1, #2
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fb85 	bl	80047a8 <HAL_RCC_ClockConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80010a4:	f001 fc52 	bl	800294c <Error_Handler>
	}
}
 80010a8:	bf00      	nop
 80010aa:	3750      	adds	r7, #80	; 0x50
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_I2C3_Init+0x50>)
 80010be:	4a13      	ldr	r2, [pc, #76]	; (800110c <MX_I2C3_Init+0x54>)
 80010c0:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_I2C3_Init+0x50>)
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_I2C3_Init+0x58>)
 80010c6:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_I2C3_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_I2C3_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_I2C3_Init+0x50>)
 80010d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010da:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_I2C3_Init+0x50>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_I2C3_Init+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_I2C3_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_I2C3_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_I2C3_Init+0x50>)
 80010f6:	f002 fc83 	bl	8003a00 <HAL_I2C_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8001100:	f001 fc24 	bl	800294c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000230 	.word	0x20000230
 800110c:	40005c00 	.word	0x40005c00
 8001110:	000186a0 	.word	0x000186a0

08001114 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <MX_TIM2_Init+0xac>)
 8001138:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8400;
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <MX_TIM2_Init+0xac>)
 8001140:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001144:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MX_TIM2_Init+0xac>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_TIM2_Init+0xac>)
 800114e:	220a      	movs	r2, #10
 8001150:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <MX_TIM2_Init+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_TIM2_Init+0xac>)
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_TIM2_Init+0xac>)
 8001160:	f003 fe40 	bl	8004de4 <HAL_TIM_PWM_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 800116a:	f001 fbef 	bl	800294c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	4619      	mov	r1, r3
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <MX_TIM2_Init+0xac>)
 800117e:	f004 fd1b 	bl	8005bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8001188:	f001 fbe0 	bl	800294c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118c:	2360      	movs	r3, #96	; 0x60
 800118e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 5;
 8001190:	2305      	movs	r3, #5
 8001192:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <MX_TIM2_Init+0xac>)
 80011a4:	f004 f88a 	bl	80052bc <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 80011ae:	f001 fbcd 	bl	800294c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MX_TIM2_Init+0xac>)
 80011b4:	f001 fcbc 	bl	8002b30 <HAL_TIM_MspPostInit>

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000284 	.word	0x20000284

080011c4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_TIM3_Init+0x94>)
 80011e2:	4a1e      	ldr	r2, [pc, #120]	; (800125c <MX_TIM3_Init+0x98>)
 80011e4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84-1;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_TIM3_Init+0x94>)
 80011e8:	2253      	movs	r2, #83	; 0x53
 80011ea:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_TIM3_Init+0x94>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_TIM3_Init+0x94>)
 80011f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_TIM3_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_TIM3_Init+0x94>)
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001206:	4814      	ldr	r0, [pc, #80]	; (8001258 <MX_TIM3_Init+0x94>)
 8001208:	f003 fce0 	bl	8004bcc <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 8001212:	f001 fb9b 	bl	800294c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_TIM3_Init+0x94>)
 8001224:	f004 f90c 	bl	8005440 <HAL_TIM_ConfigClockSource>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 800122e:	f001 fb8d 	bl	800294c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_TIM3_Init+0x94>)
 8001240:	f004 fcba 	bl	8005bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 800124a:	f001 fb7f 	bl	800294c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200002cc 	.word	0x200002cc
 800125c:	40000400 	.word	0x40000400

08001260 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <MX_TIM4_Init+0xec>)
 8001284:	4a32      	ldr	r2, [pc, #200]	; (8001350 <MX_TIM4_Init+0xf0>)
 8001286:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 840;
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <MX_TIM4_Init+0xec>)
 800128a:	f44f 7252 	mov.w	r2, #840	; 0x348
 800128e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <MX_TIM4_Init+0xec>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100-1;
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_TIM4_Init+0xec>)
 8001298:	2263      	movs	r2, #99	; 0x63
 800129a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_TIM4_Init+0xec>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_TIM4_Init+0xec>)
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012a8:	4828      	ldr	r0, [pc, #160]	; (800134c <MX_TIM4_Init+0xec>)
 80012aa:	f003 fd9b 	bl	8004de4 <HAL_TIM_PWM_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM4_Init+0x58>
	{
		Error_Handler();
 80012b4:	f001 fb4a 	bl	800294c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	4619      	mov	r1, r3
 80012c6:	4821      	ldr	r0, [pc, #132]	; (800134c <MX_TIM4_Init+0xec>)
 80012c8:	f004 fc76 	bl	8005bb8 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM4_Init+0x76>
	{
		Error_Handler();
 80012d2:	f001 fb3b 	bl	800294c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	2360      	movs	r3, #96	; 0x60
 80012d8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 50-1;
 80012da:	2331      	movs	r3, #49	; 0x31
 80012dc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <MX_TIM4_Init+0xec>)
 80012ee:	f003 ffe5 	bl	80052bc <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM4_Init+0x9c>
	{
		Error_Handler();
 80012f8:	f001 fb28 	bl	800294c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2204      	movs	r2, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4812      	ldr	r0, [pc, #72]	; (800134c <MX_TIM4_Init+0xec>)
 8001304:	f003 ffda 	bl	80052bc <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM4_Init+0xb2>
	{
		Error_Handler();
 800130e:	f001 fb1d 	bl	800294c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2208      	movs	r2, #8
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_TIM4_Init+0xec>)
 800131a:	f003 ffcf 	bl	80052bc <HAL_TIM_PWM_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM4_Init+0xc8>
	{
		Error_Handler();
 8001324:	f001 fb12 	bl	800294c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	220c      	movs	r2, #12
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_TIM4_Init+0xec>)
 8001330:	f003 ffc4 	bl	80052bc <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM4_Init+0xde>
	{
		Error_Handler();
 800133a:	f001 fb07 	bl	800294c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_TIM4_Init+0xec>)
 8001340:	f001 fbf6 	bl	8002b30 <HAL_TIM_MspPostInit>

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000314 	.word	0x20000314
 8001350:	40000800 	.word	0x40000800

08001354 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b60      	ldr	r3, [pc, #384]	; (80014f0 <MX_GPIO_Init+0x19c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a5f      	ldr	r2, [pc, #380]	; (80014f0 <MX_GPIO_Init+0x19c>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b5d      	ldr	r3, [pc, #372]	; (80014f0 <MX_GPIO_Init+0x19c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b59      	ldr	r3, [pc, #356]	; (80014f0 <MX_GPIO_Init+0x19c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a58      	ldr	r2, [pc, #352]	; (80014f0 <MX_GPIO_Init+0x19c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b56      	ldr	r3, [pc, #344]	; (80014f0 <MX_GPIO_Init+0x19c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <MX_GPIO_Init+0x19c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <MX_GPIO_Init+0x19c>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <MX_GPIO_Init+0x19c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c4:	484b      	ldr	r0, [pc, #300]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 80013c6:	f002 facf 	bl	8003968 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SensorDireitoTrigger_Pin|SensorFrenteTrigger_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2144      	movs	r1, #68	; 0x44
 80013ce:	484a      	ldr	r0, [pc, #296]	; (80014f8 <MX_GPIO_Init+0x1a4>)
 80013d0:	f002 faca 	bl	8003968 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SensorEsquerdaTrigger_GPIO_Port, SensorEsquerdaTrigger_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013da:	4848      	ldr	r0, [pc, #288]	; (80014fc <MX_GPIO_Init+0x1a8>)
 80013dc:	f002 fac4 	bl	8003968 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 80013e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4619      	mov	r1, r3
 80013f8:	483e      	ldr	r0, [pc, #248]	; (80014f4 <MX_GPIO_Init+0x1a0>)
 80013fa:	f002 f919 	bl	8003630 <HAL_GPIO_Init>

	/*Configure GPIO pin : Key_Pin */
	GPIO_InitStruct.Pin = Key_Pin;
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001406:	2301      	movs	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	4839      	ldr	r0, [pc, #228]	; (80014f8 <MX_GPIO_Init+0x1a4>)
 8001412:	f002 f90d 	bl	8003630 <HAL_GPIO_Init>

	/*Configure GPIO pins : SensorDireitoEcho_Pin SensorFrenteEcho_Pin SensorChaoTras_Pin */
	GPIO_InitStruct.Pin = SensorDireitoEcho_Pin|SensorFrenteEcho_Pin|SensorChaoTras_Pin;
 8001416:	f240 2382 	movw	r3, #642	; 0x282
 800141a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	4833      	ldr	r0, [pc, #204]	; (80014f8 <MX_GPIO_Init+0x1a4>)
 800142c:	f002 f900 	bl	8003630 <HAL_GPIO_Init>

	/*Configure GPIO pins : SensorDireitoTrigger_Pin SensorFrenteTrigger_Pin */
	GPIO_InitStruct.Pin = SensorDireitoTrigger_Pin|SensorFrenteTrigger_Pin;
 8001430:	2344      	movs	r3, #68	; 0x44
 8001432:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	482c      	ldr	r0, [pc, #176]	; (80014f8 <MX_GPIO_Init+0x1a4>)
 8001448:	f002 f8f2 	bl	8003630 <HAL_GPIO_Init>

	/*Configure GPIO pins : Encoder_Direito_Pin Encoder_Esquerdo_Pin */
	GPIO_InitStruct.Pin = Encoder_Direito_Pin|Encoder_Esquerdo_Pin;
 800144c:	2318      	movs	r3, #24
 800144e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001450:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001454:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	4825      	ldr	r0, [pc, #148]	; (80014f8 <MX_GPIO_Init+0x1a4>)
 8001462:	f002 f8e5 	bl	8003630 <HAL_GPIO_Init>

	/*Configure GPIO pin : SensorChao_Pin */
	GPIO_InitStruct.Pin = SensorChao_Pin;
 8001466:	2301      	movs	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800146e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SensorChao_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	4820      	ldr	r0, [pc, #128]	; (80014fc <MX_GPIO_Init+0x1a8>)
 800147c:	f002 f8d8 	bl	8003630 <HAL_GPIO_Init>

	/*Configure GPIO pin : SensorEsquerdaEcho_Pin */
	GPIO_InitStruct.Pin = SensorEsquerdaEcho_Pin;
 8001480:	2304      	movs	r3, #4
 8001482:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SensorEsquerdaEcho_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4619      	mov	r1, r3
 8001492:	481a      	ldr	r0, [pc, #104]	; (80014fc <MX_GPIO_Init+0x1a8>)
 8001494:	f002 f8cc 	bl	8003630 <HAL_GPIO_Init>

	/*Configure GPIO pin : SensorEsquerdaTrigger_Pin */
	GPIO_InitStruct.Pin = SensorEsquerdaTrigger_Pin;
 8001498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SensorEsquerdaTrigger_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	4619      	mov	r1, r3
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <MX_GPIO_Init+0x1a8>)
 80014b2:	f002 f8bd 	bl	8003630 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
 80014ba:	2006      	movs	r0, #6
 80014bc:	f002 f88e 	bl	80035dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014c0:	2006      	movs	r0, #6
 80014c2:	f002 f8a7 	bl	8003614 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2105      	movs	r1, #5
 80014ca:	2009      	movs	r0, #9
 80014cc:	f002 f886 	bl	80035dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014d0:	2009      	movs	r0, #9
 80014d2:	f002 f89f 	bl	8003614 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2105      	movs	r1, #5
 80014da:	200a      	movs	r0, #10
 80014dc:	f002 f87e 	bl	80035dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014e0:	200a      	movs	r0, #10
 80014e2:	f002 f897 	bl	8003614 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020400 	.word	0x40020400

08001500 <PlayBuzzer>:
/* USER CODE BEGIN 4 */



// buzzer
void PlayBuzzer(int Freq, int duration){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	/*
	 * 1 contagem no ARR = 10000Hz. 10 contagens = 1000Hz. 100 contagens = 100 Hz....
	 * CCR1 = ARR/2 para ter onda quadrada
	 */
	TIM2->ARR = 10000/Freq;
 800150a:	f242 7210 	movw	r2, #10000	; 0x2710
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	fb92 f2f3 	sdiv	r2, r2, r3
 8001514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 5000/Freq;
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	fb92 f2f3 	sdiv	r2, r2, r3
 8001524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800152a:	2100      	movs	r1, #0
 800152c:	4812      	ldr	r0, [pc, #72]	; (8001578 <PlayBuzzer+0x78>)
 800152e:	f003 fca9 	bl	8004e84 <HAL_TIM_PWM_Start>

	if(Freq >5000)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	dc18      	bgt.n	800156e <PlayBuzzer+0x6e>
		return;

	TIM2->ARR = 10000/Freq;
 800153c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	fb92 f2f3 	sdiv	r2, r2, r3
 8001546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 5000/Freq;
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	fb92 f2f3 	sdiv	r2, r2, r3
 8001556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800155a:	635a      	str	r2, [r3, #52]	; 0x34

	osDelay(duration);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f004 fccc 	bl	8005efc <osDelay>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001564:	2100      	movs	r1, #0
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <PlayBuzzer+0x78>)
 8001568:	f003 fd3c 	bl	8004fe4 <HAL_TIM_PWM_Stop>
 800156c:	e000      	b.n	8001570 <PlayBuzzer+0x70>
		return;
 800156e:	bf00      	nop

}
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000284 	.word	0x20000284

0800157c <Printa1segTela>:

void Printa1segTela(){
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
	char text[20] = {};
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
	ssd1306_SetCursor(56,25);
 8001594:	2119      	movs	r1, #25
 8001596:	2038      	movs	r0, #56	; 0x38
 8001598:	f001 feb8 	bl	800330c <ssd1306_SetCursor>
	sprintf(text,"%d",ContagemRegressiva--);
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <Printa1segTela+0x7c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	1e5a      	subs	r2, r3, #1
 80015a2:	4915      	ldr	r1, [pc, #84]	; (80015f8 <Printa1segTela+0x7c>)
 80015a4:	600a      	str	r2, [r1, #0]
 80015a6:	1d38      	adds	r0, r7, #4
 80015a8:	461a      	mov	r2, r3
 80015aa:	4914      	ldr	r1, [pc, #80]	; (80015fc <Printa1segTela+0x80>)
 80015ac:	f007 fe6e 	bl	800928c <siprintf>

	if(FlagInicial){
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <Printa1segTela+0x84>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00c      	beq.n	80015d2 <Printa1segTela+0x56>
		ssd1306_Fill(White);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f001 fd65 	bl	8003088 <ssd1306_Fill>
		ssd1306_WriteString(text, Font_16x26, Black);
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <Printa1segTela+0x88>)
 80015c0:	1d38      	adds	r0, r7, #4
 80015c2:	2300      	movs	r3, #0
 80015c4:	ca06      	ldmia	r2, {r1, r2}
 80015c6:	f001 fe7b 	bl	80032c0 <ssd1306_WriteString>
		FlagInicial = false;
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <Printa1segTela+0x84>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e00b      	b.n	80015ea <Printa1segTela+0x6e>
	}
	else{
		ssd1306_Fill(Black);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f001 fd58 	bl	8003088 <ssd1306_Fill>
		ssd1306_WriteString(text, Font_16x26, White);
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <Printa1segTela+0x88>)
 80015da:	1d38      	adds	r0, r7, #4
 80015dc:	2301      	movs	r3, #1
 80015de:	ca06      	ldmia	r2, {r1, r2}
 80015e0:	f001 fe6e 	bl	80032c0 <ssd1306_WriteString>
		FlagInicial = true;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <Printa1segTela+0x84>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
	}

	ssd1306_UpdateScreen();
 80015ea:	f001 fd65 	bl	80030b8 <ssd1306_UpdateScreen>

}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000014 	.word	0x20000014
 80015fc:	0800b63c 	.word	0x0800b63c
 8001600:	20000018 	.word	0x20000018
 8001604:	20000038 	.word	0x20000038

08001608 <Buzzer5seg>:

void Buzzer5seg(){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	Printa1segTela();
 800160c:	f7ff ffb6 	bl	800157c <Printa1segTela>
	PlayBuzzer(500, 500);
 8001610:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001614:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001618:	f7ff ff72 	bl	8001500 <PlayBuzzer>
	osDelay(500);
 800161c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001620:	f004 fc6c 	bl	8005efc <osDelay>
	Printa1segTela();
 8001624:	f7ff ffaa 	bl	800157c <Printa1segTela>
	PlayBuzzer(500, 500);
 8001628:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800162c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001630:	f7ff ff66 	bl	8001500 <PlayBuzzer>
	osDelay(500);
 8001634:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001638:	f004 fc60 	bl	8005efc <osDelay>
	Printa1segTela();
 800163c:	f7ff ff9e 	bl	800157c <Printa1segTela>
	PlayBuzzer(500, 500);
 8001640:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001644:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001648:	f7ff ff5a 	bl	8001500 <PlayBuzzer>
	osDelay(500);
 800164c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001650:	f004 fc54 	bl	8005efc <osDelay>
	Printa1segTela();
 8001654:	f7ff ff92 	bl	800157c <Printa1segTela>
	PlayBuzzer(500, 500);
 8001658:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800165c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001660:	f7ff ff4e 	bl	8001500 <PlayBuzzer>
	osDelay(500);
 8001664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001668:	f004 fc48 	bl	8005efc <osDelay>
	Printa1segTela();
 800166c:	f7ff ff86 	bl	800157c <Printa1segTela>
	PlayBuzzer(500, 500);
 8001670:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001678:	f7ff ff42 	bl	8001500 <PlayBuzzer>
	osDelay(500);
 800167c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001680:	f004 fc3c 	bl	8005efc <osDelay>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <BuzzerTocaMusica>:

void BuzzerTocaMusica(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	PlayBuzzer(MI, 200);
 800168c:	21c8      	movs	r1, #200	; 0xc8
 800168e:	f240 2099 	movw	r0, #665	; 0x299
 8001692:	f7ff ff35 	bl	8001500 <PlayBuzzer>
	osDelay(25);
 8001696:	2019      	movs	r0, #25
 8001698:	f004 fc30 	bl	8005efc <osDelay>
	PlayBuzzer(MI, 200);
 800169c:	21c8      	movs	r1, #200	; 0xc8
 800169e:	f240 2099 	movw	r0, #665	; 0x299
 80016a2:	f7ff ff2d 	bl	8001500 <PlayBuzzer>
	osDelay(25);
 80016a6:	2019      	movs	r0, #25
 80016a8:	f004 fc28 	bl	8005efc <osDelay>
	PlayBuzzer(RE, 1000);
 80016ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b0:	f44f 7014 	mov.w	r0, #592	; 0x250
 80016b4:	f7ff ff24 	bl	8001500 <PlayBuzzer>
	osDelay(200);
 80016b8:	20c8      	movs	r0, #200	; 0xc8
 80016ba:	f004 fc1f 	bl	8005efc <osDelay>
	PlayBuzzer(RE, 200);
 80016be:	21c8      	movs	r1, #200	; 0xc8
 80016c0:	f44f 7014 	mov.w	r0, #592	; 0x250
 80016c4:	f7ff ff1c 	bl	8001500 <PlayBuzzer>
	osDelay(25);
 80016c8:	2019      	movs	r0, #25
 80016ca:	f004 fc17 	bl	8005efc <osDelay>
	PlayBuzzer(RE, 200);
 80016ce:	21c8      	movs	r1, #200	; 0xc8
 80016d0:	f44f 7014 	mov.w	r0, #592	; 0x250
 80016d4:	f7ff ff14 	bl	8001500 <PlayBuzzer>
	osDelay(25);
 80016d8:	2019      	movs	r0, #25
 80016da:	f004 fc0f 	bl	8005efc <osDelay>
	PlayBuzzer(DO, 1000);
 80016de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016e2:	f44f 7004 	mov.w	r0, #528	; 0x210
 80016e6:	f7ff ff0b 	bl	8001500 <PlayBuzzer>
	osDelay(200);
 80016ea:	20c8      	movs	r0, #200	; 0xc8
 80016ec:	f004 fc06 	bl	8005efc <osDelay>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <Print_Ajustando>:


// display


void Print_Ajustando(){
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
	char text[20] = {};
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]

	ssd1306_Fill(Black);
 800170c:	2000      	movs	r0, #0
 800170e:	f001 fcbb 	bl	8003088 <ssd1306_Fill>

	ssd1306_SetCursor(0,0);
 8001712:	2100      	movs	r1, #0
 8001714:	2000      	movs	r0, #0
 8001716:	f001 fdf9 	bl	800330c <ssd1306_SetCursor>
	strcpy(text,"Modo 'Achou'");
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4a11      	ldr	r2, [pc, #68]	; (8001764 <Print_Ajustando+0x70>)
 800171e:	461c      	mov	r4, r3
 8001720:	4613      	mov	r3, r2
 8001722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001724:	c407      	stmia	r4!, {r0, r1, r2}
 8001726:	7023      	strb	r3, [r4, #0]
	ssd1306_WriteString(text, Font_7x10, White);
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <Print_Ajustando+0x74>)
 800172a:	1d38      	adds	r0, r7, #4
 800172c:	2301      	movs	r3, #1
 800172e:	ca06      	ldmia	r2, {r1, r2}
 8001730:	f001 fdc6 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_SetCursor(0,20);
 8001734:	2114      	movs	r1, #20
 8001736:	2000      	movs	r0, #0
 8001738:	f001 fde8 	bl	800330c <ssd1306_SetCursor>
	strcpy(text,"Ajustando...");
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <Print_Ajustando+0x78>)
 8001740:	461c      	mov	r4, r3
 8001742:	4613      	mov	r3, r2
 8001744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001746:	c407      	stmia	r4!, {r0, r1, r2}
 8001748:	7023      	strb	r3, [r4, #0]
	ssd1306_WriteString(text, Font_11x18, White);
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <Print_Ajustando+0x7c>)
 800174c:	1d38      	adds	r0, r7, #4
 800174e:	2301      	movs	r3, #1
 8001750:	ca06      	ldmia	r2, {r1, r2}
 8001752:	f001 fdb5 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8001756:	f001 fcaf 	bl	80030b8 <ssd1306_UpdateScreen>
}
 800175a:	bf00      	nop
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	0800b640 	.word	0x0800b640
 8001768:	20000028 	.word	0x20000028
 800176c:	0800b650 	.word	0x0800b650
 8001770:	20000030 	.word	0x20000030

08001774 <Print_Achou>:

void Print_Achou(){
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0

	char text[20] = {};
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
	ssd1306_Fill(Black);
 800178c:	2000      	movs	r0, #0
 800178e:	f001 fc7b 	bl	8003088 <ssd1306_Fill>


	ssd1306_SetCursor(0,15);
 8001792:	210f      	movs	r1, #15
 8001794:	2000      	movs	r0, #0
 8001796:	f001 fdb9 	bl	800330c <ssd1306_SetCursor>
	strcpy(text,"Achou");
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <Print_Achou+0x84>)
 800179e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017a2:	6018      	str	r0, [r3, #0]
 80017a4:	3304      	adds	r3, #4
 80017a6:	8019      	strh	r1, [r3, #0]
	ssd1306_WriteString(text, Font_11x18, White);
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <Print_Achou+0x88>)
 80017aa:	1d38      	adds	r0, r7, #4
 80017ac:	2301      	movs	r3, #1
 80017ae:	ca06      	ldmia	r2, {r1, r2}
 80017b0:	f001 fd86 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_SetCursor(0,30);
 80017b4:	211e      	movs	r1, #30
 80017b6:	2000      	movs	r0, #0
 80017b8:	f001 fda8 	bl	800330c <ssd1306_SetCursor>
	strcpy(text," o ");
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <Print_Achou+0x8c>)
 80017c0:	601a      	str	r2, [r3, #0]
	ssd1306_WriteString(text, Font_11x18, White);
 80017c2:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <Print_Achou+0x88>)
 80017c4:	1d38      	adds	r0, r7, #4
 80017c6:	2301      	movs	r3, #1
 80017c8:	ca06      	ldmia	r2, {r1, r2}
 80017ca:	f001 fd79 	bl	80032c0 <ssd1306_WriteString>


	ssd1306_SetCursor(0,45);
 80017ce:	212d      	movs	r1, #45	; 0x2d
 80017d0:	2000      	movs	r0, #0
 80017d2:	f001 fd9b 	bl	800330c <ssd1306_SetCursor>
	strcpy(text,"objetivo!");
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <Print_Achou+0x90>)
 80017da:	ca07      	ldmia	r2, {r0, r1, r2}
 80017dc:	c303      	stmia	r3!, {r0, r1}
 80017de:	801a      	strh	r2, [r3, #0]
	ssd1306_WriteString(text, Font_11x18, White);
 80017e0:	4a06      	ldr	r2, [pc, #24]	; (80017fc <Print_Achou+0x88>)
 80017e2:	1d38      	adds	r0, r7, #4
 80017e4:	2301      	movs	r3, #1
 80017e6:	ca06      	ldmia	r2, {r1, r2}
 80017e8:	f001 fd6a 	bl	80032c0 <ssd1306_WriteString>


	ssd1306_UpdateScreen();
 80017ec:	f001 fc64 	bl	80030b8 <ssd1306_UpdateScreen>
}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	0800b660 	.word	0x0800b660
 80017fc:	20000030 	.word	0x20000030
 8001800:	00206f20 	.word	0x00206f20
 8001804:	0800b668 	.word	0x0800b668

08001808 <Print_Direcao>:


void Print_Direcao(){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
	char text[20] = {};
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]

	ssd1306_Fill(Black);
 8001820:	2000      	movs	r0, #0
 8001822:	f001 fc31 	bl	8003088 <ssd1306_Fill>

	if(Walle.Sensor_Frente<SensorFrenteAnterior && (SensorFrenteAnterior-Walle.Sensor_Frente)>VariacaoSensor){
 8001826:	4b43      	ldr	r3, [pc, #268]	; (8001934 <Print_Direcao+0x12c>)
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4b43      	ldr	r3, [pc, #268]	; (8001938 <Print_Direcao+0x130>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	da1c      	bge.n	800186c <Print_Direcao+0x64>
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <Print_Direcao+0x130>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <Print_Direcao+0x12c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	4b3f      	ldr	r3, [pc, #252]	; (800193c <Print_Direcao+0x134>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	dd13      	ble.n	800186c <Print_Direcao+0x64>
		ssd1306_SetCursor(0,0);
 8001844:	2100      	movs	r1, #0
 8001846:	2000      	movs	r0, #0
 8001848:	f001 fd60 	bl	800330c <ssd1306_SetCursor>
		strcpy(text,"Frente");
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4a3c      	ldr	r2, [pc, #240]	; (8001940 <Print_Direcao+0x138>)
 8001850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001854:	6018      	str	r0, [r3, #0]
 8001856:	3304      	adds	r3, #4
 8001858:	8019      	strh	r1, [r3, #0]
 800185a:	3302      	adds	r3, #2
 800185c:	0c0a      	lsrs	r2, r1, #16
 800185e:	701a      	strb	r2, [r3, #0]
		ssd1306_WriteString(text, Font_7x10, White);
 8001860:	4a38      	ldr	r2, [pc, #224]	; (8001944 <Print_Direcao+0x13c>)
 8001862:	1d38      	adds	r0, r7, #4
 8001864:	2301      	movs	r3, #1
 8001866:	ca06      	ldmia	r2, {r1, r2}
 8001868:	f001 fd2a 	bl	80032c0 <ssd1306_WriteString>
		sprintf(text,"nao Frente %d",SensorFrenteAnterior);
		ssd1306_WriteString(text, Font_7x10, White);
	}*/


	if(Walle.Sensor_Frente>SensorFrenteAnterior && (Walle.Sensor_Frente-SensorFrenteAnterior)>VariacaoSensor ){
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <Print_Direcao+0x12c>)
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <Print_Direcao+0x130>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	dd19      	ble.n	80018ac <Print_Direcao+0xa4>
 8001878:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <Print_Direcao+0x12c>)
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <Print_Direcao+0x130>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	1ad2      	subs	r2, r2, r3
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <Print_Direcao+0x134>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	dd10      	ble.n	80018ac <Print_Direcao+0xa4>
		ssd1306_SetCursor(0,15);
 800188a:	210f      	movs	r1, #15
 800188c:	2000      	movs	r0, #0
 800188e:	f001 fd3d 	bl	800330c <ssd1306_SetCursor>
		strcpy(text,"Tras");
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4a2c      	ldr	r2, [pc, #176]	; (8001948 <Print_Direcao+0x140>)
 8001896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800189a:	6018      	str	r0, [r3, #0]
 800189c:	3304      	adds	r3, #4
 800189e:	7019      	strb	r1, [r3, #0]
		ssd1306_WriteString(text, Font_7x10, White);
 80018a0:	4a28      	ldr	r2, [pc, #160]	; (8001944 <Print_Direcao+0x13c>)
 80018a2:	1d38      	adds	r0, r7, #4
 80018a4:	2301      	movs	r3, #1
 80018a6:	ca06      	ldmia	r2, {r1, r2}
 80018a8:	f001 fd0a 	bl	80032c0 <ssd1306_WriteString>
		ssd1306_SetCursor(0,15);
		sprintf(text,"nao Frente %d",Walle.Sensor_Frente);
		ssd1306_WriteString(text, Font_7x10, White);
	}*/

	if(Walle.Sensor_Esquerda > SensorEsquerdaAnterior && (Walle.Sensor_Esquerda - SensorEsquerdaAnterior)>VariacaoSensor){
 80018ac:	4b21      	ldr	r3, [pc, #132]	; (8001934 <Print_Direcao+0x12c>)
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <Print_Direcao+0x144>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dd17      	ble.n	80018e8 <Print_Direcao+0xe0>
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <Print_Direcao+0x12c>)
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <Print_Direcao+0x144>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	1ad2      	subs	r2, r2, r3
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <Print_Direcao+0x134>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dd0e      	ble.n	80018e8 <Print_Direcao+0xe0>
		ssd1306_SetCursor(0,30);
 80018ca:	211e      	movs	r1, #30
 80018cc:	2000      	movs	r0, #0
 80018ce:	f001 fd1d 	bl	800330c <ssd1306_SetCursor>
		strcpy(text,"Esquerda");
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <Print_Direcao+0x148>)
 80018d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d8:	c303      	stmia	r3!, {r0, r1}
 80018da:	701a      	strb	r2, [r3, #0]
		ssd1306_WriteString(text, Font_7x10, White);
 80018dc:	4a19      	ldr	r2, [pc, #100]	; (8001944 <Print_Direcao+0x13c>)
 80018de:	1d38      	adds	r0, r7, #4
 80018e0:	2301      	movs	r3, #1
 80018e2:	ca06      	ldmia	r2, {r1, r2}
 80018e4:	f001 fcec 	bl	80032c0 <ssd1306_WriteString>
		ssd1306_SetCursor(0,30);
		strcpy(text,"nao Esquerda");
		ssd1306_WriteString(text, Font_7x10, White);
	}*/

	if(Walle.Sensor_Direita > SensorDireitaAnterior && (Walle.Sensor_Direita - SensorDireitaAnterior)>VariacaoSensor){
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <Print_Direcao+0x12c>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <Print_Direcao+0x14c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dd18      	ble.n	8001926 <Print_Direcao+0x11e>
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <Print_Direcao+0x12c>)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <Print_Direcao+0x14c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	1ad2      	subs	r2, r2, r3
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <Print_Direcao+0x134>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	dd0f      	ble.n	8001926 <Print_Direcao+0x11e>
		ssd1306_SetCursor(0,45);
 8001906:	212d      	movs	r1, #45	; 0x2d
 8001908:	2000      	movs	r0, #0
 800190a:	f001 fcff 	bl	800330c <ssd1306_SetCursor>
		strcpy(text,"Direita");
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <Print_Direcao+0x150>)
 8001912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001916:	e883 0003 	stmia.w	r3, {r0, r1}
		ssd1306_WriteString(text, Font_7x10, White);
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <Print_Direcao+0x13c>)
 800191c:	1d38      	adds	r0, r7, #4
 800191e:	2301      	movs	r3, #1
 8001920:	ca06      	ldmia	r2, {r1, r2}
 8001922:	f001 fccd 	bl	80032c0 <ssd1306_WriteString>
		strcpy(text,"nao Direita");
		ssd1306_WriteString(text, Font_7x10, White);
	}*/


	ssd1306_UpdateScreen();
 8001926:	f001 fbc7 	bl	80030b8 <ssd1306_UpdateScreen>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200003cc 	.word	0x200003cc
 8001938:	200003c0 	.word	0x200003c0
 800193c:	20000000 	.word	0x20000000
 8001940:	0800b674 	.word	0x0800b674
 8001944:	20000028 	.word	0x20000028
 8001948:	0800b67c 	.word	0x0800b67c
 800194c:	200003c4 	.word	0x200003c4
 8001950:	0800b684 	.word	0x0800b684
 8001954:	200003c8 	.word	0x200003c8
 8001958:	0800b690 	.word	0x0800b690

0800195c <Print_Espera>:


void Print_Espera(){
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
	char text[20] = {};
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]

	ssd1306_Fill(Black);
 8001974:	2000      	movs	r0, #0
 8001976:	f001 fb87 	bl	8003088 <ssd1306_Fill>

	ssd1306_SetCursor(0,0);
 800197a:	2100      	movs	r1, #0
 800197c:	2000      	movs	r0, #0
 800197e:	f001 fcc5 	bl	800330c <ssd1306_SetCursor>
	strcpy(text,"Modo de Espera");
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	4a24      	ldr	r2, [pc, #144]	; (8001a18 <Print_Espera+0xbc>)
 8001986:	461c      	mov	r4, r3
 8001988:	4613      	mov	r3, r2
 800198a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800198c:	c407      	stmia	r4!, {r0, r1, r2}
 800198e:	8023      	strh	r3, [r4, #0]
 8001990:	3402      	adds	r4, #2
 8001992:	0c1b      	lsrs	r3, r3, #16
 8001994:	7023      	strb	r3, [r4, #0]
	ssd1306_WriteString(text, Font_7x10, White);
 8001996:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <Print_Espera+0xc0>)
 8001998:	1d38      	adds	r0, r7, #4
 800199a:	2301      	movs	r3, #1
 800199c:	ca06      	ldmia	r2, {r1, r2}
 800199e:	f001 fc8f 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_SetCursor(0,15);
 80019a2:	210f      	movs	r1, #15
 80019a4:	2000      	movs	r0, #0
 80019a6:	f001 fcb1 	bl	800330c <ssd1306_SetCursor>
	strcpy(text,"Clique no botao");
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <Print_Espera+0xc4>)
 80019ae:	461c      	mov	r4, r3
 80019b0:	4613      	mov	r3, r2
 80019b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_WriteString(text, Font_7x10, White);
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <Print_Espera+0xc0>)
 80019ba:	1d38      	adds	r0, r7, #4
 80019bc:	2301      	movs	r3, #1
 80019be:	ca06      	ldmia	r2, {r1, r2}
 80019c0:	f001 fc7e 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_SetCursor(0,30);
 80019c4:	211e      	movs	r1, #30
 80019c6:	2000      	movs	r0, #0
 80019c8:	f001 fca0 	bl	800330c <ssd1306_SetCursor>
	strcpy(text,"'Key' --->");
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <Print_Espera+0xc8>)
 80019d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d2:	c303      	stmia	r3!, {r0, r1}
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	3302      	adds	r3, #2
 80019d8:	0c12      	lsrs	r2, r2, #16
 80019da:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteString(text, Font_7x10, White);
 80019dc:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <Print_Espera+0xc0>)
 80019de:	1d38      	adds	r0, r7, #4
 80019e0:	2301      	movs	r3, #1
 80019e2:	ca06      	ldmia	r2, {r1, r2}
 80019e4:	f001 fc6c 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_SetCursor(0,45);
 80019e8:	212d      	movs	r1, #45	; 0x2d
 80019ea:	2000      	movs	r0, #0
 80019ec:	f001 fc8e 	bl	800330c <ssd1306_SetCursor>
	strcpy(text,"Para comecar");
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <Print_Espera+0xcc>)
 80019f4:	461c      	mov	r4, r3
 80019f6:	4613      	mov	r3, r2
 80019f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019fa:	c407      	stmia	r4!, {r0, r1, r2}
 80019fc:	7023      	strb	r3, [r4, #0]
	ssd1306_WriteString(text, Font_7x10, White);
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <Print_Espera+0xc0>)
 8001a00:	1d38      	adds	r0, r7, #4
 8001a02:	2301      	movs	r3, #1
 8001a04:	ca06      	ldmia	r2, {r1, r2}
 8001a06:	f001 fc5b 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8001a0a:	f001 fb55 	bl	80030b8 <ssd1306_UpdateScreen>
}
 8001a0e:	bf00      	nop
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0800b698 	.word	0x0800b698
 8001a1c:	20000028 	.word	0x20000028
 8001a20:	0800b6a8 	.word	0x0800b6a8
 8001a24:	0800b6b8 	.word	0x0800b6b8
 8001a28:	0800b6c4 	.word	0x0800b6c4

08001a2c <Print_Distance>:

void Print_Distance(){
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0

	char text[20] = {};
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]

	ssd1306_Fill(Black);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f001 fb1f 	bl	8003088 <ssd1306_Fill>

	ssd1306_SetCursor(0,0);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f001 fc5d 	bl	800330c <ssd1306_SetCursor>
	strcpy(text,"Modo Competicao");
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <Print_Distance+0xb4>)
 8001a56:	461c      	mov	r4, r3
 8001a58:	4613      	mov	r3, r2
 8001a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_WriteString(text, Font_6x8, White);
 8001a60:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <Print_Distance+0xb8>)
 8001a62:	1d38      	adds	r0, r7, #4
 8001a64:	2301      	movs	r3, #1
 8001a66:	ca06      	ldmia	r2, {r1, r2}
 8001a68:	f001 fc2a 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 10);
 8001a6c:	210a      	movs	r1, #10
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f001 fc4c 	bl	800330c <ssd1306_SetCursor>
	sprintf(text,"esq: %d", Walle.Sensor_Esquerda);
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <Print_Distance+0xbc>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	491c      	ldr	r1, [pc, #112]	; (8001aec <Print_Distance+0xc0>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f007 fc05 	bl	800928c <siprintf>
	ssd1306_WriteString(text, Font_11x18, White);
 8001a82:	4a1b      	ldr	r2, [pc, #108]	; (8001af0 <Print_Distance+0xc4>)
 8001a84:	1d38      	adds	r0, r7, #4
 8001a86:	2301      	movs	r3, #1
 8001a88:	ca06      	ldmia	r2, {r1, r2}
 8001a8a:	f001 fc19 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 25);
 8001a8e:	2119      	movs	r1, #25
 8001a90:	2000      	movs	r0, #0
 8001a92:	f001 fc3b 	bl	800330c <ssd1306_SetCursor>
	sprintf(text,"Dir: %d", Walle.Sensor_Direita);
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <Print_Distance+0xbc>)
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4915      	ldr	r1, [pc, #84]	; (8001af4 <Print_Distance+0xc8>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f007 fbf4 	bl	800928c <siprintf>
	ssd1306_WriteString(text, Font_11x18, White);
 8001aa4:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <Print_Distance+0xc4>)
 8001aa6:	1d38      	adds	r0, r7, #4
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	ca06      	ldmia	r2, {r1, r2}
 8001aac:	f001 fc08 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 40);
 8001ab0:	2128      	movs	r1, #40	; 0x28
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f001 fc2a 	bl	800330c <ssd1306_SetCursor>
	sprintf(text,"Frt: %d", Walle.Sensor_Frente);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <Print_Distance+0xbc>)
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	490e      	ldr	r1, [pc, #56]	; (8001af8 <Print_Distance+0xcc>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f007 fbe3 	bl	800928c <siprintf>
	ssd1306_WriteString(text, Font_11x18, White);
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <Print_Distance+0xc4>)
 8001ac8:	1d38      	adds	r0, r7, #4
 8001aca:	2301      	movs	r3, #1
 8001acc:	ca06      	ldmia	r2, {r1, r2}
 8001ace:	f001 fbf7 	bl	80032c0 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8001ad2:	f001 faf1 	bl	80030b8 <ssd1306_UpdateScreen>

}
 8001ad6:	bf00      	nop
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	0800b6d4 	.word	0x0800b6d4
 8001ae4:	20000020 	.word	0x20000020
 8001ae8:	200003cc 	.word	0x200003cc
 8001aec:	0800b6e4 	.word	0x0800b6e4
 8001af0:	20000030 	.word	0x20000030
 8001af4:	0800b6ec 	.word	0x0800b6ec
 8001af8:	0800b6f4 	.word	0x0800b6f4

08001afc <LerSensores>:
}



// sensores
void LerSensores(){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
	SensorDireitaAnterior = Walle.Sensor_Direita ;
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <LerSensores+0x194>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	4a63      	ldr	r2, [pc, #396]	; (8001c94 <LerSensores+0x198>)
 8001b08:	6013      	str	r3, [r2, #0]
	SensorEsquerdaAnterior = Walle.Sensor_Esquerda;
 8001b0a:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <LerSensores+0x194>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4a62      	ldr	r2, [pc, #392]	; (8001c98 <LerSensores+0x19c>)
 8001b10:	6013      	str	r3, [r2, #0]
	SensorFrenteAnterior = Walle.Sensor_Frente;
 8001b12:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <LerSensores+0x194>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4a61      	ldr	r2, [pc, #388]	; (8001c9c <LerSensores+0x1a0>)
 8001b18:	6013      	str	r3, [r2, #0]
	Walle.Sensor_Direita = Read_Ultrasonic(SensorDireitoTrigger_GPIO_Port, SensorDireitoTrigger_Pin, SensorDireitoEcho_GPIO_Port, SensorDireitoEcho_Pin);
	Walle.Sensor_Esquerda = Read_Ultrasonic(SensorEsquerdaTrigger_GPIO_Port, SensorEsquerdaTrigger_Pin, SensorEsquerdaEcho_GPIO_Port, SensorEsquerdaEcho_Pin);
	Walle.Sensor_Frente = Read_Ultrasonic(SensorFrenteTrigger_GPIO_Port, SensorFrenteTrigger_Pin, SensorFrenteEcho_GPIO_Port, SensorFrenteEcho_Pin);
	}while(Walle.Sensor_Direita > MaxDistanciaLeituraSensorSonico || Walle.Sensor_Esquerda > MaxDistanciaLeituraSensorSonico || Walle.Sensor_Frente > MaxDistanciaLeituraSensorSonico );
	 */
	for(int i = 0; i<=9;i++){
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e027      	b.n	8001b70 <LerSensores+0x74>
		MediaSensorD[i] = Read_Ultrasonic(SensorDireitoTrigger_GPIO_Port, SensorDireitoTrigger_Pin, SensorDireitoEcho_GPIO_Port, SensorDireitoEcho_Pin);
 8001b20:	2302      	movs	r3, #2
 8001b22:	4a5f      	ldr	r2, [pc, #380]	; (8001ca0 <LerSensores+0x1a4>)
 8001b24:	2104      	movs	r1, #4
 8001b26:	485e      	ldr	r0, [pc, #376]	; (8001ca0 <LerSensores+0x1a4>)
 8001b28:	f000 f8ca 	bl	8001cc0 <Read_Ultrasonic>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4a5c      	ldr	r2, [pc, #368]	; (8001ca4 <LerSensores+0x1a8>)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		MediaSensorE[i] = Read_Ultrasonic(SensorEsquerdaTrigger_GPIO_Port, SensorEsquerdaTrigger_Pin, SensorEsquerdaEcho_GPIO_Port, SensorEsquerdaEcho_Pin);
 8001b38:	2304      	movs	r3, #4
 8001b3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ca8 <LerSensores+0x1ac>)
 8001b3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b40:	4859      	ldr	r0, [pc, #356]	; (8001ca8 <LerSensores+0x1ac>)
 8001b42:	f000 f8bd 	bl	8001cc0 <Read_Ultrasonic>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4a58      	ldr	r2, [pc, #352]	; (8001cac <LerSensores+0x1b0>)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		MediaSensorF[i] = Read_Ultrasonic(SensorFrenteTrigger_GPIO_Port, SensorFrenteTrigger_Pin, SensorFrenteEcho_GPIO_Port, SensorFrenteEcho_Pin);
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <LerSensores+0x1a4>)
 8001b56:	2140      	movs	r1, #64	; 0x40
 8001b58:	4851      	ldr	r0, [pc, #324]	; (8001ca0 <LerSensores+0x1a4>)
 8001b5a:	f000 f8b1 	bl	8001cc0 <Read_Ultrasonic>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4619      	mov	r1, r3
 8001b62:	4a53      	ldr	r2, [pc, #332]	; (8001cb0 <LerSensores+0x1b4>)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i<=9;i++){
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b09      	cmp	r3, #9
 8001b74:	ddd4      	ble.n	8001b20 <LerSensores+0x24>
	}

	for(int i = 0; i<=9;i++){
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	e080      	b.n	8001c7e <LerSensores+0x182>
		if(MediaSensorD[i]>MaxDistanciaLeituraSensorSonico && i>0){
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <LerSensores+0x1a8>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <LerSensores+0x1b8>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d90b      	bls.n	8001ba4 <LerSensores+0xa8>
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	dd08      	ble.n	8001ba4 <LerSensores+0xa8>
			MediaSensorD[i] = MediaSensorD[i-1];
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <LerSensores+0x1a8>)
 8001b98:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b9c:	4a41      	ldr	r2, [pc, #260]	; (8001ca4 <LerSensores+0x1a8>)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		if(MediaSensorE[i]>MaxDistanciaLeituraSensorSonico && i>0){
 8001ba4:	4a41      	ldr	r2, [pc, #260]	; (8001cac <LerSensores+0x1b0>)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bac:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <LerSensores+0x1b8>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d90b      	bls.n	8001bcc <LerSensores+0xd0>
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	dd08      	ble.n	8001bcc <LerSensores+0xd0>
			MediaSensorE[i] = MediaSensorE[i-1];
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	4a3b      	ldr	r2, [pc, #236]	; (8001cac <LerSensores+0x1b0>)
 8001bc0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001bc4:	4a39      	ldr	r2, [pc, #228]	; (8001cac <LerSensores+0x1b0>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		if(MediaSensorF[i]>MaxDistanciaLeituraSensorSonico && i>0){
 8001bcc:	4a38      	ldr	r2, [pc, #224]	; (8001cb0 <LerSensores+0x1b4>)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bd4:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <LerSensores+0x1b8>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d90b      	bls.n	8001bf4 <LerSensores+0xf8>
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	dd08      	ble.n	8001bf4 <LerSensores+0xf8>
			MediaSensorF[i] = MediaSensorF[i-1];
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <LerSensores+0x1b4>)
 8001be8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001bec:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <LerSensores+0x1b4>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		int SomaD = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
		int SomaE = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
		int SomaF = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
		for(int i = 0; i<=9;i++){
 8001c00:	2300      	movs	r3, #0
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	e01a      	b.n	8001c3c <LerSensores+0x140>
			SomaD+=MediaSensorD[i];
 8001c06:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <LerSensores+0x1a8>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
			SomaE+=MediaSensorE[i];
 8001c16:	4a25      	ldr	r2, [pc, #148]	; (8001cac <LerSensores+0x1b0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4413      	add	r3, r2
 8001c24:	60bb      	str	r3, [r7, #8]
			SomaF+=MediaSensorF[i];
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <LerSensores+0x1b4>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	607b      	str	r3, [r7, #4]
		for(int i = 0; i<=9;i++){
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b09      	cmp	r3, #9
 8001c40:	dde1      	ble.n	8001c06 <LerSensores+0x10a>
		}

		Walle.Sensor_Direita = SomaD/10;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <LerSensores+0x1bc>)
 8001c46:	fb82 1203 	smull	r1, r2, r2, r3
 8001c4a:	1092      	asrs	r2, r2, #2
 8001c4c:	17db      	asrs	r3, r3, #31
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <LerSensores+0x194>)
 8001c52:	60d3      	str	r3, [r2, #12]
		Walle.Sensor_Esquerda = SomaE/10;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <LerSensores+0x1bc>)
 8001c58:	fb82 1203 	smull	r1, r2, r2, r3
 8001c5c:	1092      	asrs	r2, r2, #2
 8001c5e:	17db      	asrs	r3, r3, #31
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <LerSensores+0x194>)
 8001c64:	6093      	str	r3, [r2, #8]
		Walle.Sensor_Frente = SomaF/10;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <LerSensores+0x1bc>)
 8001c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6e:	1092      	asrs	r2, r2, #2
 8001c70:	17db      	asrs	r3, r3, #31
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <LerSensores+0x194>)
 8001c76:	6053      	str	r3, [r2, #4]
	for(int i = 0; i<=9;i++){
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b09      	cmp	r3, #9
 8001c82:	f77f af7b 	ble.w	8001b7c <LerSensores+0x80>
	if(Walle.Sensor_Frente > MaxDistanciaLeituraSensorSonico){
			Walle.Sensor_Frente = SensorFrenteAnterior;
		}*/


}
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200003cc 	.word	0x200003cc
 8001c94:	200003c8 	.word	0x200003c8
 8001c98:	200003c4 	.word	0x200003c4
 8001c9c:	200003c0 	.word	0x200003c0
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	2000036c 	.word	0x2000036c
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	20000380 	.word	0x20000380
 8001cb0:	20000394 	.word	0x20000394
 8001cb4:	2000000c 	.word	0x2000000c
 8001cb8:	66666667 	.word	0x66666667
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <Read_Ultrasonic>:

uint16_t Read_Ultrasonic(GPIO_TypeDef* TriggerPort, uint16_t TriggerPin, GPIO_TypeDef* EchoPort, uint16_t EchoPin){
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	460b      	mov	r3, r1
 8001cce:	817b      	strh	r3, [r7, #10]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	813b      	strh	r3, [r7, #8]

	uint32_t pMillis;
	uint32_t Value1 = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
	uint32_t Value2 = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
	uint16_t Distance  = 0;  // cm
 8001cdc:	2300      	movs	r3, #0
 8001cde:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(TriggerPort, TriggerPin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001ce0:	897b      	ldrh	r3, [r7, #10]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f001 fe3e 	bl	8003968 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <Read_Ultrasonic+0xf8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER (&htim3) < 10);  // wait for 10 us
 8001cf4:	bf00      	nop
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <Read_Ultrasonic+0xf8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	d9fa      	bls.n	8001cf6 <Read_Ultrasonic+0x36>
	HAL_GPIO_WritePin(TriggerPort, TriggerPin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001d00:	897b      	ldrh	r3, [r7, #10]
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f001 fe2e 	bl	8003968 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001d0c:	f001 fb7e 	bl	800340c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (EchoPort, EchoPin)) && pMillis + 10 >  HAL_GetTick());
 8001d12:	bf00      	nop
 8001d14:	893b      	ldrh	r3, [r7, #8]
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f001 fe0d 	bl	8003938 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <Read_Ultrasonic+0x74>
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f103 040a 	add.w	r4, r3, #10
 8001d2a:	f001 fb6f 	bl	800340c <HAL_GetTick>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	429c      	cmp	r4, r3
 8001d32:	d8ef      	bhi.n	8001d14 <Read_Ultrasonic+0x54>
	Value1 = __HAL_TIM_GET_COUNTER (&htim3);
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <Read_Ultrasonic+0xf8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	61fb      	str	r3, [r7, #28]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001d3c:	f001 fb66 	bl	800340c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (EchoPort, EchoPin)) && pMillis + 50 > HAL_GetTick());
 8001d42:	bf00      	nop
 8001d44:	893b      	ldrh	r3, [r7, #8]
 8001d46:	4619      	mov	r1, r3
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f001 fdf5 	bl	8003938 <HAL_GPIO_ReadPin>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <Read_Ultrasonic+0xa4>
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001d5a:	f001 fb57 	bl	800340c <HAL_GetTick>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	429c      	cmp	r4, r3
 8001d62:	d8ef      	bhi.n	8001d44 <Read_Ultrasonic+0x84>
	Value2 = __HAL_TIM_GET_COUNTER (&htim3);
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <Read_Ultrasonic+0xf8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	61bb      	str	r3, [r7, #24]

	Distance = (Value2-Value1)* 0.034/2;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fbce 	bl	8000514 <__aeabi_ui2d>
 8001d78:	a30d      	add	r3, pc, #52	; (adr r3, 8001db0 <Read_Ultrasonic+0xf0>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fc43 	bl	8000608 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d92:	f7fe fd63 	bl	800085c <__aeabi_ddiv>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7fe ff0b 	bl	8000bb8 <__aeabi_d2uiz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	82fb      	strh	r3, [r7, #22]

	return Distance;
 8001da6:	8afb      	ldrh	r3, [r7, #22]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3724      	adds	r7, #36	; 0x24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd90      	pop	{r4, r7, pc}
 8001db0:	b020c49c 	.word	0xb020c49c
 8001db4:	3fa16872 	.word	0x3fa16872
 8001db8:	200002cc 	.word	0x200002cc

08001dbc <SetDefaultSpeed>:



// controle velocidade
void SetDefaultSpeed(){
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
	TIM4->CCR1 = MaxPWM_Right;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <SetDefaultSpeed+0x30>)
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <SetDefaultSpeed+0x34>)
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = MaxPWM_Right;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <SetDefaultSpeed+0x30>)
 8001dca:	781a      	ldrb	r2, [r3, #0]
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <SetDefaultSpeed+0x34>)
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = MaxPWM_Left;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <SetDefaultSpeed+0x38>)
 8001dd2:	781a      	ldrb	r2, [r3, #0]
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <SetDefaultSpeed+0x34>)
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = MaxPWM_Left;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SetDefaultSpeed+0x38>)
 8001dda:	781a      	ldrb	r2, [r3, #0]
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SetDefaultSpeed+0x34>)
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000009 	.word	0x20000009
 8001df0:	40000800 	.word	0x40000800
 8001df4:	2000000a 	.word	0x2000000a

08001df8 <RightMotorSpeed>:

void RightMotorSpeed(uint8_t speed){
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
	//MaxPWM = speed;
	if (speed<=1)
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d801      	bhi.n	8001e0c <RightMotorSpeed+0x14>
		speed = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	71fb      	strb	r3, [r7, #7]

	if (speed>100)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <RightMotorSpeed+0x1e>
		speed=100;
 8001e12:	2364      	movs	r3, #100	; 0x64
 8001e14:	71fb      	strb	r3, [r7, #7]

	TIM4->CCR1 = speed-1;
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <RightMotorSpeed+0x3c>)
 8001e1c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = speed-1;
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <RightMotorSpeed+0x3c>)
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40000800 	.word	0x40000800

08001e38 <LeftMotorSpeed>:

void LeftMotorSpeed(uint8_t speed){
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
	//MaxPWM = speed;
	if (speed<=1)
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d801      	bhi.n	8001e4c <LeftMotorSpeed+0x14>
		speed=1;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	71fb      	strb	r3, [r7, #7]

	if (speed>100)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <LeftMotorSpeed+0x1e>
		speed=100;
 8001e52:	2364      	movs	r3, #100	; 0x64
 8001e54:	71fb      	strb	r3, [r7, #7]

	TIM4->CCR3 = speed-1;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	1e5a      	subs	r2, r3, #1
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <LeftMotorSpeed+0x3c>)
 8001e5c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = speed-1;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <LeftMotorSpeed+0x3c>)
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40000800 	.word	0x40000800

08001e78 <RightMotorForward>:


// macros roda direita
void RightMotorForward(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <RightMotorForward+0x18>)
 8001e80:	f003 f800 	bl	8004e84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
 8001e84:	2100      	movs	r1, #0
 8001e86:	4802      	ldr	r0, [pc, #8]	; (8001e90 <RightMotorForward+0x18>)
 8001e88:	f003 f8ac 	bl	8004fe4 <HAL_TIM_PWM_Stop>

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000314 	.word	0x20000314

08001e94 <RightMotorBackward>:

void RightMotorBackward(){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4804      	ldr	r0, [pc, #16]	; (8001eac <RightMotorBackward+0x18>)
 8001e9c:	f002 fff2 	bl	8004e84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);
 8001ea0:	2104      	movs	r1, #4
 8001ea2:	4802      	ldr	r0, [pc, #8]	; (8001eac <RightMotorBackward+0x18>)
 8001ea4:	f003 f89e 	bl	8004fe4 <HAL_TIM_PWM_Stop>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000314 	.word	0x20000314

08001eb0 <RightMotorStop>:

void RightMotorStop(){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <RightMotorStop+0x18>)
 8001eb8:	f003 f894 	bl	8004fe4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <RightMotorStop+0x18>)
 8001ec0:	f003 f890 	bl	8004fe4 <HAL_TIM_PWM_Stop>

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000314 	.word	0x20000314

08001ecc <LeftMotorForward>:


// macros roda direita
void LeftMotorForward(){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <LeftMotorForward+0x18>)
 8001ed4:	f002 ffd6 	bl	8004e84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 8001ed8:	210c      	movs	r1, #12
 8001eda:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <LeftMotorForward+0x18>)
 8001edc:	f003 f882 	bl	8004fe4 <HAL_TIM_PWM_Stop>

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000314 	.word	0x20000314

08001ee8 <LeftMotorBackward>:

void LeftMotorBackward(){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8001eec:	210c      	movs	r1, #12
 8001eee:	4804      	ldr	r0, [pc, #16]	; (8001f00 <LeftMotorBackward+0x18>)
 8001ef0:	f002 ffc8 	bl	8004e84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_3);
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	4802      	ldr	r0, [pc, #8]	; (8001f00 <LeftMotorBackward+0x18>)
 8001ef8:	f003 f874 	bl	8004fe4 <HAL_TIM_PWM_Stop>
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000314 	.word	0x20000314

08001f04 <LeftMotorStop>:

void LeftMotorStop(){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_3);
 8001f08:	2108      	movs	r1, #8
 8001f0a:	4804      	ldr	r0, [pc, #16]	; (8001f1c <LeftMotorStop+0x18>)
 8001f0c:	f003 f86a 	bl	8004fe4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 8001f10:	210c      	movs	r1, #12
 8001f12:	4802      	ldr	r0, [pc, #8]	; (8001f1c <LeftMotorStop+0x18>)
 8001f14:	f003 f866 	bl	8004fe4 <HAL_TIM_PWM_Stop>

}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000314 	.word	0x20000314

08001f20 <Mov_Forward>:



// movimentos
void Mov_Forward(){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	80fb      	strh	r3, [r7, #6]
	RightEncoderCount=0;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <Mov_Forward+0x64>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <Mov_Forward+0x68>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

	Flag_RightMotor_Mov_Forward=true;
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <Mov_Forward+0x6c>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
	Flag_LeftMotor_Mov_Forward=true;
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <Mov_Forward+0x70>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]

	SetDefaultSpeed();
 8001f42:	f7ff ff3b 	bl	8001dbc <SetDefaultSpeed>

	RightMotorForward();
 8001f46:	f7ff ff97 	bl	8001e78 <RightMotorForward>
	LeftMotorForward();
 8001f4a:	f7ff ffbf 	bl	8001ecc <LeftMotorForward>

	while(Flag_RightMotor_Mov_Forward || Flag_LeftMotor_Mov_Forward){
 8001f4e:	e00a      	b.n	8001f66 <Mov_Forward+0x46>
		osDelay(10);
 8001f50:	200a      	movs	r0, #10
 8001f52:	f003 ffd3 	bl	8005efc <osDelay>
		i++;
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	80fb      	strh	r3, [r7, #6]
		if(i>= Timeout)
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <Mov_Forward+0x74>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d208      	bcs.n	8001f78 <Mov_Forward+0x58>
	while(Flag_RightMotor_Mov_Forward || Flag_LeftMotor_Mov_Forward){
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <Mov_Forward+0x6c>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <Mov_Forward+0x30>
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <Mov_Forward+0x70>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ec      	bne.n	8001f50 <Mov_Forward+0x30>
			break;
	}

}
 8001f76:	e000      	b.n	8001f7a <Mov_Forward+0x5a>
			break;
 8001f78:	bf00      	nop
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200003ac 	.word	0x200003ac
 8001f88:	200003a8 	.word	0x200003a8
 8001f8c:	200003b8 	.word	0x200003b8
 8001f90:	200003b9 	.word	0x200003b9
 8001f94:	20000010 	.word	0x20000010

08001f98 <Mov_Backward>:

void Mov_Backward(){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	80fb      	strh	r3, [r7, #6]
	RightEncoderCount=0;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <Mov_Backward+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <Mov_Backward+0x68>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]

	Flag_RightMotor_Mov_Backward = true;
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <Mov_Backward+0x6c>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
	Flag_LeftMotor_Mov_Backward = true;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <Mov_Backward+0x70>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]

	SetDefaultSpeed();
 8001fba:	f7ff feff 	bl	8001dbc <SetDefaultSpeed>

	RightMotorBackward();
 8001fbe:	f7ff ff69 	bl	8001e94 <RightMotorBackward>
	LeftMotorBackward();
 8001fc2:	f7ff ff91 	bl	8001ee8 <LeftMotorBackward>

	while(Flag_LeftMotor_Mov_Backward || Flag_RightMotor_Mov_Backward){
 8001fc6:	e00a      	b.n	8001fde <Mov_Backward+0x46>
		osDelay(10);
 8001fc8:	200a      	movs	r0, #10
 8001fca:	f003 ff97 	bl	8005efc <osDelay>
		i++;
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	80fb      	strh	r3, [r7, #6]
		if(i>= Timeout)
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <Mov_Backward+0x74>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	88fa      	ldrh	r2, [r7, #6]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d208      	bcs.n	8001ff0 <Mov_Backward+0x58>
	while(Flag_LeftMotor_Mov_Backward || Flag_RightMotor_Mov_Backward){
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <Mov_Backward+0x70>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <Mov_Backward+0x30>
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <Mov_Backward+0x6c>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ec      	bne.n	8001fc8 <Mov_Backward+0x30>
			break;
	}
}
 8001fee:	e000      	b.n	8001ff2 <Mov_Backward+0x5a>
			break;
 8001ff0:	bf00      	nop
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200003ac 	.word	0x200003ac
 8002000:	200003a8 	.word	0x200003a8
 8002004:	200003ba 	.word	0x200003ba
 8002008:	200003bb 	.word	0x200003bb
 800200c:	20000010 	.word	0x20000010

08002010 <Mov_RotateRight>:

void Mov_RotateRight(){
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	80fb      	strh	r3, [r7, #6]
	RightEncoderCount=0;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <Mov_RotateRight+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <Mov_RotateRight+0x54>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]

	Flag_LeftMotor_Mov_RotateRight=true;
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <Mov_RotateRight+0x58>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
	SetDefaultSpeed();
 800202c:	f7ff fec6 	bl	8001dbc <SetDefaultSpeed>
	LeftMotorForward();
 8002030:	f7ff ff4c 	bl	8001ecc <LeftMotorForward>

	while(Flag_LeftMotor_Mov_RotateRight){
 8002034:	e00a      	b.n	800204c <Mov_RotateRight+0x3c>
		osDelay(10);
 8002036:	200a      	movs	r0, #10
 8002038:	f003 ff60 	bl	8005efc <osDelay>
		i++;
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	3301      	adds	r3, #1
 8002040:	80fb      	strh	r3, [r7, #6]
		if(i>= Timeout)
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <Mov_RotateRight+0x5c>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	429a      	cmp	r2, r3
 800204a:	d204      	bcs.n	8002056 <Mov_RotateRight+0x46>
	while(Flag_LeftMotor_Mov_RotateRight){
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <Mov_RotateRight+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f0      	bne.n	8002036 <Mov_RotateRight+0x26>
			break;
	}

}
 8002054:	e000      	b.n	8002058 <Mov_RotateRight+0x48>
			break;
 8002056:	bf00      	nop
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200003ac 	.word	0x200003ac
 8002064:	200003a8 	.word	0x200003a8
 8002068:	200003bc 	.word	0x200003bc
 800206c:	20000010 	.word	0x20000010

08002070 <Mov_RotateLeft>:

void Mov_RotateLeft(){
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	80fb      	strh	r3, [r7, #6]
	RightEncoderCount=0;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <Mov_RotateLeft+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
	LeftEncoderCount=0;
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <Mov_RotateLeft+0x54>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

	Flag_RightMotor_Mov_RotateLeft=true;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <Mov_RotateLeft+0x58>)
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
	SetDefaultSpeed();
 800208c:	f7ff fe96 	bl	8001dbc <SetDefaultSpeed>
	RightMotorForward();
 8002090:	f7ff fef2 	bl	8001e78 <RightMotorForward>

	while(Flag_RightMotor_Mov_RotateLeft){
 8002094:	e00a      	b.n	80020ac <Mov_RotateLeft+0x3c>
		osDelay(10);
 8002096:	200a      	movs	r0, #10
 8002098:	f003 ff30 	bl	8005efc <osDelay>
		i++;
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	3301      	adds	r3, #1
 80020a0:	80fb      	strh	r3, [r7, #6]
		if(i>= Timeout)
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <Mov_RotateLeft+0x5c>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	88fa      	ldrh	r2, [r7, #6]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d204      	bcs.n	80020b6 <Mov_RotateLeft+0x46>
	while(Flag_RightMotor_Mov_RotateLeft){
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <Mov_RotateLeft+0x58>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <Mov_RotateLeft+0x26>
			break;
	}
}
 80020b4:	e000      	b.n	80020b8 <Mov_RotateLeft+0x48>
			break;
 80020b6:	bf00      	nop
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200003ac 	.word	0x200003ac
 80020c4:	200003a8 	.word	0x200003a8
 80020c8:	200003bd 	.word	0x200003bd
 80020cc:	20000010 	.word	0x20000010

080020d0 <HAL_GPIO_EXTI_Callback>:



// callback encoder
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_4){
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d109      	bne.n	80020f4 <HAL_GPIO_EXTI_Callback+0x24>
		LeftEncoderCount++;
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_GPIO_EXTI_Callback+0x60>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <HAL_GPIO_EXTI_Callback+0x60>)
 80020e8:	6013      	str	r3, [r2, #0]
		LeftEncoderCountTotal++;
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_GPIO_EXTI_Callback+0x64>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_GPIO_EXTI_Callback+0x64>)
 80020f2:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == GPIO_PIN_3){
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d109      	bne.n	800210e <HAL_GPIO_EXTI_Callback+0x3e>
		RightEncoderCount++;
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_GPIO_EXTI_Callback+0x68>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_GPIO_EXTI_Callback+0x68>)
 8002102:	6013      	str	r3, [r2, #0]
		RightEncoderCountTotal++;
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	4a0c      	ldr	r2, [pc, #48]	; (800213c <HAL_GPIO_EXTI_Callback+0x6c>)
 800210c:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == SensorChao_Pin){
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d106      	bne.n	8002122 <HAL_GPIO_EXTI_Callback+0x52>
		if(Barata != AguardaBotao)
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_GPIO_EXTI_Callback+0x70>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_GPIO_EXTI_Callback+0x52>
			Baratinha=false;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_GPIO_EXTI_Callback+0x74>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
	}

}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	200003a8 	.word	0x200003a8
 8002134:	200003b0 	.word	0x200003b0
 8002138:	200003ac 	.word	0x200003ac
 800213c:	200003b4 	.word	0x200003b4
 8002140:	200003e0 	.word	0x200003e0
 8002144:	20000007 	.word	0x20000007

08002148 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]


		}

		 */
		osDelay(10000);
 8002150:	f242 7010 	movw	r0, #10000	; 0x2710
 8002154:	f003 fed2 	bl	8005efc <osDelay>
 8002158:	e7fa      	b.n	8002150 <StartDefaultTask+0x8>
 800215a:	0000      	movs	r0, r0
 800215c:	0000      	movs	r0, r0
	...

08002160 <StartRightMotor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRightMotor */
void StartRightMotor(void *argument)
{
 8002160:	b5b0      	push	{r4, r5, r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartRightMotor */
	/* Infinite loop */
	for(;;)
	{

		if(Flag_RightMotor_Mov_Forward){
 8002168:	4b9d      	ldr	r3, [pc, #628]	; (80023e0 <StartRightMotor+0x280>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80fb 	beq.w	8002368 <StartRightMotor+0x208>
			if(RightEncoderCount >=Count_Mov_Forward*0 && RightEncoderCount < Count_Mov_Forward*0.1){
 8002172:	4b9c      	ldr	r3, [pc, #624]	; (80023e4 <StartRightMotor+0x284>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	db2f      	blt.n	80021da <StartRightMotor+0x7a>
 800217a:	4b9a      	ldr	r3, [pc, #616]	; (80023e4 <StartRightMotor+0x284>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9d8 	bl	8000534 <__aeabi_i2d>
 8002184:	4604      	mov	r4, r0
 8002186:	460d      	mov	r5, r1
 8002188:	4b97      	ldr	r3, [pc, #604]	; (80023e8 <StartRightMotor+0x288>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f9d1 	bl	8000534 <__aeabi_i2d>
 8002192:	a387      	add	r3, pc, #540	; (adr r3, 80023b0 <StartRightMotor+0x250>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe fa36 	bl	8000608 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4620      	mov	r0, r4
 80021a2:	4629      	mov	r1, r5
 80021a4:	f7fe fca2 	bl	8000aec <__aeabi_dcmplt>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <StartRightMotor+0x7a>
				RightMotorSpeed(MaxPWM_Right*0.8);
 80021ae:	4b8f      	ldr	r3, [pc, #572]	; (80023ec <StartRightMotor+0x28c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9be 	bl	8000534 <__aeabi_i2d>
 80021b8:	a37f      	add	r3, pc, #508	; (adr r3, 80023b8 <StartRightMotor+0x258>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f7fe fa23 	bl	8000608 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fcf5 	bl	8000bb8 <__aeabi_d2uiz>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fe10 	bl	8001df8 <RightMotorSpeed>
 80021d8:	e0c6      	b.n	8002368 <StartRightMotor+0x208>
			}

			else if(RightEncoderCount >=Count_Mov_Forward*0.1 && RightEncoderCount < Count_Mov_Forward*0.2){
 80021da:	4b82      	ldr	r3, [pc, #520]	; (80023e4 <StartRightMotor+0x284>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe f9a8 	bl	8000534 <__aeabi_i2d>
 80021e4:	4604      	mov	r4, r0
 80021e6:	460d      	mov	r5, r1
 80021e8:	4b7f      	ldr	r3, [pc, #508]	; (80023e8 <StartRightMotor+0x288>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f9a1 	bl	8000534 <__aeabi_i2d>
 80021f2:	a36f      	add	r3, pc, #444	; (adr r3, 80023b0 <StartRightMotor+0x250>)
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	f7fe fa06 	bl	8000608 <__aeabi_dmul>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4620      	mov	r0, r4
 8002202:	4629      	mov	r1, r5
 8002204:	f7fe fc86 	bl	8000b14 <__aeabi_dcmpge>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01f      	beq.n	800224e <StartRightMotor+0xee>
 800220e:	4b75      	ldr	r3, [pc, #468]	; (80023e4 <StartRightMotor+0x284>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f98e 	bl	8000534 <__aeabi_i2d>
 8002218:	4604      	mov	r4, r0
 800221a:	460d      	mov	r5, r1
 800221c:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <StartRightMotor+0x288>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f987 	bl	8000534 <__aeabi_i2d>
 8002226:	a366      	add	r3, pc, #408	; (adr r3, 80023c0 <StartRightMotor+0x260>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe f9ec 	bl	8000608 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	f7fe fc58 	bl	8000aec <__aeabi_dcmplt>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <StartRightMotor+0xee>
				RightMotorSpeed(MaxPWM_Right*1);
 8002242:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <StartRightMotor+0x28c>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fdd6 	bl	8001df8 <RightMotorSpeed>
 800224c:	e08c      	b.n	8002368 <StartRightMotor+0x208>
			}



			else if(RightEncoderCount >=Count_Mov_Forward*0.8 && RightEncoderCount < Count_Mov_Forward*0.9){
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <StartRightMotor+0x284>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f96e 	bl	8000534 <__aeabi_i2d>
 8002258:	4604      	mov	r4, r0
 800225a:	460d      	mov	r5, r1
 800225c:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <StartRightMotor+0x288>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f967 	bl	8000534 <__aeabi_i2d>
 8002266:	a354      	add	r3, pc, #336	; (adr r3, 80023b8 <StartRightMotor+0x258>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe f9cc 	bl	8000608 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4620      	mov	r0, r4
 8002276:	4629      	mov	r1, r5
 8002278:	f7fe fc4c 	bl	8000b14 <__aeabi_dcmpge>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d02f      	beq.n	80022e2 <StartRightMotor+0x182>
 8002282:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <StartRightMotor+0x284>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f954 	bl	8000534 <__aeabi_i2d>
 800228c:	4604      	mov	r4, r0
 800228e:	460d      	mov	r5, r1
 8002290:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <StartRightMotor+0x288>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f94d 	bl	8000534 <__aeabi_i2d>
 800229a:	a34b      	add	r3, pc, #300	; (adr r3, 80023c8 <StartRightMotor+0x268>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9b2 	bl	8000608 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4620      	mov	r0, r4
 80022aa:	4629      	mov	r1, r5
 80022ac:	f7fe fc1e 	bl	8000aec <__aeabi_dcmplt>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <StartRightMotor+0x182>
				RightMotorSpeed(MaxPWM_Right*0.85);
 80022b6:	4b4d      	ldr	r3, [pc, #308]	; (80023ec <StartRightMotor+0x28c>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f93a 	bl	8000534 <__aeabi_i2d>
 80022c0:	a343      	add	r3, pc, #268	; (adr r3, 80023d0 <StartRightMotor+0x270>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fe f99f 	bl	8000608 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	f7fe fc71 	bl	8000bb8 <__aeabi_d2uiz>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fd8c 	bl	8001df8 <RightMotorSpeed>
 80022e0:	e042      	b.n	8002368 <StartRightMotor+0x208>
			}

			else if(RightEncoderCount >=Count_Mov_Forward*0.9 && RightEncoderCount < Count_Mov_Forward){
 80022e2:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <StartRightMotor+0x284>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f924 	bl	8000534 <__aeabi_i2d>
 80022ec:	4604      	mov	r4, r0
 80022ee:	460d      	mov	r5, r1
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <StartRightMotor+0x288>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f91d 	bl	8000534 <__aeabi_i2d>
 80022fa:	a333      	add	r3, pc, #204	; (adr r3, 80023c8 <StartRightMotor+0x268>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f982 	bl	8000608 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4620      	mov	r0, r4
 800230a:	4629      	mov	r1, r5
 800230c:	f7fe fc02 	bl	8000b14 <__aeabi_dcmpge>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01c      	beq.n	8002350 <StartRightMotor+0x1f0>
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <StartRightMotor+0x288>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <StartRightMotor+0x284>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	dd15      	ble.n	8002350 <StartRightMotor+0x1f0>
				RightMotorSpeed(MaxPWM_Right*0.7);
 8002324:	4b31      	ldr	r3, [pc, #196]	; (80023ec <StartRightMotor+0x28c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f903 	bl	8000534 <__aeabi_i2d>
 800232e:	a32a      	add	r3, pc, #168	; (adr r3, 80023d8 <StartRightMotor+0x278>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f7fe f968 	bl	8000608 <__aeabi_dmul>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe fc3a 	bl	8000bb8 <__aeabi_d2uiz>
 8002344:	4603      	mov	r3, r0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fd55 	bl	8001df8 <RightMotorSpeed>
 800234e:	e00b      	b.n	8002368 <StartRightMotor+0x208>
			}


			else if(RightEncoderCount >=Count_Mov_Forward){
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <StartRightMotor+0x288>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <StartRightMotor+0x284>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	dc04      	bgt.n	8002368 <StartRightMotor+0x208>
				RightMotorStop();
 800235e:	f7ff fda7 	bl	8001eb0 <RightMotorStop>
				Flag_RightMotor_Mov_Forward=false;
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <StartRightMotor+0x280>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Flag_RightMotor_Mov_RotateLeft){
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <StartRightMotor+0x290>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <StartRightMotor+0x228>
			/*if(RightEncoderCount >=Count_Mov_Forward*0.8 && RightEncoderCount < Count_Mov_Forward){
				RightMotorSpeed(MaxPWM_Right*0.7);
			}*/
			if(RightEncoderCount >= Count_Mov_RotateRight){
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <StartRightMotor+0x294>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <StartRightMotor+0x284>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	dc04      	bgt.n	8002388 <StartRightMotor+0x228>
				RightMotorStop();
 800237e:	f7ff fd97 	bl	8001eb0 <RightMotorStop>
				Flag_RightMotor_Mov_RotateLeft=false;
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <StartRightMotor+0x290>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Flag_RightMotor_Mov_Backward){
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <StartRightMotor+0x298>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <StartRightMotor+0x248>
			if(RightEncoderCount>=Count_Mov_Backward){
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <StartRightMotor+0x29c>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <StartRightMotor+0x284>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	dc04      	bgt.n	80023a8 <StartRightMotor+0x248>
				RightMotorStop();
 800239e:	f7ff fd87 	bl	8001eb0 <RightMotorStop>
				Flag_RightMotor_Mov_Backward = false;
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <StartRightMotor+0x298>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
		}




		osDelay(1);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f003 fda7 	bl	8005efc <osDelay>
		if(Flag_RightMotor_Mov_Forward){
 80023ae:	e6db      	b.n	8002168 <StartRightMotor+0x8>
 80023b0:	9999999a 	.word	0x9999999a
 80023b4:	3fb99999 	.word	0x3fb99999
 80023b8:	9999999a 	.word	0x9999999a
 80023bc:	3fe99999 	.word	0x3fe99999
 80023c0:	9999999a 	.word	0x9999999a
 80023c4:	3fc99999 	.word	0x3fc99999
 80023c8:	cccccccd 	.word	0xcccccccd
 80023cc:	3feccccc 	.word	0x3feccccc
 80023d0:	33333333 	.word	0x33333333
 80023d4:	3feb3333 	.word	0x3feb3333
 80023d8:	66666666 	.word	0x66666666
 80023dc:	3fe66666 	.word	0x3fe66666
 80023e0:	200003b8 	.word	0x200003b8
 80023e4:	200003ac 	.word	0x200003ac
 80023e8:	20000004 	.word	0x20000004
 80023ec:	20000009 	.word	0x20000009
 80023f0:	200003bd 	.word	0x200003bd
 80023f4:	20000006 	.word	0x20000006
 80023f8:	200003ba 	.word	0x200003ba
 80023fc:	20000005 	.word	0x20000005

08002400 <StartLeftMotor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLeftMotor */
void StartLeftMotor(void *argument)
{
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLeftMotor */
	/* Infinite loop */
	for(;;)
	{
		if(Flag_LeftMotor_Mov_Forward){
 8002408:	4b9d      	ldr	r3, [pc, #628]	; (8002680 <StartLeftMotor+0x280>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80fb 	beq.w	8002608 <StartLeftMotor+0x208>

			if(LeftEncoderCount >= Count_Mov_Forward*0 && LeftEncoderCount < Count_Mov_Forward*0.1){
 8002412:	4b9c      	ldr	r3, [pc, #624]	; (8002684 <StartLeftMotor+0x284>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db2f      	blt.n	800247a <StartLeftMotor+0x7a>
 800241a:	4b9a      	ldr	r3, [pc, #616]	; (8002684 <StartLeftMotor+0x284>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f888 	bl	8000534 <__aeabi_i2d>
 8002424:	4604      	mov	r4, r0
 8002426:	460d      	mov	r5, r1
 8002428:	4b97      	ldr	r3, [pc, #604]	; (8002688 <StartLeftMotor+0x288>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f881 	bl	8000534 <__aeabi_i2d>
 8002432:	a387      	add	r3, pc, #540	; (adr r3, 8002650 <StartLeftMotor+0x250>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f7fe f8e6 	bl	8000608 <__aeabi_dmul>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4620      	mov	r0, r4
 8002442:	4629      	mov	r1, r5
 8002444:	f7fe fb52 	bl	8000aec <__aeabi_dcmplt>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d015      	beq.n	800247a <StartLeftMotor+0x7a>
				LeftMotorSpeed(MaxPWM_Left*0.8);
 800244e:	4b8f      	ldr	r3, [pc, #572]	; (800268c <StartLeftMotor+0x28c>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f86e 	bl	8000534 <__aeabi_i2d>
 8002458:	a37f      	add	r3, pc, #508	; (adr r3, 8002658 <StartLeftMotor+0x258>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f8d3 	bl	8000608 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f7fe fba5 	bl	8000bb8 <__aeabi_d2uiz>
 800246e:	4603      	mov	r3, r0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fce0 	bl	8001e38 <LeftMotorSpeed>
 8002478:	e0c6      	b.n	8002608 <StartLeftMotor+0x208>
			}

			else if(LeftEncoderCount >= Count_Mov_Forward*0.1 && LeftEncoderCount < Count_Mov_Forward*0.2){
 800247a:	4b82      	ldr	r3, [pc, #520]	; (8002684 <StartLeftMotor+0x284>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f858 	bl	8000534 <__aeabi_i2d>
 8002484:	4604      	mov	r4, r0
 8002486:	460d      	mov	r5, r1
 8002488:	4b7f      	ldr	r3, [pc, #508]	; (8002688 <StartLeftMotor+0x288>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f851 	bl	8000534 <__aeabi_i2d>
 8002492:	a36f      	add	r3, pc, #444	; (adr r3, 8002650 <StartLeftMotor+0x250>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f8b6 	bl	8000608 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fe fb36 	bl	8000b14 <__aeabi_dcmpge>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01f      	beq.n	80024ee <StartLeftMotor+0xee>
 80024ae:	4b75      	ldr	r3, [pc, #468]	; (8002684 <StartLeftMotor+0x284>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe f83e 	bl	8000534 <__aeabi_i2d>
 80024b8:	4604      	mov	r4, r0
 80024ba:	460d      	mov	r5, r1
 80024bc:	4b72      	ldr	r3, [pc, #456]	; (8002688 <StartLeftMotor+0x288>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f837 	bl	8000534 <__aeabi_i2d>
 80024c6:	a366      	add	r3, pc, #408	; (adr r3, 8002660 <StartLeftMotor+0x260>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f7fe f89c 	bl	8000608 <__aeabi_dmul>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4620      	mov	r0, r4
 80024d6:	4629      	mov	r1, r5
 80024d8:	f7fe fb08 	bl	8000aec <__aeabi_dcmplt>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <StartLeftMotor+0xee>
				LeftMotorSpeed(MaxPWM_Left*1);
 80024e2:	4b6a      	ldr	r3, [pc, #424]	; (800268c <StartLeftMotor+0x28c>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fca6 	bl	8001e38 <LeftMotorSpeed>
 80024ec:	e08c      	b.n	8002608 <StartLeftMotor+0x208>
			}


			else if(LeftEncoderCount >= Count_Mov_Forward*0.8 && LeftEncoderCount < Count_Mov_Forward*0.9){
 80024ee:	4b65      	ldr	r3, [pc, #404]	; (8002684 <StartLeftMotor+0x284>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f81e 	bl	8000534 <__aeabi_i2d>
 80024f8:	4604      	mov	r4, r0
 80024fa:	460d      	mov	r5, r1
 80024fc:	4b62      	ldr	r3, [pc, #392]	; (8002688 <StartLeftMotor+0x288>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f817 	bl	8000534 <__aeabi_i2d>
 8002506:	a354      	add	r3, pc, #336	; (adr r3, 8002658 <StartLeftMotor+0x258>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	f7fe f87c 	bl	8000608 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4620      	mov	r0, r4
 8002516:	4629      	mov	r1, r5
 8002518:	f7fe fafc 	bl	8000b14 <__aeabi_dcmpge>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d02f      	beq.n	8002582 <StartLeftMotor+0x182>
 8002522:	4b58      	ldr	r3, [pc, #352]	; (8002684 <StartLeftMotor+0x284>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f804 	bl	8000534 <__aeabi_i2d>
 800252c:	4604      	mov	r4, r0
 800252e:	460d      	mov	r5, r1
 8002530:	4b55      	ldr	r3, [pc, #340]	; (8002688 <StartLeftMotor+0x288>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd fffd 	bl	8000534 <__aeabi_i2d>
 800253a:	a34b      	add	r3, pc, #300	; (adr r3, 8002668 <StartLeftMotor+0x268>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe f862 	bl	8000608 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7fe face 	bl	8000aec <__aeabi_dcmplt>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <StartLeftMotor+0x182>
				LeftMotorSpeed(MaxPWM_Left*0.85);
 8002556:	4b4d      	ldr	r3, [pc, #308]	; (800268c <StartLeftMotor+0x28c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd ffea 	bl	8000534 <__aeabi_i2d>
 8002560:	a343      	add	r3, pc, #268	; (adr r3, 8002670 <StartLeftMotor+0x270>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f7fe f84f 	bl	8000608 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb21 	bl	8000bb8 <__aeabi_d2uiz>
 8002576:	4603      	mov	r3, r0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fc5c 	bl	8001e38 <LeftMotorSpeed>
 8002580:	e042      	b.n	8002608 <StartLeftMotor+0x208>
			}

			else if(LeftEncoderCount >= Count_Mov_Forward*0.9 && LeftEncoderCount < Count_Mov_Forward){
 8002582:	4b40      	ldr	r3, [pc, #256]	; (8002684 <StartLeftMotor+0x284>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ffd4 	bl	8000534 <__aeabi_i2d>
 800258c:	4604      	mov	r4, r0
 800258e:	460d      	mov	r5, r1
 8002590:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <StartLeftMotor+0x288>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ffcd 	bl	8000534 <__aeabi_i2d>
 800259a:	a333      	add	r3, pc, #204	; (adr r3, 8002668 <StartLeftMotor+0x268>)
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	f7fe f832 	bl	8000608 <__aeabi_dmul>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4620      	mov	r0, r4
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7fe fab2 	bl	8000b14 <__aeabi_dcmpge>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01c      	beq.n	80025f0 <StartLeftMotor+0x1f0>
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <StartLeftMotor+0x288>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b31      	ldr	r3, [pc, #196]	; (8002684 <StartLeftMotor+0x284>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	dd15      	ble.n	80025f0 <StartLeftMotor+0x1f0>
				LeftMotorSpeed(MaxPWM_Left*0.7);
 80025c4:	4b31      	ldr	r3, [pc, #196]	; (800268c <StartLeftMotor+0x28c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd ffb3 	bl	8000534 <__aeabi_i2d>
 80025ce:	a32a      	add	r3, pc, #168	; (adr r3, 8002678 <StartLeftMotor+0x278>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fe f818 	bl	8000608 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f7fe faea 	bl	8000bb8 <__aeabi_d2uiz>
 80025e4:	4603      	mov	r3, r0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fc25 	bl	8001e38 <LeftMotorSpeed>
 80025ee:	e00b      	b.n	8002608 <StartLeftMotor+0x208>
			}



			else if(LeftEncoderCount >= Count_Mov_Forward){
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <StartLeftMotor+0x288>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <StartLeftMotor+0x284>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	dc04      	bgt.n	8002608 <StartLeftMotor+0x208>
				LeftMotorStop();
 80025fe:	f7ff fc81 	bl	8001f04 <LeftMotorStop>
				Flag_LeftMotor_Mov_Forward=false;
 8002602:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <StartLeftMotor+0x280>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
			}
		}

		if(Flag_LeftMotor_Mov_RotateRight)
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <StartLeftMotor+0x290>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <StartLeftMotor+0x228>
		{
			/*if(LeftEncoderCount >= Count_Mov_RotateRight*0.8 && LeftEncoderCount < Count_Mov_RotateRight){
				LeftMotorSpeed(MaxPWM_Left*0.7);
			}*/
			if(LeftEncoderCount >= Count_Mov_RotateRight){
 8002610:	4b20      	ldr	r3, [pc, #128]	; (8002694 <StartLeftMotor+0x294>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <StartLeftMotor+0x284>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	dc04      	bgt.n	8002628 <StartLeftMotor+0x228>
				LeftMotorStop();
 800261e:	f7ff fc71 	bl	8001f04 <LeftMotorStop>
				Flag_LeftMotor_Mov_RotateRight=false;
 8002622:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <StartLeftMotor+0x290>)
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
			}
		}


		if(Flag_LeftMotor_Mov_Backward){
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <StartLeftMotor+0x298>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00b      	beq.n	8002648 <StartLeftMotor+0x248>
			if(LeftEncoderCount >= Count_Mov_Backward){
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <StartLeftMotor+0x29c>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <StartLeftMotor+0x284>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	dc04      	bgt.n	8002648 <StartLeftMotor+0x248>
				LeftMotorStop();
 800263e:	f7ff fc61 	bl	8001f04 <LeftMotorStop>
				Flag_LeftMotor_Mov_Backward = false;
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <StartLeftMotor+0x298>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
			}
		}
		osDelay(1);
 8002648:	2001      	movs	r0, #1
 800264a:	f003 fc57 	bl	8005efc <osDelay>
		if(Flag_LeftMotor_Mov_Forward){
 800264e:	e6db      	b.n	8002408 <StartLeftMotor+0x8>
 8002650:	9999999a 	.word	0x9999999a
 8002654:	3fb99999 	.word	0x3fb99999
 8002658:	9999999a 	.word	0x9999999a
 800265c:	3fe99999 	.word	0x3fe99999
 8002660:	9999999a 	.word	0x9999999a
 8002664:	3fc99999 	.word	0x3fc99999
 8002668:	cccccccd 	.word	0xcccccccd
 800266c:	3feccccc 	.word	0x3feccccc
 8002670:	33333333 	.word	0x33333333
 8002674:	3feb3333 	.word	0x3feb3333
 8002678:	66666666 	.word	0x66666666
 800267c:	3fe66666 	.word	0x3fe66666
 8002680:	200003b9 	.word	0x200003b9
 8002684:	200003a8 	.word	0x200003a8
 8002688:	20000004 	.word	0x20000004
 800268c:	2000000a 	.word	0x2000000a
 8002690:	200003bc 	.word	0x200003bc
 8002694:	20000006 	.word	0x20000006
 8002698:	200003bb 	.word	0x200003bb
 800269c:	20000005 	.word	0x20000005

080026a0 <StartStateMachine>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateMachine */
void StartStateMachine(void *argument)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartStateMachine */
	/* Infinite loop */
	Print_Espera();
 80026a8:	f7ff f958 	bl	800195c <Print_Espera>
	for(;;)
	{

		// modo barata tonta
		if(Baratinha){
 80026ac:	4b94      	ldr	r3, [pc, #592]	; (8002900 <StartStateMachine+0x260>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80aa 	beq.w	800280a <StartStateMachine+0x16a>
			switch (Barata) {
 80026b6:	4b93      	ldr	r3, [pc, #588]	; (8002904 <StartStateMachine+0x264>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	f200 8119 	bhi.w	80028f2 <StartStateMachine+0x252>
 80026c0:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <StartStateMachine+0x28>)
 80026c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c6:	bf00      	nop
 80026c8:	080026dd 	.word	0x080026dd
 80026cc:	080027e7 	.word	0x080027e7
 80026d0:	080026f9 	.word	0x080026f9
 80026d4:	080027f3 	.word	0x080027f3
 80026d8:	080027ff 	.word	0x080027ff

			case AguardaBotao:
				if(!HAL_GPIO_ReadPin(Key_GPIO_Port, Key_Pin)){
 80026dc:	2101      	movs	r1, #1
 80026de:	488a      	ldr	r0, [pc, #552]	; (8002908 <StartStateMachine+0x268>)
 80026e0:	f001 f92a 	bl	8003938 <HAL_GPIO_ReadPin>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 8105 	bne.w	80028f6 <StartStateMachine+0x256>
					Buzzer5seg();
 80026ec:	f7fe ff8c 	bl	8001608 <Buzzer5seg>
					Barata = LeSensor;
 80026f0:	4b84      	ldr	r3, [pc, #528]	; (8002904 <StartStateMachine+0x264>)
 80026f2:	2202      	movs	r2, #2
 80026f4:	701a      	strb	r2, [r3, #0]
				}

				break;
 80026f6:	e0fe      	b.n	80028f6 <StartStateMachine+0x256>

			case LeSensor:
				LerSensores();
 80026f8:	f7ff fa00 	bl	8001afc <LerSensores>
				if(!HAL_GPIO_ReadPin(Key_GPIO_Port, Key_Pin)){
 80026fc:	2101      	movs	r1, #1
 80026fe:	4882      	ldr	r0, [pc, #520]	; (8002908 <StartStateMachine+0x268>)
 8002700:	f001 f91a 	bl	8003938 <HAL_GPIO_ReadPin>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <StartStateMachine+0x80>

					if(Flag_EncoderOrDistance){
 800270a:	4b80      	ldr	r3, [pc, #512]	; (800290c <StartStateMachine+0x26c>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <StartStateMachine+0x7a>
						Flag_EncoderOrDistance = false;}
 8002712:	4b7e      	ldr	r3, [pc, #504]	; (800290c <StartStateMachine+0x26c>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e002      	b.n	8002720 <StartStateMachine+0x80>
					else{
						Flag_EncoderOrDistance = true;}
 800271a:	4b7c      	ldr	r3, [pc, #496]	; (800290c <StartStateMachine+0x26c>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
				}
				if(Flag_EncoderOrDistance){
 8002720:	4b7a      	ldr	r3, [pc, #488]	; (800290c <StartStateMachine+0x26c>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <StartStateMachine+0x8e>
					Print_Distance();
 8002728:	f7ff f980 	bl	8001a2c <Print_Distance>
 800272c:	e001      	b.n	8002732 <StartStateMachine+0x92>
				}
				else{
					Print_Direcao();}
 800272e:	f7ff f86b 	bl	8001808 <Print_Direcao>

				HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8002732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002736:	4876      	ldr	r0, [pc, #472]	; (8002910 <StartStateMachine+0x270>)
 8002738:	f001 f92f 	bl	800399a <HAL_GPIO_TogglePin>
				if (Walle.Sensor_Frente < 8 || Walle.Sensor_Direita < 8 || Walle.Sensor_Esquerda < 8){
 800273c:	4b75      	ldr	r3, [pc, #468]	; (8002914 <StartStateMachine+0x274>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b07      	cmp	r3, #7
 8002742:	dd07      	ble.n	8002754 <StartStateMachine+0xb4>
 8002744:	4b73      	ldr	r3, [pc, #460]	; (8002914 <StartStateMachine+0x274>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b07      	cmp	r3, #7
 800274a:	dd03      	ble.n	8002754 <StartStateMachine+0xb4>
 800274c:	4b71      	ldr	r3, [pc, #452]	; (8002914 <StartStateMachine+0x274>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b07      	cmp	r3, #7
 8002752:	dc0e      	bgt.n	8002772 <StartStateMachine+0xd2>
					Mov_Backward(); //se a contagem de ticks do sistema for par, vira para direita, se não para a esquerda
 8002754:	f7ff fc20 	bl	8001f98 <Mov_Backward>
					if(HAL_GetTick()%2 == 0) Mov_RotateRight();
 8002758:	f000 fe58 	bl	800340c <HAL_GetTick>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <StartStateMachine+0xcc>
 8002766:	f7ff fc53 	bl	8002010 <Mov_RotateRight>
 800276a:	e03b      	b.n	80027e4 <StartStateMachine+0x144>
					else Mov_RotateLeft();
 800276c:	f7ff fc80 	bl	8002070 <Mov_RotateLeft>
					if(HAL_GetTick()%2 == 0) Mov_RotateRight();
 8002770:	e038      	b.n	80027e4 <StartStateMachine+0x144>
				}
				else if(Walle.Sensor_Frente > DistanciaMinima && Walle.Sensor_Direita > DistanciaMinima && Walle.Sensor_Esquerda > DistanciaMinima){
 8002772:	4b68      	ldr	r3, [pc, #416]	; (8002914 <StartStateMachine+0x274>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a68      	ldr	r2, [pc, #416]	; (8002918 <StartStateMachine+0x278>)
 8002778:	8812      	ldrh	r2, [r2, #0]
 800277a:	4293      	cmp	r3, r2
 800277c:	dd0f      	ble.n	800279e <StartStateMachine+0xfe>
 800277e:	4b65      	ldr	r3, [pc, #404]	; (8002914 <StartStateMachine+0x274>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4a65      	ldr	r2, [pc, #404]	; (8002918 <StartStateMachine+0x278>)
 8002784:	8812      	ldrh	r2, [r2, #0]
 8002786:	4293      	cmp	r3, r2
 8002788:	dd09      	ble.n	800279e <StartStateMachine+0xfe>
 800278a:	4b62      	ldr	r3, [pc, #392]	; (8002914 <StartStateMachine+0x274>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4a62      	ldr	r2, [pc, #392]	; (8002918 <StartStateMachine+0x278>)
 8002790:	8812      	ldrh	r2, [r2, #0]
 8002792:	4293      	cmp	r3, r2
 8002794:	dd03      	ble.n	800279e <StartStateMachine+0xfe>
					Barata = Frente;
 8002796:	4b5b      	ldr	r3, [pc, #364]	; (8002904 <StartStateMachine+0x264>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e022      	b.n	80027e4 <StartStateMachine+0x144>
				}
				else if(Walle.Sensor_Direita > DistanciaMinima){
 800279e:	4b5d      	ldr	r3, [pc, #372]	; (8002914 <StartStateMachine+0x274>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4a5d      	ldr	r2, [pc, #372]	; (8002918 <StartStateMachine+0x278>)
 80027a4:	8812      	ldrh	r2, [r2, #0]
 80027a6:	4293      	cmp	r3, r2
 80027a8:	dd03      	ble.n	80027b2 <StartStateMachine+0x112>
					Barata = ViraDireita;
 80027aa:	4b56      	ldr	r3, [pc, #344]	; (8002904 <StartStateMachine+0x264>)
 80027ac:	2203      	movs	r2, #3
 80027ae:	701a      	strb	r2, [r3, #0]
					Mov_Backward(); //se a contagem de ticks do sistema for par, vira para direita, se não para a esquerda
					if(HAL_GetTick()%2 == 0) Mov_RotateRight();
					else Mov_RotateLeft();
				}

				break;
 80027b0:	e0a2      	b.n	80028f8 <StartStateMachine+0x258>
				else if(Walle.Sensor_Esquerda > DistanciaMinima){
 80027b2:	4b58      	ldr	r3, [pc, #352]	; (8002914 <StartStateMachine+0x274>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a58      	ldr	r2, [pc, #352]	; (8002918 <StartStateMachine+0x278>)
 80027b8:	8812      	ldrh	r2, [r2, #0]
 80027ba:	4293      	cmp	r3, r2
 80027bc:	dd03      	ble.n	80027c6 <StartStateMachine+0x126>
					Barata = ViraEsquerda;
 80027be:	4b51      	ldr	r3, [pc, #324]	; (8002904 <StartStateMachine+0x264>)
 80027c0:	2204      	movs	r2, #4
 80027c2:	701a      	strb	r2, [r3, #0]
				break;
 80027c4:	e098      	b.n	80028f8 <StartStateMachine+0x258>
					Mov_Backward(); //se a contagem de ticks do sistema for par, vira para direita, se não para a esquerda
 80027c6:	f7ff fbe7 	bl	8001f98 <Mov_Backward>
					if(HAL_GetTick()%2 == 0) Mov_RotateRight();
 80027ca:	f000 fe1f 	bl	800340c <HAL_GetTick>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <StartStateMachine+0x13e>
 80027d8:	f7ff fc1a 	bl	8002010 <Mov_RotateRight>
				break;
 80027dc:	e08c      	b.n	80028f8 <StartStateMachine+0x258>
					else Mov_RotateLeft();
 80027de:	f7ff fc47 	bl	8002070 <Mov_RotateLeft>
				break;
 80027e2:	e089      	b.n	80028f8 <StartStateMachine+0x258>
 80027e4:	e088      	b.n	80028f8 <StartStateMachine+0x258>

			case Frente:
				Mov_Forward();
 80027e6:	f7ff fb9b 	bl	8001f20 <Mov_Forward>
				Barata = LeSensor;
 80027ea:	4b46      	ldr	r3, [pc, #280]	; (8002904 <StartStateMachine+0x264>)
 80027ec:	2202      	movs	r2, #2
 80027ee:	701a      	strb	r2, [r3, #0]

				break;
 80027f0:	e082      	b.n	80028f8 <StartStateMachine+0x258>

			case ViraDireita:
				Mov_RotateRight();
 80027f2:	f7ff fc0d 	bl	8002010 <Mov_RotateRight>
				Barata = LeSensor;
 80027f6:	4b43      	ldr	r3, [pc, #268]	; (8002904 <StartStateMachine+0x264>)
 80027f8:	2202      	movs	r2, #2
 80027fa:	701a      	strb	r2, [r3, #0]


				break;
 80027fc:	e07c      	b.n	80028f8 <StartStateMachine+0x258>

			case ViraEsquerda:
				Mov_RotateLeft();
 80027fe:	f7ff fc37 	bl	8002070 <Mov_RotateLeft>
				Barata = LeSensor;
 8002802:	4b40      	ldr	r3, [pc, #256]	; (8002904 <StartStateMachine+0x264>)
 8002804:	2202      	movs	r2, #2
 8002806:	701a      	strb	r2, [r3, #0]

				break;
 8002808:	e076      	b.n	80028f8 <StartStateMachine+0x258>
		}

		// Achou
		else{

			if(!achou){
 800280a:	4b44      	ldr	r3, [pc, #272]	; (800291c <StartStateMachine+0x27c>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d05d      	beq.n	80028d4 <StartStateMachine+0x234>
				Print_Ajustando();
 8002818:	f7fe ff6c 	bl	80016f4 <Print_Ajustando>
				if(HAL_GPIO_ReadPin(SensorChaoTras_GPIO_Port, SensorChaoTras_Pin) && HAL_GPIO_ReadPin(SensorChao_GPIO_Port, SensorChao_Pin) ){
 800281c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002820:	4839      	ldr	r0, [pc, #228]	; (8002908 <StartStateMachine+0x268>)
 8002822:	f001 f889 	bl	8003938 <HAL_GPIO_ReadPin>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <StartStateMachine+0x1a2>
 800282c:	2101      	movs	r1, #1
 800282e:	483c      	ldr	r0, [pc, #240]	; (8002920 <StartStateMachine+0x280>)
 8002830:	f001 f882 	bl	8003938 <HAL_GPIO_ReadPin>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <StartStateMachine+0x1a2>
					achou = true;
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <StartStateMachine+0x27c>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e05a      	b.n	80028f8 <StartStateMachine+0x258>
				}
				else if(HAL_GPIO_ReadPin(SensorChaoTras_GPIO_Port, SensorChaoTras_Pin) && !HAL_GPIO_ReadPin(SensorChao_GPIO_Port, SensorChao_Pin)){
 8002842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002846:	4830      	ldr	r0, [pc, #192]	; (8002908 <StartStateMachine+0x268>)
 8002848:	f001 f876 	bl	8003938 <HAL_GPIO_ReadPin>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <StartStateMachine+0x1c6>
 8002852:	2101      	movs	r1, #1
 8002854:	4832      	ldr	r0, [pc, #200]	; (8002920 <StartStateMachine+0x280>)
 8002856:	f001 f86f 	bl	8003938 <HAL_GPIO_ReadPin>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <StartStateMachine+0x1c6>
					Mov_Backward();
 8002860:	f7ff fb9a 	bl	8001f98 <Mov_Backward>
 8002864:	e048      	b.n	80028f8 <StartStateMachine+0x258>
				}
				else if(!HAL_GPIO_ReadPin(SensorChaoTras_GPIO_Port, SensorChaoTras_Pin) && HAL_GPIO_ReadPin(SensorChao_GPIO_Port, SensorChao_Pin)){
 8002866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800286a:	4827      	ldr	r0, [pc, #156]	; (8002908 <StartStateMachine+0x268>)
 800286c:	f001 f864 	bl	8003938 <HAL_GPIO_ReadPin>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <StartStateMachine+0x1ea>
 8002876:	2101      	movs	r1, #1
 8002878:	4829      	ldr	r0, [pc, #164]	; (8002920 <StartStateMachine+0x280>)
 800287a:	f001 f85d 	bl	8003938 <HAL_GPIO_ReadPin>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <StartStateMachine+0x1ea>
					Mov_RotateRight();
 8002884:	f7ff fbc4 	bl	8002010 <Mov_RotateRight>
 8002888:	e036      	b.n	80028f8 <StartStateMachine+0x258>
				}
				else if(!HAL_GPIO_ReadPin(SensorChaoTras_GPIO_Port, SensorChaoTras_Pin) && !HAL_GPIO_ReadPin(SensorChao_GPIO_Port, SensorChao_Pin)){
 800288a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800288e:	481e      	ldr	r0, [pc, #120]	; (8002908 <StartStateMachine+0x268>)
 8002890:	f001 f852 	bl	8003938 <HAL_GPIO_ReadPin>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d12e      	bne.n	80028f8 <StartStateMachine+0x258>
 800289a:	2101      	movs	r1, #1
 800289c:	4820      	ldr	r0, [pc, #128]	; (8002920 <StartStateMachine+0x280>)
 800289e:	f001 f84b 	bl	8003938 <HAL_GPIO_ReadPin>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d127      	bne.n	80028f8 <StartStateMachine+0x258>
					Mov_RotateRight();
 80028a8:	f7ff fbb2 	bl	8002010 <Mov_RotateRight>
					osDelay(100);
 80028ac:	2064      	movs	r0, #100	; 0x64
 80028ae:	f003 fb25 	bl	8005efc <osDelay>
					ContadorRotateRigt--;
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <StartStateMachine+0x284>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <StartStateMachine+0x284>)
 80028bc:	801a      	strh	r2, [r3, #0]
					if(ContadorRotateRigt<=0){
 80028be:	4b19      	ldr	r3, [pc, #100]	; (8002924 <StartStateMachine+0x284>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d118      	bne.n	80028f8 <StartStateMachine+0x258>
						ContadorRotateRigt=5;
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <StartStateMachine+0x284>)
 80028c8:	2205      	movs	r2, #5
 80028ca:	801a      	strh	r2, [r3, #0]
						Baratinha=true;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <StartStateMachine+0x260>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e011      	b.n	80028f8 <StartStateMachine+0x258>



			}
			else{
				Print_Achou();
 80028d4:	f7fe ff4e 	bl	8001774 <Print_Achou>
				BuzzerTocaMusica();
 80028d8:	f7fe fed6 	bl	8001688 <BuzzerTocaMusica>
				BuzzerTocaMusica();
 80028dc:	f7fe fed4 	bl	8001688 <BuzzerTocaMusica>
				osDelay(1000);
 80028e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028e4:	f003 fb0a 	bl	8005efc <osDelay>
				osDelay(1000);
 80028e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ec:	f003 fb06 	bl	8005efc <osDelay>
 80028f0:	e002      	b.n	80028f8 <StartStateMachine+0x258>
				break;
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <StartStateMachine+0x258>
				break;
 80028f6:	bf00      	nop
			}


		}

		osDelay(1);
 80028f8:	2001      	movs	r0, #1
 80028fa:	f003 faff 	bl	8005efc <osDelay>
		if(Baratinha){
 80028fe:	e6d5      	b.n	80026ac <StartStateMachine+0xc>
 8002900:	20000007 	.word	0x20000007
 8002904:	200003e0 	.word	0x200003e0
 8002908:	40020000 	.word	0x40020000
 800290c:	20000008 	.word	0x20000008
 8002910:	40020800 	.word	0x40020800
 8002914:	200003cc 	.word	0x200003cc
 8002918:	2000000e 	.word	0x2000000e
 800291c:	200003be 	.word	0x200003be
 8002920:	40020400 	.word	0x40020400
 8002924:	20000012 	.word	0x20000012

08002928 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800293a:	f000 fd53 	bl	80033e4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40010000 	.word	0x40010000

0800294c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002950:	b672      	cpsid	i
}
 8002952:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1){ };
 8002954:	e7fe      	b.n	8002954 <Error_Handler+0x8>
	...

08002958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_MspInit+0x54>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	4a11      	ldr	r2, [pc, #68]	; (80029ac <HAL_MspInit+0x54>)
 8002968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800296c:	6453      	str	r3, [r2, #68]	; 0x44
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <HAL_MspInit+0x54>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_MspInit+0x54>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <HAL_MspInit+0x54>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_MspInit+0x54>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	210f      	movs	r1, #15
 800299a:	f06f 0001 	mvn.w	r0, #1
 800299e:	f000 fe1d 	bl	80035dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800

080029b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a28      	ldr	r2, [pc, #160]	; (8002a70 <HAL_I2C_MspInit+0xc0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d14a      	bne.n	8002a68 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_I2C_MspInit+0xc4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <HAL_I2C_MspInit+0xc4>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <HAL_I2C_MspInit+0xc4>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_I2C_MspInit+0xc4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <HAL_I2C_MspInit+0xc4>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_I2C_MspInit+0xc4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a10:	2312      	movs	r3, #18
 8002a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4814      	ldr	r0, [pc, #80]	; (8002a78 <HAL_I2C_MspInit+0xc8>)
 8002a28:	f000 fe02 	bl	8003630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a30:	2312      	movs	r3, #18
 8002a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002a3c:	2309      	movs	r3, #9
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4619      	mov	r1, r3
 8002a46:	480d      	ldr	r0, [pc, #52]	; (8002a7c <HAL_I2C_MspInit+0xcc>)
 8002a48:	f000 fdf2 	bl	8003630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_I2C_MspInit+0xc4>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_I2C_MspInit+0xc4>)
 8002a56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_I2C_MspInit+0xc4>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a68:	bf00      	nop
 8002a6a:	3728      	adds	r7, #40	; 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40005c00 	.word	0x40005c00
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020400 	.word	0x40020400

08002a80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a90:	d10e      	bne.n	8002ab0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <HAL_TIM_PWM_MspInit+0x64>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_TIM_PWM_MspInit+0x64>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_TIM_PWM_MspInit+0x64>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002aae:	e012      	b.n	8002ad6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <HAL_TIM_PWM_MspInit+0x68>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_TIM_PWM_MspInit+0x64>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a08      	ldr	r2, [pc, #32]	; (8002ae4 <HAL_TIM_PWM_MspInit+0x64>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_TIM_PWM_MspInit+0x64>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40000800 	.word	0x40000800

08002aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <HAL_TIM_Base_MspInit+0x3c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10d      	bne.n	8002b1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_TIM_Base_MspInit+0x40>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <HAL_TIM_Base_MspInit+0x40>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_TIM_Base_MspInit+0x40>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40023800 	.word	0x40023800

08002b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d11e      	bne.n	8002b90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_TIM_MspPostInit+0xb0>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4a21      	ldr	r2, [pc, #132]	; (8002be0 <HAL_TIM_MspPostInit+0xb0>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <HAL_TIM_MspPostInit+0xb0>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4619      	mov	r1, r3
 8002b88:	4816      	ldr	r0, [pc, #88]	; (8002be4 <HAL_TIM_MspPostInit+0xb4>)
 8002b8a:	f000 fd51 	bl	8003630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b8e:	e023      	b.n	8002bd8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <HAL_TIM_MspPostInit+0xb8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d11e      	bne.n	8002bd8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_TIM_MspPostInit+0xb0>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_TIM_MspPostInit+0xb0>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_TIM_MspPostInit+0xb0>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 8002bb6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4806      	ldr	r0, [pc, #24]	; (8002bec <HAL_TIM_MspPostInit+0xbc>)
 8002bd4:	f000 fd2c 	bl	8003630 <HAL_GPIO_Init>
}
 8002bd8:	bf00      	nop
 8002bda:	3728      	adds	r7, #40	; 0x28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020000 	.word	0x40020000
 8002be8:	40000800 	.word	0x40000800
 8002bec:	40020400 	.word	0x40020400

08002bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08c      	sub	sp, #48	; 0x30
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <HAL_InitTick+0xd0>)
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <HAL_InitTick+0xd0>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c10:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_InitTick+0xd0>)
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c1c:	f107 020c 	add.w	r2, r7, #12
 8002c20:	f107 0310 	add.w	r3, r7, #16
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 ff9e 	bl	8004b68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c2c:	f001 ff88 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8002c30:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	4a23      	ldr	r2, [pc, #140]	; (8002cc4 <HAL_InitTick+0xd4>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9b      	lsrs	r3, r3, #18
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <HAL_InitTick+0xd8>)
 8002c42:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <HAL_InitTick+0xdc>)
 8002c44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_InitTick+0xd8>)
 8002c48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_InitTick+0xd8>)
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c54:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_InitTick+0xd8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_InitTick+0xd8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_InitTick+0xd8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002c66:	4818      	ldr	r0, [pc, #96]	; (8002cc8 <HAL_InitTick+0xd8>)
 8002c68:	f001 ffb0 	bl	8004bcc <HAL_TIM_Base_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d11b      	bne.n	8002cb2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002c7a:	4813      	ldr	r0, [pc, #76]	; (8002cc8 <HAL_InitTick+0xd8>)
 8002c7c:	f002 f850 	bl	8004d20 <HAL_TIM_Base_Start_IT>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d111      	bne.n	8002cb2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c8e:	2019      	movs	r0, #25
 8002c90:	f000 fcc0 	bl	8003614 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b0f      	cmp	r3, #15
 8002c98:	d808      	bhi.n	8002cac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	2019      	movs	r0, #25
 8002ca0:	f000 fc9c 	bl	80035dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_InitTick+0xe0>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e002      	b.n	8002cb2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3730      	adds	r7, #48	; 0x30
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	431bde83 	.word	0x431bde83
 8002cc8:	200003e4 	.word	0x200003e4
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	20000040 	.word	0x20000040

08002cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <NMI_Handler+0x4>

08002cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cde:	e7fe      	b.n	8002cde <HardFault_Handler+0x4>

08002ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <MemManage_Handler+0x4>

08002ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <BusFault_Handler+0x4>

08002cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <UsageFault_Handler+0x4>

08002cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SensorChao_Pin);
 8002d04:	2001      	movs	r0, #1
 8002d06:	f000 fe63 	bl	80039d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Direito_Pin);
 8002d12:	2008      	movs	r0, #8
 8002d14:	f000 fe5c 	bl	80039d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Esquerdo_Pin);
 8002d20:	2010      	movs	r0, #16
 8002d22:	f000 fe55 	bl	80039d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d32:	f002 f9bb 	bl	80050ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200003e4 	.word	0x200003e4

08002d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return 1;
 8002d44:	2301      	movs	r3, #1
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <_kill>:

int _kill(int pid, int sig)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d5a:	f006 fbbd 	bl	80094d8 <__errno>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2216      	movs	r2, #22
 8002d62:	601a      	str	r2, [r3, #0]
  return -1;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <_exit>:

void _exit (int status)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ffe7 	bl	8002d50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d82:	e7fe      	b.n	8002d82 <_exit+0x12>

08002d84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e00a      	b.n	8002dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d96:	f3af 8000 	nop.w
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	60ba      	str	r2, [r7, #8]
 8002da2:	b2ca      	uxtb	r2, r1
 8002da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	dbf0      	blt.n	8002d96 <_read+0x12>
  }

  return len;
 8002db4:	687b      	ldr	r3, [r7, #4]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e009      	b.n	8002de4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	60ba      	str	r2, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	3301      	adds	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	dbf1      	blt.n	8002dd0 <_write+0x12>
  }
  return len;
 8002dec:	687b      	ldr	r3, [r7, #4]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <_close>:

int _close(int file)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e1e:	605a      	str	r2, [r3, #4]
  return 0;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_isatty>:

int _isatty(int file)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e36:	2301      	movs	r3, #1
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e68:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <_sbrk+0x5c>)
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <_sbrk+0x60>)
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <_sbrk+0x64>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <_sbrk+0x64>)
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <_sbrk+0x68>)
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <_sbrk+0x64>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d207      	bcs.n	8002ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e90:	f006 fb22 	bl	80094d8 <__errno>
 8002e94:	4603      	mov	r3, r0
 8002e96:	220c      	movs	r2, #12
 8002e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9e:	e009      	b.n	8002eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <_sbrk+0x64>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <_sbrk+0x64>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	4a05      	ldr	r2, [pc, #20]	; (8002ec4 <_sbrk+0x64>)
 8002eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20010000 	.word	0x20010000
 8002ec0:	00000400 	.word	0x00000400
 8002ec4:	2000042c 	.word	0x2000042c
 8002ec8:	20005370 	.word	0x20005370

08002ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <SystemInit+0x20>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <SystemInit+0x20>)
 8002ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <Reset_Handler>:
 8002ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f28 <LoopFillZerobss+0x12>
 8002ef4:	480d      	ldr	r0, [pc, #52]	; (8002f2c <LoopFillZerobss+0x16>)
 8002ef6:	490e      	ldr	r1, [pc, #56]	; (8002f30 <LoopFillZerobss+0x1a>)
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <LoopFillZerobss+0x1e>)
 8002efa:	2300      	movs	r3, #0
 8002efc:	e002      	b.n	8002f04 <LoopCopyDataInit>

08002efe <CopyDataInit>:
 8002efe:	58d4      	ldr	r4, [r2, r3]
 8002f00:	50c4      	str	r4, [r0, r3]
 8002f02:	3304      	adds	r3, #4

08002f04 <LoopCopyDataInit>:
 8002f04:	18c4      	adds	r4, r0, r3
 8002f06:	428c      	cmp	r4, r1
 8002f08:	d3f9      	bcc.n	8002efe <CopyDataInit>
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <LoopFillZerobss+0x22>)
 8002f0c:	4c0b      	ldr	r4, [pc, #44]	; (8002f3c <LoopFillZerobss+0x26>)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e001      	b.n	8002f16 <LoopFillZerobss>

08002f12 <FillZerobss>:
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	3204      	adds	r2, #4

08002f16 <LoopFillZerobss>:
 8002f16:	42a2      	cmp	r2, r4
 8002f18:	d3fb      	bcc.n	8002f12 <FillZerobss>
 8002f1a:	f7ff ffd7 	bl	8002ecc <SystemInit>
 8002f1e:	f006 fae1 	bl	80094e4 <__libc_init_array>
 8002f22:	f7fd ffe7 	bl	8000ef4 <main>
 8002f26:	4770      	bx	lr
 8002f28:	20010000 	.word	0x20010000
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20000214 	.word	0x20000214
 8002f34:	0800e964 	.word	0x0800e964
 8002f38:	20000214 	.word	0x20000214
 8002f3c:	20005370 	.word	0x20005370

08002f40 <ADC_IRQHandler>:
 8002f40:	e7fe      	b.n	8002f40 <ADC_IRQHandler>

08002f42 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af04      	add	r7, sp, #16
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	9302      	str	r3, [sp, #8]
 8002f60:	2301      	movs	r3, #1
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	1dfb      	adds	r3, r7, #7
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2178      	movs	r1, #120	; 0x78
 8002f6e:	4803      	ldr	r0, [pc, #12]	; (8002f7c <ssd1306_WriteCommand+0x2c>)
 8002f70:	f000 fe8a 	bl	8003c88 <HAL_I2C_Mem_Write>
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000230 	.word	0x20000230

08002f80 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af04      	add	r7, sp, #16
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f92:	9202      	str	r2, [sp, #8]
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	2178      	movs	r1, #120	; 0x78
 8002fa0:	4803      	ldr	r0, [pc, #12]	; (8002fb0 <ssd1306_WriteData+0x30>)
 8002fa2:	f000 fe71 	bl	8003c88 <HAL_I2C_Mem_Write>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000230 	.word	0x20000230

08002fb4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002fb8:	f7ff ffc3 	bl	8002f42 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002fbc:	2064      	movs	r0, #100	; 0x64
 8002fbe:	f000 fa31 	bl	8003424 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f000 f9ce 	bl	8003364 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002fc8:	2020      	movs	r0, #32
 8002fca:	f7ff ffc1 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7ff ffbe 	bl	8002f50 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002fd4:	20b0      	movs	r0, #176	; 0xb0
 8002fd6:	f7ff ffbb 	bl	8002f50 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002fda:	20c8      	movs	r0, #200	; 0xc8
 8002fdc:	f7ff ffb8 	bl	8002f50 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7ff ffb5 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002fe6:	2010      	movs	r0, #16
 8002fe8:	f7ff ffb2 	bl	8002f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002fec:	2040      	movs	r0, #64	; 0x40
 8002fee:	f7ff ffaf 	bl	8002f50 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002ff2:	20ff      	movs	r0, #255	; 0xff
 8002ff4:	f000 f9a2 	bl	800333c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002ff8:	20a1      	movs	r0, #161	; 0xa1
 8002ffa:	f7ff ffa9 	bl	8002f50 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002ffe:	20a6      	movs	r0, #166	; 0xa6
 8003000:	f7ff ffa6 	bl	8002f50 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003004:	20a8      	movs	r0, #168	; 0xa8
 8003006:	f7ff ffa3 	bl	8002f50 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800300a:	203f      	movs	r0, #63	; 0x3f
 800300c:	f7ff ffa0 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003010:	20a4      	movs	r0, #164	; 0xa4
 8003012:	f7ff ff9d 	bl	8002f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003016:	20d3      	movs	r0, #211	; 0xd3
 8003018:	f7ff ff9a 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800301c:	2000      	movs	r0, #0
 800301e:	f7ff ff97 	bl	8002f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003022:	20d5      	movs	r0, #213	; 0xd5
 8003024:	f7ff ff94 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003028:	20f0      	movs	r0, #240	; 0xf0
 800302a:	f7ff ff91 	bl	8002f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800302e:	20d9      	movs	r0, #217	; 0xd9
 8003030:	f7ff ff8e 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003034:	2022      	movs	r0, #34	; 0x22
 8003036:	f7ff ff8b 	bl	8002f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800303a:	20da      	movs	r0, #218	; 0xda
 800303c:	f7ff ff88 	bl	8002f50 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003040:	2012      	movs	r0, #18
 8003042:	f7ff ff85 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003046:	20db      	movs	r0, #219	; 0xdb
 8003048:	f7ff ff82 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800304c:	2020      	movs	r0, #32
 800304e:	f7ff ff7f 	bl	8002f50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003052:	208d      	movs	r0, #141	; 0x8d
 8003054:	f7ff ff7c 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003058:	2014      	movs	r0, #20
 800305a:	f7ff ff79 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800305e:	2001      	movs	r0, #1
 8003060:	f000 f980 	bl	8003364 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003064:	2000      	movs	r0, #0
 8003066:	f000 f80f 	bl	8003088 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800306a:	f000 f825 	bl	80030b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <ssd1306_Init+0xd0>)
 8003070:	2200      	movs	r2, #0
 8003072:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <ssd1306_Init+0xd0>)
 8003076:	2200      	movs	r2, #0
 8003078:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800307a:	4b02      	ldr	r3, [pc, #8]	; (8003084 <ssd1306_Init+0xd0>)
 800307c:	2201      	movs	r2, #1
 800307e:	711a      	strb	r2, [r3, #4]
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000830 	.word	0x20000830

08003088 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <ssd1306_Fill+0x14>
 8003098:	2300      	movs	r3, #0
 800309a:	e000      	b.n	800309e <ssd1306_Fill+0x16>
 800309c:	23ff      	movs	r3, #255	; 0xff
 800309e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a2:	4619      	mov	r1, r3
 80030a4:	4803      	ldr	r0, [pc, #12]	; (80030b4 <ssd1306_Fill+0x2c>)
 80030a6:	f006 f96e 	bl	8009386 <memset>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000430 	.word	0x20000430

080030b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80030be:	2300      	movs	r3, #0
 80030c0:	71fb      	strb	r3, [r7, #7]
 80030c2:	e016      	b.n	80030f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	3b50      	subs	r3, #80	; 0x50
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff40 	bl	8002f50 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7ff ff3d 	bl	8002f50 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80030d6:	2010      	movs	r0, #16
 80030d8:	f7ff ff3a 	bl	8002f50 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	01db      	lsls	r3, r3, #7
 80030e0:	4a08      	ldr	r2, [pc, #32]	; (8003104 <ssd1306_UpdateScreen+0x4c>)
 80030e2:	4413      	add	r3, r2
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff ff4a 	bl	8002f80 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	3301      	adds	r3, #1
 80030f0:	71fb      	strb	r3, [r7, #7]
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b07      	cmp	r3, #7
 80030f6:	d9e5      	bls.n	80030c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000430 	.word	0x20000430

08003108 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
 8003112:	460b      	mov	r3, r1
 8003114:	71bb      	strb	r3, [r7, #6]
 8003116:	4613      	mov	r3, r2
 8003118:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db3d      	blt.n	800319e <ssd1306_DrawPixel+0x96>
 8003122:	79bb      	ldrb	r3, [r7, #6]
 8003124:	2b3f      	cmp	r3, #63	; 0x3f
 8003126:	d83a      	bhi.n	800319e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003128:	797b      	ldrb	r3, [r7, #5]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d11a      	bne.n	8003164 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800312e:	79fa      	ldrb	r2, [r7, #7]
 8003130:	79bb      	ldrb	r3, [r7, #6]
 8003132:	08db      	lsrs	r3, r3, #3
 8003134:	b2d8      	uxtb	r0, r3
 8003136:	4603      	mov	r3, r0
 8003138:	01db      	lsls	r3, r3, #7
 800313a:	4413      	add	r3, r2
 800313c:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <ssd1306_DrawPixel+0xa4>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	b25a      	sxtb	r2, r3
 8003142:	79bb      	ldrb	r3, [r7, #6]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	b25b      	sxtb	r3, r3
 8003150:	4313      	orrs	r3, r2
 8003152:	b259      	sxtb	r1, r3
 8003154:	79fa      	ldrb	r2, [r7, #7]
 8003156:	4603      	mov	r3, r0
 8003158:	01db      	lsls	r3, r3, #7
 800315a:	4413      	add	r3, r2
 800315c:	b2c9      	uxtb	r1, r1
 800315e:	4a13      	ldr	r2, [pc, #76]	; (80031ac <ssd1306_DrawPixel+0xa4>)
 8003160:	54d1      	strb	r1, [r2, r3]
 8003162:	e01d      	b.n	80031a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003164:	79fa      	ldrb	r2, [r7, #7]
 8003166:	79bb      	ldrb	r3, [r7, #6]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	4603      	mov	r3, r0
 800316e:	01db      	lsls	r3, r3, #7
 8003170:	4413      	add	r3, r2
 8003172:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <ssd1306_DrawPixel+0xa4>)
 8003174:	5cd3      	ldrb	r3, [r2, r3]
 8003176:	b25a      	sxtb	r2, r3
 8003178:	79bb      	ldrb	r3, [r7, #6]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	b25b      	sxtb	r3, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	b25b      	sxtb	r3, r3
 800318a:	4013      	ands	r3, r2
 800318c:	b259      	sxtb	r1, r3
 800318e:	79fa      	ldrb	r2, [r7, #7]
 8003190:	4603      	mov	r3, r0
 8003192:	01db      	lsls	r3, r3, #7
 8003194:	4413      	add	r3, r2
 8003196:	b2c9      	uxtb	r1, r1
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <ssd1306_DrawPixel+0xa4>)
 800319a:	54d1      	strb	r1, [r2, r3]
 800319c:	e000      	b.n	80031a0 <ssd1306_DrawPixel+0x98>
        return;
 800319e:	bf00      	nop
    }
}
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	20000430 	.word	0x20000430

080031b0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4604      	mov	r4, r0
 80031b8:	1d38      	adds	r0, r7, #4
 80031ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80031be:	461a      	mov	r2, r3
 80031c0:	4623      	mov	r3, r4
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	4613      	mov	r3, r2
 80031c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b1f      	cmp	r3, #31
 80031cc:	d902      	bls.n	80031d4 <ssd1306_WriteChar+0x24>
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b7e      	cmp	r3, #126	; 0x7e
 80031d2:	d901      	bls.n	80031d8 <ssd1306_WriteChar+0x28>
        return 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e06d      	b.n	80032b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80031d8:	4b38      	ldr	r3, [pc, #224]	; (80032bc <ssd1306_WriteChar+0x10c>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	793b      	ldrb	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	2b80      	cmp	r3, #128	; 0x80
 80031e4:	dc06      	bgt.n	80031f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80031e6:	4b35      	ldr	r3, [pc, #212]	; (80032bc <ssd1306_WriteChar+0x10c>)
 80031e8:	885b      	ldrh	r3, [r3, #2]
 80031ea:	461a      	mov	r2, r3
 80031ec:	797b      	ldrb	r3, [r7, #5]
 80031ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	dd01      	ble.n	80031f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e05d      	b.n	80032b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	e04c      	b.n	8003298 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	3b20      	subs	r3, #32
 8003204:	7979      	ldrb	r1, [r7, #5]
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4619      	mov	r1, r3
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	440b      	add	r3, r1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	e034      	b.n	8003288 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d012      	beq.n	8003254 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <ssd1306_WriteChar+0x10c>)
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4413      	add	r3, r2
 800323a:	b2d8      	uxtb	r0, r3
 800323c:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <ssd1306_WriteChar+0x10c>)
 800323e:	885b      	ldrh	r3, [r3, #2]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	4413      	add	r3, r2
 8003248:	b2db      	uxtb	r3, r3
 800324a:	7bba      	ldrb	r2, [r7, #14]
 800324c:	4619      	mov	r1, r3
 800324e:	f7ff ff5b 	bl	8003108 <ssd1306_DrawPixel>
 8003252:	e016      	b.n	8003282 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003254:	4b19      	ldr	r3, [pc, #100]	; (80032bc <ssd1306_WriteChar+0x10c>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	4413      	add	r3, r2
 8003260:	b2d8      	uxtb	r0, r3
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <ssd1306_WriteChar+0x10c>)
 8003264:	885b      	ldrh	r3, [r3, #2]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4413      	add	r3, r2
 800326e:	b2d9      	uxtb	r1, r3
 8003270:	7bbb      	ldrb	r3, [r7, #14]
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	f7ff ff43 	bl	8003108 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	3301      	adds	r3, #1
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	793b      	ldrb	r3, [r7, #4]
 800328a:	461a      	mov	r2, r3
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4293      	cmp	r3, r2
 8003290:	d3c5      	bcc.n	800321e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	797b      	ldrb	r3, [r7, #5]
 800329a:	461a      	mov	r2, r3
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4293      	cmp	r3, r2
 80032a0:	d3ad      	bcc.n	80031fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <ssd1306_WriteChar+0x10c>)
 80032a4:	881a      	ldrh	r2, [r3, #0]
 80032a6:	793b      	ldrb	r3, [r7, #4]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	4b03      	ldr	r3, [pc, #12]	; (80032bc <ssd1306_WriteChar+0x10c>)
 80032b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3724      	adds	r7, #36	; 0x24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd90      	pop	{r4, r7, pc}
 80032bc:	20000830 	.word	0x20000830

080032c0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	1d38      	adds	r0, r7, #4
 80032ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80032ce:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80032d0:	e012      	b.n	80032f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	7818      	ldrb	r0, [r3, #0]
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	1d3a      	adds	r2, r7, #4
 80032da:	ca06      	ldmia	r2, {r1, r2}
 80032dc:	f7ff ff68 	bl	80031b0 <ssd1306_WriteChar>
 80032e0:	4603      	mov	r3, r0
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d002      	beq.n	80032f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	e008      	b.n	8003304 <ssd1306_WriteString+0x44>
        }
        str++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3301      	adds	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e8      	bne.n	80032d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	781b      	ldrb	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	460a      	mov	r2, r1
 8003316:	71fb      	strb	r3, [r7, #7]
 8003318:	4613      	mov	r3, r2
 800331a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	b29a      	uxth	r2, r3
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <ssd1306_SetCursor+0x2c>)
 8003322:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003324:	79bb      	ldrb	r3, [r7, #6]
 8003326:	b29a      	uxth	r2, r3
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <ssd1306_SetCursor+0x2c>)
 800332a:	805a      	strh	r2, [r3, #2]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	20000830 	.word	0x20000830

0800333c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003346:	2381      	movs	r3, #129	; 0x81
 8003348:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fdff 	bl	8002f50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fdfb 	bl	8002f50 <ssd1306_WriteCommand>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003374:	23af      	movs	r3, #175	; 0xaf
 8003376:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <ssd1306_SetDisplayOn+0x38>)
 800337a:	2201      	movs	r2, #1
 800337c:	715a      	strb	r2, [r3, #5]
 800337e:	e004      	b.n	800338a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003380:	23ae      	movs	r3, #174	; 0xae
 8003382:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <ssd1306_SetDisplayOn+0x38>)
 8003386:	2200      	movs	r2, #0
 8003388:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fddf 	bl	8002f50 <ssd1306_WriteCommand>
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000830 	.word	0x20000830

080033a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_Init+0x40>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <HAL_Init+0x40>)
 80033aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_Init+0x40>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <HAL_Init+0x40>)
 80033b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_Init+0x40>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a07      	ldr	r2, [pc, #28]	; (80033e0 <HAL_Init+0x40>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c8:	2003      	movs	r0, #3
 80033ca:	f000 f8fc 	bl	80035c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ce:	2005      	movs	r0, #5
 80033d0:	f7ff fc0e 	bl	8002bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033d4:	f7ff fac0 	bl	8002958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023c00 	.word	0x40023c00

080033e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_IncTick+0x20>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_IncTick+0x24>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <HAL_IncTick+0x24>)
 80033f6:	6013      	str	r3, [r2, #0]
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000044 	.word	0x20000044
 8003408:	20000838 	.word	0x20000838

0800340c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return uwTick;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_GetTick+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000838 	.word	0x20000838

08003424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff ffee 	bl	800340c <HAL_GetTick>
 8003430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d005      	beq.n	800344a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_Delay+0x44>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800344a:	bf00      	nop
 800344c:	f7ff ffde 	bl	800340c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	429a      	cmp	r2, r3
 800345a:	d8f7      	bhi.n	800344c <HAL_Delay+0x28>
  {
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000044 	.word	0x20000044

0800346c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003488:	4013      	ands	r3, r2
 800348a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800349e:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	60d3      	str	r3, [r2, #12]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <__NVIC_GetPriorityGrouping+0x18>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	f003 0307 	and.w	r3, r3, #7
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db0b      	blt.n	80034fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	4907      	ldr	r1, [pc, #28]	; (8003508 <__NVIC_EnableIRQ+0x38>)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2001      	movs	r0, #1
 80034f2:	fa00 f202 	lsl.w	r2, r0, r2
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000e100 	.word	0xe000e100

0800350c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	6039      	str	r1, [r7, #0]
 8003516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	2b00      	cmp	r3, #0
 800351e:	db0a      	blt.n	8003536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	490c      	ldr	r1, [pc, #48]	; (8003558 <__NVIC_SetPriority+0x4c>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	0112      	lsls	r2, r2, #4
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	440b      	add	r3, r1
 8003530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003534:	e00a      	b.n	800354c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4908      	ldr	r1, [pc, #32]	; (800355c <__NVIC_SetPriority+0x50>)
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	3b04      	subs	r3, #4
 8003544:	0112      	lsls	r2, r2, #4
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	440b      	add	r3, r1
 800354a:	761a      	strb	r2, [r3, #24]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000e100 	.word	0xe000e100
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f1c3 0307 	rsb	r3, r3, #7
 800357a:	2b04      	cmp	r3, #4
 800357c:	bf28      	it	cs
 800357e:	2304      	movcs	r3, #4
 8003580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3304      	adds	r3, #4
 8003586:	2b06      	cmp	r3, #6
 8003588:	d902      	bls.n	8003590 <NVIC_EncodePriority+0x30>
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3b03      	subs	r3, #3
 800358e:	e000      	b.n	8003592 <NVIC_EncodePriority+0x32>
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003594:	f04f 32ff 	mov.w	r2, #4294967295
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	401a      	ands	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	43d9      	mvns	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	4313      	orrs	r3, r2
         );
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3724      	adds	r7, #36	; 0x24
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff ff4c 	bl	800346c <__NVIC_SetPriorityGrouping>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ee:	f7ff ff61 	bl	80034b4 <__NVIC_GetPriorityGrouping>
 80035f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	6978      	ldr	r0, [r7, #20]
 80035fa:	f7ff ffb1 	bl	8003560 <NVIC_EncodePriority>
 80035fe:	4602      	mov	r2, r0
 8003600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff80 	bl	800350c <__NVIC_SetPriority>
}
 800360c:	bf00      	nop
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff54 	bl	80034d0 <__NVIC_EnableIRQ>
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e159      	b.n	8003900 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800364c:	2201      	movs	r2, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	429a      	cmp	r2, r3
 8003666:	f040 8148 	bne.w	80038fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d005      	beq.n	8003682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800367e:	2b02      	cmp	r3, #2
 8003680:	d130      	bne.n	80036e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	2203      	movs	r2, #3
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b8:	2201      	movs	r2, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 0201 	and.w	r2, r3, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d017      	beq.n	8003720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d123      	bne.n	8003774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	08da      	lsrs	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3208      	adds	r2, #8
 8003734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	220f      	movs	r2, #15
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	08da      	lsrs	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3208      	adds	r2, #8
 800376e:	69b9      	ldr	r1, [r7, #24]
 8003770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0203 	and.w	r2, r3, #3
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a2 	beq.w	80038fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b57      	ldr	r3, [pc, #348]	; (8003918 <HAL_GPIO_Init+0x2e8>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	4a56      	ldr	r2, [pc, #344]	; (8003918 <HAL_GPIO_Init+0x2e8>)
 80037c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c4:	6453      	str	r3, [r2, #68]	; 0x44
 80037c6:	4b54      	ldr	r3, [pc, #336]	; (8003918 <HAL_GPIO_Init+0x2e8>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037d2:	4a52      	ldr	r2, [pc, #328]	; (800391c <HAL_GPIO_Init+0x2ec>)
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	3302      	adds	r3, #2
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	220f      	movs	r2, #15
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a49      	ldr	r2, [pc, #292]	; (8003920 <HAL_GPIO_Init+0x2f0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d019      	beq.n	8003832 <HAL_GPIO_Init+0x202>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a48      	ldr	r2, [pc, #288]	; (8003924 <HAL_GPIO_Init+0x2f4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_GPIO_Init+0x1fe>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a47      	ldr	r2, [pc, #284]	; (8003928 <HAL_GPIO_Init+0x2f8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00d      	beq.n	800382a <HAL_GPIO_Init+0x1fa>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a46      	ldr	r2, [pc, #280]	; (800392c <HAL_GPIO_Init+0x2fc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <HAL_GPIO_Init+0x1f6>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a45      	ldr	r2, [pc, #276]	; (8003930 <HAL_GPIO_Init+0x300>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_GPIO_Init+0x1f2>
 800381e:	2304      	movs	r3, #4
 8003820:	e008      	b.n	8003834 <HAL_GPIO_Init+0x204>
 8003822:	2307      	movs	r3, #7
 8003824:	e006      	b.n	8003834 <HAL_GPIO_Init+0x204>
 8003826:	2303      	movs	r3, #3
 8003828:	e004      	b.n	8003834 <HAL_GPIO_Init+0x204>
 800382a:	2302      	movs	r3, #2
 800382c:	e002      	b.n	8003834 <HAL_GPIO_Init+0x204>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_GPIO_Init+0x204>
 8003832:	2300      	movs	r3, #0
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	f002 0203 	and.w	r2, r2, #3
 800383a:	0092      	lsls	r2, r2, #2
 800383c:	4093      	lsls	r3, r2
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003844:	4935      	ldr	r1, [pc, #212]	; (800391c <HAL_GPIO_Init+0x2ec>)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3302      	adds	r3, #2
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003852:	4b38      	ldr	r3, [pc, #224]	; (8003934 <HAL_GPIO_Init+0x304>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	43db      	mvns	r3, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4013      	ands	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003876:	4a2f      	ldr	r2, [pc, #188]	; (8003934 <HAL_GPIO_Init+0x304>)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <HAL_GPIO_Init+0x304>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038a0:	4a24      	ldr	r2, [pc, #144]	; (8003934 <HAL_GPIO_Init+0x304>)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <HAL_GPIO_Init+0x304>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ca:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <HAL_GPIO_Init+0x304>)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <HAL_GPIO_Init+0x304>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038f4:	4a0f      	ldr	r2, [pc, #60]	; (8003934 <HAL_GPIO_Init+0x304>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3301      	adds	r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b0f      	cmp	r3, #15
 8003904:	f67f aea2 	bls.w	800364c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3724      	adds	r7, #36	; 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	40013800 	.word	0x40013800
 8003920:	40020000 	.word	0x40020000
 8003924:	40020400 	.word	0x40020400
 8003928:	40020800 	.word	0x40020800
 800392c:	40020c00 	.word	0x40020c00
 8003930:	40021000 	.word	0x40021000
 8003934:	40013c00 	.word	0x40013c00

08003938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	887b      	ldrh	r3, [r7, #2]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
 8003954:	e001      	b.n	800395a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	807b      	strh	r3, [r7, #2]
 8003974:	4613      	mov	r3, r2
 8003976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003978:	787b      	ldrb	r3, [r7, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003984:	e003      	b.n	800398e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003986:	887b      	ldrh	r3, [r7, #2]
 8003988:	041a      	lsls	r2, r3, #16
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	619a      	str	r2, [r3, #24]
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039ac:	887a      	ldrh	r2, [r7, #2]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4013      	ands	r3, r2
 80039b2:	041a      	lsls	r2, r3, #16
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	43d9      	mvns	r1, r3
 80039b8:	887b      	ldrh	r3, [r7, #2]
 80039ba:	400b      	ands	r3, r1
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	619a      	str	r2, [r3, #24]
}
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d006      	beq.n	80039f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039e6:	4a05      	ldr	r2, [pc, #20]	; (80039fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fb6e 	bl	80020d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40013c00 	.word	0x40013c00

08003a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e12b      	b.n	8003c6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fe ffc2 	bl	80029b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2224      	movs	r2, #36	; 0x24
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a64:	f001 f858 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8003a68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4a81      	ldr	r2, [pc, #516]	; (8003c74 <HAL_I2C_Init+0x274>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d807      	bhi.n	8003a84 <HAL_I2C_Init+0x84>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a80      	ldr	r2, [pc, #512]	; (8003c78 <HAL_I2C_Init+0x278>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	bf94      	ite	ls
 8003a7c:	2301      	movls	r3, #1
 8003a7e:	2300      	movhi	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e006      	b.n	8003a92 <HAL_I2C_Init+0x92>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a7d      	ldr	r2, [pc, #500]	; (8003c7c <HAL_I2C_Init+0x27c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	bf94      	ite	ls
 8003a8c:	2301      	movls	r3, #1
 8003a8e:	2300      	movhi	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0e7      	b.n	8003c6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a78      	ldr	r2, [pc, #480]	; (8003c80 <HAL_I2C_Init+0x280>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0c9b      	lsrs	r3, r3, #18
 8003aa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4a6a      	ldr	r2, [pc, #424]	; (8003c74 <HAL_I2C_Init+0x274>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d802      	bhi.n	8003ad4 <HAL_I2C_Init+0xd4>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	e009      	b.n	8003ae8 <HAL_I2C_Init+0xe8>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	4a69      	ldr	r2, [pc, #420]	; (8003c84 <HAL_I2C_Init+0x284>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	099b      	lsrs	r3, r3, #6
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	430b      	orrs	r3, r1
 8003aee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	495c      	ldr	r1, [pc, #368]	; (8003c74 <HAL_I2C_Init+0x274>)
 8003b04:	428b      	cmp	r3, r1
 8003b06:	d819      	bhi.n	8003b3c <HAL_I2C_Init+0x13c>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1e59      	subs	r1, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b16:	1c59      	adds	r1, r3, #1
 8003b18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b1c:	400b      	ands	r3, r1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_I2C_Init+0x138>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1e59      	subs	r1, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b36:	e051      	b.n	8003bdc <HAL_I2C_Init+0x1dc>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	e04f      	b.n	8003bdc <HAL_I2C_Init+0x1dc>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d111      	bne.n	8003b68 <HAL_I2C_Init+0x168>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1e58      	subs	r0, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6859      	ldr	r1, [r3, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	440b      	add	r3, r1
 8003b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b56:	3301      	adds	r3, #1
 8003b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e012      	b.n	8003b8e <HAL_I2C_Init+0x18e>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1e58      	subs	r0, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6859      	ldr	r1, [r3, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	0099      	lsls	r1, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Init+0x196>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e022      	b.n	8003bdc <HAL_I2C_Init+0x1dc>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10e      	bne.n	8003bbc <HAL_I2C_Init+0x1bc>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1e58      	subs	r0, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	440b      	add	r3, r1
 8003bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bba:	e00f      	b.n	8003bdc <HAL_I2C_Init+0x1dc>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	0099      	lsls	r1, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	6809      	ldr	r1, [r1, #0]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6911      	ldr	r1, [r2, #16]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68d2      	ldr	r2, [r2, #12]
 8003c16:	4311      	orrs	r1, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	000186a0 	.word	0x000186a0
 8003c78:	001e847f 	.word	0x001e847f
 8003c7c:	003d08ff 	.word	0x003d08ff
 8003c80:	431bde83 	.word	0x431bde83
 8003c84:	10624dd3 	.word	0x10624dd3

08003c88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	4608      	mov	r0, r1
 8003c92:	4611      	mov	r1, r2
 8003c94:	461a      	mov	r2, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	817b      	strh	r3, [r7, #10]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	813b      	strh	r3, [r7, #8]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ca2:	f7ff fbb3 	bl	800340c <HAL_GetTick>
 8003ca6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	f040 80d9 	bne.w	8003e68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	2319      	movs	r3, #25
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	496d      	ldr	r1, [pc, #436]	; (8003e74 <HAL_I2C_Mem_Write+0x1ec>)
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f971 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e0cc      	b.n	8003e6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_I2C_Mem_Write+0x56>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e0c5      	b.n	8003e6a <HAL_I2C_Mem_Write+0x1e2>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d007      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2221      	movs	r2, #33	; 0x21
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2240      	movs	r2, #64	; 0x40
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a4d      	ldr	r2, [pc, #308]	; (8003e78 <HAL_I2C_Mem_Write+0x1f0>)
 8003d44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d46:	88f8      	ldrh	r0, [r7, #6]
 8003d48:	893a      	ldrh	r2, [r7, #8]
 8003d4a:	8979      	ldrh	r1, [r7, #10]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	4603      	mov	r3, r0
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f890 	bl	8003e7c <I2C_RequestMemoryWrite>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d052      	beq.n	8003e08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e081      	b.n	8003e6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f9f2 	bl	8004154 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d107      	bne.n	8003d8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e06b      	b.n	8003e6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d11b      	bne.n	8003e08 <HAL_I2C_Mem_Write+0x180>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d017      	beq.n	8003e08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1aa      	bne.n	8003d66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f9de 	bl	80041d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00d      	beq.n	8003e3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d107      	bne.n	8003e38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e016      	b.n	8003e6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e000      	b.n	8003e6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	00100002 	.word	0x00100002
 8003e78:	ffff0000 	.word	0xffff0000

08003e7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	817b      	strh	r3, [r7, #10]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	813b      	strh	r3, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f878 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ecc:	d103      	bne.n	8003ed6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e05f      	b.n	8003f9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eda:	897b      	ldrh	r3, [r7, #10]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ee8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	6a3a      	ldr	r2, [r7, #32]
 8003eee:	492d      	ldr	r1, [pc, #180]	; (8003fa4 <I2C_RequestMemoryWrite+0x128>)
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f8b0 	bl	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e04c      	b.n	8003f9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f91a 	bl	8004154 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d107      	bne.n	8003f3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e02b      	b.n	8003f9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f48:	893b      	ldrh	r3, [r7, #8]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]
 8003f52:	e021      	b.n	8003f98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f54:	893b      	ldrh	r3, [r7, #8]
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	6a39      	ldr	r1, [r7, #32]
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f8f4 	bl	8004154 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d107      	bne.n	8003f8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e005      	b.n	8003f9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f8e:	893b      	ldrh	r3, [r7, #8]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	00010002 	.word	0x00010002

08003fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb8:	e025      	b.n	8004006 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d021      	beq.n	8004006 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7ff fa23 	bl	800340c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d116      	bne.n	8004006 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e023      	b.n	800404e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10d      	bne.n	800402c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	43da      	mvns	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4013      	ands	r3, r2
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	e00c      	b.n	8004046 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	43da      	mvns	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	429a      	cmp	r2, r3
 800404a:	d0b6      	beq.n	8003fba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004064:	e051      	b.n	800410a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004074:	d123      	bne.n	80040be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004084:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800408e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f043 0204 	orr.w	r2, r3, #4
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e046      	b.n	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d021      	beq.n	800410a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7ff f9a1 	bl	800340c <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e020      	b.n	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10c      	bne.n	800412e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf14      	ite	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2300      	moveq	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	e00b      	b.n	8004146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	43da      	mvns	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d18d      	bne.n	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004160:	e02d      	b.n	80041be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f878 	bl	8004258 <I2C_IsAcknowledgeFailed>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e02d      	b.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d021      	beq.n	80041be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7ff f947 	bl	800340c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d116      	bne.n	80041be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e007      	b.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b80      	cmp	r3, #128	; 0x80
 80041ca:	d1ca      	bne.n	8004162 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041e2:	e02d      	b.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f837 	bl	8004258 <I2C_IsAcknowledgeFailed>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e02d      	b.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d021      	beq.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fc:	f7ff f906 	bl	800340c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d116      	bne.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e007      	b.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d1ca      	bne.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426e:	d11b      	bne.n	80042a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004278:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	f043 0204 	orr.w	r2, r3, #4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e267      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d075      	beq.n	80043c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042d6:	4b88      	ldr	r3, [pc, #544]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d00c      	beq.n	80042fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e2:	4b85      	ldr	r3, [pc, #532]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d112      	bne.n	8004314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ee:	4b82      	ldr	r3, [pc, #520]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fa:	d10b      	bne.n	8004314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fc:	4b7e      	ldr	r3, [pc, #504]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d05b      	beq.n	80043c0 <HAL_RCC_OscConfig+0x108>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d157      	bne.n	80043c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e242      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431c:	d106      	bne.n	800432c <HAL_RCC_OscConfig+0x74>
 800431e:	4b76      	ldr	r3, [pc, #472]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a75      	ldr	r2, [pc, #468]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 8004324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e01d      	b.n	8004368 <HAL_RCC_OscConfig+0xb0>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0x98>
 8004336:	4b70      	ldr	r3, [pc, #448]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a6f      	ldr	r2, [pc, #444]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 800433c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	4b6d      	ldr	r3, [pc, #436]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6c      	ldr	r2, [pc, #432]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e00b      	b.n	8004368 <HAL_RCC_OscConfig+0xb0>
 8004350:	4b69      	ldr	r3, [pc, #420]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a68      	ldr	r2, [pc, #416]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 8004356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	4b66      	ldr	r3, [pc, #408]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a65      	ldr	r2, [pc, #404]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 8004362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d013      	beq.n	8004398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7ff f84c 	bl	800340c <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004378:	f7ff f848 	bl	800340c <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e207      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	4b5b      	ldr	r3, [pc, #364]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0xc0>
 8004396:	e014      	b.n	80043c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7ff f838 	bl	800340c <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a0:	f7ff f834 	bl	800340c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e1f3      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b2:	4b51      	ldr	r3, [pc, #324]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0xe8>
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d063      	beq.n	8004496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ce:	4b4a      	ldr	r3, [pc, #296]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00b      	beq.n	80043f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043da:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d11c      	bne.n	8004420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e6:	4b44      	ldr	r3, [pc, #272]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f2:	4b41      	ldr	r3, [pc, #260]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_RCC_OscConfig+0x152>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e1c7      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440a:	4b3b      	ldr	r3, [pc, #236]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4937      	ldr	r1, [pc, #220]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441e:	e03a      	b.n	8004496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d020      	beq.n	800446a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004428:	4b34      	ldr	r3, [pc, #208]	; (80044fc <HAL_RCC_OscConfig+0x244>)
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442e:	f7fe ffed 	bl	800340c <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004436:	f7fe ffe9 	bl	800340c <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e1a8      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004448:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004454:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4925      	ldr	r1, [pc, #148]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]
 8004468:	e015      	b.n	8004496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446a:	4b24      	ldr	r3, [pc, #144]	; (80044fc <HAL_RCC_OscConfig+0x244>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fe ffcc 	bl	800340c <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004478:	f7fe ffc8 	bl	800340c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e187      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d036      	beq.n	8004510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d016      	beq.n	80044d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <HAL_RCC_OscConfig+0x248>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fe ffac 	bl	800340c <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b8:	f7fe ffa8 	bl	800340c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e167      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_OscConfig+0x240>)
 80044cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x200>
 80044d6:	e01b      	b.n	8004510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <HAL_RCC_OscConfig+0x248>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044de:	f7fe ff95 	bl	800340c <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e4:	e00e      	b.n	8004504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e6:	f7fe ff91 	bl	800340c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d907      	bls.n	8004504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e150      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
 80044f8:	40023800 	.word	0x40023800
 80044fc:	42470000 	.word	0x42470000
 8004500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004504:	4b88      	ldr	r3, [pc, #544]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1ea      	bne.n	80044e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8097 	beq.w	800464c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004522:	4b81      	ldr	r3, [pc, #516]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	4b7d      	ldr	r3, [pc, #500]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a7c      	ldr	r2, [pc, #496]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453c:	6413      	str	r3, [r2, #64]	; 0x40
 800453e:	4b7a      	ldr	r3, [pc, #488]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454e:	4b77      	ldr	r3, [pc, #476]	; (800472c <HAL_RCC_OscConfig+0x474>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d118      	bne.n	800458c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455a:	4b74      	ldr	r3, [pc, #464]	; (800472c <HAL_RCC_OscConfig+0x474>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a73      	ldr	r2, [pc, #460]	; (800472c <HAL_RCC_OscConfig+0x474>)
 8004560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004566:	f7fe ff51 	bl	800340c <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456e:	f7fe ff4d 	bl	800340c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e10c      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	4b6a      	ldr	r3, [pc, #424]	; (800472c <HAL_RCC_OscConfig+0x474>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d106      	bne.n	80045a2 <HAL_RCC_OscConfig+0x2ea>
 8004594:	4b64      	ldr	r3, [pc, #400]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	4a63      	ldr	r2, [pc, #396]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6713      	str	r3, [r2, #112]	; 0x70
 80045a0:	e01c      	b.n	80045dc <HAL_RCC_OscConfig+0x324>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b05      	cmp	r3, #5
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x30c>
 80045aa:	4b5f      	ldr	r3, [pc, #380]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a5e      	ldr	r2, [pc, #376]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 80045b0:	f043 0304 	orr.w	r3, r3, #4
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	4b5c      	ldr	r3, [pc, #368]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a5b      	ldr	r2, [pc, #364]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
 80045c2:	e00b      	b.n	80045dc <HAL_RCC_OscConfig+0x324>
 80045c4:	4b58      	ldr	r3, [pc, #352]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	4a57      	ldr	r2, [pc, #348]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	6713      	str	r3, [r2, #112]	; 0x70
 80045d0:	4b55      	ldr	r3, [pc, #340]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a54      	ldr	r2, [pc, #336]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 80045d6:	f023 0304 	bic.w	r3, r3, #4
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d015      	beq.n	8004610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fe ff12 	bl	800340c <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fe ff0e 	bl	800340c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e0cb      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004602:	4b49      	ldr	r3, [pc, #292]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0ee      	beq.n	80045ec <HAL_RCC_OscConfig+0x334>
 800460e:	e014      	b.n	800463a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004610:	f7fe fefc 	bl	800340c <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004616:	e00a      	b.n	800462e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004618:	f7fe fef8 	bl	800340c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e0b5      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462e:	4b3e      	ldr	r3, [pc, #248]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ee      	bne.n	8004618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004640:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	4a38      	ldr	r2, [pc, #224]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80a1 	beq.w	8004798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004656:	4b34      	ldr	r3, [pc, #208]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 030c 	and.w	r3, r3, #12
 800465e:	2b08      	cmp	r3, #8
 8004660:	d05c      	beq.n	800471c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d141      	bne.n	80046ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466a:	4b31      	ldr	r3, [pc, #196]	; (8004730 <HAL_RCC_OscConfig+0x478>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fe fecc 	bl	800340c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004678:	f7fe fec8 	bl	800340c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e087      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	4b27      	ldr	r3, [pc, #156]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	3b01      	subs	r3, #1
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	061b      	lsls	r3, r3, #24
 80046ba:	491b      	ldr	r1, [pc, #108]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c0:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <HAL_RCC_OscConfig+0x478>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c6:	f7fe fea1 	bl	800340c <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fe fe9d 	bl	800340c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e05c      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e0:	4b11      	ldr	r3, [pc, #68]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x416>
 80046ec:	e054      	b.n	8004798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_RCC_OscConfig+0x478>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fe fe8a 	bl	800340c <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fe fe86 	bl	800340c <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e045      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_RCC_OscConfig+0x470>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x444>
 800471a:	e03d      	b.n	8004798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d107      	bne.n	8004734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e038      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
 8004728:	40023800 	.word	0x40023800
 800472c:	40007000 	.word	0x40007000
 8004730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <HAL_RCC_OscConfig+0x4ec>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d028      	beq.n	8004794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d121      	bne.n	8004794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d11a      	bne.n	8004794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004764:	4013      	ands	r3, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800476c:	4293      	cmp	r3, r2
 800476e:	d111      	bne.n	8004794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	3b01      	subs	r3, #1
 800477e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d107      	bne.n	8004794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800

080047a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0cc      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047bc:	4b68      	ldr	r3, [pc, #416]	; (8004960 <HAL_RCC_ClockConfig+0x1b8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d90c      	bls.n	80047e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b65      	ldr	r3, [pc, #404]	; (8004960 <HAL_RCC_ClockConfig+0x1b8>)
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b63      	ldr	r3, [pc, #396]	; (8004960 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0b8      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d020      	beq.n	8004832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047fc:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4a58      	ldr	r2, [pc, #352]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004814:	4b53      	ldr	r3, [pc, #332]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4a52      	ldr	r2, [pc, #328]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800481e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004820:	4b50      	ldr	r3, [pc, #320]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	494d      	ldr	r1, [pc, #308]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d044      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d119      	bne.n	8004886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e07f      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d003      	beq.n	8004866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004862:	2b03      	cmp	r3, #3
 8004864:	d107      	bne.n	8004876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004866:	4b3f      	ldr	r3, [pc, #252]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e06f      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004876:	4b3b      	ldr	r3, [pc, #236]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e067      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004886:	4b37      	ldr	r3, [pc, #220]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f023 0203 	bic.w	r2, r3, #3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4934      	ldr	r1, [pc, #208]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004898:	f7fe fdb8 	bl	800340c <HAL_GetTick>
 800489c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489e:	e00a      	b.n	80048b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a0:	f7fe fdb4 	bl	800340c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e04f      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b6:	4b2b      	ldr	r3, [pc, #172]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 020c 	and.w	r2, r3, #12
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d1eb      	bne.n	80048a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c8:	4b25      	ldr	r3, [pc, #148]	; (8004960 <HAL_RCC_ClockConfig+0x1b8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d20c      	bcs.n	80048f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d6:	4b22      	ldr	r3, [pc, #136]	; (8004960 <HAL_RCC_ClockConfig+0x1b8>)
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e032      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4916      	ldr	r1, [pc, #88]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	490e      	ldr	r1, [pc, #56]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800492e:	f000 f821 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8004932:	4602      	mov	r2, r0
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	490a      	ldr	r1, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	5ccb      	ldrb	r3, [r1, r3]
 8004942:	fa22 f303 	lsr.w	r3, r2, r3
 8004946:	4a09      	ldr	r2, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1c4>)
 8004948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe f94e 	bl	8002bf0 <HAL_InitTick>

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40023c00 	.word	0x40023c00
 8004964:	40023800 	.word	0x40023800
 8004968:	0800b7c4 	.word	0x0800b7c4
 800496c:	2000001c 	.word	0x2000001c
 8004970:	20000040 	.word	0x20000040

08004974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004978:	b090      	sub	sp, #64	; 0x40
 800497a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	637b      	str	r3, [r7, #52]	; 0x34
 8004980:	2300      	movs	r3, #0
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004984:	2300      	movs	r3, #0
 8004986:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800498c:	4b59      	ldr	r3, [pc, #356]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x180>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b08      	cmp	r3, #8
 8004996:	d00d      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004998:	2b08      	cmp	r3, #8
 800499a:	f200 80a1 	bhi.w	8004ae0 <HAL_RCC_GetSysClockFreq+0x16c>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x34>
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d003      	beq.n	80049ae <HAL_RCC_GetSysClockFreq+0x3a>
 80049a6:	e09b      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4b53      	ldr	r3, [pc, #332]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x184>)
 80049aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80049ac:	e09b      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ae:	4b53      	ldr	r3, [pc, #332]	; (8004afc <HAL_RCC_GetSysClockFreq+0x188>)
 80049b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049b2:	e098      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b4:	4b4f      	ldr	r3, [pc, #316]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049be:	4b4d      	ldr	r3, [pc, #308]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d028      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ca:	4b4a      	ldr	r3, [pc, #296]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	099b      	lsrs	r3, r3, #6
 80049d0:	2200      	movs	r2, #0
 80049d2:	623b      	str	r3, [r7, #32]
 80049d4:	627a      	str	r2, [r7, #36]	; 0x24
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049dc:	2100      	movs	r1, #0
 80049de:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCC_GetSysClockFreq+0x188>)
 80049e0:	fb03 f201 	mul.w	r2, r3, r1
 80049e4:	2300      	movs	r3, #0
 80049e6:	fb00 f303 	mul.w	r3, r0, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	4a43      	ldr	r2, [pc, #268]	; (8004afc <HAL_RCC_GetSysClockFreq+0x188>)
 80049ee:	fba0 1202 	umull	r1, r2, r0, r2
 80049f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049f4:	460a      	mov	r2, r1
 80049f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80049f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fa:	4413      	add	r3, r2
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a00:	2200      	movs	r2, #0
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	61fa      	str	r2, [r7, #28]
 8004a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a0e:	f7fc f8f3 	bl	8000bf8 <__aeabi_uldivmod>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4613      	mov	r3, r2
 8004a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1a:	e053      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a1c:	4b35      	ldr	r3, [pc, #212]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	099b      	lsrs	r3, r3, #6
 8004a22:	2200      	movs	r2, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	617a      	str	r2, [r7, #20]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a2e:	f04f 0b00 	mov.w	fp, #0
 8004a32:	4652      	mov	r2, sl
 8004a34:	465b      	mov	r3, fp
 8004a36:	f04f 0000 	mov.w	r0, #0
 8004a3a:	f04f 0100 	mov.w	r1, #0
 8004a3e:	0159      	lsls	r1, r3, #5
 8004a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a44:	0150      	lsls	r0, r2, #5
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	ebb2 080a 	subs.w	r8, r2, sl
 8004a4e:	eb63 090b 	sbc.w	r9, r3, fp
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a66:	ebb2 0408 	subs.w	r4, r2, r8
 8004a6a:	eb63 0509 	sbc.w	r5, r3, r9
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	00eb      	lsls	r3, r5, #3
 8004a78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a7c:	00e2      	lsls	r2, r4, #3
 8004a7e:	4614      	mov	r4, r2
 8004a80:	461d      	mov	r5, r3
 8004a82:	eb14 030a 	adds.w	r3, r4, sl
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	eb45 030b 	adc.w	r3, r5, fp
 8004a8c:	607b      	str	r3, [r7, #4]
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	028b      	lsls	r3, r1, #10
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	028a      	lsls	r2, r1, #10
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aae:	2200      	movs	r2, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	60fa      	str	r2, [r7, #12]
 8004ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ab8:	f7fc f89e 	bl	8000bf8 <__aeabi_uldivmod>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	0c1b      	lsrs	r3, r3, #16
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ade:	e002      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3740      	adds	r7, #64	; 0x40
 8004aec:	46bd      	mov	sp, r7
 8004aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	017d7840 	.word	0x017d7840

08004b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	2000001c 	.word	0x2000001c

08004b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b1c:	f7ff fff0 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0a9b      	lsrs	r3, r3, #10
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4903      	ldr	r1, [pc, #12]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	0800b7d4 	.word	0x0800b7d4

08004b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b44:	f7ff ffdc 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0b5b      	lsrs	r3, r3, #13
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40023800 	.word	0x40023800
 8004b64:	0800b7d4 	.word	0x0800b7d4

08004b68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	220f      	movs	r2, #15
 8004b76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0203 	and.w	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	08db      	lsrs	r3, r3, #3
 8004ba2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_RCC_GetClockConfig+0x60>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0207 	and.w	r2, r3, #7
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40023c00 	.word	0x40023c00

08004bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e041      	b.n	8004c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd ff7a 	bl	8002aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f000 fd08 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d001      	beq.n	8004c84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e03c      	b.n	8004cfe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <HAL_TIM_Base_Start+0xa0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x5c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d013      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x5c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1a      	ldr	r2, [pc, #104]	; (8004d10 <HAL_TIM_Base_Start+0xa4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x5c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_TIM_Base_Start+0xa8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x5c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <HAL_TIM_Base_Start+0xac>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x5c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <HAL_TIM_Base_Start+0xb0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d111      	bne.n	8004cec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b06      	cmp	r3, #6
 8004cd8:	d010      	beq.n	8004cfc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	e007      	b.n	8004cfc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40014000 	.word	0x40014000

08004d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d001      	beq.n	8004d38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e044      	b.n	8004dc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x6c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d013      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x6c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x6c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a19      	ldr	r2, [pc, #100]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x6c>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <HAL_TIM_Base_Start_IT+0xbc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x6c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d111      	bne.n	8004db0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d010      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dae:	e007      	b.n	8004dc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40014000 	.word	0x40014000

08004de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e041      	b.n	8004e7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fd fe38 	bl	8002a80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f000 fbfc 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <HAL_TIM_PWM_Start+0x24>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e022      	b.n	8004eee <HAL_TIM_PWM_Start+0x6a>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d109      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0x3e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	bf14      	ite	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	2300      	moveq	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	e015      	b.n	8004eee <HAL_TIM_PWM_Start+0x6a>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d109      	bne.n	8004edc <HAL_TIM_PWM_Start+0x58>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e008      	b.n	8004eee <HAL_TIM_PWM_Start+0x6a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e068      	b.n	8004fc8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_PWM_Start+0x82>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f04:	e013      	b.n	8004f2e <HAL_TIM_PWM_Start+0xaa>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_PWM_Start+0x92>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f14:	e00b      	b.n	8004f2e <HAL_TIM_PWM_Start+0xaa>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Start+0xa2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f24:	e003      	b.n	8004f2e <HAL_TIM_PWM_Start+0xaa>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2201      	movs	r2, #1
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fe18 	bl	8005b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a23      	ldr	r2, [pc, #140]	; (8004fd0 <HAL_TIM_PWM_Start+0x14c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d107      	bne.n	8004f56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <HAL_TIM_PWM_Start+0x14c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d018      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x10e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d013      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x10e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a19      	ldr	r2, [pc, #100]	; (8004fd4 <HAL_TIM_PWM_Start+0x150>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x10e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <HAL_TIM_PWM_Start+0x154>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x10e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a16      	ldr	r2, [pc, #88]	; (8004fdc <HAL_TIM_PWM_Start+0x158>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x10e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <HAL_TIM_PWM_Start+0x15c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d111      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b06      	cmp	r3, #6
 8004fa2:	d010      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb4:	e007      	b.n	8004fc6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40014000 	.word	0x40014000

08004fe4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fdb8 	bl	8005b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a29      	ldr	r2, [pc, #164]	; (80050a8 <HAL_TIM_PWM_Stop+0xc4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d117      	bne.n	8005036 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <HAL_TIM_PWM_Stop+0x52>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	f240 4344 	movw	r3, #1092	; 0x444
 8005020:	4013      	ands	r3, r2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <HAL_TIM_PWM_Stop+0x52>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005040:	4013      	ands	r3, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10f      	bne.n	8005066 <HAL_TIM_PWM_Stop+0x82>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	f240 4344 	movw	r3, #1092	; 0x444
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d107      	bne.n	8005066 <HAL_TIM_PWM_Stop+0x82>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <HAL_TIM_PWM_Stop+0x92>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005074:	e013      	b.n	800509e <HAL_TIM_PWM_Stop+0xba>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d104      	bne.n	8005086 <HAL_TIM_PWM_Stop+0xa2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005084:	e00b      	b.n	800509e <HAL_TIM_PWM_Stop+0xba>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d104      	bne.n	8005096 <HAL_TIM_PWM_Stop+0xb2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005094:	e003      	b.n	800509e <HAL_TIM_PWM_Stop+0xba>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40010000 	.word	0x40010000

080050ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d122      	bne.n	8005108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d11b      	bne.n	8005108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0202 	mvn.w	r2, #2
 80050d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa77 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa69 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fa7a 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b04      	cmp	r3, #4
 8005114:	d122      	bne.n	800515c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b04      	cmp	r3, #4
 8005122:	d11b      	bne.n	800515c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0204 	mvn.w	r2, #4
 800512c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa4d 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fa3f 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fa50 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b08      	cmp	r3, #8
 8005168:	d122      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b08      	cmp	r3, #8
 8005176:	d11b      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0208 	mvn.w	r2, #8
 8005180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2204      	movs	r2, #4
 8005186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa23 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa15 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fa26 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b10      	cmp	r3, #16
 80051bc:	d122      	bne.n	8005204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d11b      	bne.n	8005204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0210 	mvn.w	r2, #16
 80051d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2208      	movs	r2, #8
 80051da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f9f9 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 80051f0:	e005      	b.n	80051fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f9eb 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f9fc 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d10e      	bne.n	8005230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b01      	cmp	r3, #1
 800521e:	d107      	bne.n	8005230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0201 	mvn.w	r2, #1
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fd fb7c 	bl	8002928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b80      	cmp	r3, #128	; 0x80
 800523c:	d10e      	bne.n	800525c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005248:	2b80      	cmp	r3, #128	; 0x80
 800524a:	d107      	bne.n	800525c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fd26 	bl	8005ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d10e      	bne.n	8005288 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d107      	bne.n	8005288 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f9c1 	bl	800560a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b20      	cmp	r3, #32
 8005294:	d10e      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d107      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0220 	mvn.w	r2, #32
 80052ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fcf0 	bl	8005c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052b4:	bf00      	nop
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e0ae      	b.n	8005438 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b0c      	cmp	r3, #12
 80052e6:	f200 809f 	bhi.w	8005428 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052ea:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005325 	.word	0x08005325
 80052f4:	08005429 	.word	0x08005429
 80052f8:	08005429 	.word	0x08005429
 80052fc:	08005429 	.word	0x08005429
 8005300:	08005365 	.word	0x08005365
 8005304:	08005429 	.word	0x08005429
 8005308:	08005429 	.word	0x08005429
 800530c:	08005429 	.word	0x08005429
 8005310:	080053a7 	.word	0x080053a7
 8005314:	08005429 	.word	0x08005429
 8005318:	08005429 	.word	0x08005429
 800531c:	08005429 	.word	0x08005429
 8005320:	080053e7 	.word	0x080053e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f9f8 	bl	8005720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0208 	orr.w	r2, r2, #8
 800533e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0204 	bic.w	r2, r2, #4
 800534e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6999      	ldr	r1, [r3, #24]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	619a      	str	r2, [r3, #24]
      break;
 8005362:	e064      	b.n	800542e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fa3e 	bl	80057ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6999      	ldr	r1, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	021a      	lsls	r2, r3, #8
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	619a      	str	r2, [r3, #24]
      break;
 80053a4:	e043      	b.n	800542e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fa89 	bl	80058c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0208 	orr.w	r2, r2, #8
 80053c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0204 	bic.w	r2, r2, #4
 80053d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69d9      	ldr	r1, [r3, #28]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	61da      	str	r2, [r3, #28]
      break;
 80053e4:	e023      	b.n	800542e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fad3 	bl	8005998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	021a      	lsls	r2, r3, #8
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	61da      	str	r2, [r3, #28]
      break;
 8005426:	e002      	b.n	800542e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	75fb      	strb	r3, [r7, #23]
      break;
 800542c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005436:	7dfb      	ldrb	r3, [r7, #23]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_TIM_ConfigClockSource+0x1c>
 8005458:	2302      	movs	r3, #2
 800545a:	e0b4      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x186>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800547a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005494:	d03e      	beq.n	8005514 <HAL_TIM_ConfigClockSource+0xd4>
 8005496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800549a:	f200 8087 	bhi.w	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 800549e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a2:	f000 8086 	beq.w	80055b2 <HAL_TIM_ConfigClockSource+0x172>
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054aa:	d87f      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b70      	cmp	r3, #112	; 0x70
 80054ae:	d01a      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0xa6>
 80054b0:	2b70      	cmp	r3, #112	; 0x70
 80054b2:	d87b      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b60      	cmp	r3, #96	; 0x60
 80054b6:	d050      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x11a>
 80054b8:	2b60      	cmp	r3, #96	; 0x60
 80054ba:	d877      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b50      	cmp	r3, #80	; 0x50
 80054be:	d03c      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xfa>
 80054c0:	2b50      	cmp	r3, #80	; 0x50
 80054c2:	d873      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d058      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x13a>
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d86f      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b30      	cmp	r3, #48	; 0x30
 80054ce:	d064      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054d0:	2b30      	cmp	r3, #48	; 0x30
 80054d2:	d86b      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d060      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d867      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d05c      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d05a      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054e4:	e062      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6899      	ldr	r1, [r3, #8]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f000 fb19 	bl	8005b2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	609a      	str	r2, [r3, #8]
      break;
 8005512:	e04f      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	6899      	ldr	r1, [r3, #8]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f000 fb02 	bl	8005b2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005536:	609a      	str	r2, [r3, #8]
      break;
 8005538:	e03c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	461a      	mov	r2, r3
 8005548:	f000 fa76 	bl	8005a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2150      	movs	r1, #80	; 0x50
 8005552:	4618      	mov	r0, r3
 8005554:	f000 facf 	bl	8005af6 <TIM_ITRx_SetConfig>
      break;
 8005558:	e02c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	461a      	mov	r2, r3
 8005568:	f000 fa95 	bl	8005a96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2160      	movs	r1, #96	; 0x60
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fabf 	bl	8005af6 <TIM_ITRx_SetConfig>
      break;
 8005578:	e01c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	461a      	mov	r2, r3
 8005588:	f000 fa56 	bl	8005a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2140      	movs	r1, #64	; 0x40
 8005592:	4618      	mov	r0, r3
 8005594:	f000 faaf 	bl	8005af6 <TIM_ITRx_SetConfig>
      break;
 8005598:	e00c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f000 faa6 	bl	8005af6 <TIM_ITRx_SetConfig>
      break;
 80055aa:	e003      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
      break;
 80055b0:	e000      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a34      	ldr	r2, [pc, #208]	; (8005704 <TIM_Base_SetConfig+0xe4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a31      	ldr	r2, [pc, #196]	; (8005708 <TIM_Base_SetConfig+0xe8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a30      	ldr	r2, [pc, #192]	; (800570c <TIM_Base_SetConfig+0xec>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a2f      	ldr	r2, [pc, #188]	; (8005710 <TIM_Base_SetConfig+0xf0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a25      	ldr	r2, [pc, #148]	; (8005704 <TIM_Base_SetConfig+0xe4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01b      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d017      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a22      	ldr	r2, [pc, #136]	; (8005708 <TIM_Base_SetConfig+0xe8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a21      	ldr	r2, [pc, #132]	; (800570c <TIM_Base_SetConfig+0xec>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a20      	ldr	r2, [pc, #128]	; (8005710 <TIM_Base_SetConfig+0xf0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <TIM_Base_SetConfig+0xf4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <TIM_Base_SetConfig+0xf8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a1d      	ldr	r2, [pc, #116]	; (800571c <TIM_Base_SetConfig+0xfc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a08      	ldr	r2, [pc, #32]	; (8005704 <TIM_Base_SetConfig+0xe4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d103      	bne.n	80056f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	615a      	str	r2, [r3, #20]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800

08005720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f023 0201 	bic.w	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 0302 	bic.w	r3, r3, #2
 8005768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a1c      	ldr	r2, [pc, #112]	; (80057e8 <TIM_OC1_SetConfig+0xc8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d10c      	bne.n	8005796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0308 	bic.w	r3, r3, #8
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <TIM_OC1_SetConfig+0xc8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d111      	bne.n	80057c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	621a      	str	r2, [r3, #32]
}
 80057dc:	bf00      	nop
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	40010000 	.word	0x40010000

080057ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f023 0210 	bic.w	r2, r3, #16
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0320 	bic.w	r3, r3, #32
 8005836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a1e      	ldr	r2, [pc, #120]	; (80058c0 <TIM_OC2_SetConfig+0xd4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d10d      	bne.n	8005868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <TIM_OC2_SetConfig+0xd4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d113      	bne.n	8005898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800587e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	621a      	str	r2, [r3, #32]
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40010000 	.word	0x40010000

080058c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800590c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <TIM_OC3_SetConfig+0xd0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d10d      	bne.n	800593e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800593c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a14      	ldr	r2, [pc, #80]	; (8005994 <TIM_OC3_SetConfig+0xd0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d113      	bne.n	800596e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800594c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40010000 	.word	0x40010000

08005998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	031b      	lsls	r3, r3, #12
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a10      	ldr	r2, [pc, #64]	; (8005a34 <TIM_OC4_SetConfig+0x9c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d109      	bne.n	8005a0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000

08005a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f023 0201 	bic.w	r2, r3, #1
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f023 030a 	bic.w	r3, r3, #10
 8005a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b087      	sub	sp, #28
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0210 	bic.w	r2, r3, #16
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	031b      	lsls	r3, r3, #12
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	621a      	str	r2, [r3, #32]
}
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f043 0307 	orr.w	r3, r3, #7
 8005b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	609a      	str	r2, [r3, #8]
}
 8005b20:	bf00      	nop
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	021a      	lsls	r2, r3, #8
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	609a      	str	r2, [r3, #8]
}
 8005b60:	bf00      	nop
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 031f 	and.w	r3, r3, #31
 8005b7e:	2201      	movs	r2, #1
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1a      	ldr	r2, [r3, #32]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	401a      	ands	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a1a      	ldr	r2, [r3, #32]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f003 031f 	and.w	r3, r3, #31
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e050      	b.n	8005c72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1c      	ldr	r2, [pc, #112]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d018      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1c:	d013      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00e      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a16      	ldr	r2, [pc, #88]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d009      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a13      	ldr	r2, [pc, #76]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d10c      	bne.n	8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	40014000 	.word	0x40014000

08005c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <__NVIC_SetPriority>:
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	6039      	str	r1, [r7, #0]
 8005cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	db0a      	blt.n	8005ce6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	490c      	ldr	r1, [pc, #48]	; (8005d08 <__NVIC_SetPriority+0x4c>)
 8005cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cda:	0112      	lsls	r2, r2, #4
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	440b      	add	r3, r1
 8005ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ce4:	e00a      	b.n	8005cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	4908      	ldr	r1, [pc, #32]	; (8005d0c <__NVIC_SetPriority+0x50>)
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	3b04      	subs	r3, #4
 8005cf4:	0112      	lsls	r2, r2, #4
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	761a      	strb	r2, [r3, #24]
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	e000e100 	.word	0xe000e100
 8005d0c:	e000ed00 	.word	0xe000ed00

08005d10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <SysTick_Handler+0x1c>)
 8005d16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d18:	f001 fd28 	bl	800776c <xTaskGetSchedulerState>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d001      	beq.n	8005d26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d22:	f002 fb11 	bl	8008348 <xPortSysTickHandler>
  }
}
 8005d26:	bf00      	nop
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	e000e010 	.word	0xe000e010

08005d30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d34:	2100      	movs	r1, #0
 8005d36:	f06f 0004 	mvn.w	r0, #4
 8005d3a:	f7ff ffbf 	bl	8005cbc <__NVIC_SetPriority>
#endif
}
 8005d3e:	bf00      	nop
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d4a:	f3ef 8305 	mrs	r3, IPSR
 8005d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8005d50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d56:	f06f 0305 	mvn.w	r3, #5
 8005d5a:	607b      	str	r3, [r7, #4]
 8005d5c:	e00c      	b.n	8005d78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <osKernelInitialize+0x44>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d105      	bne.n	8005d72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d66:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <osKernelInitialize+0x44>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	607b      	str	r3, [r7, #4]
 8005d70:	e002      	b.n	8005d78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d72:	f04f 33ff 	mov.w	r3, #4294967295
 8005d76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d78:	687b      	ldr	r3, [r7, #4]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	2000083c 	.word	0x2000083c

08005d8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d92:	f3ef 8305 	mrs	r3, IPSR
 8005d96:	603b      	str	r3, [r7, #0]
  return(result);
 8005d98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005d9e:	f06f 0305 	mvn.w	r3, #5
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	e010      	b.n	8005dc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <osKernelStart+0x48>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d109      	bne.n	8005dc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dae:	f7ff ffbf 	bl	8005d30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <osKernelStart+0x48>)
 8005db4:	2202      	movs	r2, #2
 8005db6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005db8:	f001 f87c 	bl	8006eb4 <vTaskStartScheduler>
      stat = osOK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	607b      	str	r3, [r7, #4]
 8005dc0:	e002      	b.n	8005dc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dc8:	687b      	ldr	r3, [r7, #4]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	2000083c 	.word	0x2000083c

08005dd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08e      	sub	sp, #56	; 0x38
 8005ddc:	af04      	add	r7, sp, #16
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de8:	f3ef 8305 	mrs	r3, IPSR
 8005dec:	617b      	str	r3, [r7, #20]
  return(result);
 8005dee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d17e      	bne.n	8005ef2 <osThreadNew+0x11a>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d07b      	beq.n	8005ef2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005dfa:	2380      	movs	r3, #128	; 0x80
 8005dfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005dfe:	2318      	movs	r3, #24
 8005e00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e06:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d045      	beq.n	8005e9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <osThreadNew+0x48>
        name = attr->name;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <osThreadNew+0x6e>
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b38      	cmp	r3, #56	; 0x38
 8005e38:	d805      	bhi.n	8005e46 <osThreadNew+0x6e>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <osThreadNew+0x72>
        return (NULL);
 8005e46:	2300      	movs	r3, #0
 8005e48:	e054      	b.n	8005ef4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	089b      	lsrs	r3, r3, #2
 8005e58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00e      	beq.n	8005e80 <osThreadNew+0xa8>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2ba7      	cmp	r3, #167	; 0xa7
 8005e68:	d90a      	bls.n	8005e80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d006      	beq.n	8005e80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <osThreadNew+0xa8>
        mem = 1;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	61bb      	str	r3, [r7, #24]
 8005e7e:	e010      	b.n	8005ea2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10c      	bne.n	8005ea2 <osThreadNew+0xca>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d108      	bne.n	8005ea2 <osThreadNew+0xca>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <osThreadNew+0xca>
          mem = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	e001      	b.n	8005ea2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d110      	bne.n	8005eca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005eb0:	9202      	str	r2, [sp, #8]
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6a3a      	ldr	r2, [r7, #32]
 8005ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 fe0c 	bl	8006adc <xTaskCreateStatic>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	e013      	b.n	8005ef2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d110      	bne.n	8005ef2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	f107 0310 	add.w	r3, r7, #16
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fe57 	bl	8006b96 <xTaskCreate>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d001      	beq.n	8005ef2 <osThreadNew+0x11a>
            hTask = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ef2:	693b      	ldr	r3, [r7, #16]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3728      	adds	r7, #40	; 0x28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f04:	f3ef 8305 	mrs	r3, IPSR
 8005f08:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <osDelay+0x1c>
    stat = osErrorISR;
 8005f10:	f06f 0305 	mvn.w	r3, #5
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e007      	b.n	8005f28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 ff92 	bl	8006e4c <vTaskDelay>
    }
  }

  return (stat);
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a07      	ldr	r2, [pc, #28]	; (8005f60 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	4a06      	ldr	r2, [pc, #24]	; (8005f64 <vApplicationGetIdleTaskMemory+0x30>)
 8005f4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2280      	movs	r2, #128	; 0x80
 8005f50:	601a      	str	r2, [r3, #0]
}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	20000840 	.word	0x20000840
 8005f64:	200008e8 	.word	0x200008e8

08005f68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4a07      	ldr	r2, [pc, #28]	; (8005f94 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4a06      	ldr	r2, [pc, #24]	; (8005f98 <vApplicationGetTimerTaskMemory+0x30>)
 8005f7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f86:	601a      	str	r2, [r3, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	20000ae8 	.word	0x20000ae8
 8005f98:	20000b90 	.word	0x20000b90

08005f9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f103 0208 	add.w	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f103 0208 	add.w	r2, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f103 0208 	add.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d103      	bne.n	800605e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e00c      	b.n	8006078 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3308      	adds	r3, #8
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e002      	b.n	800606c <vListInsert+0x2e>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	429a      	cmp	r2, r3
 8006076:	d2f6      	bcs.n	8006066 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6892      	ldr	r2, [r2, #8]
 80060c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6852      	ldr	r2, [r2, #4]
 80060d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d103      	bne.n	80060e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1e5a      	subs	r2, r3, #1
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800612a:	bf00      	nop
 800612c:	e7fe      	b.n	800612c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800612e:	f002 f879 	bl	8008224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800613e:	fb01 f303 	mul.w	r3, r1, r3
 8006142:	441a      	add	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	3b01      	subs	r3, #1
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006164:	fb01 f303 	mul.w	r3, r1, r3
 8006168:	441a      	add	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	22ff      	movs	r2, #255	; 0xff
 8006172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	22ff      	movs	r2, #255	; 0xff
 800617a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d114      	bne.n	80061ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01a      	beq.n	80061c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3310      	adds	r3, #16
 8006190:	4618      	mov	r0, r3
 8006192:	f001 f929 	bl	80073e8 <xTaskRemoveFromEventList>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <xQueueGenericReset+0xcc>)
 800619e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	e009      	b.n	80061c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3310      	adds	r3, #16
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fef2 	bl	8005f9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3324      	adds	r3, #36	; 0x24
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff feed 	bl	8005f9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061c2:	f002 f85f 	bl	8008284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061c6:	2301      	movs	r3, #1
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08e      	sub	sp, #56	; 0x38
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <xQueueGenericCreateStatic+0x52>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <xQueueGenericCreateStatic+0x56>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <xQueueGenericCreateStatic+0x58>
 800622a:	2300      	movs	r3, #0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	623b      	str	r3, [r7, #32]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <xQueueGenericCreateStatic+0x7e>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <xQueueGenericCreateStatic+0x82>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <xQueueGenericCreateStatic+0x84>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	61fb      	str	r3, [r7, #28]
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006272:	2350      	movs	r3, #80	; 0x50
 8006274:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b50      	cmp	r3, #80	; 0x50
 800627a:	d00a      	beq.n	8006292 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	61bb      	str	r3, [r7, #24]
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006292:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00d      	beq.n	80062ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	4613      	mov	r3, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f805 	bl	80062c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062bc:	4618      	mov	r0, r3
 80062be:	3730      	adds	r7, #48	; 0x30
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e002      	b.n	80062e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062f2:	2101      	movs	r1, #1
 80062f4:	69b8      	ldr	r0, [r7, #24]
 80062f6:	f7ff ff05 	bl	8006104 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08e      	sub	sp, #56	; 0x38
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800631a:	2300      	movs	r3, #0
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <xQueueGenericSend+0x32>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <xQueueGenericSend+0x40>
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <xQueueGenericSend+0x44>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <xQueueGenericSend+0x46>
 8006350:	2300      	movs	r3, #0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <xQueueGenericSend+0x60>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d103      	bne.n	800637a <xQueueGenericSend+0x6e>
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <xQueueGenericSend+0x72>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <xQueueGenericSend+0x74>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <xQueueGenericSend+0x8e>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	623b      	str	r3, [r7, #32]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800639a:	f001 f9e7 	bl	800776c <xTaskGetSchedulerState>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <xQueueGenericSend+0x9e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <xQueueGenericSend+0xa2>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <xQueueGenericSend+0xa4>
 80063ae:	2300      	movs	r3, #0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <xQueueGenericSend+0xbe>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	61fb      	str	r3, [r7, #28]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ca:	f001 ff2b 	bl	8008224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d302      	bcc.n	80063e0 <xQueueGenericSend+0xd4>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d129      	bne.n	8006434 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063e6:	f000 fa0b 	bl	8006800 <prvCopyDataToQueue>
 80063ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d010      	beq.n	8006416 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	3324      	adds	r3, #36	; 0x24
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fff5 	bl	80073e8 <xTaskRemoveFromEventList>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d013      	beq.n	800642c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006404:	4b3f      	ldr	r3, [pc, #252]	; (8006504 <xQueueGenericSend+0x1f8>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	e00a      	b.n	800642c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800641c:	4b39      	ldr	r3, [pc, #228]	; (8006504 <xQueueGenericSend+0x1f8>)
 800641e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800642c:	f001 ff2a 	bl	8008284 <vPortExitCritical>
				return pdPASS;
 8006430:	2301      	movs	r3, #1
 8006432:	e063      	b.n	80064fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800643a:	f001 ff23 	bl	8008284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800643e:	2300      	movs	r3, #0
 8006440:	e05c      	b.n	80064fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006448:	f107 0314 	add.w	r3, r7, #20
 800644c:	4618      	mov	r0, r3
 800644e:	f001 f82f 	bl	80074b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006452:	2301      	movs	r3, #1
 8006454:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006456:	f001 ff15 	bl	8008284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800645a:	f000 fd9b 	bl	8006f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800645e:	f001 fee1 	bl	8008224 <vPortEnterCritical>
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006468:	b25b      	sxtb	r3, r3
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646e:	d103      	bne.n	8006478 <xQueueGenericSend+0x16c>
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800647e:	b25b      	sxtb	r3, r3
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006484:	d103      	bne.n	800648e <xQueueGenericSend+0x182>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800648e:	f001 fef9 	bl	8008284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006492:	1d3a      	adds	r2, r7, #4
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f001 f81e 	bl	80074dc <xTaskCheckForTimeOut>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d124      	bne.n	80064f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064a8:	f000 faa2 	bl	80069f0 <prvIsQueueFull>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d018      	beq.n	80064e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	3310      	adds	r3, #16
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4611      	mov	r1, r2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 ff44 	bl	8007348 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c2:	f000 fa2d 	bl	8006920 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064c6:	f000 fd73 	bl	8006fb0 <xTaskResumeAll>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f47f af7c 	bne.w	80063ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064d2:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <xQueueGenericSend+0x1f8>)
 80064d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	e772      	b.n	80063ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064e6:	f000 fa1b 	bl	8006920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ea:	f000 fd61 	bl	8006fb0 <xTaskResumeAll>
 80064ee:	e76c      	b.n	80063ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f2:	f000 fa15 	bl	8006920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064f6:	f000 fd5b 	bl	8006fb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3738      	adds	r7, #56	; 0x38
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b090      	sub	sp, #64	; 0x40
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <xQueueGenericSendFromISR+0x3c>
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <xQueueGenericSendFromISR+0x40>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <xQueueGenericSendFromISR+0x42>
 8006548:	2300      	movs	r3, #0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d103      	bne.n	8006572 <xQueueGenericSendFromISR+0x6a>
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656e:	2b01      	cmp	r3, #1
 8006570:	d101      	bne.n	8006576 <xQueueGenericSendFromISR+0x6e>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <xQueueGenericSendFromISR+0x70>
 8006576:	2300      	movs	r3, #0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	623b      	str	r3, [r7, #32]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006592:	f001 ff29 	bl	80083e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006596:	f3ef 8211 	mrs	r2, BASEPRI
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	61fa      	str	r2, [r7, #28]
 80065ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <xQueueGenericSendFromISR+0xbc>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d12f      	bne.n	8006624 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065da:	f000 f911 	bl	8006800 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	d112      	bne.n	800660e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d016      	beq.n	800661e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	3324      	adds	r3, #36	; 0x24
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fef7 	bl	80073e8 <xTaskRemoveFromEventList>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00e      	beq.n	800661e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00b      	beq.n	800661e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	e007      	b.n	800661e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800660e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006612:	3301      	adds	r3, #1
 8006614:	b2db      	uxtb	r3, r3
 8006616:	b25a      	sxtb	r2, r3
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800661e:	2301      	movs	r3, #1
 8006620:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006622:	e001      	b.n	8006628 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006624:	2300      	movs	r3, #0
 8006626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006632:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006636:	4618      	mov	r0, r3
 8006638:	3740      	adds	r7, #64	; 0x40
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08c      	sub	sp, #48	; 0x30
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800664c:	2300      	movs	r3, #0
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <xQueueReceive+0x30>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	623b      	str	r3, [r7, #32]
}
 800666c:	bf00      	nop
 800666e:	e7fe      	b.n	800666e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d103      	bne.n	800667e <xQueueReceive+0x3e>
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <xQueueReceive+0x42>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <xQueueReceive+0x44>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <xQueueReceive+0x5e>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	61fb      	str	r3, [r7, #28]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800669e:	f001 f865 	bl	800776c <xTaskGetSchedulerState>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <xQueueReceive+0x6e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <xQueueReceive+0x72>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <xQueueReceive+0x74>
 80066b2:	2300      	movs	r3, #0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <xQueueReceive+0x8e>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	61bb      	str	r3, [r7, #24]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ce:	f001 fda9 	bl	8008224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01f      	beq.n	800671e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e2:	f000 f8f7 	bl	80068d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	1e5a      	subs	r2, r3, #1
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00f      	beq.n	8006716 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	3310      	adds	r3, #16
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 fe74 	bl	80073e8 <xTaskRemoveFromEventList>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006706:	4b3d      	ldr	r3, [pc, #244]	; (80067fc <xQueueReceive+0x1bc>)
 8006708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006716:	f001 fdb5 	bl	8008284 <vPortExitCritical>
				return pdPASS;
 800671a:	2301      	movs	r3, #1
 800671c:	e069      	b.n	80067f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006724:	f001 fdae 	bl	8008284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006728:	2300      	movs	r3, #0
 800672a:	e062      	b.n	80067f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006732:	f107 0310 	add.w	r3, r7, #16
 8006736:	4618      	mov	r0, r3
 8006738:	f000 feba 	bl	80074b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006740:	f001 fda0 	bl	8008284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006744:	f000 fc26 	bl	8006f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006748:	f001 fd6c 	bl	8008224 <vPortEnterCritical>
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006752:	b25b      	sxtb	r3, r3
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d103      	bne.n	8006762 <xQueueReceive+0x122>
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006768:	b25b      	sxtb	r3, r3
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676e:	d103      	bne.n	8006778 <xQueueReceive+0x138>
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006778:	f001 fd84 	bl	8008284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800677c:	1d3a      	adds	r2, r7, #4
 800677e:	f107 0310 	add.w	r3, r7, #16
 8006782:	4611      	mov	r1, r2
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fea9 	bl	80074dc <xTaskCheckForTimeOut>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d123      	bne.n	80067d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006792:	f000 f917 	bl	80069c4 <prvIsQueueEmpty>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d017      	beq.n	80067cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	3324      	adds	r3, #36	; 0x24
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	4611      	mov	r1, r2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fdcf 	bl	8007348 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ac:	f000 f8b8 	bl	8006920 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067b0:	f000 fbfe 	bl	8006fb0 <xTaskResumeAll>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d189      	bne.n	80066ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80067ba:	4b10      	ldr	r3, [pc, #64]	; (80067fc <xQueueReceive+0x1bc>)
 80067bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	e780      	b.n	80066ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ce:	f000 f8a7 	bl	8006920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067d2:	f000 fbed 	bl	8006fb0 <xTaskResumeAll>
 80067d6:	e77a      	b.n	80066ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067da:	f000 f8a1 	bl	8006920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067de:	f000 fbe7 	bl	8006fb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e4:	f000 f8ee 	bl	80069c4 <prvIsQueueEmpty>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f43f af6f 	beq.w	80066ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3730      	adds	r7, #48	; 0x30
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10d      	bne.n	800683a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d14d      	bne.n	80068c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 ffbc 	bl	80077a8 <xTaskPriorityDisinherit>
 8006830:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	609a      	str	r2, [r3, #8]
 8006838:	e043      	b.n	80068c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d119      	bne.n	8006874 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6858      	ldr	r0, [r3, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	461a      	mov	r2, r3
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	f002 fe71 	bl	8009532 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	441a      	add	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d32b      	bcc.n	80068c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	605a      	str	r2, [r3, #4]
 8006872:	e026      	b.n	80068c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68d8      	ldr	r0, [r3, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	461a      	mov	r2, r3
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	f002 fe57 	bl	8009532 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	425b      	negs	r3, r3
 800688e:	441a      	add	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d207      	bcs.n	80068b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	425b      	negs	r3, r3
 80068aa:	441a      	add	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d105      	bne.n	80068c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	3b01      	subs	r3, #1
 80068c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068ca:	697b      	ldr	r3, [r7, #20]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d018      	beq.n	8006918 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	441a      	add	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d303      	bcc.n	8006908 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68d9      	ldr	r1, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	461a      	mov	r2, r3
 8006912:	6838      	ldr	r0, [r7, #0]
 8006914:	f002 fe0d 	bl	8009532 <memcpy>
	}
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006928:	f001 fc7c 	bl	8008224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006932:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006934:	e011      	b.n	800695a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	2b00      	cmp	r3, #0
 800693c:	d012      	beq.n	8006964 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3324      	adds	r3, #36	; 0x24
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fd50 	bl	80073e8 <xTaskRemoveFromEventList>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800694e:	f000 fe27 	bl	80075a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	3b01      	subs	r3, #1
 8006956:	b2db      	uxtb	r3, r3
 8006958:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800695a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	dce9      	bgt.n	8006936 <prvUnlockQueue+0x16>
 8006962:	e000      	b.n	8006966 <prvUnlockQueue+0x46>
					break;
 8006964:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	22ff      	movs	r2, #255	; 0xff
 800696a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800696e:	f001 fc89 	bl	8008284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006972:	f001 fc57 	bl	8008224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800697c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800697e:	e011      	b.n	80069a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d012      	beq.n	80069ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3310      	adds	r3, #16
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fd2b 	bl	80073e8 <xTaskRemoveFromEventList>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006998:	f000 fe02 	bl	80075a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	3b01      	subs	r3, #1
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dce9      	bgt.n	8006980 <prvUnlockQueue+0x60>
 80069ac:	e000      	b.n	80069b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	22ff      	movs	r2, #255	; 0xff
 80069b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069b8:	f001 fc64 	bl	8008284 <vPortExitCritical>
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069cc:	f001 fc2a 	bl	8008224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d102      	bne.n	80069de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069d8:	2301      	movs	r3, #1
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	e001      	b.n	80069e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069e2:	f001 fc4f 	bl	8008284 <vPortExitCritical>

	return xReturn;
 80069e6:	68fb      	ldr	r3, [r7, #12]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069f8:	f001 fc14 	bl	8008224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d102      	bne.n	8006a0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	e001      	b.n	8006a12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a12:	f001 fc37 	bl	8008284 <vPortExitCritical>

	return xReturn;
 8006a16:	68fb      	ldr	r3, [r7, #12]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e014      	b.n	8006a5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a30:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <vQueueAddToRegistry+0x50>)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a3c:	490c      	ldr	r1, [pc, #48]	; (8006a70 <vQueueAddToRegistry+0x50>)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a46:	4a0a      	ldr	r2, [pc, #40]	; (8006a70 <vQueueAddToRegistry+0x50>)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a52:	e006      	b.n	8006a62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b07      	cmp	r3, #7
 8006a5e:	d9e7      	bls.n	8006a30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	20000f90 	.word	0x20000f90

08006a74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a84:	f001 fbce 	bl	8008224 <vPortEnterCritical>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a8e:	b25b      	sxtb	r3, r3
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d103      	bne.n	8006a9e <vQueueWaitForMessageRestricted+0x2a>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aa4:	b25b      	sxtb	r3, r3
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d103      	bne.n	8006ab4 <vQueueWaitForMessageRestricted+0x40>
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab4:	f001 fbe6 	bl	8008284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d106      	bne.n	8006ace <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	3324      	adds	r3, #36	; 0x24
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fc61 	bl	8007390 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ace:	6978      	ldr	r0, [r7, #20]
 8006ad0:	f7ff ff26 	bl	8006920 <prvUnlockQueue>
	}
 8006ad4:	bf00      	nop
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08e      	sub	sp, #56	; 0x38
 8006ae0:	af04      	add	r7, sp, #16
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	623b      	str	r3, [r7, #32]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	61fb      	str	r3, [r7, #28]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b22:	23a8      	movs	r3, #168	; 0xa8
 8006b24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2ba8      	cmp	r3, #168	; 0xa8
 8006b2a:	d00a      	beq.n	8006b42 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	61bb      	str	r3, [r7, #24]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01e      	beq.n	8006b88 <xTaskCreateStatic+0xac>
 8006b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01b      	beq.n	8006b88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b62:	2300      	movs	r3, #0
 8006b64:	9303      	str	r3, [sp, #12]
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	9302      	str	r3, [sp, #8]
 8006b6a:	f107 0314 	add.w	r3, r7, #20
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 f850 	bl	8006c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b82:	f000 f8f3 	bl	8006d6c <prvAddNewTaskToReadyList>
 8006b86:	e001      	b.n	8006b8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b8c:	697b      	ldr	r3, [r7, #20]
	}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3728      	adds	r7, #40	; 0x28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b08c      	sub	sp, #48	; 0x30
 8006b9a:	af04      	add	r7, sp, #16
 8006b9c:	60f8      	str	r0, [r7, #12]
 8006b9e:	60b9      	str	r1, [r7, #8]
 8006ba0:	603b      	str	r3, [r7, #0]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ba6:	88fb      	ldrh	r3, [r7, #6]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 fc5c 	bl	8008468 <pvPortMalloc>
 8006bb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00e      	beq.n	8006bd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bb8:	20a8      	movs	r0, #168	; 0xa8
 8006bba:	f001 fc55 	bl	8008468 <pvPortMalloc>
 8006bbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
 8006bcc:	e005      	b.n	8006bda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bce:	6978      	ldr	r0, [r7, #20]
 8006bd0:	f001 fd16 	bl	8008600 <vPortFree>
 8006bd4:	e001      	b.n	8006bda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d017      	beq.n	8006c10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006be8:	88fa      	ldrh	r2, [r7, #6]
 8006bea:	2300      	movs	r3, #0
 8006bec:	9303      	str	r3, [sp, #12]
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	9302      	str	r3, [sp, #8]
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f80e 	bl	8006c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c04:	69f8      	ldr	r0, [r7, #28]
 8006c06:	f000 f8b1 	bl	8006d6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	e002      	b.n	8006c16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c10:	f04f 33ff 	mov.w	r3, #4294967295
 8006c14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c16:	69bb      	ldr	r3, [r7, #24]
	}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3720      	adds	r7, #32
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	461a      	mov	r2, r3
 8006c38:	21a5      	movs	r1, #165	; 0xa5
 8006c3a:	f002 fba4 	bl	8009386 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	f023 0307 	bic.w	r3, r3, #7
 8006c56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00a      	beq.n	8006c78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	617b      	str	r3, [r7, #20]
}
 8006c74:	bf00      	nop
 8006c76:	e7fe      	b.n	8006c76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01f      	beq.n	8006cbe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	e012      	b.n	8006caa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	7819      	ldrb	r1, [r3, #0]
 8006c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	3334      	adds	r3, #52	; 0x34
 8006c94:	460a      	mov	r2, r1
 8006c96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d006      	beq.n	8006cb2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	2b0f      	cmp	r3, #15
 8006cae:	d9e9      	bls.n	8006c84 <prvInitialiseNewTask+0x64>
 8006cb0:	e000      	b.n	8006cb4 <prvInitialiseNewTask+0x94>
			{
				break;
 8006cb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cbc:	e003      	b.n	8006cc6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	2b37      	cmp	r3, #55	; 0x37
 8006cca:	d901      	bls.n	8006cd0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ccc:	2337      	movs	r3, #55	; 0x37
 8006cce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	2200      	movs	r2, #0
 8006ce0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff f978 	bl	8005fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	3318      	adds	r3, #24
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff f973 	bl	8005fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	3354      	adds	r3, #84	; 0x54
 8006d20:	224c      	movs	r2, #76	; 0x4c
 8006d22:	2100      	movs	r1, #0
 8006d24:	4618      	mov	r0, r3
 8006d26:	f002 fb2e 	bl	8009386 <memset>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	4a0c      	ldr	r2, [pc, #48]	; (8006d60 <prvInitialiseNewTask+0x140>)
 8006d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	4a0c      	ldr	r2, [pc, #48]	; (8006d64 <prvInitialiseNewTask+0x144>)
 8006d34:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	4a0b      	ldr	r2, [pc, #44]	; (8006d68 <prvInitialiseNewTask+0x148>)
 8006d3a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	69b8      	ldr	r0, [r7, #24]
 8006d42:	f001 f941 	bl	8007fc8 <pxPortInitialiseStack>
 8006d46:	4602      	mov	r2, r0
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d58:	bf00      	nop
 8006d5a:	3720      	adds	r7, #32
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20005224 	.word	0x20005224
 8006d64:	2000528c 	.word	0x2000528c
 8006d68:	200052f4 	.word	0x200052f4

08006d6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d74:	f001 fa56 	bl	8008224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d78:	4b2d      	ldr	r3, [pc, #180]	; (8006e30 <prvAddNewTaskToReadyList+0xc4>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	4a2c      	ldr	r2, [pc, #176]	; (8006e30 <prvAddNewTaskToReadyList+0xc4>)
 8006d80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d82:	4b2c      	ldr	r3, [pc, #176]	; (8006e34 <prvAddNewTaskToReadyList+0xc8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d8a:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <prvAddNewTaskToReadyList+0xc8>)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d90:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <prvAddNewTaskToReadyList+0xc4>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d110      	bne.n	8006dba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d98:	f000 fc26 	bl	80075e8 <prvInitialiseTaskLists>
 8006d9c:	e00d      	b.n	8006dba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d9e:	4b26      	ldr	r3, [pc, #152]	; (8006e38 <prvAddNewTaskToReadyList+0xcc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006da6:	4b23      	ldr	r3, [pc, #140]	; (8006e34 <prvAddNewTaskToReadyList+0xc8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d802      	bhi.n	8006dba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006db4:	4a1f      	ldr	r2, [pc, #124]	; (8006e34 <prvAddNewTaskToReadyList+0xc8>)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dba:	4b20      	ldr	r3, [pc, #128]	; (8006e3c <prvAddNewTaskToReadyList+0xd0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <prvAddNewTaskToReadyList+0xd0>)
 8006dc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dc4:	4b1d      	ldr	r3, [pc, #116]	; (8006e3c <prvAddNewTaskToReadyList+0xd0>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd0:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <prvAddNewTaskToReadyList+0xd4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d903      	bls.n	8006de0 <prvAddNewTaskToReadyList+0x74>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	4a18      	ldr	r2, [pc, #96]	; (8006e40 <prvAddNewTaskToReadyList+0xd4>)
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <prvAddNewTaskToReadyList+0xd8>)
 8006dee:	441a      	add	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f7ff f8fd 	bl	8005ff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006dfc:	f001 fa42 	bl	8008284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e00:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <prvAddNewTaskToReadyList+0xcc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00e      	beq.n	8006e26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <prvAddNewTaskToReadyList+0xc8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d207      	bcs.n	8006e26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e16:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <prvAddNewTaskToReadyList+0xdc>)
 8006e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	200014a4 	.word	0x200014a4
 8006e34:	20000fd0 	.word	0x20000fd0
 8006e38:	200014b0 	.word	0x200014b0
 8006e3c:	200014c0 	.word	0x200014c0
 8006e40:	200014ac 	.word	0x200014ac
 8006e44:	20000fd4 	.word	0x20000fd4
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d017      	beq.n	8006e8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e5e:	4b13      	ldr	r3, [pc, #76]	; (8006eac <vTaskDelay+0x60>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <vTaskDelay+0x30>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60bb      	str	r3, [r7, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e7c:	f000 f88a 	bl	8006f94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e80:	2100      	movs	r1, #0
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fcfe 	bl	8007884 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e88:	f000 f892 	bl	8006fb0 <xTaskResumeAll>
 8006e8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d107      	bne.n	8006ea4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e94:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <vTaskDelay+0x64>)
 8006e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ea4:	bf00      	nop
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	200014cc 	.word	0x200014cc
 8006eb0:	e000ed04 	.word	0xe000ed04

08006eb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	; 0x28
 8006eb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ec2:	463a      	mov	r2, r7
 8006ec4:	1d39      	adds	r1, r7, #4
 8006ec6:	f107 0308 	add.w	r3, r7, #8
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff f832 	bl	8005f34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	9202      	str	r2, [sp, #8]
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	2300      	movs	r3, #0
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	460a      	mov	r2, r1
 8006ee2:	4924      	ldr	r1, [pc, #144]	; (8006f74 <vTaskStartScheduler+0xc0>)
 8006ee4:	4824      	ldr	r0, [pc, #144]	; (8006f78 <vTaskStartScheduler+0xc4>)
 8006ee6:	f7ff fdf9 	bl	8006adc <xTaskCreateStatic>
 8006eea:	4603      	mov	r3, r0
 8006eec:	4a23      	ldr	r2, [pc, #140]	; (8006f7c <vTaskStartScheduler+0xc8>)
 8006eee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ef0:	4b22      	ldr	r3, [pc, #136]	; (8006f7c <vTaskStartScheduler+0xc8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	e001      	b.n	8006f02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d102      	bne.n	8006f0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f08:	f000 fd10 	bl	800792c <xTimerCreateTimerTask>
 8006f0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d11b      	bne.n	8006f4c <vTaskStartScheduler+0x98>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	613b      	str	r3, [r7, #16]
}
 8006f26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f28:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <vTaskStartScheduler+0xcc>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3354      	adds	r3, #84	; 0x54
 8006f2e:	4a15      	ldr	r2, [pc, #84]	; (8006f84 <vTaskStartScheduler+0xd0>)
 8006f30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <vTaskStartScheduler+0xd4>)
 8006f34:	f04f 32ff 	mov.w	r2, #4294967295
 8006f38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f3a:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <vTaskStartScheduler+0xd8>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f40:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <vTaskStartScheduler+0xdc>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f46:	f001 f8cb 	bl	80080e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f4a:	e00e      	b.n	8006f6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d10a      	bne.n	8006f6a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	60fb      	str	r3, [r7, #12]
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <vTaskStartScheduler+0xb4>
}
 8006f6a:	bf00      	nop
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	0800b71c 	.word	0x0800b71c
 8006f78:	080075b9 	.word	0x080075b9
 8006f7c:	200014c8 	.word	0x200014c8
 8006f80:	20000fd0 	.word	0x20000fd0
 8006f84:	200000a4 	.word	0x200000a4
 8006f88:	200014c4 	.word	0x200014c4
 8006f8c:	200014b0 	.word	0x200014b0
 8006f90:	200014a8 	.word	0x200014a8

08006f94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <vTaskSuspendAll+0x18>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	4a03      	ldr	r2, [pc, #12]	; (8006fac <vTaskSuspendAll+0x18>)
 8006fa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fa2:	bf00      	nop
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	200014cc 	.word	0x200014cc

08006fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fbe:	4b42      	ldr	r3, [pc, #264]	; (80070c8 <xTaskResumeAll+0x118>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <xTaskResumeAll+0x2c>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	603b      	str	r3, [r7, #0]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fdc:	f001 f922 	bl	8008224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fe0:	4b39      	ldr	r3, [pc, #228]	; (80070c8 <xTaskResumeAll+0x118>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	4a38      	ldr	r2, [pc, #224]	; (80070c8 <xTaskResumeAll+0x118>)
 8006fe8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fea:	4b37      	ldr	r3, [pc, #220]	; (80070c8 <xTaskResumeAll+0x118>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d162      	bne.n	80070b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ff2:	4b36      	ldr	r3, [pc, #216]	; (80070cc <xTaskResumeAll+0x11c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d05e      	beq.n	80070b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ffa:	e02f      	b.n	800705c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffc:	4b34      	ldr	r3, [pc, #208]	; (80070d0 <xTaskResumeAll+0x120>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3318      	adds	r3, #24
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff f851 	bl	80060b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3304      	adds	r3, #4
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff f84c 	bl	80060b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701c:	4b2d      	ldr	r3, [pc, #180]	; (80070d4 <xTaskResumeAll+0x124>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d903      	bls.n	800702c <xTaskResumeAll+0x7c>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	4a2a      	ldr	r2, [pc, #168]	; (80070d4 <xTaskResumeAll+0x124>)
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4a27      	ldr	r2, [pc, #156]	; (80070d8 <xTaskResumeAll+0x128>)
 800703a:	441a      	add	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3304      	adds	r3, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f7fe ffd7 	bl	8005ff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	4b23      	ldr	r3, [pc, #140]	; (80070dc <xTaskResumeAll+0x12c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007052:	429a      	cmp	r2, r3
 8007054:	d302      	bcc.n	800705c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007056:	4b22      	ldr	r3, [pc, #136]	; (80070e0 <xTaskResumeAll+0x130>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800705c:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <xTaskResumeAll+0x120>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1cb      	bne.n	8006ffc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800706a:	f000 fb5f 	bl	800772c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800706e:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <xTaskResumeAll+0x134>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d010      	beq.n	800709c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800707a:	f000 f847 	bl	800710c <xTaskIncrementTick>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007084:	4b16      	ldr	r3, [pc, #88]	; (80070e0 <xTaskResumeAll+0x130>)
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3b01      	subs	r3, #1
 800708e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f1      	bne.n	800707a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007096:	4b13      	ldr	r3, [pc, #76]	; (80070e4 <xTaskResumeAll+0x134>)
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800709c:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <xTaskResumeAll+0x130>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d009      	beq.n	80070b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070a8:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <xTaskResumeAll+0x138>)
 80070aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070b8:	f001 f8e4 	bl	8008284 <vPortExitCritical>

	return xAlreadyYielded;
 80070bc:	68bb      	ldr	r3, [r7, #8]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200014cc 	.word	0x200014cc
 80070cc:	200014a4 	.word	0x200014a4
 80070d0:	20001464 	.word	0x20001464
 80070d4:	200014ac 	.word	0x200014ac
 80070d8:	20000fd4 	.word	0x20000fd4
 80070dc:	20000fd0 	.word	0x20000fd0
 80070e0:	200014b8 	.word	0x200014b8
 80070e4:	200014b4 	.word	0x200014b4
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <xTaskGetTickCount+0x1c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070f8:	687b      	ldr	r3, [r7, #4]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	200014a8 	.word	0x200014a8

0800710c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007116:	4b4f      	ldr	r3, [pc, #316]	; (8007254 <xTaskIncrementTick+0x148>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f040 808f 	bne.w	800723e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007120:	4b4d      	ldr	r3, [pc, #308]	; (8007258 <xTaskIncrementTick+0x14c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007128:	4a4b      	ldr	r2, [pc, #300]	; (8007258 <xTaskIncrementTick+0x14c>)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d120      	bne.n	8007176 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007134:	4b49      	ldr	r3, [pc, #292]	; (800725c <xTaskIncrementTick+0x150>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <xTaskIncrementTick+0x48>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	603b      	str	r3, [r7, #0]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <xTaskIncrementTick+0x46>
 8007154:	4b41      	ldr	r3, [pc, #260]	; (800725c <xTaskIncrementTick+0x150>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	4b41      	ldr	r3, [pc, #260]	; (8007260 <xTaskIncrementTick+0x154>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a3f      	ldr	r2, [pc, #252]	; (800725c <xTaskIncrementTick+0x150>)
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	4a3f      	ldr	r2, [pc, #252]	; (8007260 <xTaskIncrementTick+0x154>)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	4b3e      	ldr	r3, [pc, #248]	; (8007264 <xTaskIncrementTick+0x158>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	4a3d      	ldr	r2, [pc, #244]	; (8007264 <xTaskIncrementTick+0x158>)
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	f000 fadb 	bl	800772c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007176:	4b3c      	ldr	r3, [pc, #240]	; (8007268 <xTaskIncrementTick+0x15c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	429a      	cmp	r2, r3
 800717e:	d349      	bcc.n	8007214 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007180:	4b36      	ldr	r3, [pc, #216]	; (800725c <xTaskIncrementTick+0x150>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800718a:	4b37      	ldr	r3, [pc, #220]	; (8007268 <xTaskIncrementTick+0x15c>)
 800718c:	f04f 32ff 	mov.w	r2, #4294967295
 8007190:	601a      	str	r2, [r3, #0]
					break;
 8007192:	e03f      	b.n	8007214 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007194:	4b31      	ldr	r3, [pc, #196]	; (800725c <xTaskIncrementTick+0x150>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d203      	bcs.n	80071b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071ac:	4a2e      	ldr	r2, [pc, #184]	; (8007268 <xTaskIncrementTick+0x15c>)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071b2:	e02f      	b.n	8007214 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe ff79 	bl	80060b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	3318      	adds	r3, #24
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe ff70 	bl	80060b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d4:	4b25      	ldr	r3, [pc, #148]	; (800726c <xTaskIncrementTick+0x160>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d903      	bls.n	80071e4 <xTaskIncrementTick+0xd8>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	4a22      	ldr	r2, [pc, #136]	; (800726c <xTaskIncrementTick+0x160>)
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <xTaskIncrementTick+0x164>)
 80071f2:	441a      	add	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f7fe fefb 	bl	8005ff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007204:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <xTaskIncrementTick+0x168>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	429a      	cmp	r2, r3
 800720c:	d3b8      	bcc.n	8007180 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007212:	e7b5      	b.n	8007180 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007214:	4b17      	ldr	r3, [pc, #92]	; (8007274 <xTaskIncrementTick+0x168>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	4915      	ldr	r1, [pc, #84]	; (8007270 <xTaskIncrementTick+0x164>)
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	440b      	add	r3, r1
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d901      	bls.n	8007230 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800722c:	2301      	movs	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007230:	4b11      	ldr	r3, [pc, #68]	; (8007278 <xTaskIncrementTick+0x16c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007238:	2301      	movs	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	e004      	b.n	8007248 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800723e:	4b0f      	ldr	r3, [pc, #60]	; (800727c <xTaskIncrementTick+0x170>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	4a0d      	ldr	r2, [pc, #52]	; (800727c <xTaskIncrementTick+0x170>)
 8007246:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007248:	697b      	ldr	r3, [r7, #20]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200014cc 	.word	0x200014cc
 8007258:	200014a8 	.word	0x200014a8
 800725c:	2000145c 	.word	0x2000145c
 8007260:	20001460 	.word	0x20001460
 8007264:	200014bc 	.word	0x200014bc
 8007268:	200014c4 	.word	0x200014c4
 800726c:	200014ac 	.word	0x200014ac
 8007270:	20000fd4 	.word	0x20000fd4
 8007274:	20000fd0 	.word	0x20000fd0
 8007278:	200014b8 	.word	0x200014b8
 800727c:	200014b4 	.word	0x200014b4

08007280 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007286:	4b2a      	ldr	r3, [pc, #168]	; (8007330 <vTaskSwitchContext+0xb0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800728e:	4b29      	ldr	r3, [pc, #164]	; (8007334 <vTaskSwitchContext+0xb4>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007294:	e046      	b.n	8007324 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007296:	4b27      	ldr	r3, [pc, #156]	; (8007334 <vTaskSwitchContext+0xb4>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729c:	4b26      	ldr	r3, [pc, #152]	; (8007338 <vTaskSwitchContext+0xb8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	e010      	b.n	80072c6 <vTaskSwitchContext+0x46>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	607b      	str	r3, [r7, #4]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <vTaskSwitchContext+0x3e>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	491d      	ldr	r1, [pc, #116]	; (800733c <vTaskSwitchContext+0xbc>)
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0e4      	beq.n	80072a4 <vTaskSwitchContext+0x24>
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4a15      	ldr	r2, [pc, #84]	; (800733c <vTaskSwitchContext+0xbc>)
 80072e6:	4413      	add	r3, r2
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	605a      	str	r2, [r3, #4]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	3308      	adds	r3, #8
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d104      	bne.n	800730a <vTaskSwitchContext+0x8a>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	605a      	str	r2, [r3, #4]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4a0b      	ldr	r2, [pc, #44]	; (8007340 <vTaskSwitchContext+0xc0>)
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	4a08      	ldr	r2, [pc, #32]	; (8007338 <vTaskSwitchContext+0xb8>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <vTaskSwitchContext+0xc0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3354      	adds	r3, #84	; 0x54
 8007320:	4a08      	ldr	r2, [pc, #32]	; (8007344 <vTaskSwitchContext+0xc4>)
 8007322:	6013      	str	r3, [r2, #0]
}
 8007324:	bf00      	nop
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	200014cc 	.word	0x200014cc
 8007334:	200014b8 	.word	0x200014b8
 8007338:	200014ac 	.word	0x200014ac
 800733c:	20000fd4 	.word	0x20000fd4
 8007340:	20000fd0 	.word	0x20000fd0
 8007344:	200000a4 	.word	0x200000a4

08007348 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	60fb      	str	r3, [r7, #12]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <vTaskPlaceOnEventList+0x44>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3318      	adds	r3, #24
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fe fe61 	bl	800603e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800737c:	2101      	movs	r1, #1
 800737e:	6838      	ldr	r0, [r7, #0]
 8007380:	f000 fa80 	bl	8007884 <prvAddCurrentTaskToDelayedList>
}
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20000fd0 	.word	0x20000fd0

08007390 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	617b      	str	r3, [r7, #20]
}
 80073b4:	bf00      	nop
 80073b6:	e7fe      	b.n	80073b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073b8:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3318      	adds	r3, #24
 80073be:	4619      	mov	r1, r3
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f7fe fe18 	bl	8005ff6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80073cc:	f04f 33ff 	mov.w	r3, #4294967295
 80073d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	68b8      	ldr	r0, [r7, #8]
 80073d6:	f000 fa55 	bl	8007884 <prvAddCurrentTaskToDelayedList>
	}
 80073da:	bf00      	nop
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000fd0 	.word	0x20000fd0

080073e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10a      	bne.n	8007414 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	60fb      	str	r3, [r7, #12]
}
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	3318      	adds	r3, #24
 8007418:	4618      	mov	r0, r3
 800741a:	f7fe fe49 	bl	80060b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800741e:	4b1e      	ldr	r3, [pc, #120]	; (8007498 <xTaskRemoveFromEventList+0xb0>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d11d      	bne.n	8007462 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	3304      	adds	r3, #4
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fe40 	bl	80060b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	4b19      	ldr	r3, [pc, #100]	; (800749c <xTaskRemoveFromEventList+0xb4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d903      	bls.n	8007444 <xTaskRemoveFromEventList+0x5c>
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	4a16      	ldr	r2, [pc, #88]	; (800749c <xTaskRemoveFromEventList+0xb4>)
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <xTaskRemoveFromEventList+0xb8>)
 8007452:	441a      	add	r2, r3
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	3304      	adds	r3, #4
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f7fe fdcb 	bl	8005ff6 <vListInsertEnd>
 8007460:	e005      	b.n	800746e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	3318      	adds	r3, #24
 8007466:	4619      	mov	r1, r3
 8007468:	480e      	ldr	r0, [pc, #56]	; (80074a4 <xTaskRemoveFromEventList+0xbc>)
 800746a:	f7fe fdc4 	bl	8005ff6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007472:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <xTaskRemoveFromEventList+0xc0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	429a      	cmp	r2, r3
 800747a:	d905      	bls.n	8007488 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007480:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <xTaskRemoveFromEventList+0xc4>)
 8007482:	2201      	movs	r2, #1
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	e001      	b.n	800748c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800748c:	697b      	ldr	r3, [r7, #20]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	200014cc 	.word	0x200014cc
 800749c:	200014ac 	.word	0x200014ac
 80074a0:	20000fd4 	.word	0x20000fd4
 80074a4:	20001464 	.word	0x20001464
 80074a8:	20000fd0 	.word	0x20000fd0
 80074ac:	200014b8 	.word	0x200014b8

080074b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074b8:	4b06      	ldr	r3, [pc, #24]	; (80074d4 <vTaskInternalSetTimeOutState+0x24>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074c0:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <vTaskInternalSetTimeOutState+0x28>)
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	605a      	str	r2, [r3, #4]
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	200014bc 	.word	0x200014bc
 80074d8:	200014a8 	.word	0x200014a8

080074dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	613b      	str	r3, [r7, #16]
}
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	60fb      	str	r3, [r7, #12]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800751e:	f000 fe81 	bl	8008224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007522:	4b1d      	ldr	r3, [pc, #116]	; (8007598 <xTaskCheckForTimeOut+0xbc>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753a:	d102      	bne.n	8007542 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800753c:	2300      	movs	r3, #0
 800753e:	61fb      	str	r3, [r7, #28]
 8007540:	e023      	b.n	800758a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	4b15      	ldr	r3, [pc, #84]	; (800759c <xTaskCheckForTimeOut+0xc0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d007      	beq.n	800755e <xTaskCheckForTimeOut+0x82>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	429a      	cmp	r2, r3
 8007556:	d302      	bcc.n	800755e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007558:	2301      	movs	r3, #1
 800755a:	61fb      	str	r3, [r7, #28]
 800755c:	e015      	b.n	800758a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	429a      	cmp	r2, r3
 8007566:	d20b      	bcs.n	8007580 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	1ad2      	subs	r2, r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff ff9b 	bl	80074b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800757a:	2300      	movs	r3, #0
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	e004      	b.n	800758a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007586:	2301      	movs	r3, #1
 8007588:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800758a:	f000 fe7b 	bl	8008284 <vPortExitCritical>

	return xReturn;
 800758e:	69fb      	ldr	r3, [r7, #28]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3720      	adds	r7, #32
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	200014a8 	.word	0x200014a8
 800759c:	200014bc 	.word	0x200014bc

080075a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075a4:	4b03      	ldr	r3, [pc, #12]	; (80075b4 <vTaskMissedYield+0x14>)
 80075a6:	2201      	movs	r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
}
 80075aa:	bf00      	nop
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	200014b8 	.word	0x200014b8

080075b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075c0:	f000 f852 	bl	8007668 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075c4:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <prvIdleTask+0x28>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d9f9      	bls.n	80075c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075cc:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <prvIdleTask+0x2c>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075dc:	e7f0      	b.n	80075c0 <prvIdleTask+0x8>
 80075de:	bf00      	nop
 80075e0:	20000fd4 	.word	0x20000fd4
 80075e4:	e000ed04 	.word	0xe000ed04

080075e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
 80075f2:	e00c      	b.n	800760e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4a12      	ldr	r2, [pc, #72]	; (8007648 <prvInitialiseTaskLists+0x60>)
 8007600:	4413      	add	r3, r2
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fcca 	bl	8005f9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3301      	adds	r3, #1
 800760c:	607b      	str	r3, [r7, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b37      	cmp	r3, #55	; 0x37
 8007612:	d9ef      	bls.n	80075f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007614:	480d      	ldr	r0, [pc, #52]	; (800764c <prvInitialiseTaskLists+0x64>)
 8007616:	f7fe fcc1 	bl	8005f9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800761a:	480d      	ldr	r0, [pc, #52]	; (8007650 <prvInitialiseTaskLists+0x68>)
 800761c:	f7fe fcbe 	bl	8005f9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007620:	480c      	ldr	r0, [pc, #48]	; (8007654 <prvInitialiseTaskLists+0x6c>)
 8007622:	f7fe fcbb 	bl	8005f9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007626:	480c      	ldr	r0, [pc, #48]	; (8007658 <prvInitialiseTaskLists+0x70>)
 8007628:	f7fe fcb8 	bl	8005f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800762c:	480b      	ldr	r0, [pc, #44]	; (800765c <prvInitialiseTaskLists+0x74>)
 800762e:	f7fe fcb5 	bl	8005f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007632:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <prvInitialiseTaskLists+0x78>)
 8007634:	4a05      	ldr	r2, [pc, #20]	; (800764c <prvInitialiseTaskLists+0x64>)
 8007636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007638:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <prvInitialiseTaskLists+0x7c>)
 800763a:	4a05      	ldr	r2, [pc, #20]	; (8007650 <prvInitialiseTaskLists+0x68>)
 800763c:	601a      	str	r2, [r3, #0]
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000fd4 	.word	0x20000fd4
 800764c:	20001434 	.word	0x20001434
 8007650:	20001448 	.word	0x20001448
 8007654:	20001464 	.word	0x20001464
 8007658:	20001478 	.word	0x20001478
 800765c:	20001490 	.word	0x20001490
 8007660:	2000145c 	.word	0x2000145c
 8007664:	20001460 	.word	0x20001460

08007668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800766e:	e019      	b.n	80076a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007670:	f000 fdd8 	bl	8008224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007674:	4b10      	ldr	r3, [pc, #64]	; (80076b8 <prvCheckTasksWaitingTermination+0x50>)
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe fd15 	bl	80060b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007686:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <prvCheckTasksWaitingTermination+0x54>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3b01      	subs	r3, #1
 800768c:	4a0b      	ldr	r2, [pc, #44]	; (80076bc <prvCheckTasksWaitingTermination+0x54>)
 800768e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <prvCheckTasksWaitingTermination+0x58>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3b01      	subs	r3, #1
 8007696:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <prvCheckTasksWaitingTermination+0x58>)
 8007698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800769a:	f000 fdf3 	bl	8008284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f810 	bl	80076c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076a4:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <prvCheckTasksWaitingTermination+0x58>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e1      	bne.n	8007670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20001478 	.word	0x20001478
 80076bc:	200014a4 	.word	0x200014a4
 80076c0:	2000148c 	.word	0x2000148c

080076c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3354      	adds	r3, #84	; 0x54
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 fe75 	bl	80093c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d108      	bne.n	80076f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 ff8b 	bl	8008600 <vPortFree>
				vPortFree( pxTCB );
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 ff88 	bl	8008600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076f0:	e018      	b.n	8007724 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d103      	bne.n	8007704 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 ff7f 	bl	8008600 <vPortFree>
	}
 8007702:	e00f      	b.n	8007724 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800770a:	2b02      	cmp	r3, #2
 800770c:	d00a      	beq.n	8007724 <prvDeleteTCB+0x60>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	60fb      	str	r3, [r7, #12]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <prvDeleteTCB+0x5e>
	}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007732:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <prvResetNextTaskUnblockTime+0x38>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d104      	bne.n	8007746 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <prvResetNextTaskUnblockTime+0x3c>)
 800773e:	f04f 32ff 	mov.w	r2, #4294967295
 8007742:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007744:	e008      	b.n	8007758 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <prvResetNextTaskUnblockTime+0x38>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	4a04      	ldr	r2, [pc, #16]	; (8007768 <prvResetNextTaskUnblockTime+0x3c>)
 8007756:	6013      	str	r3, [r2, #0]
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	2000145c 	.word	0x2000145c
 8007768:	200014c4 	.word	0x200014c4

0800776c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007772:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <xTaskGetSchedulerState+0x34>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d102      	bne.n	8007780 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800777a:	2301      	movs	r3, #1
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	e008      	b.n	8007792 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007780:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <xTaskGetSchedulerState+0x38>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007788:	2302      	movs	r3, #2
 800778a:	607b      	str	r3, [r7, #4]
 800778c:	e001      	b.n	8007792 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800778e:	2300      	movs	r3, #0
 8007790:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007792:	687b      	ldr	r3, [r7, #4]
	}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	200014b0 	.word	0x200014b0
 80077a4:	200014cc 	.word	0x200014cc

080077a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d056      	beq.n	800786c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077be:	4b2e      	ldr	r3, [pc, #184]	; (8007878 <xTaskPriorityDisinherit+0xd0>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d00a      	beq.n	80077de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	60fb      	str	r3, [r7, #12]
}
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10a      	bne.n	80077fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60bb      	str	r3, [r7, #8]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007800:	1e5a      	subs	r2, r3, #1
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780e:	429a      	cmp	r2, r3
 8007810:	d02c      	beq.n	800786c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007816:	2b00      	cmp	r3, #0
 8007818:	d128      	bne.n	800786c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	3304      	adds	r3, #4
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fc46 	bl	80060b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <xTaskPriorityDisinherit+0xd4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d903      	bls.n	800784c <xTaskPriorityDisinherit+0xa4>
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	4a0c      	ldr	r2, [pc, #48]	; (800787c <xTaskPriorityDisinherit+0xd4>)
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4a09      	ldr	r2, [pc, #36]	; (8007880 <xTaskPriorityDisinherit+0xd8>)
 800785a:	441a      	add	r2, r3
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	3304      	adds	r3, #4
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f7fe fbc7 	bl	8005ff6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800786c:	697b      	ldr	r3, [r7, #20]
	}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000fd0 	.word	0x20000fd0
 800787c:	200014ac 	.word	0x200014ac
 8007880:	20000fd4 	.word	0x20000fd4

08007884 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800788e:	4b21      	ldr	r3, [pc, #132]	; (8007914 <prvAddCurrentTaskToDelayedList+0x90>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007894:	4b20      	ldr	r3, [pc, #128]	; (8007918 <prvAddCurrentTaskToDelayedList+0x94>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3304      	adds	r3, #4
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fc08 	bl	80060b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d10a      	bne.n	80078be <prvAddCurrentTaskToDelayedList+0x3a>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d007      	beq.n	80078be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ae:	4b1a      	ldr	r3, [pc, #104]	; (8007918 <prvAddCurrentTaskToDelayedList+0x94>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4619      	mov	r1, r3
 80078b6:	4819      	ldr	r0, [pc, #100]	; (800791c <prvAddCurrentTaskToDelayedList+0x98>)
 80078b8:	f7fe fb9d 	bl	8005ff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078bc:	e026      	b.n	800790c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4413      	add	r3, r2
 80078c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <prvAddCurrentTaskToDelayedList+0x94>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d209      	bcs.n	80078ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078d6:	4b12      	ldr	r3, [pc, #72]	; (8007920 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <prvAddCurrentTaskToDelayedList+0x94>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3304      	adds	r3, #4
 80078e0:	4619      	mov	r1, r3
 80078e2:	4610      	mov	r0, r2
 80078e4:	f7fe fbab 	bl	800603e <vListInsert>
}
 80078e8:	e010      	b.n	800790c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ea:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <prvAddCurrentTaskToDelayedList+0x94>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7fe fba1 	bl	800603e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	429a      	cmp	r2, r3
 8007904:	d202      	bcs.n	800790c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007906:	4a08      	ldr	r2, [pc, #32]	; (8007928 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	6013      	str	r3, [r2, #0]
}
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	200014a8 	.word	0x200014a8
 8007918:	20000fd0 	.word	0x20000fd0
 800791c:	20001490 	.word	0x20001490
 8007920:	20001460 	.word	0x20001460
 8007924:	2000145c 	.word	0x2000145c
 8007928:	200014c4 	.word	0x200014c4

0800792c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	; 0x28
 8007930:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007932:	2300      	movs	r3, #0
 8007934:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007936:	f000 fb07 	bl	8007f48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800793a:	4b1c      	ldr	r3, [pc, #112]	; (80079ac <xTimerCreateTimerTask+0x80>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d021      	beq.n	8007986 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800794a:	1d3a      	adds	r2, r7, #4
 800794c:	f107 0108 	add.w	r1, r7, #8
 8007950:	f107 030c 	add.w	r3, r7, #12
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fb07 	bl	8005f68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	9202      	str	r2, [sp, #8]
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	2302      	movs	r3, #2
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	2300      	movs	r3, #0
 800796a:	460a      	mov	r2, r1
 800796c:	4910      	ldr	r1, [pc, #64]	; (80079b0 <xTimerCreateTimerTask+0x84>)
 800796e:	4811      	ldr	r0, [pc, #68]	; (80079b4 <xTimerCreateTimerTask+0x88>)
 8007970:	f7ff f8b4 	bl	8006adc <xTaskCreateStatic>
 8007974:	4603      	mov	r3, r0
 8007976:	4a10      	ldr	r2, [pc, #64]	; (80079b8 <xTimerCreateTimerTask+0x8c>)
 8007978:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800797a:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <xTimerCreateTimerTask+0x8c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007982:	2301      	movs	r3, #1
 8007984:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	613b      	str	r3, [r7, #16]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079a2:	697b      	ldr	r3, [r7, #20]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20001500 	.word	0x20001500
 80079b0:	0800b724 	.word	0x0800b724
 80079b4:	08007af1 	.word	0x08007af1
 80079b8:	20001504 	.word	0x20001504

080079bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	; 0x28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	623b      	str	r3, [r7, #32]
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079ea:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <xTimerGenericCommand+0x98>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d02a      	beq.n	8007a48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b05      	cmp	r3, #5
 8007a02:	dc18      	bgt.n	8007a36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a04:	f7ff feb2 	bl	800776c <xTaskGetSchedulerState>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d109      	bne.n	8007a22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a0e:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <xTimerGenericCommand+0x98>)
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	f107 0110 	add.w	r1, r7, #16
 8007a16:	2300      	movs	r3, #0
 8007a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1a:	f7fe fc77 	bl	800630c <xQueueGenericSend>
 8007a1e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a20:	e012      	b.n	8007a48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a22:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <xTimerGenericCommand+0x98>)
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	f107 0110 	add.w	r1, r7, #16
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f7fe fc6d 	bl	800630c <xQueueGenericSend>
 8007a32:	6278      	str	r0, [r7, #36]	; 0x24
 8007a34:	e008      	b.n	8007a48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a36:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <xTimerGenericCommand+0x98>)
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f107 0110 	add.w	r1, r7, #16
 8007a3e:	2300      	movs	r3, #0
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	f7fe fd61 	bl	8006508 <xQueueGenericSendFromISR>
 8007a46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3728      	adds	r7, #40	; 0x28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20001500 	.word	0x20001500

08007a58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a62:	4b22      	ldr	r3, [pc, #136]	; (8007aec <prvProcessExpiredTimer+0x94>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe fb1d 	bl	80060b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d022      	beq.n	8007aca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	699a      	ldr	r2, [r3, #24]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	18d1      	adds	r1, r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	6978      	ldr	r0, [r7, #20]
 8007a92:	f000 f8d1 	bl	8007c38 <prvInsertTimerInActiveList>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01f      	beq.n	8007adc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	6978      	ldr	r0, [r7, #20]
 8007aa8:	f7ff ff88 	bl	80079bc <xTimerGenericCommand>
 8007aac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d113      	bne.n	8007adc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	60fb      	str	r3, [r7, #12]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ad0:	f023 0301 	bic.w	r3, r3, #1
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	6978      	ldr	r0, [r7, #20]
 8007ae2:	4798      	blx	r3
}
 8007ae4:	bf00      	nop
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	200014f8 	.word	0x200014f8

08007af0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007af8:	f107 0308 	add.w	r3, r7, #8
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 f857 	bl	8007bb0 <prvGetNextExpireTime>
 8007b02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4619      	mov	r1, r3
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f803 	bl	8007b14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b0e:	f000 f8d5 	bl	8007cbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b12:	e7f1      	b.n	8007af8 <prvTimerTask+0x8>

08007b14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b1e:	f7ff fa39 	bl	8006f94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b22:	f107 0308 	add.w	r3, r7, #8
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f866 	bl	8007bf8 <prvSampleTimeNow>
 8007b2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d130      	bne.n	8007b96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <prvProcessTimerOrBlockTask+0x3c>
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d806      	bhi.n	8007b50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b42:	f7ff fa35 	bl	8006fb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff ff85 	bl	8007a58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b4e:	e024      	b.n	8007b9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d008      	beq.n	8007b68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b56:	4b13      	ldr	r3, [pc, #76]	; (8007ba4 <prvProcessTimerOrBlockTask+0x90>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <prvProcessTimerOrBlockTask+0x50>
 8007b60:	2301      	movs	r3, #1
 8007b62:	e000      	b.n	8007b66 <prvProcessTimerOrBlockTask+0x52>
 8007b64:	2300      	movs	r3, #0
 8007b66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b68:	4b0f      	ldr	r3, [pc, #60]	; (8007ba8 <prvProcessTimerOrBlockTask+0x94>)
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	4619      	mov	r1, r3
 8007b76:	f7fe ff7d 	bl	8006a74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b7a:	f7ff fa19 	bl	8006fb0 <xTaskResumeAll>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b84:	4b09      	ldr	r3, [pc, #36]	; (8007bac <prvProcessTimerOrBlockTask+0x98>)
 8007b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	f3bf 8f6f 	isb	sy
}
 8007b94:	e001      	b.n	8007b9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b96:	f7ff fa0b 	bl	8006fb0 <xTaskResumeAll>
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	200014fc 	.word	0x200014fc
 8007ba8:	20001500 	.word	0x20001500
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <prvGetNextExpireTime+0x44>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <prvGetNextExpireTime+0x16>
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	e000      	b.n	8007bc8 <prvGetNextExpireTime+0x18>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bd4:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <prvGetNextExpireTime+0x44>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e001      	b.n	8007be4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007be4:	68fb      	ldr	r3, [r7, #12]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	200014f8 	.word	0x200014f8

08007bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c00:	f7ff fa74 	bl	80070ec <xTaskGetTickCount>
 8007c04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c06:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <prvSampleTimeNow+0x3c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d205      	bcs.n	8007c1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c10:	f000 f936 	bl	8007e80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e002      	b.n	8007c22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c22:	4a04      	ldr	r2, [pc, #16]	; (8007c34 <prvSampleTimeNow+0x3c>)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c28:	68fb      	ldr	r3, [r7, #12]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20001508 	.word	0x20001508

08007c38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d812      	bhi.n	8007c84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	1ad2      	subs	r2, r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d302      	bcc.n	8007c72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	e01b      	b.n	8007caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c72:	4b10      	ldr	r3, [pc, #64]	; (8007cb4 <prvInsertTimerInActiveList+0x7c>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f7fe f9de 	bl	800603e <vListInsert>
 8007c82:	e012      	b.n	8007caa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d206      	bcs.n	8007c9a <prvInsertTimerInActiveList+0x62>
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d302      	bcc.n	8007c9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c94:	2301      	movs	r3, #1
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	e007      	b.n	8007caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c9a:	4b07      	ldr	r3, [pc, #28]	; (8007cb8 <prvInsertTimerInActiveList+0x80>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	f7fe f9ca 	bl	800603e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007caa:	697b      	ldr	r3, [r7, #20]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200014fc 	.word	0x200014fc
 8007cb8:	200014f8 	.word	0x200014f8

08007cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08e      	sub	sp, #56	; 0x38
 8007cc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cc2:	e0ca      	b.n	8007e5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	da18      	bge.n	8007cfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cca:	1d3b      	adds	r3, r7, #4
 8007ccc:	3304      	adds	r3, #4
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10a      	bne.n	8007cec <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	61fb      	str	r3, [r7, #28]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf2:	6850      	ldr	r0, [r2, #4]
 8007cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf6:	6892      	ldr	r2, [r2, #8]
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f2c0 80ab 	blt.w	8007e5a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	3304      	adds	r3, #4
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe f9cb 	bl	80060b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff ff6b 	bl	8007bf8 <prvSampleTimeNow>
 8007d22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b09      	cmp	r3, #9
 8007d28:	f200 8096 	bhi.w	8007e58 <prvProcessReceivedCommands+0x19c>
 8007d2c:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <prvProcessReceivedCommands+0x78>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d5d 	.word	0x08007d5d
 8007d38:	08007d5d 	.word	0x08007d5d
 8007d3c:	08007d5d 	.word	0x08007d5d
 8007d40:	08007dd1 	.word	0x08007dd1
 8007d44:	08007de5 	.word	0x08007de5
 8007d48:	08007e2f 	.word	0x08007e2f
 8007d4c:	08007d5d 	.word	0x08007d5d
 8007d50:	08007d5d 	.word	0x08007d5d
 8007d54:	08007dd1 	.word	0x08007dd1
 8007d58:	08007de5 	.word	0x08007de5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	18d1      	adds	r1, r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d7c:	f7ff ff5c 	bl	8007c38 <prvInsertTimerInActiveList>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d069      	beq.n	8007e5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d05e      	beq.n	8007e5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	441a      	add	r2, r3
 8007da4:	2300      	movs	r3, #0
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	2300      	movs	r3, #0
 8007daa:	2100      	movs	r1, #0
 8007dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dae:	f7ff fe05 	bl	80079bc <xTimerGenericCommand>
 8007db2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d14f      	bne.n	8007e5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	61bb      	str	r3, [r7, #24]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd6:	f023 0301 	bic.w	r3, r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007de2:	e03a      	b.n	8007e5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10a      	bne.n	8007e1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	617b      	str	r3, [r7, #20]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	699a      	ldr	r2, [r3, #24]
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	18d1      	adds	r1, r2, r3
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e28:	f7ff ff06 	bl	8007c38 <prvInsertTimerInActiveList>
					break;
 8007e2c:	e015      	b.n	8007e5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e3e:	f000 fbdf 	bl	8008600 <vPortFree>
 8007e42:	e00a      	b.n	8007e5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e4a:	f023 0301 	bic.w	r3, r3, #1
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e56:	e000      	b.n	8007e5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007e58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e5a:	4b08      	ldr	r3, [pc, #32]	; (8007e7c <prvProcessReceivedCommands+0x1c0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	1d39      	adds	r1, r7, #4
 8007e60:	2200      	movs	r2, #0
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe fbec 	bl	8006640 <xQueueReceive>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f47f af2a 	bne.w	8007cc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	3730      	adds	r7, #48	; 0x30
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20001500 	.word	0x20001500

08007e80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e86:	e048      	b.n	8007f1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e88:	4b2d      	ldr	r3, [pc, #180]	; (8007f40 <prvSwitchTimerLists+0xc0>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e92:	4b2b      	ldr	r3, [pc, #172]	; (8007f40 <prvSwitchTimerLists+0xc0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe f905 	bl	80060b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d02e      	beq.n	8007f1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d90e      	bls.n	8007eec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eda:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <prvSwitchTimerLists+0xc0>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	f7fe f8aa 	bl	800603e <vListInsert>
 8007eea:	e016      	b.n	8007f1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007eec:	2300      	movs	r3, #0
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff fd60 	bl	80079bc <xTimerGenericCommand>
 8007efc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	603b      	str	r3, [r7, #0]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f1a:	4b09      	ldr	r3, [pc, #36]	; (8007f40 <prvSwitchTimerLists+0xc0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1b1      	bne.n	8007e88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f24:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <prvSwitchTimerLists+0xc0>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f2a:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <prvSwitchTimerLists+0xc4>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a04      	ldr	r2, [pc, #16]	; (8007f40 <prvSwitchTimerLists+0xc0>)
 8007f30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f32:	4a04      	ldr	r2, [pc, #16]	; (8007f44 <prvSwitchTimerLists+0xc4>)
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	6013      	str	r3, [r2, #0]
}
 8007f38:	bf00      	nop
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	200014f8 	.word	0x200014f8
 8007f44:	200014fc 	.word	0x200014fc

08007f48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f4e:	f000 f969 	bl	8008224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f52:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <prvCheckForValidListAndQueue+0x60>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d120      	bne.n	8007f9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f5a:	4814      	ldr	r0, [pc, #80]	; (8007fac <prvCheckForValidListAndQueue+0x64>)
 8007f5c:	f7fe f81e 	bl	8005f9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f60:	4813      	ldr	r0, [pc, #76]	; (8007fb0 <prvCheckForValidListAndQueue+0x68>)
 8007f62:	f7fe f81b 	bl	8005f9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f66:	4b13      	ldr	r3, [pc, #76]	; (8007fb4 <prvCheckForValidListAndQueue+0x6c>)
 8007f68:	4a10      	ldr	r2, [pc, #64]	; (8007fac <prvCheckForValidListAndQueue+0x64>)
 8007f6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f6c:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <prvCheckForValidListAndQueue+0x70>)
 8007f6e:	4a10      	ldr	r2, [pc, #64]	; (8007fb0 <prvCheckForValidListAndQueue+0x68>)
 8007f70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f72:	2300      	movs	r3, #0
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	4b11      	ldr	r3, [pc, #68]	; (8007fbc <prvCheckForValidListAndQueue+0x74>)
 8007f78:	4a11      	ldr	r2, [pc, #68]	; (8007fc0 <prvCheckForValidListAndQueue+0x78>)
 8007f7a:	2110      	movs	r1, #16
 8007f7c:	200a      	movs	r0, #10
 8007f7e:	f7fe f929 	bl	80061d4 <xQueueGenericCreateStatic>
 8007f82:	4603      	mov	r3, r0
 8007f84:	4a08      	ldr	r2, [pc, #32]	; (8007fa8 <prvCheckForValidListAndQueue+0x60>)
 8007f86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f88:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <prvCheckForValidListAndQueue+0x60>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f90:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <prvCheckForValidListAndQueue+0x60>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	490b      	ldr	r1, [pc, #44]	; (8007fc4 <prvCheckForValidListAndQueue+0x7c>)
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fd42 	bl	8006a20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f9c:	f000 f972 	bl	8008284 <vPortExitCritical>
}
 8007fa0:	bf00      	nop
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20001500 	.word	0x20001500
 8007fac:	200014d0 	.word	0x200014d0
 8007fb0:	200014e4 	.word	0x200014e4
 8007fb4:	200014f8 	.word	0x200014f8
 8007fb8:	200014fc 	.word	0x200014fc
 8007fbc:	200015ac 	.word	0x200015ac
 8007fc0:	2000150c 	.word	0x2000150c
 8007fc4:	0800b72c 	.word	0x0800b72c

08007fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3b04      	subs	r3, #4
 8007fd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3b04      	subs	r3, #4
 8007fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f023 0201 	bic.w	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3b04      	subs	r3, #4
 8007ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ff8:	4a0c      	ldr	r2, [pc, #48]	; (800802c <pxPortInitialiseStack+0x64>)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3b14      	subs	r3, #20
 8008002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b04      	subs	r3, #4
 800800e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f06f 0202 	mvn.w	r2, #2
 8008016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3b20      	subs	r3, #32
 800801c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800801e:	68fb      	ldr	r3, [r7, #12]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	08008031 	.word	0x08008031

08008030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800803a:	4b12      	ldr	r3, [pc, #72]	; (8008084 <prvTaskExitError+0x54>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008042:	d00a      	beq.n	800805a <prvTaskExitError+0x2a>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	60fb      	str	r3, [r7, #12]
}
 8008056:	bf00      	nop
 8008058:	e7fe      	b.n	8008058 <prvTaskExitError+0x28>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	60bb      	str	r3, [r7, #8]
}
 800806c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800806e:	bf00      	nop
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0fc      	beq.n	8008070 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	20000048 	.word	0x20000048
	...

08008090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008090:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <pxCurrentTCBConst2>)
 8008092:	6819      	ldr	r1, [r3, #0]
 8008094:	6808      	ldr	r0, [r1, #0]
 8008096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	f380 8809 	msr	PSP, r0
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f380 8811 	msr	BASEPRI, r0
 80080aa:	4770      	bx	lr
 80080ac:	f3af 8000 	nop.w

080080b0 <pxCurrentTCBConst2>:
 80080b0:	20000fd0 	.word	0x20000fd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop

080080b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080b8:	4808      	ldr	r0, [pc, #32]	; (80080dc <prvPortStartFirstTask+0x24>)
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	6800      	ldr	r0, [r0, #0]
 80080be:	f380 8808 	msr	MSP, r0
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f380 8814 	msr	CONTROL, r0
 80080ca:	b662      	cpsie	i
 80080cc:	b661      	cpsie	f
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	df00      	svc	0
 80080d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080da:	bf00      	nop
 80080dc:	e000ed08 	.word	0xe000ed08

080080e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080e6:	4b46      	ldr	r3, [pc, #280]	; (8008200 <xPortStartScheduler+0x120>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a46      	ldr	r2, [pc, #280]	; (8008204 <xPortStartScheduler+0x124>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d10a      	bne.n	8008106 <xPortStartScheduler+0x26>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	613b      	str	r3, [r7, #16]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008106:	4b3e      	ldr	r3, [pc, #248]	; (8008200 <xPortStartScheduler+0x120>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a3f      	ldr	r2, [pc, #252]	; (8008208 <xPortStartScheduler+0x128>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10a      	bne.n	8008126 <xPortStartScheduler+0x46>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	60fb      	str	r3, [r7, #12]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008126:	4b39      	ldr	r3, [pc, #228]	; (800820c <xPortStartScheduler+0x12c>)
 8008128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b31      	ldr	r3, [pc, #196]	; (8008210 <xPortStartScheduler+0x130>)
 800814c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800814e:	4b31      	ldr	r3, [pc, #196]	; (8008214 <xPortStartScheduler+0x134>)
 8008150:	2207      	movs	r2, #7
 8008152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008154:	e009      	b.n	800816a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008156:	4b2f      	ldr	r3, [pc, #188]	; (8008214 <xPortStartScheduler+0x134>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3b01      	subs	r3, #1
 800815c:	4a2d      	ldr	r2, [pc, #180]	; (8008214 <xPortStartScheduler+0x134>)
 800815e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d0ef      	beq.n	8008156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008176:	4b27      	ldr	r3, [pc, #156]	; (8008214 <xPortStartScheduler+0x134>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f1c3 0307 	rsb	r3, r3, #7
 800817e:	2b04      	cmp	r3, #4
 8008180:	d00a      	beq.n	8008198 <xPortStartScheduler+0xb8>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60bb      	str	r3, [r7, #8]
}
 8008194:	bf00      	nop
 8008196:	e7fe      	b.n	8008196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008198:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <xPortStartScheduler+0x134>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	4a1d      	ldr	r2, [pc, #116]	; (8008214 <xPortStartScheduler+0x134>)
 80081a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081a2:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <xPortStartScheduler+0x134>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081aa:	4a1a      	ldr	r2, [pc, #104]	; (8008214 <xPortStartScheduler+0x134>)
 80081ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081b6:	4b18      	ldr	r3, [pc, #96]	; (8008218 <xPortStartScheduler+0x138>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a17      	ldr	r2, [pc, #92]	; (8008218 <xPortStartScheduler+0x138>)
 80081bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081c2:	4b15      	ldr	r3, [pc, #84]	; (8008218 <xPortStartScheduler+0x138>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a14      	ldr	r2, [pc, #80]	; (8008218 <xPortStartScheduler+0x138>)
 80081c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081ce:	f000 f8dd 	bl	800838c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081d2:	4b12      	ldr	r3, [pc, #72]	; (800821c <xPortStartScheduler+0x13c>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081d8:	f000 f8fc 	bl	80083d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081dc:	4b10      	ldr	r3, [pc, #64]	; (8008220 <xPortStartScheduler+0x140>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0f      	ldr	r2, [pc, #60]	; (8008220 <xPortStartScheduler+0x140>)
 80081e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081e8:	f7ff ff66 	bl	80080b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081ec:	f7ff f848 	bl	8007280 <vTaskSwitchContext>
	prvTaskExitError();
 80081f0:	f7ff ff1e 	bl	8008030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	e000ed00 	.word	0xe000ed00
 8008204:	410fc271 	.word	0x410fc271
 8008208:	410fc270 	.word	0x410fc270
 800820c:	e000e400 	.word	0xe000e400
 8008210:	200015fc 	.word	0x200015fc
 8008214:	20001600 	.word	0x20001600
 8008218:	e000ed20 	.word	0xe000ed20
 800821c:	20000048 	.word	0x20000048
 8008220:	e000ef34 	.word	0xe000ef34

08008224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	607b      	str	r3, [r7, #4]
}
 800823c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <vPortEnterCritical+0x58>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	4a0d      	ldr	r2, [pc, #52]	; (800827c <vPortEnterCritical+0x58>)
 8008246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <vPortEnterCritical+0x58>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d10f      	bne.n	8008270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008250:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <vPortEnterCritical+0x5c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <vPortEnterCritical+0x4c>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	603b      	str	r3, [r7, #0]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <vPortEnterCritical+0x4a>
	}
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000048 	.word	0x20000048
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <vPortExitCritical+0x50>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <vPortExitCritical+0x24>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	607b      	str	r3, [r7, #4]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082a8:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <vPortExitCritical+0x50>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	4a09      	ldr	r2, [pc, #36]	; (80082d4 <vPortExitCritical+0x50>)
 80082b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <vPortExitCritical+0x50>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <vPortExitCritical+0x42>
 80082ba:	2300      	movs	r3, #0
 80082bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f383 8811 	msr	BASEPRI, r3
}
 80082c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	20000048 	.word	0x20000048
	...

080082e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082e0:	f3ef 8009 	mrs	r0, PSP
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	4b15      	ldr	r3, [pc, #84]	; (8008340 <pxCurrentTCBConst>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	f01e 0f10 	tst.w	lr, #16
 80082f0:	bf08      	it	eq
 80082f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	6010      	str	r0, [r2, #0]
 80082fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008304:	f380 8811 	msr	BASEPRI, r0
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f7fe ffb6 	bl	8007280 <vTaskSwitchContext>
 8008314:	f04f 0000 	mov.w	r0, #0
 8008318:	f380 8811 	msr	BASEPRI, r0
 800831c:	bc09      	pop	{r0, r3}
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	6808      	ldr	r0, [r1, #0]
 8008322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008326:	f01e 0f10 	tst.w	lr, #16
 800832a:	bf08      	it	eq
 800832c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008330:	f380 8809 	msr	PSP, r0
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	f3af 8000 	nop.w

08008340 <pxCurrentTCBConst>:
 8008340:	20000fd0 	.word	0x20000fd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop

08008348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
}
 8008360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008362:	f7fe fed3 	bl	800710c <xTaskIncrementTick>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <xPortSysTickHandler+0x40>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f383 8811 	msr	BASEPRI, r3
}
 800837e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008390:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <vPortSetupTimerInterrupt+0x38>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800839c:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <vPortSetupTimerInterrupt+0x3c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <vPortSetupTimerInterrupt+0x40>)
 80083a2:	fba2 2303 	umull	r2, r3, r2, r3
 80083a6:	099b      	lsrs	r3, r3, #6
 80083a8:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <vPortSetupTimerInterrupt+0x44>)
 80083aa:	3b01      	subs	r3, #1
 80083ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ae:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 80083b0:	2207      	movs	r2, #7
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	e000e010 	.word	0xe000e010
 80083c4:	e000e018 	.word	0xe000e018
 80083c8:	2000001c 	.word	0x2000001c
 80083cc:	10624dd3 	.word	0x10624dd3
 80083d0:	e000e014 	.word	0xe000e014

080083d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083e4 <vPortEnableVFP+0x10>
 80083d8:	6801      	ldr	r1, [r0, #0]
 80083da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083de:	6001      	str	r1, [r0, #0]
 80083e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083e2:	bf00      	nop
 80083e4:	e000ed88 	.word	0xe000ed88

080083e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083ee:	f3ef 8305 	mrs	r3, IPSR
 80083f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b0f      	cmp	r3, #15
 80083f8:	d914      	bls.n	8008424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083fa:	4a17      	ldr	r2, [pc, #92]	; (8008458 <vPortValidateInterruptPriority+0x70>)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008404:	4b15      	ldr	r3, [pc, #84]	; (800845c <vPortValidateInterruptPriority+0x74>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	7afa      	ldrb	r2, [r7, #11]
 800840a:	429a      	cmp	r2, r3
 800840c:	d20a      	bcs.n	8008424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008424:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <vPortValidateInterruptPriority+0x78>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <vPortValidateInterruptPriority+0x7c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d90a      	bls.n	800844a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	603b      	str	r3, [r7, #0]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <vPortValidateInterruptPriority+0x60>
	}
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	e000e3f0 	.word	0xe000e3f0
 800845c:	200015fc 	.word	0x200015fc
 8008460:	e000ed0c 	.word	0xe000ed0c
 8008464:	20001600 	.word	0x20001600

08008468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008470:	2300      	movs	r3, #0
 8008472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008474:	f7fe fd8e 	bl	8006f94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008478:	4b5b      	ldr	r3, [pc, #364]	; (80085e8 <pvPortMalloc+0x180>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008480:	f000 f920 	bl	80086c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008484:	4b59      	ldr	r3, [pc, #356]	; (80085ec <pvPortMalloc+0x184>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4013      	ands	r3, r2
 800848c:	2b00      	cmp	r3, #0
 800848e:	f040 8093 	bne.w	80085b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01d      	beq.n	80084d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008498:	2208      	movs	r2, #8
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d014      	beq.n	80084d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f023 0307 	bic.w	r3, r3, #7
 80084b0:	3308      	adds	r3, #8
 80084b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <pvPortMalloc+0x6c>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	617b      	str	r3, [r7, #20]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d06e      	beq.n	80085b8 <pvPortMalloc+0x150>
 80084da:	4b45      	ldr	r3, [pc, #276]	; (80085f0 <pvPortMalloc+0x188>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d869      	bhi.n	80085b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084e4:	4b43      	ldr	r3, [pc, #268]	; (80085f4 <pvPortMalloc+0x18c>)
 80084e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084e8:	4b42      	ldr	r3, [pc, #264]	; (80085f4 <pvPortMalloc+0x18c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ee:	e004      	b.n	80084fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	429a      	cmp	r2, r3
 8008502:	d903      	bls.n	800850c <pvPortMalloc+0xa4>
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f1      	bne.n	80084f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800850c:	4b36      	ldr	r3, [pc, #216]	; (80085e8 <pvPortMalloc+0x180>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008512:	429a      	cmp	r2, r3
 8008514:	d050      	beq.n	80085b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2208      	movs	r2, #8
 800851c:	4413      	add	r3, r2
 800851e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	2308      	movs	r3, #8
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	429a      	cmp	r2, r3
 8008536:	d91f      	bls.n	8008578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <pvPortMalloc+0xf8>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	613b      	str	r3, [r7, #16]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008572:	69b8      	ldr	r0, [r7, #24]
 8008574:	f000 f908 	bl	8008788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <pvPortMalloc+0x188>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	4a1b      	ldr	r2, [pc, #108]	; (80085f0 <pvPortMalloc+0x188>)
 8008584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008586:	4b1a      	ldr	r3, [pc, #104]	; (80085f0 <pvPortMalloc+0x188>)
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <pvPortMalloc+0x190>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d203      	bcs.n	800859a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <pvPortMalloc+0x188>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <pvPortMalloc+0x190>)
 8008598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	4b13      	ldr	r3, [pc, #76]	; (80085ec <pvPortMalloc+0x184>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	431a      	orrs	r2, r3
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085ae:	4b13      	ldr	r3, [pc, #76]	; (80085fc <pvPortMalloc+0x194>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3301      	adds	r3, #1
 80085b4:	4a11      	ldr	r2, [pc, #68]	; (80085fc <pvPortMalloc+0x194>)
 80085b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085b8:	f7fe fcfa 	bl	8006fb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <pvPortMalloc+0x174>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60fb      	str	r3, [r7, #12]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <pvPortMalloc+0x172>
	return pvReturn;
 80085dc:	69fb      	ldr	r3, [r7, #28]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3728      	adds	r7, #40	; 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	2000520c 	.word	0x2000520c
 80085ec:	20005220 	.word	0x20005220
 80085f0:	20005210 	.word	0x20005210
 80085f4:	20005204 	.word	0x20005204
 80085f8:	20005214 	.word	0x20005214
 80085fc:	20005218 	.word	0x20005218

08008600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d04d      	beq.n	80086ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008612:	2308      	movs	r3, #8
 8008614:	425b      	negs	r3, r3
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4413      	add	r3, r2
 800861a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <vPortFree+0xb8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4013      	ands	r3, r2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10a      	bne.n	8008644 <vPortFree+0x44>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	60fb      	str	r3, [r7, #12]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <vPortFree+0x62>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	60bb      	str	r3, [r7, #8]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <vPortFree+0xb8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4013      	ands	r3, r2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01e      	beq.n	80086ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11a      	bne.n	80086ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	4b0e      	ldr	r3, [pc, #56]	; (80086b8 <vPortFree+0xb8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	43db      	mvns	r3, r3
 8008682:	401a      	ands	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008688:	f7fe fc84 	bl	8006f94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <vPortFree+0xbc>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4413      	add	r3, r2
 8008696:	4a09      	ldr	r2, [pc, #36]	; (80086bc <vPortFree+0xbc>)
 8008698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800869a:	6938      	ldr	r0, [r7, #16]
 800869c:	f000 f874 	bl	8008788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <vPortFree+0xc0>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3301      	adds	r3, #1
 80086a6:	4a06      	ldr	r2, [pc, #24]	; (80086c0 <vPortFree+0xc0>)
 80086a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086aa:	f7fe fc81 	bl	8006fb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086ae:	bf00      	nop
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20005220 	.word	0x20005220
 80086bc:	20005210 	.word	0x20005210
 80086c0:	2000521c 	.word	0x2000521c

080086c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086d0:	4b27      	ldr	r3, [pc, #156]	; (8008770 <prvHeapInit+0xac>)
 80086d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00c      	beq.n	80086f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3307      	adds	r3, #7
 80086e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	4a1f      	ldr	r2, [pc, #124]	; (8008770 <prvHeapInit+0xac>)
 80086f4:	4413      	add	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086fc:	4a1d      	ldr	r2, [pc, #116]	; (8008774 <prvHeapInit+0xb0>)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008702:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <prvHeapInit+0xb0>)
 8008704:	2200      	movs	r2, #0
 8008706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	4413      	add	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008710:	2208      	movs	r2, #8
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a15      	ldr	r2, [pc, #84]	; (8008778 <prvHeapInit+0xb4>)
 8008724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008726:	4b14      	ldr	r3, [pc, #80]	; (8008778 <prvHeapInit+0xb4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <prvHeapInit+0xb4>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvHeapInit+0xb4>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a0a      	ldr	r2, [pc, #40]	; (800877c <prvHeapInit+0xb8>)
 8008752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4a09      	ldr	r2, [pc, #36]	; (8008780 <prvHeapInit+0xbc>)
 800875a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <prvHeapInit+0xc0>)
 800875e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	20001604 	.word	0x20001604
 8008774:	20005204 	.word	0x20005204
 8008778:	2000520c 	.word	0x2000520c
 800877c:	20005214 	.word	0x20005214
 8008780:	20005210 	.word	0x20005210
 8008784:	20005220 	.word	0x20005220

08008788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008790:	4b28      	ldr	r3, [pc, #160]	; (8008834 <prvInsertBlockIntoFreeList+0xac>)
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e002      	b.n	800879c <prvInsertBlockIntoFreeList+0x14>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d8f7      	bhi.n	8008796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	4413      	add	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d108      	bne.n	80087ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	441a      	add	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d118      	bne.n	8008810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	4b15      	ldr	r3, [pc, #84]	; (8008838 <prvInsertBlockIntoFreeList+0xb0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d00d      	beq.n	8008806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	441a      	add	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e008      	b.n	8008818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <prvInsertBlockIntoFreeList+0xb0>)
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e003      	b.n	8008818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	429a      	cmp	r2, r3
 800881e:	d002      	beq.n	8008826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20005204 	.word	0x20005204
 8008838:	2000520c 	.word	0x2000520c

0800883c <__cvt>:
 800883c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	ec55 4b10 	vmov	r4, r5, d0
 8008844:	2d00      	cmp	r5, #0
 8008846:	460e      	mov	r6, r1
 8008848:	4619      	mov	r1, r3
 800884a:	462b      	mov	r3, r5
 800884c:	bfbb      	ittet	lt
 800884e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008852:	461d      	movlt	r5, r3
 8008854:	2300      	movge	r3, #0
 8008856:	232d      	movlt	r3, #45	; 0x2d
 8008858:	700b      	strb	r3, [r1, #0]
 800885a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800885c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008860:	4691      	mov	r9, r2
 8008862:	f023 0820 	bic.w	r8, r3, #32
 8008866:	bfbc      	itt	lt
 8008868:	4622      	movlt	r2, r4
 800886a:	4614      	movlt	r4, r2
 800886c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008870:	d005      	beq.n	800887e <__cvt+0x42>
 8008872:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008876:	d100      	bne.n	800887a <__cvt+0x3e>
 8008878:	3601      	adds	r6, #1
 800887a:	2102      	movs	r1, #2
 800887c:	e000      	b.n	8008880 <__cvt+0x44>
 800887e:	2103      	movs	r1, #3
 8008880:	ab03      	add	r3, sp, #12
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	ab02      	add	r3, sp, #8
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	ec45 4b10 	vmov	d0, r4, r5
 800888c:	4653      	mov	r3, sl
 800888e:	4632      	mov	r2, r6
 8008890:	f000 fee6 	bl	8009660 <_dtoa_r>
 8008894:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008898:	4607      	mov	r7, r0
 800889a:	d102      	bne.n	80088a2 <__cvt+0x66>
 800889c:	f019 0f01 	tst.w	r9, #1
 80088a0:	d022      	beq.n	80088e8 <__cvt+0xac>
 80088a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088a6:	eb07 0906 	add.w	r9, r7, r6
 80088aa:	d110      	bne.n	80088ce <__cvt+0x92>
 80088ac:	783b      	ldrb	r3, [r7, #0]
 80088ae:	2b30      	cmp	r3, #48	; 0x30
 80088b0:	d10a      	bne.n	80088c8 <__cvt+0x8c>
 80088b2:	2200      	movs	r2, #0
 80088b4:	2300      	movs	r3, #0
 80088b6:	4620      	mov	r0, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	f7f8 f90d 	bl	8000ad8 <__aeabi_dcmpeq>
 80088be:	b918      	cbnz	r0, 80088c8 <__cvt+0x8c>
 80088c0:	f1c6 0601 	rsb	r6, r6, #1
 80088c4:	f8ca 6000 	str.w	r6, [sl]
 80088c8:	f8da 3000 	ldr.w	r3, [sl]
 80088cc:	4499      	add	r9, r3
 80088ce:	2200      	movs	r2, #0
 80088d0:	2300      	movs	r3, #0
 80088d2:	4620      	mov	r0, r4
 80088d4:	4629      	mov	r1, r5
 80088d6:	f7f8 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80088da:	b108      	cbz	r0, 80088e0 <__cvt+0xa4>
 80088dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80088e0:	2230      	movs	r2, #48	; 0x30
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	454b      	cmp	r3, r9
 80088e6:	d307      	bcc.n	80088f8 <__cvt+0xbc>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ec:	1bdb      	subs	r3, r3, r7
 80088ee:	4638      	mov	r0, r7
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	b004      	add	sp, #16
 80088f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f8:	1c59      	adds	r1, r3, #1
 80088fa:	9103      	str	r1, [sp, #12]
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	e7f0      	b.n	80088e2 <__cvt+0xa6>

08008900 <__exponent>:
 8008900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008902:	4603      	mov	r3, r0
 8008904:	2900      	cmp	r1, #0
 8008906:	bfb8      	it	lt
 8008908:	4249      	neglt	r1, r1
 800890a:	f803 2b02 	strb.w	r2, [r3], #2
 800890e:	bfb4      	ite	lt
 8008910:	222d      	movlt	r2, #45	; 0x2d
 8008912:	222b      	movge	r2, #43	; 0x2b
 8008914:	2909      	cmp	r1, #9
 8008916:	7042      	strb	r2, [r0, #1]
 8008918:	dd2a      	ble.n	8008970 <__exponent+0x70>
 800891a:	f10d 0207 	add.w	r2, sp, #7
 800891e:	4617      	mov	r7, r2
 8008920:	260a      	movs	r6, #10
 8008922:	4694      	mov	ip, r2
 8008924:	fb91 f5f6 	sdiv	r5, r1, r6
 8008928:	fb06 1415 	mls	r4, r6, r5, r1
 800892c:	3430      	adds	r4, #48	; 0x30
 800892e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008932:	460c      	mov	r4, r1
 8008934:	2c63      	cmp	r4, #99	; 0x63
 8008936:	f102 32ff 	add.w	r2, r2, #4294967295
 800893a:	4629      	mov	r1, r5
 800893c:	dcf1      	bgt.n	8008922 <__exponent+0x22>
 800893e:	3130      	adds	r1, #48	; 0x30
 8008940:	f1ac 0402 	sub.w	r4, ip, #2
 8008944:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008948:	1c41      	adds	r1, r0, #1
 800894a:	4622      	mov	r2, r4
 800894c:	42ba      	cmp	r2, r7
 800894e:	d30a      	bcc.n	8008966 <__exponent+0x66>
 8008950:	f10d 0209 	add.w	r2, sp, #9
 8008954:	eba2 020c 	sub.w	r2, r2, ip
 8008958:	42bc      	cmp	r4, r7
 800895a:	bf88      	it	hi
 800895c:	2200      	movhi	r2, #0
 800895e:	4413      	add	r3, r2
 8008960:	1a18      	subs	r0, r3, r0
 8008962:	b003      	add	sp, #12
 8008964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008966:	f812 5b01 	ldrb.w	r5, [r2], #1
 800896a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800896e:	e7ed      	b.n	800894c <__exponent+0x4c>
 8008970:	2330      	movs	r3, #48	; 0x30
 8008972:	3130      	adds	r1, #48	; 0x30
 8008974:	7083      	strb	r3, [r0, #2]
 8008976:	70c1      	strb	r1, [r0, #3]
 8008978:	1d03      	adds	r3, r0, #4
 800897a:	e7f1      	b.n	8008960 <__exponent+0x60>

0800897c <_printf_float>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	ed2d 8b02 	vpush	{d8}
 8008984:	b08d      	sub	sp, #52	; 0x34
 8008986:	460c      	mov	r4, r1
 8008988:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800898c:	4616      	mov	r6, r2
 800898e:	461f      	mov	r7, r3
 8008990:	4605      	mov	r5, r0
 8008992:	f000 fd01 	bl	8009398 <_localeconv_r>
 8008996:	f8d0 a000 	ldr.w	sl, [r0]
 800899a:	4650      	mov	r0, sl
 800899c:	f7f7 fc70 	bl	8000280 <strlen>
 80089a0:	2300      	movs	r3, #0
 80089a2:	930a      	str	r3, [sp, #40]	; 0x28
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	9305      	str	r3, [sp, #20]
 80089a8:	f8d8 3000 	ldr.w	r3, [r8]
 80089ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80089b0:	3307      	adds	r3, #7
 80089b2:	f023 0307 	bic.w	r3, r3, #7
 80089b6:	f103 0208 	add.w	r2, r3, #8
 80089ba:	f8c8 2000 	str.w	r2, [r8]
 80089be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089c6:	9307      	str	r3, [sp, #28]
 80089c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80089cc:	ee08 0a10 	vmov	s16, r0
 80089d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80089d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089d8:	4b9e      	ldr	r3, [pc, #632]	; (8008c54 <_printf_float+0x2d8>)
 80089da:	f04f 32ff 	mov.w	r2, #4294967295
 80089de:	f7f8 f8ad 	bl	8000b3c <__aeabi_dcmpun>
 80089e2:	bb88      	cbnz	r0, 8008a48 <_printf_float+0xcc>
 80089e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089e8:	4b9a      	ldr	r3, [pc, #616]	; (8008c54 <_printf_float+0x2d8>)
 80089ea:	f04f 32ff 	mov.w	r2, #4294967295
 80089ee:	f7f8 f887 	bl	8000b00 <__aeabi_dcmple>
 80089f2:	bb48      	cbnz	r0, 8008a48 <_printf_float+0xcc>
 80089f4:	2200      	movs	r2, #0
 80089f6:	2300      	movs	r3, #0
 80089f8:	4640      	mov	r0, r8
 80089fa:	4649      	mov	r1, r9
 80089fc:	f7f8 f876 	bl	8000aec <__aeabi_dcmplt>
 8008a00:	b110      	cbz	r0, 8008a08 <_printf_float+0x8c>
 8008a02:	232d      	movs	r3, #45	; 0x2d
 8008a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a08:	4a93      	ldr	r2, [pc, #588]	; (8008c58 <_printf_float+0x2dc>)
 8008a0a:	4b94      	ldr	r3, [pc, #592]	; (8008c5c <_printf_float+0x2e0>)
 8008a0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a10:	bf94      	ite	ls
 8008a12:	4690      	movls	r8, r2
 8008a14:	4698      	movhi	r8, r3
 8008a16:	2303      	movs	r3, #3
 8008a18:	6123      	str	r3, [r4, #16]
 8008a1a:	9b05      	ldr	r3, [sp, #20]
 8008a1c:	f023 0304 	bic.w	r3, r3, #4
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	f04f 0900 	mov.w	r9, #0
 8008a26:	9700      	str	r7, [sp, #0]
 8008a28:	4633      	mov	r3, r6
 8008a2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f000 f9da 	bl	8008de8 <_printf_common>
 8008a34:	3001      	adds	r0, #1
 8008a36:	f040 8090 	bne.w	8008b5a <_printf_float+0x1de>
 8008a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3e:	b00d      	add	sp, #52	; 0x34
 8008a40:	ecbd 8b02 	vpop	{d8}
 8008a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a48:	4642      	mov	r2, r8
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	4649      	mov	r1, r9
 8008a50:	f7f8 f874 	bl	8000b3c <__aeabi_dcmpun>
 8008a54:	b140      	cbz	r0, 8008a68 <_printf_float+0xec>
 8008a56:	464b      	mov	r3, r9
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bfbc      	itt	lt
 8008a5c:	232d      	movlt	r3, #45	; 0x2d
 8008a5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a62:	4a7f      	ldr	r2, [pc, #508]	; (8008c60 <_printf_float+0x2e4>)
 8008a64:	4b7f      	ldr	r3, [pc, #508]	; (8008c64 <_printf_float+0x2e8>)
 8008a66:	e7d1      	b.n	8008a0c <_printf_float+0x90>
 8008a68:	6863      	ldr	r3, [r4, #4]
 8008a6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008a6e:	9206      	str	r2, [sp, #24]
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	d13f      	bne.n	8008af4 <_printf_float+0x178>
 8008a74:	2306      	movs	r3, #6
 8008a76:	6063      	str	r3, [r4, #4]
 8008a78:	9b05      	ldr	r3, [sp, #20]
 8008a7a:	6861      	ldr	r1, [r4, #4]
 8008a7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a80:	2300      	movs	r3, #0
 8008a82:	9303      	str	r3, [sp, #12]
 8008a84:	ab0a      	add	r3, sp, #40	; 0x28
 8008a86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a8a:	ab09      	add	r3, sp, #36	; 0x24
 8008a8c:	ec49 8b10 	vmov	d0, r8, r9
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	6022      	str	r2, [r4, #0]
 8008a94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f7ff fecf 	bl	800883c <__cvt>
 8008a9e:	9b06      	ldr	r3, [sp, #24]
 8008aa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aa2:	2b47      	cmp	r3, #71	; 0x47
 8008aa4:	4680      	mov	r8, r0
 8008aa6:	d108      	bne.n	8008aba <_printf_float+0x13e>
 8008aa8:	1cc8      	adds	r0, r1, #3
 8008aaa:	db02      	blt.n	8008ab2 <_printf_float+0x136>
 8008aac:	6863      	ldr	r3, [r4, #4]
 8008aae:	4299      	cmp	r1, r3
 8008ab0:	dd41      	ble.n	8008b36 <_printf_float+0x1ba>
 8008ab2:	f1ab 0302 	sub.w	r3, fp, #2
 8008ab6:	fa5f fb83 	uxtb.w	fp, r3
 8008aba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008abe:	d820      	bhi.n	8008b02 <_printf_float+0x186>
 8008ac0:	3901      	subs	r1, #1
 8008ac2:	465a      	mov	r2, fp
 8008ac4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ac8:	9109      	str	r1, [sp, #36]	; 0x24
 8008aca:	f7ff ff19 	bl	8008900 <__exponent>
 8008ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ad0:	1813      	adds	r3, r2, r0
 8008ad2:	2a01      	cmp	r2, #1
 8008ad4:	4681      	mov	r9, r0
 8008ad6:	6123      	str	r3, [r4, #16]
 8008ad8:	dc02      	bgt.n	8008ae0 <_printf_float+0x164>
 8008ada:	6822      	ldr	r2, [r4, #0]
 8008adc:	07d2      	lsls	r2, r2, #31
 8008ade:	d501      	bpl.n	8008ae4 <_printf_float+0x168>
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	6123      	str	r3, [r4, #16]
 8008ae4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d09c      	beq.n	8008a26 <_printf_float+0xaa>
 8008aec:	232d      	movs	r3, #45	; 0x2d
 8008aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af2:	e798      	b.n	8008a26 <_printf_float+0xaa>
 8008af4:	9a06      	ldr	r2, [sp, #24]
 8008af6:	2a47      	cmp	r2, #71	; 0x47
 8008af8:	d1be      	bne.n	8008a78 <_printf_float+0xfc>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1bc      	bne.n	8008a78 <_printf_float+0xfc>
 8008afe:	2301      	movs	r3, #1
 8008b00:	e7b9      	b.n	8008a76 <_printf_float+0xfa>
 8008b02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b06:	d118      	bne.n	8008b3a <_printf_float+0x1be>
 8008b08:	2900      	cmp	r1, #0
 8008b0a:	6863      	ldr	r3, [r4, #4]
 8008b0c:	dd0b      	ble.n	8008b26 <_printf_float+0x1aa>
 8008b0e:	6121      	str	r1, [r4, #16]
 8008b10:	b913      	cbnz	r3, 8008b18 <_printf_float+0x19c>
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	07d0      	lsls	r0, r2, #31
 8008b16:	d502      	bpl.n	8008b1e <_printf_float+0x1a2>
 8008b18:	3301      	adds	r3, #1
 8008b1a:	440b      	add	r3, r1
 8008b1c:	6123      	str	r3, [r4, #16]
 8008b1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b20:	f04f 0900 	mov.w	r9, #0
 8008b24:	e7de      	b.n	8008ae4 <_printf_float+0x168>
 8008b26:	b913      	cbnz	r3, 8008b2e <_printf_float+0x1b2>
 8008b28:	6822      	ldr	r2, [r4, #0]
 8008b2a:	07d2      	lsls	r2, r2, #31
 8008b2c:	d501      	bpl.n	8008b32 <_printf_float+0x1b6>
 8008b2e:	3302      	adds	r3, #2
 8008b30:	e7f4      	b.n	8008b1c <_printf_float+0x1a0>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e7f2      	b.n	8008b1c <_printf_float+0x1a0>
 8008b36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b3c:	4299      	cmp	r1, r3
 8008b3e:	db05      	blt.n	8008b4c <_printf_float+0x1d0>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	6121      	str	r1, [r4, #16]
 8008b44:	07d8      	lsls	r0, r3, #31
 8008b46:	d5ea      	bpl.n	8008b1e <_printf_float+0x1a2>
 8008b48:	1c4b      	adds	r3, r1, #1
 8008b4a:	e7e7      	b.n	8008b1c <_printf_float+0x1a0>
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	bfd4      	ite	le
 8008b50:	f1c1 0202 	rsble	r2, r1, #2
 8008b54:	2201      	movgt	r2, #1
 8008b56:	4413      	add	r3, r2
 8008b58:	e7e0      	b.n	8008b1c <_printf_float+0x1a0>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	055a      	lsls	r2, r3, #21
 8008b5e:	d407      	bmi.n	8008b70 <_printf_float+0x1f4>
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	4642      	mov	r2, r8
 8008b64:	4631      	mov	r1, r6
 8008b66:	4628      	mov	r0, r5
 8008b68:	47b8      	blx	r7
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d12c      	bne.n	8008bc8 <_printf_float+0x24c>
 8008b6e:	e764      	b.n	8008a3a <_printf_float+0xbe>
 8008b70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b74:	f240 80e0 	bls.w	8008d38 <_printf_float+0x3bc>
 8008b78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f7f7 ffaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d034      	beq.n	8008bf2 <_printf_float+0x276>
 8008b88:	4a37      	ldr	r2, [pc, #220]	; (8008c68 <_printf_float+0x2ec>)
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b8      	blx	r7
 8008b92:	3001      	adds	r0, #1
 8008b94:	f43f af51 	beq.w	8008a3a <_printf_float+0xbe>
 8008b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	db02      	blt.n	8008ba6 <_printf_float+0x22a>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	07d8      	lsls	r0, r3, #31
 8008ba4:	d510      	bpl.n	8008bc8 <_printf_float+0x24c>
 8008ba6:	ee18 3a10 	vmov	r3, s16
 8008baa:	4652      	mov	r2, sl
 8008bac:	4631      	mov	r1, r6
 8008bae:	4628      	mov	r0, r5
 8008bb0:	47b8      	blx	r7
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	f43f af41 	beq.w	8008a3a <_printf_float+0xbe>
 8008bb8:	f04f 0800 	mov.w	r8, #0
 8008bbc:	f104 091a 	add.w	r9, r4, #26
 8008bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	4543      	cmp	r3, r8
 8008bc6:	dc09      	bgt.n	8008bdc <_printf_float+0x260>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	079b      	lsls	r3, r3, #30
 8008bcc:	f100 8107 	bmi.w	8008dde <_printf_float+0x462>
 8008bd0:	68e0      	ldr	r0, [r4, #12]
 8008bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd4:	4298      	cmp	r0, r3
 8008bd6:	bfb8      	it	lt
 8008bd8:	4618      	movlt	r0, r3
 8008bda:	e730      	b.n	8008a3e <_printf_float+0xc2>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	464a      	mov	r2, r9
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	f43f af27 	beq.w	8008a3a <_printf_float+0xbe>
 8008bec:	f108 0801 	add.w	r8, r8, #1
 8008bf0:	e7e6      	b.n	8008bc0 <_printf_float+0x244>
 8008bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dc39      	bgt.n	8008c6c <_printf_float+0x2f0>
 8008bf8:	4a1b      	ldr	r2, [pc, #108]	; (8008c68 <_printf_float+0x2ec>)
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	4628      	mov	r0, r5
 8008c00:	47b8      	blx	r7
 8008c02:	3001      	adds	r0, #1
 8008c04:	f43f af19 	beq.w	8008a3a <_printf_float+0xbe>
 8008c08:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	d102      	bne.n	8008c16 <_printf_float+0x29a>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	07d9      	lsls	r1, r3, #31
 8008c14:	d5d8      	bpl.n	8008bc8 <_printf_float+0x24c>
 8008c16:	ee18 3a10 	vmov	r3, s16
 8008c1a:	4652      	mov	r2, sl
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	4628      	mov	r0, r5
 8008c20:	47b8      	blx	r7
 8008c22:	3001      	adds	r0, #1
 8008c24:	f43f af09 	beq.w	8008a3a <_printf_float+0xbe>
 8008c28:	f04f 0900 	mov.w	r9, #0
 8008c2c:	f104 0a1a 	add.w	sl, r4, #26
 8008c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c32:	425b      	negs	r3, r3
 8008c34:	454b      	cmp	r3, r9
 8008c36:	dc01      	bgt.n	8008c3c <_printf_float+0x2c0>
 8008c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3a:	e792      	b.n	8008b62 <_printf_float+0x1e6>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	4652      	mov	r2, sl
 8008c40:	4631      	mov	r1, r6
 8008c42:	4628      	mov	r0, r5
 8008c44:	47b8      	blx	r7
 8008c46:	3001      	adds	r0, #1
 8008c48:	f43f aef7 	beq.w	8008a3a <_printf_float+0xbe>
 8008c4c:	f109 0901 	add.w	r9, r9, #1
 8008c50:	e7ee      	b.n	8008c30 <_printf_float+0x2b4>
 8008c52:	bf00      	nop
 8008c54:	7fefffff 	.word	0x7fefffff
 8008c58:	0800e5e0 	.word	0x0800e5e0
 8008c5c:	0800e5e4 	.word	0x0800e5e4
 8008c60:	0800e5e8 	.word	0x0800e5e8
 8008c64:	0800e5ec 	.word	0x0800e5ec
 8008c68:	0800e5f0 	.word	0x0800e5f0
 8008c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c70:	429a      	cmp	r2, r3
 8008c72:	bfa8      	it	ge
 8008c74:	461a      	movge	r2, r3
 8008c76:	2a00      	cmp	r2, #0
 8008c78:	4691      	mov	r9, r2
 8008c7a:	dc37      	bgt.n	8008cec <_printf_float+0x370>
 8008c7c:	f04f 0b00 	mov.w	fp, #0
 8008c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c84:	f104 021a 	add.w	r2, r4, #26
 8008c88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c8a:	9305      	str	r3, [sp, #20]
 8008c8c:	eba3 0309 	sub.w	r3, r3, r9
 8008c90:	455b      	cmp	r3, fp
 8008c92:	dc33      	bgt.n	8008cfc <_printf_float+0x380>
 8008c94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	db3b      	blt.n	8008d14 <_printf_float+0x398>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	07da      	lsls	r2, r3, #31
 8008ca0:	d438      	bmi.n	8008d14 <_printf_float+0x398>
 8008ca2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008ca6:	eba2 0903 	sub.w	r9, r2, r3
 8008caa:	9b05      	ldr	r3, [sp, #20]
 8008cac:	1ad2      	subs	r2, r2, r3
 8008cae:	4591      	cmp	r9, r2
 8008cb0:	bfa8      	it	ge
 8008cb2:	4691      	movge	r9, r2
 8008cb4:	f1b9 0f00 	cmp.w	r9, #0
 8008cb8:	dc35      	bgt.n	8008d26 <_printf_float+0x3aa>
 8008cba:	f04f 0800 	mov.w	r8, #0
 8008cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cc2:	f104 0a1a 	add.w	sl, r4, #26
 8008cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	eba3 0309 	sub.w	r3, r3, r9
 8008cd0:	4543      	cmp	r3, r8
 8008cd2:	f77f af79 	ble.w	8008bc8 <_printf_float+0x24c>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4652      	mov	r2, sl
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b8      	blx	r7
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	f43f aeaa 	beq.w	8008a3a <_printf_float+0xbe>
 8008ce6:	f108 0801 	add.w	r8, r8, #1
 8008cea:	e7ec      	b.n	8008cc6 <_printf_float+0x34a>
 8008cec:	4613      	mov	r3, r2
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	47b8      	blx	r7
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d1c0      	bne.n	8008c7c <_printf_float+0x300>
 8008cfa:	e69e      	b.n	8008a3a <_printf_float+0xbe>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4628      	mov	r0, r5
 8008d02:	9205      	str	r2, [sp, #20]
 8008d04:	47b8      	blx	r7
 8008d06:	3001      	adds	r0, #1
 8008d08:	f43f ae97 	beq.w	8008a3a <_printf_float+0xbe>
 8008d0c:	9a05      	ldr	r2, [sp, #20]
 8008d0e:	f10b 0b01 	add.w	fp, fp, #1
 8008d12:	e7b9      	b.n	8008c88 <_printf_float+0x30c>
 8008d14:	ee18 3a10 	vmov	r3, s16
 8008d18:	4652      	mov	r2, sl
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b8      	blx	r7
 8008d20:	3001      	adds	r0, #1
 8008d22:	d1be      	bne.n	8008ca2 <_printf_float+0x326>
 8008d24:	e689      	b.n	8008a3a <_printf_float+0xbe>
 8008d26:	9a05      	ldr	r2, [sp, #20]
 8008d28:	464b      	mov	r3, r9
 8008d2a:	4442      	add	r2, r8
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	d1c1      	bne.n	8008cba <_printf_float+0x33e>
 8008d36:	e680      	b.n	8008a3a <_printf_float+0xbe>
 8008d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d3a:	2a01      	cmp	r2, #1
 8008d3c:	dc01      	bgt.n	8008d42 <_printf_float+0x3c6>
 8008d3e:	07db      	lsls	r3, r3, #31
 8008d40:	d53a      	bpl.n	8008db8 <_printf_float+0x43c>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4642      	mov	r2, r8
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b8      	blx	r7
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	f43f ae74 	beq.w	8008a3a <_printf_float+0xbe>
 8008d52:	ee18 3a10 	vmov	r3, s16
 8008d56:	4652      	mov	r2, sl
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b8      	blx	r7
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f43f ae6b 	beq.w	8008a3a <_printf_float+0xbe>
 8008d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008d70:	f7f7 feb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d74:	b9d8      	cbnz	r0, 8008dae <_printf_float+0x432>
 8008d76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d7a:	f108 0201 	add.w	r2, r8, #1
 8008d7e:	4631      	mov	r1, r6
 8008d80:	4628      	mov	r0, r5
 8008d82:	47b8      	blx	r7
 8008d84:	3001      	adds	r0, #1
 8008d86:	d10e      	bne.n	8008da6 <_printf_float+0x42a>
 8008d88:	e657      	b.n	8008a3a <_printf_float+0xbe>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4652      	mov	r2, sl
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4628      	mov	r0, r5
 8008d92:	47b8      	blx	r7
 8008d94:	3001      	adds	r0, #1
 8008d96:	f43f ae50 	beq.w	8008a3a <_printf_float+0xbe>
 8008d9a:	f108 0801 	add.w	r8, r8, #1
 8008d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da0:	3b01      	subs	r3, #1
 8008da2:	4543      	cmp	r3, r8
 8008da4:	dcf1      	bgt.n	8008d8a <_printf_float+0x40e>
 8008da6:	464b      	mov	r3, r9
 8008da8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008dac:	e6da      	b.n	8008b64 <_printf_float+0x1e8>
 8008dae:	f04f 0800 	mov.w	r8, #0
 8008db2:	f104 0a1a 	add.w	sl, r4, #26
 8008db6:	e7f2      	b.n	8008d9e <_printf_float+0x422>
 8008db8:	2301      	movs	r3, #1
 8008dba:	4642      	mov	r2, r8
 8008dbc:	e7df      	b.n	8008d7e <_printf_float+0x402>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	464a      	mov	r2, r9
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	47b8      	blx	r7
 8008dc8:	3001      	adds	r0, #1
 8008dca:	f43f ae36 	beq.w	8008a3a <_printf_float+0xbe>
 8008dce:	f108 0801 	add.w	r8, r8, #1
 8008dd2:	68e3      	ldr	r3, [r4, #12]
 8008dd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dd6:	1a5b      	subs	r3, r3, r1
 8008dd8:	4543      	cmp	r3, r8
 8008dda:	dcf0      	bgt.n	8008dbe <_printf_float+0x442>
 8008ddc:	e6f8      	b.n	8008bd0 <_printf_float+0x254>
 8008dde:	f04f 0800 	mov.w	r8, #0
 8008de2:	f104 0919 	add.w	r9, r4, #25
 8008de6:	e7f4      	b.n	8008dd2 <_printf_float+0x456>

08008de8 <_printf_common>:
 8008de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dec:	4616      	mov	r6, r2
 8008dee:	4699      	mov	r9, r3
 8008df0:	688a      	ldr	r2, [r1, #8]
 8008df2:	690b      	ldr	r3, [r1, #16]
 8008df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	bfb8      	it	lt
 8008dfc:	4613      	movlt	r3, r2
 8008dfe:	6033      	str	r3, [r6, #0]
 8008e00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e04:	4607      	mov	r7, r0
 8008e06:	460c      	mov	r4, r1
 8008e08:	b10a      	cbz	r2, 8008e0e <_printf_common+0x26>
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	6033      	str	r3, [r6, #0]
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	0699      	lsls	r1, r3, #26
 8008e12:	bf42      	ittt	mi
 8008e14:	6833      	ldrmi	r3, [r6, #0]
 8008e16:	3302      	addmi	r3, #2
 8008e18:	6033      	strmi	r3, [r6, #0]
 8008e1a:	6825      	ldr	r5, [r4, #0]
 8008e1c:	f015 0506 	ands.w	r5, r5, #6
 8008e20:	d106      	bne.n	8008e30 <_printf_common+0x48>
 8008e22:	f104 0a19 	add.w	sl, r4, #25
 8008e26:	68e3      	ldr	r3, [r4, #12]
 8008e28:	6832      	ldr	r2, [r6, #0]
 8008e2a:	1a9b      	subs	r3, r3, r2
 8008e2c:	42ab      	cmp	r3, r5
 8008e2e:	dc26      	bgt.n	8008e7e <_printf_common+0x96>
 8008e30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e34:	1e13      	subs	r3, r2, #0
 8008e36:	6822      	ldr	r2, [r4, #0]
 8008e38:	bf18      	it	ne
 8008e3a:	2301      	movne	r3, #1
 8008e3c:	0692      	lsls	r2, r2, #26
 8008e3e:	d42b      	bmi.n	8008e98 <_printf_common+0xb0>
 8008e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e44:	4649      	mov	r1, r9
 8008e46:	4638      	mov	r0, r7
 8008e48:	47c0      	blx	r8
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d01e      	beq.n	8008e8c <_printf_common+0xa4>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	6922      	ldr	r2, [r4, #16]
 8008e52:	f003 0306 	and.w	r3, r3, #6
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	bf02      	ittt	eq
 8008e5a:	68e5      	ldreq	r5, [r4, #12]
 8008e5c:	6833      	ldreq	r3, [r6, #0]
 8008e5e:	1aed      	subeq	r5, r5, r3
 8008e60:	68a3      	ldr	r3, [r4, #8]
 8008e62:	bf0c      	ite	eq
 8008e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e68:	2500      	movne	r5, #0
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	bfc4      	itt	gt
 8008e6e:	1a9b      	subgt	r3, r3, r2
 8008e70:	18ed      	addgt	r5, r5, r3
 8008e72:	2600      	movs	r6, #0
 8008e74:	341a      	adds	r4, #26
 8008e76:	42b5      	cmp	r5, r6
 8008e78:	d11a      	bne.n	8008eb0 <_printf_common+0xc8>
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	e008      	b.n	8008e90 <_printf_common+0xa8>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	4652      	mov	r2, sl
 8008e82:	4649      	mov	r1, r9
 8008e84:	4638      	mov	r0, r7
 8008e86:	47c0      	blx	r8
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d103      	bne.n	8008e94 <_printf_common+0xac>
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e94:	3501      	adds	r5, #1
 8008e96:	e7c6      	b.n	8008e26 <_printf_common+0x3e>
 8008e98:	18e1      	adds	r1, r4, r3
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	2030      	movs	r0, #48	; 0x30
 8008e9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ea2:	4422      	add	r2, r4
 8008ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eac:	3302      	adds	r3, #2
 8008eae:	e7c7      	b.n	8008e40 <_printf_common+0x58>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	4638      	mov	r0, r7
 8008eb8:	47c0      	blx	r8
 8008eba:	3001      	adds	r0, #1
 8008ebc:	d0e6      	beq.n	8008e8c <_printf_common+0xa4>
 8008ebe:	3601      	adds	r6, #1
 8008ec0:	e7d9      	b.n	8008e76 <_printf_common+0x8e>
	...

08008ec4 <_printf_i>:
 8008ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec8:	7e0f      	ldrb	r7, [r1, #24]
 8008eca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ecc:	2f78      	cmp	r7, #120	; 0x78
 8008ece:	4691      	mov	r9, r2
 8008ed0:	4680      	mov	r8, r0
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	469a      	mov	sl, r3
 8008ed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008eda:	d807      	bhi.n	8008eec <_printf_i+0x28>
 8008edc:	2f62      	cmp	r7, #98	; 0x62
 8008ede:	d80a      	bhi.n	8008ef6 <_printf_i+0x32>
 8008ee0:	2f00      	cmp	r7, #0
 8008ee2:	f000 80d4 	beq.w	800908e <_printf_i+0x1ca>
 8008ee6:	2f58      	cmp	r7, #88	; 0x58
 8008ee8:	f000 80c0 	beq.w	800906c <_printf_i+0x1a8>
 8008eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ef4:	e03a      	b.n	8008f6c <_printf_i+0xa8>
 8008ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008efa:	2b15      	cmp	r3, #21
 8008efc:	d8f6      	bhi.n	8008eec <_printf_i+0x28>
 8008efe:	a101      	add	r1, pc, #4	; (adr r1, 8008f04 <_printf_i+0x40>)
 8008f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f04:	08008f5d 	.word	0x08008f5d
 8008f08:	08008f71 	.word	0x08008f71
 8008f0c:	08008eed 	.word	0x08008eed
 8008f10:	08008eed 	.word	0x08008eed
 8008f14:	08008eed 	.word	0x08008eed
 8008f18:	08008eed 	.word	0x08008eed
 8008f1c:	08008f71 	.word	0x08008f71
 8008f20:	08008eed 	.word	0x08008eed
 8008f24:	08008eed 	.word	0x08008eed
 8008f28:	08008eed 	.word	0x08008eed
 8008f2c:	08008eed 	.word	0x08008eed
 8008f30:	08009075 	.word	0x08009075
 8008f34:	08008f9d 	.word	0x08008f9d
 8008f38:	0800902f 	.word	0x0800902f
 8008f3c:	08008eed 	.word	0x08008eed
 8008f40:	08008eed 	.word	0x08008eed
 8008f44:	08009097 	.word	0x08009097
 8008f48:	08008eed 	.word	0x08008eed
 8008f4c:	08008f9d 	.word	0x08008f9d
 8008f50:	08008eed 	.word	0x08008eed
 8008f54:	08008eed 	.word	0x08008eed
 8008f58:	08009037 	.word	0x08009037
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	1d1a      	adds	r2, r3, #4
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	602a      	str	r2, [r5, #0]
 8008f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e09f      	b.n	80090b0 <_printf_i+0x1ec>
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	0607      	lsls	r7, r0, #24
 8008f76:	f103 0104 	add.w	r1, r3, #4
 8008f7a:	6029      	str	r1, [r5, #0]
 8008f7c:	d501      	bpl.n	8008f82 <_printf_i+0xbe>
 8008f7e:	681e      	ldr	r6, [r3, #0]
 8008f80:	e003      	b.n	8008f8a <_printf_i+0xc6>
 8008f82:	0646      	lsls	r6, r0, #25
 8008f84:	d5fb      	bpl.n	8008f7e <_printf_i+0xba>
 8008f86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f8a:	2e00      	cmp	r6, #0
 8008f8c:	da03      	bge.n	8008f96 <_printf_i+0xd2>
 8008f8e:	232d      	movs	r3, #45	; 0x2d
 8008f90:	4276      	negs	r6, r6
 8008f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f96:	485a      	ldr	r0, [pc, #360]	; (8009100 <_printf_i+0x23c>)
 8008f98:	230a      	movs	r3, #10
 8008f9a:	e012      	b.n	8008fc2 <_printf_i+0xfe>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	6820      	ldr	r0, [r4, #0]
 8008fa0:	1d19      	adds	r1, r3, #4
 8008fa2:	6029      	str	r1, [r5, #0]
 8008fa4:	0605      	lsls	r5, r0, #24
 8008fa6:	d501      	bpl.n	8008fac <_printf_i+0xe8>
 8008fa8:	681e      	ldr	r6, [r3, #0]
 8008faa:	e002      	b.n	8008fb2 <_printf_i+0xee>
 8008fac:	0641      	lsls	r1, r0, #25
 8008fae:	d5fb      	bpl.n	8008fa8 <_printf_i+0xe4>
 8008fb0:	881e      	ldrh	r6, [r3, #0]
 8008fb2:	4853      	ldr	r0, [pc, #332]	; (8009100 <_printf_i+0x23c>)
 8008fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8008fb6:	bf0c      	ite	eq
 8008fb8:	2308      	moveq	r3, #8
 8008fba:	230a      	movne	r3, #10
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fc2:	6865      	ldr	r5, [r4, #4]
 8008fc4:	60a5      	str	r5, [r4, #8]
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	bfa2      	ittt	ge
 8008fca:	6821      	ldrge	r1, [r4, #0]
 8008fcc:	f021 0104 	bicge.w	r1, r1, #4
 8008fd0:	6021      	strge	r1, [r4, #0]
 8008fd2:	b90e      	cbnz	r6, 8008fd8 <_printf_i+0x114>
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	d04b      	beq.n	8009070 <_printf_i+0x1ac>
 8008fd8:	4615      	mov	r5, r2
 8008fda:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fde:	fb03 6711 	mls	r7, r3, r1, r6
 8008fe2:	5dc7      	ldrb	r7, [r0, r7]
 8008fe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fe8:	4637      	mov	r7, r6
 8008fea:	42bb      	cmp	r3, r7
 8008fec:	460e      	mov	r6, r1
 8008fee:	d9f4      	bls.n	8008fda <_printf_i+0x116>
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d10b      	bne.n	800900c <_printf_i+0x148>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	07de      	lsls	r6, r3, #31
 8008ff8:	d508      	bpl.n	800900c <_printf_i+0x148>
 8008ffa:	6923      	ldr	r3, [r4, #16]
 8008ffc:	6861      	ldr	r1, [r4, #4]
 8008ffe:	4299      	cmp	r1, r3
 8009000:	bfde      	ittt	le
 8009002:	2330      	movle	r3, #48	; 0x30
 8009004:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009008:	f105 35ff 	addle.w	r5, r5, #4294967295
 800900c:	1b52      	subs	r2, r2, r5
 800900e:	6122      	str	r2, [r4, #16]
 8009010:	f8cd a000 	str.w	sl, [sp]
 8009014:	464b      	mov	r3, r9
 8009016:	aa03      	add	r2, sp, #12
 8009018:	4621      	mov	r1, r4
 800901a:	4640      	mov	r0, r8
 800901c:	f7ff fee4 	bl	8008de8 <_printf_common>
 8009020:	3001      	adds	r0, #1
 8009022:	d14a      	bne.n	80090ba <_printf_i+0x1f6>
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	b004      	add	sp, #16
 800902a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	f043 0320 	orr.w	r3, r3, #32
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	4833      	ldr	r0, [pc, #204]	; (8009104 <_printf_i+0x240>)
 8009038:	2778      	movs	r7, #120	; 0x78
 800903a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	6829      	ldr	r1, [r5, #0]
 8009042:	061f      	lsls	r7, r3, #24
 8009044:	f851 6b04 	ldr.w	r6, [r1], #4
 8009048:	d402      	bmi.n	8009050 <_printf_i+0x18c>
 800904a:	065f      	lsls	r7, r3, #25
 800904c:	bf48      	it	mi
 800904e:	b2b6      	uxthmi	r6, r6
 8009050:	07df      	lsls	r7, r3, #31
 8009052:	bf48      	it	mi
 8009054:	f043 0320 	orrmi.w	r3, r3, #32
 8009058:	6029      	str	r1, [r5, #0]
 800905a:	bf48      	it	mi
 800905c:	6023      	strmi	r3, [r4, #0]
 800905e:	b91e      	cbnz	r6, 8009068 <_printf_i+0x1a4>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	f023 0320 	bic.w	r3, r3, #32
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	2310      	movs	r3, #16
 800906a:	e7a7      	b.n	8008fbc <_printf_i+0xf8>
 800906c:	4824      	ldr	r0, [pc, #144]	; (8009100 <_printf_i+0x23c>)
 800906e:	e7e4      	b.n	800903a <_printf_i+0x176>
 8009070:	4615      	mov	r5, r2
 8009072:	e7bd      	b.n	8008ff0 <_printf_i+0x12c>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	6826      	ldr	r6, [r4, #0]
 8009078:	6961      	ldr	r1, [r4, #20]
 800907a:	1d18      	adds	r0, r3, #4
 800907c:	6028      	str	r0, [r5, #0]
 800907e:	0635      	lsls	r5, r6, #24
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	d501      	bpl.n	8009088 <_printf_i+0x1c4>
 8009084:	6019      	str	r1, [r3, #0]
 8009086:	e002      	b.n	800908e <_printf_i+0x1ca>
 8009088:	0670      	lsls	r0, r6, #25
 800908a:	d5fb      	bpl.n	8009084 <_printf_i+0x1c0>
 800908c:	8019      	strh	r1, [r3, #0]
 800908e:	2300      	movs	r3, #0
 8009090:	6123      	str	r3, [r4, #16]
 8009092:	4615      	mov	r5, r2
 8009094:	e7bc      	b.n	8009010 <_printf_i+0x14c>
 8009096:	682b      	ldr	r3, [r5, #0]
 8009098:	1d1a      	adds	r2, r3, #4
 800909a:	602a      	str	r2, [r5, #0]
 800909c:	681d      	ldr	r5, [r3, #0]
 800909e:	6862      	ldr	r2, [r4, #4]
 80090a0:	2100      	movs	r1, #0
 80090a2:	4628      	mov	r0, r5
 80090a4:	f7f7 f89c 	bl	80001e0 <memchr>
 80090a8:	b108      	cbz	r0, 80090ae <_printf_i+0x1ea>
 80090aa:	1b40      	subs	r0, r0, r5
 80090ac:	6060      	str	r0, [r4, #4]
 80090ae:	6863      	ldr	r3, [r4, #4]
 80090b0:	6123      	str	r3, [r4, #16]
 80090b2:	2300      	movs	r3, #0
 80090b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090b8:	e7aa      	b.n	8009010 <_printf_i+0x14c>
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	462a      	mov	r2, r5
 80090be:	4649      	mov	r1, r9
 80090c0:	4640      	mov	r0, r8
 80090c2:	47d0      	blx	sl
 80090c4:	3001      	adds	r0, #1
 80090c6:	d0ad      	beq.n	8009024 <_printf_i+0x160>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	079b      	lsls	r3, r3, #30
 80090cc:	d413      	bmi.n	80090f6 <_printf_i+0x232>
 80090ce:	68e0      	ldr	r0, [r4, #12]
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	4298      	cmp	r0, r3
 80090d4:	bfb8      	it	lt
 80090d6:	4618      	movlt	r0, r3
 80090d8:	e7a6      	b.n	8009028 <_printf_i+0x164>
 80090da:	2301      	movs	r3, #1
 80090dc:	4632      	mov	r2, r6
 80090de:	4649      	mov	r1, r9
 80090e0:	4640      	mov	r0, r8
 80090e2:	47d0      	blx	sl
 80090e4:	3001      	adds	r0, #1
 80090e6:	d09d      	beq.n	8009024 <_printf_i+0x160>
 80090e8:	3501      	adds	r5, #1
 80090ea:	68e3      	ldr	r3, [r4, #12]
 80090ec:	9903      	ldr	r1, [sp, #12]
 80090ee:	1a5b      	subs	r3, r3, r1
 80090f0:	42ab      	cmp	r3, r5
 80090f2:	dcf2      	bgt.n	80090da <_printf_i+0x216>
 80090f4:	e7eb      	b.n	80090ce <_printf_i+0x20a>
 80090f6:	2500      	movs	r5, #0
 80090f8:	f104 0619 	add.w	r6, r4, #25
 80090fc:	e7f5      	b.n	80090ea <_printf_i+0x226>
 80090fe:	bf00      	nop
 8009100:	0800e5f2 	.word	0x0800e5f2
 8009104:	0800e603 	.word	0x0800e603

08009108 <std>:
 8009108:	2300      	movs	r3, #0
 800910a:	b510      	push	{r4, lr}
 800910c:	4604      	mov	r4, r0
 800910e:	e9c0 3300 	strd	r3, r3, [r0]
 8009112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009116:	6083      	str	r3, [r0, #8]
 8009118:	8181      	strh	r1, [r0, #12]
 800911a:	6643      	str	r3, [r0, #100]	; 0x64
 800911c:	81c2      	strh	r2, [r0, #14]
 800911e:	6183      	str	r3, [r0, #24]
 8009120:	4619      	mov	r1, r3
 8009122:	2208      	movs	r2, #8
 8009124:	305c      	adds	r0, #92	; 0x5c
 8009126:	f000 f92e 	bl	8009386 <memset>
 800912a:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <std+0x58>)
 800912c:	6263      	str	r3, [r4, #36]	; 0x24
 800912e:	4b0d      	ldr	r3, [pc, #52]	; (8009164 <std+0x5c>)
 8009130:	62a3      	str	r3, [r4, #40]	; 0x28
 8009132:	4b0d      	ldr	r3, [pc, #52]	; (8009168 <std+0x60>)
 8009134:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009136:	4b0d      	ldr	r3, [pc, #52]	; (800916c <std+0x64>)
 8009138:	6323      	str	r3, [r4, #48]	; 0x30
 800913a:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <std+0x68>)
 800913c:	6224      	str	r4, [r4, #32]
 800913e:	429c      	cmp	r4, r3
 8009140:	d006      	beq.n	8009150 <std+0x48>
 8009142:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009146:	4294      	cmp	r4, r2
 8009148:	d002      	beq.n	8009150 <std+0x48>
 800914a:	33d0      	adds	r3, #208	; 0xd0
 800914c:	429c      	cmp	r4, r3
 800914e:	d105      	bne.n	800915c <std+0x54>
 8009150:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009158:	f000 b9e8 	b.w	800952c <__retarget_lock_init_recursive>
 800915c:	bd10      	pop	{r4, pc}
 800915e:	bf00      	nop
 8009160:	080092cd 	.word	0x080092cd
 8009164:	080092ef 	.word	0x080092ef
 8009168:	08009327 	.word	0x08009327
 800916c:	0800934b 	.word	0x0800934b
 8009170:	20005224 	.word	0x20005224

08009174 <stdio_exit_handler>:
 8009174:	4a02      	ldr	r2, [pc, #8]	; (8009180 <stdio_exit_handler+0xc>)
 8009176:	4903      	ldr	r1, [pc, #12]	; (8009184 <stdio_exit_handler+0x10>)
 8009178:	4803      	ldr	r0, [pc, #12]	; (8009188 <stdio_exit_handler+0x14>)
 800917a:	f000 b869 	b.w	8009250 <_fwalk_sglue>
 800917e:	bf00      	nop
 8009180:	2000004c 	.word	0x2000004c
 8009184:	0800aef9 	.word	0x0800aef9
 8009188:	20000058 	.word	0x20000058

0800918c <cleanup_stdio>:
 800918c:	6841      	ldr	r1, [r0, #4]
 800918e:	4b0c      	ldr	r3, [pc, #48]	; (80091c0 <cleanup_stdio+0x34>)
 8009190:	4299      	cmp	r1, r3
 8009192:	b510      	push	{r4, lr}
 8009194:	4604      	mov	r4, r0
 8009196:	d001      	beq.n	800919c <cleanup_stdio+0x10>
 8009198:	f001 feae 	bl	800aef8 <_fflush_r>
 800919c:	68a1      	ldr	r1, [r4, #8]
 800919e:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <cleanup_stdio+0x38>)
 80091a0:	4299      	cmp	r1, r3
 80091a2:	d002      	beq.n	80091aa <cleanup_stdio+0x1e>
 80091a4:	4620      	mov	r0, r4
 80091a6:	f001 fea7 	bl	800aef8 <_fflush_r>
 80091aa:	68e1      	ldr	r1, [r4, #12]
 80091ac:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <cleanup_stdio+0x3c>)
 80091ae:	4299      	cmp	r1, r3
 80091b0:	d004      	beq.n	80091bc <cleanup_stdio+0x30>
 80091b2:	4620      	mov	r0, r4
 80091b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b8:	f001 be9e 	b.w	800aef8 <_fflush_r>
 80091bc:	bd10      	pop	{r4, pc}
 80091be:	bf00      	nop
 80091c0:	20005224 	.word	0x20005224
 80091c4:	2000528c 	.word	0x2000528c
 80091c8:	200052f4 	.word	0x200052f4

080091cc <global_stdio_init.part.0>:
 80091cc:	b510      	push	{r4, lr}
 80091ce:	4b0b      	ldr	r3, [pc, #44]	; (80091fc <global_stdio_init.part.0+0x30>)
 80091d0:	4c0b      	ldr	r4, [pc, #44]	; (8009200 <global_stdio_init.part.0+0x34>)
 80091d2:	4a0c      	ldr	r2, [pc, #48]	; (8009204 <global_stdio_init.part.0+0x38>)
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	4620      	mov	r0, r4
 80091d8:	2200      	movs	r2, #0
 80091da:	2104      	movs	r1, #4
 80091dc:	f7ff ff94 	bl	8009108 <std>
 80091e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80091e4:	2201      	movs	r2, #1
 80091e6:	2109      	movs	r1, #9
 80091e8:	f7ff ff8e 	bl	8009108 <std>
 80091ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80091f0:	2202      	movs	r2, #2
 80091f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f6:	2112      	movs	r1, #18
 80091f8:	f7ff bf86 	b.w	8009108 <std>
 80091fc:	2000535c 	.word	0x2000535c
 8009200:	20005224 	.word	0x20005224
 8009204:	08009175 	.word	0x08009175

08009208 <__sfp_lock_acquire>:
 8009208:	4801      	ldr	r0, [pc, #4]	; (8009210 <__sfp_lock_acquire+0x8>)
 800920a:	f000 b990 	b.w	800952e <__retarget_lock_acquire_recursive>
 800920e:	bf00      	nop
 8009210:	20005365 	.word	0x20005365

08009214 <__sfp_lock_release>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__sfp_lock_release+0x8>)
 8009216:	f000 b98b 	b.w	8009530 <__retarget_lock_release_recursive>
 800921a:	bf00      	nop
 800921c:	20005365 	.word	0x20005365

08009220 <__sinit>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	f7ff fff0 	bl	8009208 <__sfp_lock_acquire>
 8009228:	6a23      	ldr	r3, [r4, #32]
 800922a:	b11b      	cbz	r3, 8009234 <__sinit+0x14>
 800922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009230:	f7ff bff0 	b.w	8009214 <__sfp_lock_release>
 8009234:	4b04      	ldr	r3, [pc, #16]	; (8009248 <__sinit+0x28>)
 8009236:	6223      	str	r3, [r4, #32]
 8009238:	4b04      	ldr	r3, [pc, #16]	; (800924c <__sinit+0x2c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f5      	bne.n	800922c <__sinit+0xc>
 8009240:	f7ff ffc4 	bl	80091cc <global_stdio_init.part.0>
 8009244:	e7f2      	b.n	800922c <__sinit+0xc>
 8009246:	bf00      	nop
 8009248:	0800918d 	.word	0x0800918d
 800924c:	2000535c 	.word	0x2000535c

08009250 <_fwalk_sglue>:
 8009250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009254:	4607      	mov	r7, r0
 8009256:	4688      	mov	r8, r1
 8009258:	4614      	mov	r4, r2
 800925a:	2600      	movs	r6, #0
 800925c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009260:	f1b9 0901 	subs.w	r9, r9, #1
 8009264:	d505      	bpl.n	8009272 <_fwalk_sglue+0x22>
 8009266:	6824      	ldr	r4, [r4, #0]
 8009268:	2c00      	cmp	r4, #0
 800926a:	d1f7      	bne.n	800925c <_fwalk_sglue+0xc>
 800926c:	4630      	mov	r0, r6
 800926e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d907      	bls.n	8009288 <_fwalk_sglue+0x38>
 8009278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800927c:	3301      	adds	r3, #1
 800927e:	d003      	beq.n	8009288 <_fwalk_sglue+0x38>
 8009280:	4629      	mov	r1, r5
 8009282:	4638      	mov	r0, r7
 8009284:	47c0      	blx	r8
 8009286:	4306      	orrs	r6, r0
 8009288:	3568      	adds	r5, #104	; 0x68
 800928a:	e7e9      	b.n	8009260 <_fwalk_sglue+0x10>

0800928c <siprintf>:
 800928c:	b40e      	push	{r1, r2, r3}
 800928e:	b500      	push	{lr}
 8009290:	b09c      	sub	sp, #112	; 0x70
 8009292:	ab1d      	add	r3, sp, #116	; 0x74
 8009294:	9002      	str	r0, [sp, #8]
 8009296:	9006      	str	r0, [sp, #24]
 8009298:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800929c:	4809      	ldr	r0, [pc, #36]	; (80092c4 <siprintf+0x38>)
 800929e:	9107      	str	r1, [sp, #28]
 80092a0:	9104      	str	r1, [sp, #16]
 80092a2:	4909      	ldr	r1, [pc, #36]	; (80092c8 <siprintf+0x3c>)
 80092a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a8:	9105      	str	r1, [sp, #20]
 80092aa:	6800      	ldr	r0, [r0, #0]
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	a902      	add	r1, sp, #8
 80092b0:	f001 fc9e 	bl	800abf0 <_svfiprintf_r>
 80092b4:	9b02      	ldr	r3, [sp, #8]
 80092b6:	2200      	movs	r2, #0
 80092b8:	701a      	strb	r2, [r3, #0]
 80092ba:	b01c      	add	sp, #112	; 0x70
 80092bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80092c0:	b003      	add	sp, #12
 80092c2:	4770      	bx	lr
 80092c4:	200000a4 	.word	0x200000a4
 80092c8:	ffff0208 	.word	0xffff0208

080092cc <__sread>:
 80092cc:	b510      	push	{r4, lr}
 80092ce:	460c      	mov	r4, r1
 80092d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d4:	f000 f8dc 	bl	8009490 <_read_r>
 80092d8:	2800      	cmp	r0, #0
 80092da:	bfab      	itete	ge
 80092dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092de:	89a3      	ldrhlt	r3, [r4, #12]
 80092e0:	181b      	addge	r3, r3, r0
 80092e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092e6:	bfac      	ite	ge
 80092e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80092ea:	81a3      	strhlt	r3, [r4, #12]
 80092ec:	bd10      	pop	{r4, pc}

080092ee <__swrite>:
 80092ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f2:	461f      	mov	r7, r3
 80092f4:	898b      	ldrh	r3, [r1, #12]
 80092f6:	05db      	lsls	r3, r3, #23
 80092f8:	4605      	mov	r5, r0
 80092fa:	460c      	mov	r4, r1
 80092fc:	4616      	mov	r6, r2
 80092fe:	d505      	bpl.n	800930c <__swrite+0x1e>
 8009300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009304:	2302      	movs	r3, #2
 8009306:	2200      	movs	r2, #0
 8009308:	f000 f8b0 	bl	800946c <_lseek_r>
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009316:	81a3      	strh	r3, [r4, #12]
 8009318:	4632      	mov	r2, r6
 800931a:	463b      	mov	r3, r7
 800931c:	4628      	mov	r0, r5
 800931e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009322:	f000 b8c7 	b.w	80094b4 <_write_r>

08009326 <__sseek>:
 8009326:	b510      	push	{r4, lr}
 8009328:	460c      	mov	r4, r1
 800932a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800932e:	f000 f89d 	bl	800946c <_lseek_r>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	bf15      	itete	ne
 8009338:	6560      	strne	r0, [r4, #84]	; 0x54
 800933a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800933e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009342:	81a3      	strheq	r3, [r4, #12]
 8009344:	bf18      	it	ne
 8009346:	81a3      	strhne	r3, [r4, #12]
 8009348:	bd10      	pop	{r4, pc}

0800934a <__sclose>:
 800934a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934e:	f000 b827 	b.w	80093a0 <_close_r>

08009352 <memmove>:
 8009352:	4288      	cmp	r0, r1
 8009354:	b510      	push	{r4, lr}
 8009356:	eb01 0402 	add.w	r4, r1, r2
 800935a:	d902      	bls.n	8009362 <memmove+0x10>
 800935c:	4284      	cmp	r4, r0
 800935e:	4623      	mov	r3, r4
 8009360:	d807      	bhi.n	8009372 <memmove+0x20>
 8009362:	1e43      	subs	r3, r0, #1
 8009364:	42a1      	cmp	r1, r4
 8009366:	d008      	beq.n	800937a <memmove+0x28>
 8009368:	f811 2b01 	ldrb.w	r2, [r1], #1
 800936c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009370:	e7f8      	b.n	8009364 <memmove+0x12>
 8009372:	4402      	add	r2, r0
 8009374:	4601      	mov	r1, r0
 8009376:	428a      	cmp	r2, r1
 8009378:	d100      	bne.n	800937c <memmove+0x2a>
 800937a:	bd10      	pop	{r4, pc}
 800937c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009380:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009384:	e7f7      	b.n	8009376 <memmove+0x24>

08009386 <memset>:
 8009386:	4402      	add	r2, r0
 8009388:	4603      	mov	r3, r0
 800938a:	4293      	cmp	r3, r2
 800938c:	d100      	bne.n	8009390 <memset+0xa>
 800938e:	4770      	bx	lr
 8009390:	f803 1b01 	strb.w	r1, [r3], #1
 8009394:	e7f9      	b.n	800938a <memset+0x4>
	...

08009398 <_localeconv_r>:
 8009398:	4800      	ldr	r0, [pc, #0]	; (800939c <_localeconv_r+0x4>)
 800939a:	4770      	bx	lr
 800939c:	20000198 	.word	0x20000198

080093a0 <_close_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d06      	ldr	r5, [pc, #24]	; (80093bc <_close_r+0x1c>)
 80093a4:	2300      	movs	r3, #0
 80093a6:	4604      	mov	r4, r0
 80093a8:	4608      	mov	r0, r1
 80093aa:	602b      	str	r3, [r5, #0]
 80093ac:	f7f9 fd23 	bl	8002df6 <_close>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d102      	bne.n	80093ba <_close_r+0x1a>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	b103      	cbz	r3, 80093ba <_close_r+0x1a>
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	20005360 	.word	0x20005360

080093c0 <_reclaim_reent>:
 80093c0:	4b29      	ldr	r3, [pc, #164]	; (8009468 <_reclaim_reent+0xa8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4283      	cmp	r3, r0
 80093c6:	b570      	push	{r4, r5, r6, lr}
 80093c8:	4604      	mov	r4, r0
 80093ca:	d04b      	beq.n	8009464 <_reclaim_reent+0xa4>
 80093cc:	69c3      	ldr	r3, [r0, #28]
 80093ce:	b143      	cbz	r3, 80093e2 <_reclaim_reent+0x22>
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d144      	bne.n	8009460 <_reclaim_reent+0xa0>
 80093d6:	69e3      	ldr	r3, [r4, #28]
 80093d8:	6819      	ldr	r1, [r3, #0]
 80093da:	b111      	cbz	r1, 80093e2 <_reclaim_reent+0x22>
 80093dc:	4620      	mov	r0, r4
 80093de:	f000 ff31 	bl	800a244 <_free_r>
 80093e2:	6961      	ldr	r1, [r4, #20]
 80093e4:	b111      	cbz	r1, 80093ec <_reclaim_reent+0x2c>
 80093e6:	4620      	mov	r0, r4
 80093e8:	f000 ff2c 	bl	800a244 <_free_r>
 80093ec:	69e1      	ldr	r1, [r4, #28]
 80093ee:	b111      	cbz	r1, 80093f6 <_reclaim_reent+0x36>
 80093f0:	4620      	mov	r0, r4
 80093f2:	f000 ff27 	bl	800a244 <_free_r>
 80093f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80093f8:	b111      	cbz	r1, 8009400 <_reclaim_reent+0x40>
 80093fa:	4620      	mov	r0, r4
 80093fc:	f000 ff22 	bl	800a244 <_free_r>
 8009400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009402:	b111      	cbz	r1, 800940a <_reclaim_reent+0x4a>
 8009404:	4620      	mov	r0, r4
 8009406:	f000 ff1d 	bl	800a244 <_free_r>
 800940a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800940c:	b111      	cbz	r1, 8009414 <_reclaim_reent+0x54>
 800940e:	4620      	mov	r0, r4
 8009410:	f000 ff18 	bl	800a244 <_free_r>
 8009414:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009416:	b111      	cbz	r1, 800941e <_reclaim_reent+0x5e>
 8009418:	4620      	mov	r0, r4
 800941a:	f000 ff13 	bl	800a244 <_free_r>
 800941e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009420:	b111      	cbz	r1, 8009428 <_reclaim_reent+0x68>
 8009422:	4620      	mov	r0, r4
 8009424:	f000 ff0e 	bl	800a244 <_free_r>
 8009428:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800942a:	b111      	cbz	r1, 8009432 <_reclaim_reent+0x72>
 800942c:	4620      	mov	r0, r4
 800942e:	f000 ff09 	bl	800a244 <_free_r>
 8009432:	6a23      	ldr	r3, [r4, #32]
 8009434:	b1b3      	cbz	r3, 8009464 <_reclaim_reent+0xa4>
 8009436:	4620      	mov	r0, r4
 8009438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800943c:	4718      	bx	r3
 800943e:	5949      	ldr	r1, [r1, r5]
 8009440:	b941      	cbnz	r1, 8009454 <_reclaim_reent+0x94>
 8009442:	3504      	adds	r5, #4
 8009444:	69e3      	ldr	r3, [r4, #28]
 8009446:	2d80      	cmp	r5, #128	; 0x80
 8009448:	68d9      	ldr	r1, [r3, #12]
 800944a:	d1f8      	bne.n	800943e <_reclaim_reent+0x7e>
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fef9 	bl	800a244 <_free_r>
 8009452:	e7c0      	b.n	80093d6 <_reclaim_reent+0x16>
 8009454:	680e      	ldr	r6, [r1, #0]
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fef4 	bl	800a244 <_free_r>
 800945c:	4631      	mov	r1, r6
 800945e:	e7ef      	b.n	8009440 <_reclaim_reent+0x80>
 8009460:	2500      	movs	r5, #0
 8009462:	e7ef      	b.n	8009444 <_reclaim_reent+0x84>
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	bf00      	nop
 8009468:	200000a4 	.word	0x200000a4

0800946c <_lseek_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d07      	ldr	r5, [pc, #28]	; (800948c <_lseek_r+0x20>)
 8009470:	4604      	mov	r4, r0
 8009472:	4608      	mov	r0, r1
 8009474:	4611      	mov	r1, r2
 8009476:	2200      	movs	r2, #0
 8009478:	602a      	str	r2, [r5, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	f7f9 fce2 	bl	8002e44 <_lseek>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_lseek_r+0x1e>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	b103      	cbz	r3, 800948a <_lseek_r+0x1e>
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	20005360 	.word	0x20005360

08009490 <_read_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d07      	ldr	r5, [pc, #28]	; (80094b0 <_read_r+0x20>)
 8009494:	4604      	mov	r4, r0
 8009496:	4608      	mov	r0, r1
 8009498:	4611      	mov	r1, r2
 800949a:	2200      	movs	r2, #0
 800949c:	602a      	str	r2, [r5, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	f7f9 fc70 	bl	8002d84 <_read>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_read_r+0x1e>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_read_r+0x1e>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	20005360 	.word	0x20005360

080094b4 <_write_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4d07      	ldr	r5, [pc, #28]	; (80094d4 <_write_r+0x20>)
 80094b8:	4604      	mov	r4, r0
 80094ba:	4608      	mov	r0, r1
 80094bc:	4611      	mov	r1, r2
 80094be:	2200      	movs	r2, #0
 80094c0:	602a      	str	r2, [r5, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	f7f9 fc7b 	bl	8002dbe <_write>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_write_r+0x1e>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_write_r+0x1e>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	20005360 	.word	0x20005360

080094d8 <__errno>:
 80094d8:	4b01      	ldr	r3, [pc, #4]	; (80094e0 <__errno+0x8>)
 80094da:	6818      	ldr	r0, [r3, #0]
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	200000a4 	.word	0x200000a4

080094e4 <__libc_init_array>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	4d0d      	ldr	r5, [pc, #52]	; (800951c <__libc_init_array+0x38>)
 80094e8:	4c0d      	ldr	r4, [pc, #52]	; (8009520 <__libc_init_array+0x3c>)
 80094ea:	1b64      	subs	r4, r4, r5
 80094ec:	10a4      	asrs	r4, r4, #2
 80094ee:	2600      	movs	r6, #0
 80094f0:	42a6      	cmp	r6, r4
 80094f2:	d109      	bne.n	8009508 <__libc_init_array+0x24>
 80094f4:	4d0b      	ldr	r5, [pc, #44]	; (8009524 <__libc_init_array+0x40>)
 80094f6:	4c0c      	ldr	r4, [pc, #48]	; (8009528 <__libc_init_array+0x44>)
 80094f8:	f002 f87a 	bl	800b5f0 <_init>
 80094fc:	1b64      	subs	r4, r4, r5
 80094fe:	10a4      	asrs	r4, r4, #2
 8009500:	2600      	movs	r6, #0
 8009502:	42a6      	cmp	r6, r4
 8009504:	d105      	bne.n	8009512 <__libc_init_array+0x2e>
 8009506:	bd70      	pop	{r4, r5, r6, pc}
 8009508:	f855 3b04 	ldr.w	r3, [r5], #4
 800950c:	4798      	blx	r3
 800950e:	3601      	adds	r6, #1
 8009510:	e7ee      	b.n	80094f0 <__libc_init_array+0xc>
 8009512:	f855 3b04 	ldr.w	r3, [r5], #4
 8009516:	4798      	blx	r3
 8009518:	3601      	adds	r6, #1
 800951a:	e7f2      	b.n	8009502 <__libc_init_array+0x1e>
 800951c:	0800e95c 	.word	0x0800e95c
 8009520:	0800e95c 	.word	0x0800e95c
 8009524:	0800e95c 	.word	0x0800e95c
 8009528:	0800e960 	.word	0x0800e960

0800952c <__retarget_lock_init_recursive>:
 800952c:	4770      	bx	lr

0800952e <__retarget_lock_acquire_recursive>:
 800952e:	4770      	bx	lr

08009530 <__retarget_lock_release_recursive>:
 8009530:	4770      	bx	lr

08009532 <memcpy>:
 8009532:	440a      	add	r2, r1
 8009534:	4291      	cmp	r1, r2
 8009536:	f100 33ff 	add.w	r3, r0, #4294967295
 800953a:	d100      	bne.n	800953e <memcpy+0xc>
 800953c:	4770      	bx	lr
 800953e:	b510      	push	{r4, lr}
 8009540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009548:	4291      	cmp	r1, r2
 800954a:	d1f9      	bne.n	8009540 <memcpy+0xe>
 800954c:	bd10      	pop	{r4, pc}

0800954e <quorem>:
 800954e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009552:	6903      	ldr	r3, [r0, #16]
 8009554:	690c      	ldr	r4, [r1, #16]
 8009556:	42a3      	cmp	r3, r4
 8009558:	4607      	mov	r7, r0
 800955a:	db7e      	blt.n	800965a <quorem+0x10c>
 800955c:	3c01      	subs	r4, #1
 800955e:	f101 0814 	add.w	r8, r1, #20
 8009562:	f100 0514 	add.w	r5, r0, #20
 8009566:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800956a:	9301      	str	r3, [sp, #4]
 800956c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009570:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009574:	3301      	adds	r3, #1
 8009576:	429a      	cmp	r2, r3
 8009578:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800957c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009580:	fbb2 f6f3 	udiv	r6, r2, r3
 8009584:	d331      	bcc.n	80095ea <quorem+0x9c>
 8009586:	f04f 0e00 	mov.w	lr, #0
 800958a:	4640      	mov	r0, r8
 800958c:	46ac      	mov	ip, r5
 800958e:	46f2      	mov	sl, lr
 8009590:	f850 2b04 	ldr.w	r2, [r0], #4
 8009594:	b293      	uxth	r3, r2
 8009596:	fb06 e303 	mla	r3, r6, r3, lr
 800959a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800959e:	0c1a      	lsrs	r2, r3, #16
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	ebaa 0303 	sub.w	r3, sl, r3
 80095a6:	f8dc a000 	ldr.w	sl, [ip]
 80095aa:	fa13 f38a 	uxtah	r3, r3, sl
 80095ae:	fb06 220e 	mla	r2, r6, lr, r2
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	9b00      	ldr	r3, [sp, #0]
 80095b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095ba:	b292      	uxth	r2, r2
 80095bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80095c8:	4581      	cmp	r9, r0
 80095ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ce:	f84c 3b04 	str.w	r3, [ip], #4
 80095d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095d6:	d2db      	bcs.n	8009590 <quorem+0x42>
 80095d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80095dc:	b92b      	cbnz	r3, 80095ea <quorem+0x9c>
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	3b04      	subs	r3, #4
 80095e2:	429d      	cmp	r5, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	d32c      	bcc.n	8009642 <quorem+0xf4>
 80095e8:	613c      	str	r4, [r7, #16]
 80095ea:	4638      	mov	r0, r7
 80095ec:	f001 f9a6 	bl	800a93c <__mcmp>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	db22      	blt.n	800963a <quorem+0xec>
 80095f4:	3601      	adds	r6, #1
 80095f6:	4629      	mov	r1, r5
 80095f8:	2000      	movs	r0, #0
 80095fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80095fe:	f8d1 c000 	ldr.w	ip, [r1]
 8009602:	b293      	uxth	r3, r2
 8009604:	1ac3      	subs	r3, r0, r3
 8009606:	0c12      	lsrs	r2, r2, #16
 8009608:	fa13 f38c 	uxtah	r3, r3, ip
 800960c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009610:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009614:	b29b      	uxth	r3, r3
 8009616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800961a:	45c1      	cmp	r9, r8
 800961c:	f841 3b04 	str.w	r3, [r1], #4
 8009620:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009624:	d2e9      	bcs.n	80095fa <quorem+0xac>
 8009626:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800962a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800962e:	b922      	cbnz	r2, 800963a <quorem+0xec>
 8009630:	3b04      	subs	r3, #4
 8009632:	429d      	cmp	r5, r3
 8009634:	461a      	mov	r2, r3
 8009636:	d30a      	bcc.n	800964e <quorem+0x100>
 8009638:	613c      	str	r4, [r7, #16]
 800963a:	4630      	mov	r0, r6
 800963c:	b003      	add	sp, #12
 800963e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009642:	6812      	ldr	r2, [r2, #0]
 8009644:	3b04      	subs	r3, #4
 8009646:	2a00      	cmp	r2, #0
 8009648:	d1ce      	bne.n	80095e8 <quorem+0x9a>
 800964a:	3c01      	subs	r4, #1
 800964c:	e7c9      	b.n	80095e2 <quorem+0x94>
 800964e:	6812      	ldr	r2, [r2, #0]
 8009650:	3b04      	subs	r3, #4
 8009652:	2a00      	cmp	r2, #0
 8009654:	d1f0      	bne.n	8009638 <quorem+0xea>
 8009656:	3c01      	subs	r4, #1
 8009658:	e7eb      	b.n	8009632 <quorem+0xe4>
 800965a:	2000      	movs	r0, #0
 800965c:	e7ee      	b.n	800963c <quorem+0xee>
	...

08009660 <_dtoa_r>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	ed2d 8b04 	vpush	{d8-d9}
 8009668:	69c5      	ldr	r5, [r0, #28]
 800966a:	b093      	sub	sp, #76	; 0x4c
 800966c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009670:	ec57 6b10 	vmov	r6, r7, d0
 8009674:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009678:	9107      	str	r1, [sp, #28]
 800967a:	4604      	mov	r4, r0
 800967c:	920a      	str	r2, [sp, #40]	; 0x28
 800967e:	930d      	str	r3, [sp, #52]	; 0x34
 8009680:	b975      	cbnz	r5, 80096a0 <_dtoa_r+0x40>
 8009682:	2010      	movs	r0, #16
 8009684:	f000 fe2a 	bl	800a2dc <malloc>
 8009688:	4602      	mov	r2, r0
 800968a:	61e0      	str	r0, [r4, #28]
 800968c:	b920      	cbnz	r0, 8009698 <_dtoa_r+0x38>
 800968e:	4bae      	ldr	r3, [pc, #696]	; (8009948 <_dtoa_r+0x2e8>)
 8009690:	21ef      	movs	r1, #239	; 0xef
 8009692:	48ae      	ldr	r0, [pc, #696]	; (800994c <_dtoa_r+0x2ec>)
 8009694:	f001 fc68 	bl	800af68 <__assert_func>
 8009698:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800969c:	6005      	str	r5, [r0, #0]
 800969e:	60c5      	str	r5, [r0, #12]
 80096a0:	69e3      	ldr	r3, [r4, #28]
 80096a2:	6819      	ldr	r1, [r3, #0]
 80096a4:	b151      	cbz	r1, 80096bc <_dtoa_r+0x5c>
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	604a      	str	r2, [r1, #4]
 80096aa:	2301      	movs	r3, #1
 80096ac:	4093      	lsls	r3, r2
 80096ae:	608b      	str	r3, [r1, #8]
 80096b0:	4620      	mov	r0, r4
 80096b2:	f000 ff07 	bl	800a4c4 <_Bfree>
 80096b6:	69e3      	ldr	r3, [r4, #28]
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	1e3b      	subs	r3, r7, #0
 80096be:	bfbb      	ittet	lt
 80096c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80096c4:	9303      	strlt	r3, [sp, #12]
 80096c6:	2300      	movge	r3, #0
 80096c8:	2201      	movlt	r2, #1
 80096ca:	bfac      	ite	ge
 80096cc:	f8c8 3000 	strge.w	r3, [r8]
 80096d0:	f8c8 2000 	strlt.w	r2, [r8]
 80096d4:	4b9e      	ldr	r3, [pc, #632]	; (8009950 <_dtoa_r+0x2f0>)
 80096d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80096da:	ea33 0308 	bics.w	r3, r3, r8
 80096de:	d11b      	bne.n	8009718 <_dtoa_r+0xb8>
 80096e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80096ec:	4333      	orrs	r3, r6
 80096ee:	f000 8593 	beq.w	800a218 <_dtoa_r+0xbb8>
 80096f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096f4:	b963      	cbnz	r3, 8009710 <_dtoa_r+0xb0>
 80096f6:	4b97      	ldr	r3, [pc, #604]	; (8009954 <_dtoa_r+0x2f4>)
 80096f8:	e027      	b.n	800974a <_dtoa_r+0xea>
 80096fa:	4b97      	ldr	r3, [pc, #604]	; (8009958 <_dtoa_r+0x2f8>)
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	3308      	adds	r3, #8
 8009700:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	9800      	ldr	r0, [sp, #0]
 8009706:	b013      	add	sp, #76	; 0x4c
 8009708:	ecbd 8b04 	vpop	{d8-d9}
 800970c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009710:	4b90      	ldr	r3, [pc, #576]	; (8009954 <_dtoa_r+0x2f4>)
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	3303      	adds	r3, #3
 8009716:	e7f3      	b.n	8009700 <_dtoa_r+0xa0>
 8009718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	ec51 0b17 	vmov	r0, r1, d7
 8009722:	eeb0 8a47 	vmov.f32	s16, s14
 8009726:	eef0 8a67 	vmov.f32	s17, s15
 800972a:	2300      	movs	r3, #0
 800972c:	f7f7 f9d4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009730:	4681      	mov	r9, r0
 8009732:	b160      	cbz	r0, 800974e <_dtoa_r+0xee>
 8009734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009736:	2301      	movs	r3, #1
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8568 	beq.w	800a212 <_dtoa_r+0xbb2>
 8009742:	4b86      	ldr	r3, [pc, #536]	; (800995c <_dtoa_r+0x2fc>)
 8009744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	3b01      	subs	r3, #1
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	e7da      	b.n	8009704 <_dtoa_r+0xa4>
 800974e:	aa10      	add	r2, sp, #64	; 0x40
 8009750:	a911      	add	r1, sp, #68	; 0x44
 8009752:	4620      	mov	r0, r4
 8009754:	eeb0 0a48 	vmov.f32	s0, s16
 8009758:	eef0 0a68 	vmov.f32	s1, s17
 800975c:	f001 f994 	bl	800aa88 <__d2b>
 8009760:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009764:	4682      	mov	sl, r0
 8009766:	2d00      	cmp	r5, #0
 8009768:	d07f      	beq.n	800986a <_dtoa_r+0x20a>
 800976a:	ee18 3a90 	vmov	r3, s17
 800976e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009772:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009776:	ec51 0b18 	vmov	r0, r1, d8
 800977a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800977e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009782:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009786:	4619      	mov	r1, r3
 8009788:	2200      	movs	r2, #0
 800978a:	4b75      	ldr	r3, [pc, #468]	; (8009960 <_dtoa_r+0x300>)
 800978c:	f7f6 fd84 	bl	8000298 <__aeabi_dsub>
 8009790:	a367      	add	r3, pc, #412	; (adr r3, 8009930 <_dtoa_r+0x2d0>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 ff37 	bl	8000608 <__aeabi_dmul>
 800979a:	a367      	add	r3, pc, #412	; (adr r3, 8009938 <_dtoa_r+0x2d8>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f7f6 fd7c 	bl	800029c <__adddf3>
 80097a4:	4606      	mov	r6, r0
 80097a6:	4628      	mov	r0, r5
 80097a8:	460f      	mov	r7, r1
 80097aa:	f7f6 fec3 	bl	8000534 <__aeabi_i2d>
 80097ae:	a364      	add	r3, pc, #400	; (adr r3, 8009940 <_dtoa_r+0x2e0>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	f7f6 ff28 	bl	8000608 <__aeabi_dmul>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4630      	mov	r0, r6
 80097be:	4639      	mov	r1, r7
 80097c0:	f7f6 fd6c 	bl	800029c <__adddf3>
 80097c4:	4606      	mov	r6, r0
 80097c6:	460f      	mov	r7, r1
 80097c8:	f7f7 f9ce 	bl	8000b68 <__aeabi_d2iz>
 80097cc:	2200      	movs	r2, #0
 80097ce:	4683      	mov	fp, r0
 80097d0:	2300      	movs	r3, #0
 80097d2:	4630      	mov	r0, r6
 80097d4:	4639      	mov	r1, r7
 80097d6:	f7f7 f989 	bl	8000aec <__aeabi_dcmplt>
 80097da:	b148      	cbz	r0, 80097f0 <_dtoa_r+0x190>
 80097dc:	4658      	mov	r0, fp
 80097de:	f7f6 fea9 	bl	8000534 <__aeabi_i2d>
 80097e2:	4632      	mov	r2, r6
 80097e4:	463b      	mov	r3, r7
 80097e6:	f7f7 f977 	bl	8000ad8 <__aeabi_dcmpeq>
 80097ea:	b908      	cbnz	r0, 80097f0 <_dtoa_r+0x190>
 80097ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097f0:	f1bb 0f16 	cmp.w	fp, #22
 80097f4:	d857      	bhi.n	80098a6 <_dtoa_r+0x246>
 80097f6:	4b5b      	ldr	r3, [pc, #364]	; (8009964 <_dtoa_r+0x304>)
 80097f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	ec51 0b18 	vmov	r0, r1, d8
 8009804:	f7f7 f972 	bl	8000aec <__aeabi_dcmplt>
 8009808:	2800      	cmp	r0, #0
 800980a:	d04e      	beq.n	80098aa <_dtoa_r+0x24a>
 800980c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009810:	2300      	movs	r3, #0
 8009812:	930c      	str	r3, [sp, #48]	; 0x30
 8009814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009816:	1b5b      	subs	r3, r3, r5
 8009818:	1e5a      	subs	r2, r3, #1
 800981a:	bf45      	ittet	mi
 800981c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009820:	9305      	strmi	r3, [sp, #20]
 8009822:	2300      	movpl	r3, #0
 8009824:	2300      	movmi	r3, #0
 8009826:	9206      	str	r2, [sp, #24]
 8009828:	bf54      	ite	pl
 800982a:	9305      	strpl	r3, [sp, #20]
 800982c:	9306      	strmi	r3, [sp, #24]
 800982e:	f1bb 0f00 	cmp.w	fp, #0
 8009832:	db3c      	blt.n	80098ae <_dtoa_r+0x24e>
 8009834:	9b06      	ldr	r3, [sp, #24]
 8009836:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800983a:	445b      	add	r3, fp
 800983c:	9306      	str	r3, [sp, #24]
 800983e:	2300      	movs	r3, #0
 8009840:	9308      	str	r3, [sp, #32]
 8009842:	9b07      	ldr	r3, [sp, #28]
 8009844:	2b09      	cmp	r3, #9
 8009846:	d868      	bhi.n	800991a <_dtoa_r+0x2ba>
 8009848:	2b05      	cmp	r3, #5
 800984a:	bfc4      	itt	gt
 800984c:	3b04      	subgt	r3, #4
 800984e:	9307      	strgt	r3, [sp, #28]
 8009850:	9b07      	ldr	r3, [sp, #28]
 8009852:	f1a3 0302 	sub.w	r3, r3, #2
 8009856:	bfcc      	ite	gt
 8009858:	2500      	movgt	r5, #0
 800985a:	2501      	movle	r5, #1
 800985c:	2b03      	cmp	r3, #3
 800985e:	f200 8085 	bhi.w	800996c <_dtoa_r+0x30c>
 8009862:	e8df f003 	tbb	[pc, r3]
 8009866:	3b2e      	.short	0x3b2e
 8009868:	5839      	.short	0x5839
 800986a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800986e:	441d      	add	r5, r3
 8009870:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009874:	2b20      	cmp	r3, #32
 8009876:	bfc1      	itttt	gt
 8009878:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800987c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009880:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009884:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009888:	bfd6      	itet	le
 800988a:	f1c3 0320 	rsble	r3, r3, #32
 800988e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009892:	fa06 f003 	lslle.w	r0, r6, r3
 8009896:	f7f6 fe3d 	bl	8000514 <__aeabi_ui2d>
 800989a:	2201      	movs	r2, #1
 800989c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80098a0:	3d01      	subs	r5, #1
 80098a2:	920e      	str	r2, [sp, #56]	; 0x38
 80098a4:	e76f      	b.n	8009786 <_dtoa_r+0x126>
 80098a6:	2301      	movs	r3, #1
 80098a8:	e7b3      	b.n	8009812 <_dtoa_r+0x1b2>
 80098aa:	900c      	str	r0, [sp, #48]	; 0x30
 80098ac:	e7b2      	b.n	8009814 <_dtoa_r+0x1b4>
 80098ae:	9b05      	ldr	r3, [sp, #20]
 80098b0:	eba3 030b 	sub.w	r3, r3, fp
 80098b4:	9305      	str	r3, [sp, #20]
 80098b6:	f1cb 0300 	rsb	r3, fp, #0
 80098ba:	9308      	str	r3, [sp, #32]
 80098bc:	2300      	movs	r3, #0
 80098be:	930b      	str	r3, [sp, #44]	; 0x2c
 80098c0:	e7bf      	b.n	8009842 <_dtoa_r+0x1e2>
 80098c2:	2300      	movs	r3, #0
 80098c4:	9309      	str	r3, [sp, #36]	; 0x24
 80098c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dc52      	bgt.n	8009972 <_dtoa_r+0x312>
 80098cc:	2301      	movs	r3, #1
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	9304      	str	r3, [sp, #16]
 80098d2:	461a      	mov	r2, r3
 80098d4:	920a      	str	r2, [sp, #40]	; 0x28
 80098d6:	e00b      	b.n	80098f0 <_dtoa_r+0x290>
 80098d8:	2301      	movs	r3, #1
 80098da:	e7f3      	b.n	80098c4 <_dtoa_r+0x264>
 80098dc:	2300      	movs	r3, #0
 80098de:	9309      	str	r3, [sp, #36]	; 0x24
 80098e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e2:	445b      	add	r3, fp
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	3301      	adds	r3, #1
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	bfb8      	it	lt
 80098ee:	2301      	movlt	r3, #1
 80098f0:	69e0      	ldr	r0, [r4, #28]
 80098f2:	2100      	movs	r1, #0
 80098f4:	2204      	movs	r2, #4
 80098f6:	f102 0614 	add.w	r6, r2, #20
 80098fa:	429e      	cmp	r6, r3
 80098fc:	d93d      	bls.n	800997a <_dtoa_r+0x31a>
 80098fe:	6041      	str	r1, [r0, #4]
 8009900:	4620      	mov	r0, r4
 8009902:	f000 fd9f 	bl	800a444 <_Balloc>
 8009906:	9000      	str	r0, [sp, #0]
 8009908:	2800      	cmp	r0, #0
 800990a:	d139      	bne.n	8009980 <_dtoa_r+0x320>
 800990c:	4b16      	ldr	r3, [pc, #88]	; (8009968 <_dtoa_r+0x308>)
 800990e:	4602      	mov	r2, r0
 8009910:	f240 11af 	movw	r1, #431	; 0x1af
 8009914:	e6bd      	b.n	8009692 <_dtoa_r+0x32>
 8009916:	2301      	movs	r3, #1
 8009918:	e7e1      	b.n	80098de <_dtoa_r+0x27e>
 800991a:	2501      	movs	r5, #1
 800991c:	2300      	movs	r3, #0
 800991e:	9307      	str	r3, [sp, #28]
 8009920:	9509      	str	r5, [sp, #36]	; 0x24
 8009922:	f04f 33ff 	mov.w	r3, #4294967295
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	2200      	movs	r2, #0
 800992c:	2312      	movs	r3, #18
 800992e:	e7d1      	b.n	80098d4 <_dtoa_r+0x274>
 8009930:	636f4361 	.word	0x636f4361
 8009934:	3fd287a7 	.word	0x3fd287a7
 8009938:	8b60c8b3 	.word	0x8b60c8b3
 800993c:	3fc68a28 	.word	0x3fc68a28
 8009940:	509f79fb 	.word	0x509f79fb
 8009944:	3fd34413 	.word	0x3fd34413
 8009948:	0800e621 	.word	0x0800e621
 800994c:	0800e638 	.word	0x0800e638
 8009950:	7ff00000 	.word	0x7ff00000
 8009954:	0800e61d 	.word	0x0800e61d
 8009958:	0800e614 	.word	0x0800e614
 800995c:	0800e5f1 	.word	0x0800e5f1
 8009960:	3ff80000 	.word	0x3ff80000
 8009964:	0800e728 	.word	0x0800e728
 8009968:	0800e690 	.word	0x0800e690
 800996c:	2301      	movs	r3, #1
 800996e:	9309      	str	r3, [sp, #36]	; 0x24
 8009970:	e7d7      	b.n	8009922 <_dtoa_r+0x2c2>
 8009972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	9304      	str	r3, [sp, #16]
 8009978:	e7ba      	b.n	80098f0 <_dtoa_r+0x290>
 800997a:	3101      	adds	r1, #1
 800997c:	0052      	lsls	r2, r2, #1
 800997e:	e7ba      	b.n	80098f6 <_dtoa_r+0x296>
 8009980:	69e3      	ldr	r3, [r4, #28]
 8009982:	9a00      	ldr	r2, [sp, #0]
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	9b04      	ldr	r3, [sp, #16]
 8009988:	2b0e      	cmp	r3, #14
 800998a:	f200 80a8 	bhi.w	8009ade <_dtoa_r+0x47e>
 800998e:	2d00      	cmp	r5, #0
 8009990:	f000 80a5 	beq.w	8009ade <_dtoa_r+0x47e>
 8009994:	f1bb 0f00 	cmp.w	fp, #0
 8009998:	dd38      	ble.n	8009a0c <_dtoa_r+0x3ac>
 800999a:	4bc0      	ldr	r3, [pc, #768]	; (8009c9c <_dtoa_r+0x63c>)
 800999c:	f00b 020f 	and.w	r2, fp, #15
 80099a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80099a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80099ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80099b0:	d019      	beq.n	80099e6 <_dtoa_r+0x386>
 80099b2:	4bbb      	ldr	r3, [pc, #748]	; (8009ca0 <_dtoa_r+0x640>)
 80099b4:	ec51 0b18 	vmov	r0, r1, d8
 80099b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099bc:	f7f6 ff4e 	bl	800085c <__aeabi_ddiv>
 80099c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099c4:	f008 080f 	and.w	r8, r8, #15
 80099c8:	2503      	movs	r5, #3
 80099ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009ca0 <_dtoa_r+0x640>
 80099ce:	f1b8 0f00 	cmp.w	r8, #0
 80099d2:	d10a      	bne.n	80099ea <_dtoa_r+0x38a>
 80099d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099d8:	4632      	mov	r2, r6
 80099da:	463b      	mov	r3, r7
 80099dc:	f7f6 ff3e 	bl	800085c <__aeabi_ddiv>
 80099e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099e4:	e02b      	b.n	8009a3e <_dtoa_r+0x3de>
 80099e6:	2502      	movs	r5, #2
 80099e8:	e7ef      	b.n	80099ca <_dtoa_r+0x36a>
 80099ea:	f018 0f01 	tst.w	r8, #1
 80099ee:	d008      	beq.n	8009a02 <_dtoa_r+0x3a2>
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80099f8:	f7f6 fe06 	bl	8000608 <__aeabi_dmul>
 80099fc:	3501      	adds	r5, #1
 80099fe:	4606      	mov	r6, r0
 8009a00:	460f      	mov	r7, r1
 8009a02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a06:	f109 0908 	add.w	r9, r9, #8
 8009a0a:	e7e0      	b.n	80099ce <_dtoa_r+0x36e>
 8009a0c:	f000 809f 	beq.w	8009b4e <_dtoa_r+0x4ee>
 8009a10:	f1cb 0600 	rsb	r6, fp, #0
 8009a14:	4ba1      	ldr	r3, [pc, #644]	; (8009c9c <_dtoa_r+0x63c>)
 8009a16:	4fa2      	ldr	r7, [pc, #648]	; (8009ca0 <_dtoa_r+0x640>)
 8009a18:	f006 020f 	and.w	r2, r6, #15
 8009a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	ec51 0b18 	vmov	r0, r1, d8
 8009a28:	f7f6 fdee 	bl	8000608 <__aeabi_dmul>
 8009a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a30:	1136      	asrs	r6, r6, #4
 8009a32:	2300      	movs	r3, #0
 8009a34:	2502      	movs	r5, #2
 8009a36:	2e00      	cmp	r6, #0
 8009a38:	d17e      	bne.n	8009b38 <_dtoa_r+0x4d8>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1d0      	bne.n	80099e0 <_dtoa_r+0x380>
 8009a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 8084 	beq.w	8009b52 <_dtoa_r+0x4f2>
 8009a4a:	4b96      	ldr	r3, [pc, #600]	; (8009ca4 <_dtoa_r+0x644>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4640      	mov	r0, r8
 8009a50:	4649      	mov	r1, r9
 8009a52:	f7f7 f84b 	bl	8000aec <__aeabi_dcmplt>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d07b      	beq.n	8009b52 <_dtoa_r+0x4f2>
 8009a5a:	9b04      	ldr	r3, [sp, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d078      	beq.n	8009b52 <_dtoa_r+0x4f2>
 8009a60:	9b01      	ldr	r3, [sp, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	dd39      	ble.n	8009ada <_dtoa_r+0x47a>
 8009a66:	4b90      	ldr	r3, [pc, #576]	; (8009ca8 <_dtoa_r+0x648>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	f7f6 fdcb 	bl	8000608 <__aeabi_dmul>
 8009a72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a76:	9e01      	ldr	r6, [sp, #4]
 8009a78:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009a7c:	3501      	adds	r5, #1
 8009a7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a82:	4628      	mov	r0, r5
 8009a84:	f7f6 fd56 	bl	8000534 <__aeabi_i2d>
 8009a88:	4642      	mov	r2, r8
 8009a8a:	464b      	mov	r3, r9
 8009a8c:	f7f6 fdbc 	bl	8000608 <__aeabi_dmul>
 8009a90:	4b86      	ldr	r3, [pc, #536]	; (8009cac <_dtoa_r+0x64c>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	f7f6 fc02 	bl	800029c <__adddf3>
 8009a98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aa0:	9303      	str	r3, [sp, #12]
 8009aa2:	2e00      	cmp	r6, #0
 8009aa4:	d158      	bne.n	8009b58 <_dtoa_r+0x4f8>
 8009aa6:	4b82      	ldr	r3, [pc, #520]	; (8009cb0 <_dtoa_r+0x650>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	f7f6 fbf3 	bl	8000298 <__aeabi_dsub>
 8009ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	4689      	mov	r9, r1
 8009aba:	f7f7 f835 	bl	8000b28 <__aeabi_dcmpgt>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f040 8296 	bne.w	8009ff0 <_dtoa_r+0x990>
 8009ac4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009ac8:	4640      	mov	r0, r8
 8009aca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ace:	4649      	mov	r1, r9
 8009ad0:	f7f7 f80c 	bl	8000aec <__aeabi_dcmplt>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	f040 8289 	bne.w	8009fec <_dtoa_r+0x98c>
 8009ada:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f2c0 814e 	blt.w	8009d82 <_dtoa_r+0x722>
 8009ae6:	f1bb 0f0e 	cmp.w	fp, #14
 8009aea:	f300 814a 	bgt.w	8009d82 <_dtoa_r+0x722>
 8009aee:	4b6b      	ldr	r3, [pc, #428]	; (8009c9c <_dtoa_r+0x63c>)
 8009af0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009af4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f280 80dc 	bge.w	8009cb8 <_dtoa_r+0x658>
 8009b00:	9b04      	ldr	r3, [sp, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f300 80d8 	bgt.w	8009cb8 <_dtoa_r+0x658>
 8009b08:	f040 826f 	bne.w	8009fea <_dtoa_r+0x98a>
 8009b0c:	4b68      	ldr	r3, [pc, #416]	; (8009cb0 <_dtoa_r+0x650>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	4640      	mov	r0, r8
 8009b12:	4649      	mov	r1, r9
 8009b14:	f7f6 fd78 	bl	8000608 <__aeabi_dmul>
 8009b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b1c:	f7f6 fffa 	bl	8000b14 <__aeabi_dcmpge>
 8009b20:	9e04      	ldr	r6, [sp, #16]
 8009b22:	4637      	mov	r7, r6
 8009b24:	2800      	cmp	r0, #0
 8009b26:	f040 8245 	bne.w	8009fb4 <_dtoa_r+0x954>
 8009b2a:	9d00      	ldr	r5, [sp, #0]
 8009b2c:	2331      	movs	r3, #49	; 0x31
 8009b2e:	f805 3b01 	strb.w	r3, [r5], #1
 8009b32:	f10b 0b01 	add.w	fp, fp, #1
 8009b36:	e241      	b.n	8009fbc <_dtoa_r+0x95c>
 8009b38:	07f2      	lsls	r2, r6, #31
 8009b3a:	d505      	bpl.n	8009b48 <_dtoa_r+0x4e8>
 8009b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b40:	f7f6 fd62 	bl	8000608 <__aeabi_dmul>
 8009b44:	3501      	adds	r5, #1
 8009b46:	2301      	movs	r3, #1
 8009b48:	1076      	asrs	r6, r6, #1
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	e773      	b.n	8009a36 <_dtoa_r+0x3d6>
 8009b4e:	2502      	movs	r5, #2
 8009b50:	e775      	b.n	8009a3e <_dtoa_r+0x3de>
 8009b52:	9e04      	ldr	r6, [sp, #16]
 8009b54:	465f      	mov	r7, fp
 8009b56:	e792      	b.n	8009a7e <_dtoa_r+0x41e>
 8009b58:	9900      	ldr	r1, [sp, #0]
 8009b5a:	4b50      	ldr	r3, [pc, #320]	; (8009c9c <_dtoa_r+0x63c>)
 8009b5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b60:	4431      	add	r1, r6
 8009b62:	9102      	str	r1, [sp, #8]
 8009b64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b66:	eeb0 9a47 	vmov.f32	s18, s14
 8009b6a:	eef0 9a67 	vmov.f32	s19, s15
 8009b6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b76:	2900      	cmp	r1, #0
 8009b78:	d044      	beq.n	8009c04 <_dtoa_r+0x5a4>
 8009b7a:	494e      	ldr	r1, [pc, #312]	; (8009cb4 <_dtoa_r+0x654>)
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	f7f6 fe6d 	bl	800085c <__aeabi_ddiv>
 8009b82:	ec53 2b19 	vmov	r2, r3, d9
 8009b86:	f7f6 fb87 	bl	8000298 <__aeabi_dsub>
 8009b8a:	9d00      	ldr	r5, [sp, #0]
 8009b8c:	ec41 0b19 	vmov	d9, r0, r1
 8009b90:	4649      	mov	r1, r9
 8009b92:	4640      	mov	r0, r8
 8009b94:	f7f6 ffe8 	bl	8000b68 <__aeabi_d2iz>
 8009b98:	4606      	mov	r6, r0
 8009b9a:	f7f6 fccb 	bl	8000534 <__aeabi_i2d>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	f7f6 fb77 	bl	8000298 <__aeabi_dsub>
 8009baa:	3630      	adds	r6, #48	; 0x30
 8009bac:	f805 6b01 	strb.w	r6, [r5], #1
 8009bb0:	ec53 2b19 	vmov	r2, r3, d9
 8009bb4:	4680      	mov	r8, r0
 8009bb6:	4689      	mov	r9, r1
 8009bb8:	f7f6 ff98 	bl	8000aec <__aeabi_dcmplt>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d164      	bne.n	8009c8a <_dtoa_r+0x62a>
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	4937      	ldr	r1, [pc, #220]	; (8009ca4 <_dtoa_r+0x644>)
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	f7f6 fb66 	bl	8000298 <__aeabi_dsub>
 8009bcc:	ec53 2b19 	vmov	r2, r3, d9
 8009bd0:	f7f6 ff8c 	bl	8000aec <__aeabi_dcmplt>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	f040 80b6 	bne.w	8009d46 <_dtoa_r+0x6e6>
 8009bda:	9b02      	ldr	r3, [sp, #8]
 8009bdc:	429d      	cmp	r5, r3
 8009bde:	f43f af7c 	beq.w	8009ada <_dtoa_r+0x47a>
 8009be2:	4b31      	ldr	r3, [pc, #196]	; (8009ca8 <_dtoa_r+0x648>)
 8009be4:	ec51 0b19 	vmov	r0, r1, d9
 8009be8:	2200      	movs	r2, #0
 8009bea:	f7f6 fd0d 	bl	8000608 <__aeabi_dmul>
 8009bee:	4b2e      	ldr	r3, [pc, #184]	; (8009ca8 <_dtoa_r+0x648>)
 8009bf0:	ec41 0b19 	vmov	d9, r0, r1
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	f7f6 fd05 	bl	8000608 <__aeabi_dmul>
 8009bfe:	4680      	mov	r8, r0
 8009c00:	4689      	mov	r9, r1
 8009c02:	e7c5      	b.n	8009b90 <_dtoa_r+0x530>
 8009c04:	ec51 0b17 	vmov	r0, r1, d7
 8009c08:	f7f6 fcfe 	bl	8000608 <__aeabi_dmul>
 8009c0c:	9b02      	ldr	r3, [sp, #8]
 8009c0e:	9d00      	ldr	r5, [sp, #0]
 8009c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c12:	ec41 0b19 	vmov	d9, r0, r1
 8009c16:	4649      	mov	r1, r9
 8009c18:	4640      	mov	r0, r8
 8009c1a:	f7f6 ffa5 	bl	8000b68 <__aeabi_d2iz>
 8009c1e:	4606      	mov	r6, r0
 8009c20:	f7f6 fc88 	bl	8000534 <__aeabi_i2d>
 8009c24:	3630      	adds	r6, #48	; 0x30
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f7f6 fb33 	bl	8000298 <__aeabi_dsub>
 8009c32:	f805 6b01 	strb.w	r6, [r5], #1
 8009c36:	9b02      	ldr	r3, [sp, #8]
 8009c38:	429d      	cmp	r5, r3
 8009c3a:	4680      	mov	r8, r0
 8009c3c:	4689      	mov	r9, r1
 8009c3e:	f04f 0200 	mov.w	r2, #0
 8009c42:	d124      	bne.n	8009c8e <_dtoa_r+0x62e>
 8009c44:	4b1b      	ldr	r3, [pc, #108]	; (8009cb4 <_dtoa_r+0x654>)
 8009c46:	ec51 0b19 	vmov	r0, r1, d9
 8009c4a:	f7f6 fb27 	bl	800029c <__adddf3>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4640      	mov	r0, r8
 8009c54:	4649      	mov	r1, r9
 8009c56:	f7f6 ff67 	bl	8000b28 <__aeabi_dcmpgt>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d173      	bne.n	8009d46 <_dtoa_r+0x6e6>
 8009c5e:	ec53 2b19 	vmov	r2, r3, d9
 8009c62:	4914      	ldr	r1, [pc, #80]	; (8009cb4 <_dtoa_r+0x654>)
 8009c64:	2000      	movs	r0, #0
 8009c66:	f7f6 fb17 	bl	8000298 <__aeabi_dsub>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4640      	mov	r0, r8
 8009c70:	4649      	mov	r1, r9
 8009c72:	f7f6 ff3b 	bl	8000aec <__aeabi_dcmplt>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	f43f af2f 	beq.w	8009ada <_dtoa_r+0x47a>
 8009c7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c7e:	1e6b      	subs	r3, r5, #1
 8009c80:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c86:	2b30      	cmp	r3, #48	; 0x30
 8009c88:	d0f8      	beq.n	8009c7c <_dtoa_r+0x61c>
 8009c8a:	46bb      	mov	fp, r7
 8009c8c:	e04a      	b.n	8009d24 <_dtoa_r+0x6c4>
 8009c8e:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <_dtoa_r+0x648>)
 8009c90:	f7f6 fcba 	bl	8000608 <__aeabi_dmul>
 8009c94:	4680      	mov	r8, r0
 8009c96:	4689      	mov	r9, r1
 8009c98:	e7bd      	b.n	8009c16 <_dtoa_r+0x5b6>
 8009c9a:	bf00      	nop
 8009c9c:	0800e728 	.word	0x0800e728
 8009ca0:	0800e700 	.word	0x0800e700
 8009ca4:	3ff00000 	.word	0x3ff00000
 8009ca8:	40240000 	.word	0x40240000
 8009cac:	401c0000 	.word	0x401c0000
 8009cb0:	40140000 	.word	0x40140000
 8009cb4:	3fe00000 	.word	0x3fe00000
 8009cb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009cbc:	9d00      	ldr	r5, [sp, #0]
 8009cbe:	4642      	mov	r2, r8
 8009cc0:	464b      	mov	r3, r9
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	4639      	mov	r1, r7
 8009cc6:	f7f6 fdc9 	bl	800085c <__aeabi_ddiv>
 8009cca:	f7f6 ff4d 	bl	8000b68 <__aeabi_d2iz>
 8009cce:	9001      	str	r0, [sp, #4]
 8009cd0:	f7f6 fc30 	bl	8000534 <__aeabi_i2d>
 8009cd4:	4642      	mov	r2, r8
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	f7f6 fc96 	bl	8000608 <__aeabi_dmul>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 fad8 	bl	8000298 <__aeabi_dsub>
 8009ce8:	9e01      	ldr	r6, [sp, #4]
 8009cea:	9f04      	ldr	r7, [sp, #16]
 8009cec:	3630      	adds	r6, #48	; 0x30
 8009cee:	f805 6b01 	strb.w	r6, [r5], #1
 8009cf2:	9e00      	ldr	r6, [sp, #0]
 8009cf4:	1bae      	subs	r6, r5, r6
 8009cf6:	42b7      	cmp	r7, r6
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	d134      	bne.n	8009d68 <_dtoa_r+0x708>
 8009cfe:	f7f6 facd 	bl	800029c <__adddf3>
 8009d02:	4642      	mov	r2, r8
 8009d04:	464b      	mov	r3, r9
 8009d06:	4606      	mov	r6, r0
 8009d08:	460f      	mov	r7, r1
 8009d0a:	f7f6 ff0d 	bl	8000b28 <__aeabi_dcmpgt>
 8009d0e:	b9c8      	cbnz	r0, 8009d44 <_dtoa_r+0x6e4>
 8009d10:	4642      	mov	r2, r8
 8009d12:	464b      	mov	r3, r9
 8009d14:	4630      	mov	r0, r6
 8009d16:	4639      	mov	r1, r7
 8009d18:	f7f6 fede 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d1c:	b110      	cbz	r0, 8009d24 <_dtoa_r+0x6c4>
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	07db      	lsls	r3, r3, #31
 8009d22:	d40f      	bmi.n	8009d44 <_dtoa_r+0x6e4>
 8009d24:	4651      	mov	r1, sl
 8009d26:	4620      	mov	r0, r4
 8009d28:	f000 fbcc 	bl	800a4c4 <_Bfree>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d30:	702b      	strb	r3, [r5, #0]
 8009d32:	f10b 0301 	add.w	r3, fp, #1
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f43f ace2 	beq.w	8009704 <_dtoa_r+0xa4>
 8009d40:	601d      	str	r5, [r3, #0]
 8009d42:	e4df      	b.n	8009704 <_dtoa_r+0xa4>
 8009d44:	465f      	mov	r7, fp
 8009d46:	462b      	mov	r3, r5
 8009d48:	461d      	mov	r5, r3
 8009d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d4e:	2a39      	cmp	r2, #57	; 0x39
 8009d50:	d106      	bne.n	8009d60 <_dtoa_r+0x700>
 8009d52:	9a00      	ldr	r2, [sp, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d1f7      	bne.n	8009d48 <_dtoa_r+0x6e8>
 8009d58:	9900      	ldr	r1, [sp, #0]
 8009d5a:	2230      	movs	r2, #48	; 0x30
 8009d5c:	3701      	adds	r7, #1
 8009d5e:	700a      	strb	r2, [r1, #0]
 8009d60:	781a      	ldrb	r2, [r3, #0]
 8009d62:	3201      	adds	r2, #1
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e790      	b.n	8009c8a <_dtoa_r+0x62a>
 8009d68:	4ba3      	ldr	r3, [pc, #652]	; (8009ff8 <_dtoa_r+0x998>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f7f6 fc4c 	bl	8000608 <__aeabi_dmul>
 8009d70:	2200      	movs	r2, #0
 8009d72:	2300      	movs	r3, #0
 8009d74:	4606      	mov	r6, r0
 8009d76:	460f      	mov	r7, r1
 8009d78:	f7f6 feae 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d09e      	beq.n	8009cbe <_dtoa_r+0x65e>
 8009d80:	e7d0      	b.n	8009d24 <_dtoa_r+0x6c4>
 8009d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	f000 80ca 	beq.w	8009f1e <_dtoa_r+0x8be>
 8009d8a:	9a07      	ldr	r2, [sp, #28]
 8009d8c:	2a01      	cmp	r2, #1
 8009d8e:	f300 80ad 	bgt.w	8009eec <_dtoa_r+0x88c>
 8009d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d94:	2a00      	cmp	r2, #0
 8009d96:	f000 80a5 	beq.w	8009ee4 <_dtoa_r+0x884>
 8009d9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d9e:	9e08      	ldr	r6, [sp, #32]
 8009da0:	9d05      	ldr	r5, [sp, #20]
 8009da2:	9a05      	ldr	r2, [sp, #20]
 8009da4:	441a      	add	r2, r3
 8009da6:	9205      	str	r2, [sp, #20]
 8009da8:	9a06      	ldr	r2, [sp, #24]
 8009daa:	2101      	movs	r1, #1
 8009dac:	441a      	add	r2, r3
 8009dae:	4620      	mov	r0, r4
 8009db0:	9206      	str	r2, [sp, #24]
 8009db2:	f000 fc3d 	bl	800a630 <__i2b>
 8009db6:	4607      	mov	r7, r0
 8009db8:	b165      	cbz	r5, 8009dd4 <_dtoa_r+0x774>
 8009dba:	9b06      	ldr	r3, [sp, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dd09      	ble.n	8009dd4 <_dtoa_r+0x774>
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	9a05      	ldr	r2, [sp, #20]
 8009dc4:	bfa8      	it	ge
 8009dc6:	462b      	movge	r3, r5
 8009dc8:	1ad2      	subs	r2, r2, r3
 8009dca:	9205      	str	r2, [sp, #20]
 8009dcc:	9a06      	ldr	r2, [sp, #24]
 8009dce:	1aed      	subs	r5, r5, r3
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	9306      	str	r3, [sp, #24]
 8009dd4:	9b08      	ldr	r3, [sp, #32]
 8009dd6:	b1f3      	cbz	r3, 8009e16 <_dtoa_r+0x7b6>
 8009dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 80a3 	beq.w	8009f26 <_dtoa_r+0x8c6>
 8009de0:	2e00      	cmp	r6, #0
 8009de2:	dd10      	ble.n	8009e06 <_dtoa_r+0x7a6>
 8009de4:	4639      	mov	r1, r7
 8009de6:	4632      	mov	r2, r6
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 fce1 	bl	800a7b0 <__pow5mult>
 8009dee:	4652      	mov	r2, sl
 8009df0:	4601      	mov	r1, r0
 8009df2:	4607      	mov	r7, r0
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fc31 	bl	800a65c <__multiply>
 8009dfa:	4651      	mov	r1, sl
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 fb60 	bl	800a4c4 <_Bfree>
 8009e04:	46c2      	mov	sl, r8
 8009e06:	9b08      	ldr	r3, [sp, #32]
 8009e08:	1b9a      	subs	r2, r3, r6
 8009e0a:	d004      	beq.n	8009e16 <_dtoa_r+0x7b6>
 8009e0c:	4651      	mov	r1, sl
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f000 fcce 	bl	800a7b0 <__pow5mult>
 8009e14:	4682      	mov	sl, r0
 8009e16:	2101      	movs	r1, #1
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f000 fc09 	bl	800a630 <__i2b>
 8009e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	4606      	mov	r6, r0
 8009e24:	f340 8081 	ble.w	8009f2a <_dtoa_r+0x8ca>
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fcbf 	bl	800a7b0 <__pow5mult>
 8009e32:	9b07      	ldr	r3, [sp, #28]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	4606      	mov	r6, r0
 8009e38:	dd7a      	ble.n	8009f30 <_dtoa_r+0x8d0>
 8009e3a:	f04f 0800 	mov.w	r8, #0
 8009e3e:	6933      	ldr	r3, [r6, #16]
 8009e40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e44:	6918      	ldr	r0, [r3, #16]
 8009e46:	f000 fba5 	bl	800a594 <__hi0bits>
 8009e4a:	f1c0 0020 	rsb	r0, r0, #32
 8009e4e:	9b06      	ldr	r3, [sp, #24]
 8009e50:	4418      	add	r0, r3
 8009e52:	f010 001f 	ands.w	r0, r0, #31
 8009e56:	f000 8094 	beq.w	8009f82 <_dtoa_r+0x922>
 8009e5a:	f1c0 0320 	rsb	r3, r0, #32
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	f340 8085 	ble.w	8009f6e <_dtoa_r+0x90e>
 8009e64:	9b05      	ldr	r3, [sp, #20]
 8009e66:	f1c0 001c 	rsb	r0, r0, #28
 8009e6a:	4403      	add	r3, r0
 8009e6c:	9305      	str	r3, [sp, #20]
 8009e6e:	9b06      	ldr	r3, [sp, #24]
 8009e70:	4403      	add	r3, r0
 8009e72:	4405      	add	r5, r0
 8009e74:	9306      	str	r3, [sp, #24]
 8009e76:	9b05      	ldr	r3, [sp, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dd05      	ble.n	8009e88 <_dtoa_r+0x828>
 8009e7c:	4651      	mov	r1, sl
 8009e7e:	461a      	mov	r2, r3
 8009e80:	4620      	mov	r0, r4
 8009e82:	f000 fcef 	bl	800a864 <__lshift>
 8009e86:	4682      	mov	sl, r0
 8009e88:	9b06      	ldr	r3, [sp, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	dd05      	ble.n	8009e9a <_dtoa_r+0x83a>
 8009e8e:	4631      	mov	r1, r6
 8009e90:	461a      	mov	r2, r3
 8009e92:	4620      	mov	r0, r4
 8009e94:	f000 fce6 	bl	800a864 <__lshift>
 8009e98:	4606      	mov	r6, r0
 8009e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d072      	beq.n	8009f86 <_dtoa_r+0x926>
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	f000 fd4a 	bl	800a93c <__mcmp>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	da6c      	bge.n	8009f86 <_dtoa_r+0x926>
 8009eac:	2300      	movs	r3, #0
 8009eae:	4651      	mov	r1, sl
 8009eb0:	220a      	movs	r2, #10
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 fb28 	bl	800a508 <__multadd>
 8009eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ebe:	4682      	mov	sl, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 81b0 	beq.w	800a226 <_dtoa_r+0xbc6>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4639      	mov	r1, r7
 8009eca:	220a      	movs	r2, #10
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f000 fb1b 	bl	800a508 <__multadd>
 8009ed2:	9b01      	ldr	r3, [sp, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	4607      	mov	r7, r0
 8009ed8:	f300 8096 	bgt.w	800a008 <_dtoa_r+0x9a8>
 8009edc:	9b07      	ldr	r3, [sp, #28]
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	dc59      	bgt.n	8009f96 <_dtoa_r+0x936>
 8009ee2:	e091      	b.n	800a008 <_dtoa_r+0x9a8>
 8009ee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ee6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009eea:	e758      	b.n	8009d9e <_dtoa_r+0x73e>
 8009eec:	9b04      	ldr	r3, [sp, #16]
 8009eee:	1e5e      	subs	r6, r3, #1
 8009ef0:	9b08      	ldr	r3, [sp, #32]
 8009ef2:	42b3      	cmp	r3, r6
 8009ef4:	bfbf      	itttt	lt
 8009ef6:	9b08      	ldrlt	r3, [sp, #32]
 8009ef8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009efa:	9608      	strlt	r6, [sp, #32]
 8009efc:	1af3      	sublt	r3, r6, r3
 8009efe:	bfb4      	ite	lt
 8009f00:	18d2      	addlt	r2, r2, r3
 8009f02:	1b9e      	subge	r6, r3, r6
 8009f04:	9b04      	ldr	r3, [sp, #16]
 8009f06:	bfbc      	itt	lt
 8009f08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009f0a:	2600      	movlt	r6, #0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	bfb7      	itett	lt
 8009f10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009f14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009f18:	1a9d      	sublt	r5, r3, r2
 8009f1a:	2300      	movlt	r3, #0
 8009f1c:	e741      	b.n	8009da2 <_dtoa_r+0x742>
 8009f1e:	9e08      	ldr	r6, [sp, #32]
 8009f20:	9d05      	ldr	r5, [sp, #20]
 8009f22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009f24:	e748      	b.n	8009db8 <_dtoa_r+0x758>
 8009f26:	9a08      	ldr	r2, [sp, #32]
 8009f28:	e770      	b.n	8009e0c <_dtoa_r+0x7ac>
 8009f2a:	9b07      	ldr	r3, [sp, #28]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	dc19      	bgt.n	8009f64 <_dtoa_r+0x904>
 8009f30:	9b02      	ldr	r3, [sp, #8]
 8009f32:	b9bb      	cbnz	r3, 8009f64 <_dtoa_r+0x904>
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f3a:	b99b      	cbnz	r3, 8009f64 <_dtoa_r+0x904>
 8009f3c:	9b03      	ldr	r3, [sp, #12]
 8009f3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f42:	0d1b      	lsrs	r3, r3, #20
 8009f44:	051b      	lsls	r3, r3, #20
 8009f46:	b183      	cbz	r3, 8009f6a <_dtoa_r+0x90a>
 8009f48:	9b05      	ldr	r3, [sp, #20]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	9305      	str	r3, [sp, #20]
 8009f4e:	9b06      	ldr	r3, [sp, #24]
 8009f50:	3301      	adds	r3, #1
 8009f52:	9306      	str	r3, [sp, #24]
 8009f54:	f04f 0801 	mov.w	r8, #1
 8009f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f47f af6f 	bne.w	8009e3e <_dtoa_r+0x7de>
 8009f60:	2001      	movs	r0, #1
 8009f62:	e774      	b.n	8009e4e <_dtoa_r+0x7ee>
 8009f64:	f04f 0800 	mov.w	r8, #0
 8009f68:	e7f6      	b.n	8009f58 <_dtoa_r+0x8f8>
 8009f6a:	4698      	mov	r8, r3
 8009f6c:	e7f4      	b.n	8009f58 <_dtoa_r+0x8f8>
 8009f6e:	d082      	beq.n	8009e76 <_dtoa_r+0x816>
 8009f70:	9a05      	ldr	r2, [sp, #20]
 8009f72:	331c      	adds	r3, #28
 8009f74:	441a      	add	r2, r3
 8009f76:	9205      	str	r2, [sp, #20]
 8009f78:	9a06      	ldr	r2, [sp, #24]
 8009f7a:	441a      	add	r2, r3
 8009f7c:	441d      	add	r5, r3
 8009f7e:	9206      	str	r2, [sp, #24]
 8009f80:	e779      	b.n	8009e76 <_dtoa_r+0x816>
 8009f82:	4603      	mov	r3, r0
 8009f84:	e7f4      	b.n	8009f70 <_dtoa_r+0x910>
 8009f86:	9b04      	ldr	r3, [sp, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	dc37      	bgt.n	8009ffc <_dtoa_r+0x99c>
 8009f8c:	9b07      	ldr	r3, [sp, #28]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	dd34      	ble.n	8009ffc <_dtoa_r+0x99c>
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	9b01      	ldr	r3, [sp, #4]
 8009f98:	b963      	cbnz	r3, 8009fb4 <_dtoa_r+0x954>
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	2205      	movs	r2, #5
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f000 fab2 	bl	800a508 <__multadd>
 8009fa4:	4601      	mov	r1, r0
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	4650      	mov	r0, sl
 8009faa:	f000 fcc7 	bl	800a93c <__mcmp>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f73f adbb 	bgt.w	8009b2a <_dtoa_r+0x4ca>
 8009fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb6:	9d00      	ldr	r5, [sp, #0]
 8009fb8:	ea6f 0b03 	mvn.w	fp, r3
 8009fbc:	f04f 0800 	mov.w	r8, #0
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 fa7e 	bl	800a4c4 <_Bfree>
 8009fc8:	2f00      	cmp	r7, #0
 8009fca:	f43f aeab 	beq.w	8009d24 <_dtoa_r+0x6c4>
 8009fce:	f1b8 0f00 	cmp.w	r8, #0
 8009fd2:	d005      	beq.n	8009fe0 <_dtoa_r+0x980>
 8009fd4:	45b8      	cmp	r8, r7
 8009fd6:	d003      	beq.n	8009fe0 <_dtoa_r+0x980>
 8009fd8:	4641      	mov	r1, r8
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 fa72 	bl	800a4c4 <_Bfree>
 8009fe0:	4639      	mov	r1, r7
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 fa6e 	bl	800a4c4 <_Bfree>
 8009fe8:	e69c      	b.n	8009d24 <_dtoa_r+0x6c4>
 8009fea:	2600      	movs	r6, #0
 8009fec:	4637      	mov	r7, r6
 8009fee:	e7e1      	b.n	8009fb4 <_dtoa_r+0x954>
 8009ff0:	46bb      	mov	fp, r7
 8009ff2:	4637      	mov	r7, r6
 8009ff4:	e599      	b.n	8009b2a <_dtoa_r+0x4ca>
 8009ff6:	bf00      	nop
 8009ff8:	40240000 	.word	0x40240000
 8009ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 80c8 	beq.w	800a194 <_dtoa_r+0xb34>
 800a004:	9b04      	ldr	r3, [sp, #16]
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	2d00      	cmp	r5, #0
 800a00a:	dd05      	ble.n	800a018 <_dtoa_r+0x9b8>
 800a00c:	4639      	mov	r1, r7
 800a00e:	462a      	mov	r2, r5
 800a010:	4620      	mov	r0, r4
 800a012:	f000 fc27 	bl	800a864 <__lshift>
 800a016:	4607      	mov	r7, r0
 800a018:	f1b8 0f00 	cmp.w	r8, #0
 800a01c:	d05b      	beq.n	800a0d6 <_dtoa_r+0xa76>
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	4620      	mov	r0, r4
 800a022:	f000 fa0f 	bl	800a444 <_Balloc>
 800a026:	4605      	mov	r5, r0
 800a028:	b928      	cbnz	r0, 800a036 <_dtoa_r+0x9d6>
 800a02a:	4b83      	ldr	r3, [pc, #524]	; (800a238 <_dtoa_r+0xbd8>)
 800a02c:	4602      	mov	r2, r0
 800a02e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a032:	f7ff bb2e 	b.w	8009692 <_dtoa_r+0x32>
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	3202      	adds	r2, #2
 800a03a:	0092      	lsls	r2, r2, #2
 800a03c:	f107 010c 	add.w	r1, r7, #12
 800a040:	300c      	adds	r0, #12
 800a042:	f7ff fa76 	bl	8009532 <memcpy>
 800a046:	2201      	movs	r2, #1
 800a048:	4629      	mov	r1, r5
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 fc0a 	bl	800a864 <__lshift>
 800a050:	9b00      	ldr	r3, [sp, #0]
 800a052:	3301      	adds	r3, #1
 800a054:	9304      	str	r3, [sp, #16]
 800a056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a05a:	4413      	add	r3, r2
 800a05c:	9308      	str	r3, [sp, #32]
 800a05e:	9b02      	ldr	r3, [sp, #8]
 800a060:	f003 0301 	and.w	r3, r3, #1
 800a064:	46b8      	mov	r8, r7
 800a066:	9306      	str	r3, [sp, #24]
 800a068:	4607      	mov	r7, r0
 800a06a:	9b04      	ldr	r3, [sp, #16]
 800a06c:	4631      	mov	r1, r6
 800a06e:	3b01      	subs	r3, #1
 800a070:	4650      	mov	r0, sl
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	f7ff fa6b 	bl	800954e <quorem>
 800a078:	4641      	mov	r1, r8
 800a07a:	9002      	str	r0, [sp, #8]
 800a07c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a080:	4650      	mov	r0, sl
 800a082:	f000 fc5b 	bl	800a93c <__mcmp>
 800a086:	463a      	mov	r2, r7
 800a088:	9005      	str	r0, [sp, #20]
 800a08a:	4631      	mov	r1, r6
 800a08c:	4620      	mov	r0, r4
 800a08e:	f000 fc71 	bl	800a974 <__mdiff>
 800a092:	68c2      	ldr	r2, [r0, #12]
 800a094:	4605      	mov	r5, r0
 800a096:	bb02      	cbnz	r2, 800a0da <_dtoa_r+0xa7a>
 800a098:	4601      	mov	r1, r0
 800a09a:	4650      	mov	r0, sl
 800a09c:	f000 fc4e 	bl	800a93c <__mcmp>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a0a8:	f000 fa0c 	bl	800a4c4 <_Bfree>
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0b0:	9d04      	ldr	r5, [sp, #16]
 800a0b2:	ea43 0102 	orr.w	r1, r3, r2
 800a0b6:	9b06      	ldr	r3, [sp, #24]
 800a0b8:	4319      	orrs	r1, r3
 800a0ba:	d110      	bne.n	800a0de <_dtoa_r+0xa7e>
 800a0bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0c0:	d029      	beq.n	800a116 <_dtoa_r+0xab6>
 800a0c2:	9b05      	ldr	r3, [sp, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dd02      	ble.n	800a0ce <_dtoa_r+0xa6e>
 800a0c8:	9b02      	ldr	r3, [sp, #8]
 800a0ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a0ce:	9b01      	ldr	r3, [sp, #4]
 800a0d0:	f883 9000 	strb.w	r9, [r3]
 800a0d4:	e774      	b.n	8009fc0 <_dtoa_r+0x960>
 800a0d6:	4638      	mov	r0, r7
 800a0d8:	e7ba      	b.n	800a050 <_dtoa_r+0x9f0>
 800a0da:	2201      	movs	r2, #1
 800a0dc:	e7e1      	b.n	800a0a2 <_dtoa_r+0xa42>
 800a0de:	9b05      	ldr	r3, [sp, #20]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	db04      	blt.n	800a0ee <_dtoa_r+0xa8e>
 800a0e4:	9907      	ldr	r1, [sp, #28]
 800a0e6:	430b      	orrs	r3, r1
 800a0e8:	9906      	ldr	r1, [sp, #24]
 800a0ea:	430b      	orrs	r3, r1
 800a0ec:	d120      	bne.n	800a130 <_dtoa_r+0xad0>
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	dded      	ble.n	800a0ce <_dtoa_r+0xa6e>
 800a0f2:	4651      	mov	r1, sl
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 fbb4 	bl	800a864 <__lshift>
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4682      	mov	sl, r0
 800a100:	f000 fc1c 	bl	800a93c <__mcmp>
 800a104:	2800      	cmp	r0, #0
 800a106:	dc03      	bgt.n	800a110 <_dtoa_r+0xab0>
 800a108:	d1e1      	bne.n	800a0ce <_dtoa_r+0xa6e>
 800a10a:	f019 0f01 	tst.w	r9, #1
 800a10e:	d0de      	beq.n	800a0ce <_dtoa_r+0xa6e>
 800a110:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a114:	d1d8      	bne.n	800a0c8 <_dtoa_r+0xa68>
 800a116:	9a01      	ldr	r2, [sp, #4]
 800a118:	2339      	movs	r3, #57	; 0x39
 800a11a:	7013      	strb	r3, [r2, #0]
 800a11c:	462b      	mov	r3, r5
 800a11e:	461d      	mov	r5, r3
 800a120:	3b01      	subs	r3, #1
 800a122:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a126:	2a39      	cmp	r2, #57	; 0x39
 800a128:	d06c      	beq.n	800a204 <_dtoa_r+0xba4>
 800a12a:	3201      	adds	r2, #1
 800a12c:	701a      	strb	r2, [r3, #0]
 800a12e:	e747      	b.n	8009fc0 <_dtoa_r+0x960>
 800a130:	2a00      	cmp	r2, #0
 800a132:	dd07      	ble.n	800a144 <_dtoa_r+0xae4>
 800a134:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a138:	d0ed      	beq.n	800a116 <_dtoa_r+0xab6>
 800a13a:	9a01      	ldr	r2, [sp, #4]
 800a13c:	f109 0301 	add.w	r3, r9, #1
 800a140:	7013      	strb	r3, [r2, #0]
 800a142:	e73d      	b.n	8009fc0 <_dtoa_r+0x960>
 800a144:	9b04      	ldr	r3, [sp, #16]
 800a146:	9a08      	ldr	r2, [sp, #32]
 800a148:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d043      	beq.n	800a1d8 <_dtoa_r+0xb78>
 800a150:	4651      	mov	r1, sl
 800a152:	2300      	movs	r3, #0
 800a154:	220a      	movs	r2, #10
 800a156:	4620      	mov	r0, r4
 800a158:	f000 f9d6 	bl	800a508 <__multadd>
 800a15c:	45b8      	cmp	r8, r7
 800a15e:	4682      	mov	sl, r0
 800a160:	f04f 0300 	mov.w	r3, #0
 800a164:	f04f 020a 	mov.w	r2, #10
 800a168:	4641      	mov	r1, r8
 800a16a:	4620      	mov	r0, r4
 800a16c:	d107      	bne.n	800a17e <_dtoa_r+0xb1e>
 800a16e:	f000 f9cb 	bl	800a508 <__multadd>
 800a172:	4680      	mov	r8, r0
 800a174:	4607      	mov	r7, r0
 800a176:	9b04      	ldr	r3, [sp, #16]
 800a178:	3301      	adds	r3, #1
 800a17a:	9304      	str	r3, [sp, #16]
 800a17c:	e775      	b.n	800a06a <_dtoa_r+0xa0a>
 800a17e:	f000 f9c3 	bl	800a508 <__multadd>
 800a182:	4639      	mov	r1, r7
 800a184:	4680      	mov	r8, r0
 800a186:	2300      	movs	r3, #0
 800a188:	220a      	movs	r2, #10
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 f9bc 	bl	800a508 <__multadd>
 800a190:	4607      	mov	r7, r0
 800a192:	e7f0      	b.n	800a176 <_dtoa_r+0xb16>
 800a194:	9b04      	ldr	r3, [sp, #16]
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	9d00      	ldr	r5, [sp, #0]
 800a19a:	4631      	mov	r1, r6
 800a19c:	4650      	mov	r0, sl
 800a19e:	f7ff f9d6 	bl	800954e <quorem>
 800a1a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a1a6:	9b00      	ldr	r3, [sp, #0]
 800a1a8:	f805 9b01 	strb.w	r9, [r5], #1
 800a1ac:	1aea      	subs	r2, r5, r3
 800a1ae:	9b01      	ldr	r3, [sp, #4]
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	dd07      	ble.n	800a1c4 <_dtoa_r+0xb64>
 800a1b4:	4651      	mov	r1, sl
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	220a      	movs	r2, #10
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 f9a4 	bl	800a508 <__multadd>
 800a1c0:	4682      	mov	sl, r0
 800a1c2:	e7ea      	b.n	800a19a <_dtoa_r+0xb3a>
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bfc8      	it	gt
 800a1ca:	461d      	movgt	r5, r3
 800a1cc:	9b00      	ldr	r3, [sp, #0]
 800a1ce:	bfd8      	it	le
 800a1d0:	2501      	movle	r5, #1
 800a1d2:	441d      	add	r5, r3
 800a1d4:	f04f 0800 	mov.w	r8, #0
 800a1d8:	4651      	mov	r1, sl
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f000 fb41 	bl	800a864 <__lshift>
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4682      	mov	sl, r0
 800a1e6:	f000 fba9 	bl	800a93c <__mcmp>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	dc96      	bgt.n	800a11c <_dtoa_r+0xabc>
 800a1ee:	d102      	bne.n	800a1f6 <_dtoa_r+0xb96>
 800a1f0:	f019 0f01 	tst.w	r9, #1
 800a1f4:	d192      	bne.n	800a11c <_dtoa_r+0xabc>
 800a1f6:	462b      	mov	r3, r5
 800a1f8:	461d      	mov	r5, r3
 800a1fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1fe:	2a30      	cmp	r2, #48	; 0x30
 800a200:	d0fa      	beq.n	800a1f8 <_dtoa_r+0xb98>
 800a202:	e6dd      	b.n	8009fc0 <_dtoa_r+0x960>
 800a204:	9a00      	ldr	r2, [sp, #0]
 800a206:	429a      	cmp	r2, r3
 800a208:	d189      	bne.n	800a11e <_dtoa_r+0xabe>
 800a20a:	f10b 0b01 	add.w	fp, fp, #1
 800a20e:	2331      	movs	r3, #49	; 0x31
 800a210:	e796      	b.n	800a140 <_dtoa_r+0xae0>
 800a212:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <_dtoa_r+0xbdc>)
 800a214:	f7ff ba99 	b.w	800974a <_dtoa_r+0xea>
 800a218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f47f aa6d 	bne.w	80096fa <_dtoa_r+0x9a>
 800a220:	4b07      	ldr	r3, [pc, #28]	; (800a240 <_dtoa_r+0xbe0>)
 800a222:	f7ff ba92 	b.w	800974a <_dtoa_r+0xea>
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	dcb5      	bgt.n	800a198 <_dtoa_r+0xb38>
 800a22c:	9b07      	ldr	r3, [sp, #28]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	f73f aeb1 	bgt.w	8009f96 <_dtoa_r+0x936>
 800a234:	e7b0      	b.n	800a198 <_dtoa_r+0xb38>
 800a236:	bf00      	nop
 800a238:	0800e690 	.word	0x0800e690
 800a23c:	0800e5f0 	.word	0x0800e5f0
 800a240:	0800e614 	.word	0x0800e614

0800a244 <_free_r>:
 800a244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a246:	2900      	cmp	r1, #0
 800a248:	d044      	beq.n	800a2d4 <_free_r+0x90>
 800a24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24e:	9001      	str	r0, [sp, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	f1a1 0404 	sub.w	r4, r1, #4
 800a256:	bfb8      	it	lt
 800a258:	18e4      	addlt	r4, r4, r3
 800a25a:	f000 f8e7 	bl	800a42c <__malloc_lock>
 800a25e:	4a1e      	ldr	r2, [pc, #120]	; (800a2d8 <_free_r+0x94>)
 800a260:	9801      	ldr	r0, [sp, #4]
 800a262:	6813      	ldr	r3, [r2, #0]
 800a264:	b933      	cbnz	r3, 800a274 <_free_r+0x30>
 800a266:	6063      	str	r3, [r4, #4]
 800a268:	6014      	str	r4, [r2, #0]
 800a26a:	b003      	add	sp, #12
 800a26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a270:	f000 b8e2 	b.w	800a438 <__malloc_unlock>
 800a274:	42a3      	cmp	r3, r4
 800a276:	d908      	bls.n	800a28a <_free_r+0x46>
 800a278:	6825      	ldr	r5, [r4, #0]
 800a27a:	1961      	adds	r1, r4, r5
 800a27c:	428b      	cmp	r3, r1
 800a27e:	bf01      	itttt	eq
 800a280:	6819      	ldreq	r1, [r3, #0]
 800a282:	685b      	ldreq	r3, [r3, #4]
 800a284:	1949      	addeq	r1, r1, r5
 800a286:	6021      	streq	r1, [r4, #0]
 800a288:	e7ed      	b.n	800a266 <_free_r+0x22>
 800a28a:	461a      	mov	r2, r3
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	b10b      	cbz	r3, 800a294 <_free_r+0x50>
 800a290:	42a3      	cmp	r3, r4
 800a292:	d9fa      	bls.n	800a28a <_free_r+0x46>
 800a294:	6811      	ldr	r1, [r2, #0]
 800a296:	1855      	adds	r5, r2, r1
 800a298:	42a5      	cmp	r5, r4
 800a29a:	d10b      	bne.n	800a2b4 <_free_r+0x70>
 800a29c:	6824      	ldr	r4, [r4, #0]
 800a29e:	4421      	add	r1, r4
 800a2a0:	1854      	adds	r4, r2, r1
 800a2a2:	42a3      	cmp	r3, r4
 800a2a4:	6011      	str	r1, [r2, #0]
 800a2a6:	d1e0      	bne.n	800a26a <_free_r+0x26>
 800a2a8:	681c      	ldr	r4, [r3, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	6053      	str	r3, [r2, #4]
 800a2ae:	440c      	add	r4, r1
 800a2b0:	6014      	str	r4, [r2, #0]
 800a2b2:	e7da      	b.n	800a26a <_free_r+0x26>
 800a2b4:	d902      	bls.n	800a2bc <_free_r+0x78>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	e7d6      	b.n	800a26a <_free_r+0x26>
 800a2bc:	6825      	ldr	r5, [r4, #0]
 800a2be:	1961      	adds	r1, r4, r5
 800a2c0:	428b      	cmp	r3, r1
 800a2c2:	bf04      	itt	eq
 800a2c4:	6819      	ldreq	r1, [r3, #0]
 800a2c6:	685b      	ldreq	r3, [r3, #4]
 800a2c8:	6063      	str	r3, [r4, #4]
 800a2ca:	bf04      	itt	eq
 800a2cc:	1949      	addeq	r1, r1, r5
 800a2ce:	6021      	streq	r1, [r4, #0]
 800a2d0:	6054      	str	r4, [r2, #4]
 800a2d2:	e7ca      	b.n	800a26a <_free_r+0x26>
 800a2d4:	b003      	add	sp, #12
 800a2d6:	bd30      	pop	{r4, r5, pc}
 800a2d8:	20005368 	.word	0x20005368

0800a2dc <malloc>:
 800a2dc:	4b02      	ldr	r3, [pc, #8]	; (800a2e8 <malloc+0xc>)
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f000 b823 	b.w	800a32c <_malloc_r>
 800a2e6:	bf00      	nop
 800a2e8:	200000a4 	.word	0x200000a4

0800a2ec <sbrk_aligned>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	4e0e      	ldr	r6, [pc, #56]	; (800a328 <sbrk_aligned+0x3c>)
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	6831      	ldr	r1, [r6, #0]
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	b911      	cbnz	r1, 800a2fe <sbrk_aligned+0x12>
 800a2f8:	f000 fe26 	bl	800af48 <_sbrk_r>
 800a2fc:	6030      	str	r0, [r6, #0]
 800a2fe:	4621      	mov	r1, r4
 800a300:	4628      	mov	r0, r5
 800a302:	f000 fe21 	bl	800af48 <_sbrk_r>
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	d00a      	beq.n	800a320 <sbrk_aligned+0x34>
 800a30a:	1cc4      	adds	r4, r0, #3
 800a30c:	f024 0403 	bic.w	r4, r4, #3
 800a310:	42a0      	cmp	r0, r4
 800a312:	d007      	beq.n	800a324 <sbrk_aligned+0x38>
 800a314:	1a21      	subs	r1, r4, r0
 800a316:	4628      	mov	r0, r5
 800a318:	f000 fe16 	bl	800af48 <_sbrk_r>
 800a31c:	3001      	adds	r0, #1
 800a31e:	d101      	bne.n	800a324 <sbrk_aligned+0x38>
 800a320:	f04f 34ff 	mov.w	r4, #4294967295
 800a324:	4620      	mov	r0, r4
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	2000536c 	.word	0x2000536c

0800a32c <_malloc_r>:
 800a32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a330:	1ccd      	adds	r5, r1, #3
 800a332:	f025 0503 	bic.w	r5, r5, #3
 800a336:	3508      	adds	r5, #8
 800a338:	2d0c      	cmp	r5, #12
 800a33a:	bf38      	it	cc
 800a33c:	250c      	movcc	r5, #12
 800a33e:	2d00      	cmp	r5, #0
 800a340:	4607      	mov	r7, r0
 800a342:	db01      	blt.n	800a348 <_malloc_r+0x1c>
 800a344:	42a9      	cmp	r1, r5
 800a346:	d905      	bls.n	800a354 <_malloc_r+0x28>
 800a348:	230c      	movs	r3, #12
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	2600      	movs	r6, #0
 800a34e:	4630      	mov	r0, r6
 800a350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a428 <_malloc_r+0xfc>
 800a358:	f000 f868 	bl	800a42c <__malloc_lock>
 800a35c:	f8d8 3000 	ldr.w	r3, [r8]
 800a360:	461c      	mov	r4, r3
 800a362:	bb5c      	cbnz	r4, 800a3bc <_malloc_r+0x90>
 800a364:	4629      	mov	r1, r5
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff ffc0 	bl	800a2ec <sbrk_aligned>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	4604      	mov	r4, r0
 800a370:	d155      	bne.n	800a41e <_malloc_r+0xf2>
 800a372:	f8d8 4000 	ldr.w	r4, [r8]
 800a376:	4626      	mov	r6, r4
 800a378:	2e00      	cmp	r6, #0
 800a37a:	d145      	bne.n	800a408 <_malloc_r+0xdc>
 800a37c:	2c00      	cmp	r4, #0
 800a37e:	d048      	beq.n	800a412 <_malloc_r+0xe6>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	4631      	mov	r1, r6
 800a384:	4638      	mov	r0, r7
 800a386:	eb04 0903 	add.w	r9, r4, r3
 800a38a:	f000 fddd 	bl	800af48 <_sbrk_r>
 800a38e:	4581      	cmp	r9, r0
 800a390:	d13f      	bne.n	800a412 <_malloc_r+0xe6>
 800a392:	6821      	ldr	r1, [r4, #0]
 800a394:	1a6d      	subs	r5, r5, r1
 800a396:	4629      	mov	r1, r5
 800a398:	4638      	mov	r0, r7
 800a39a:	f7ff ffa7 	bl	800a2ec <sbrk_aligned>
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d037      	beq.n	800a412 <_malloc_r+0xe6>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	442b      	add	r3, r5
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d038      	beq.n	800a422 <_malloc_r+0xf6>
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	42a2      	cmp	r2, r4
 800a3b4:	d12b      	bne.n	800a40e <_malloc_r+0xe2>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	605a      	str	r2, [r3, #4]
 800a3ba:	e00f      	b.n	800a3dc <_malloc_r+0xb0>
 800a3bc:	6822      	ldr	r2, [r4, #0]
 800a3be:	1b52      	subs	r2, r2, r5
 800a3c0:	d41f      	bmi.n	800a402 <_malloc_r+0xd6>
 800a3c2:	2a0b      	cmp	r2, #11
 800a3c4:	d917      	bls.n	800a3f6 <_malloc_r+0xca>
 800a3c6:	1961      	adds	r1, r4, r5
 800a3c8:	42a3      	cmp	r3, r4
 800a3ca:	6025      	str	r5, [r4, #0]
 800a3cc:	bf18      	it	ne
 800a3ce:	6059      	strne	r1, [r3, #4]
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	bf08      	it	eq
 800a3d4:	f8c8 1000 	streq.w	r1, [r8]
 800a3d8:	5162      	str	r2, [r4, r5]
 800a3da:	604b      	str	r3, [r1, #4]
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f104 060b 	add.w	r6, r4, #11
 800a3e2:	f000 f829 	bl	800a438 <__malloc_unlock>
 800a3e6:	f026 0607 	bic.w	r6, r6, #7
 800a3ea:	1d23      	adds	r3, r4, #4
 800a3ec:	1af2      	subs	r2, r6, r3
 800a3ee:	d0ae      	beq.n	800a34e <_malloc_r+0x22>
 800a3f0:	1b9b      	subs	r3, r3, r6
 800a3f2:	50a3      	str	r3, [r4, r2]
 800a3f4:	e7ab      	b.n	800a34e <_malloc_r+0x22>
 800a3f6:	42a3      	cmp	r3, r4
 800a3f8:	6862      	ldr	r2, [r4, #4]
 800a3fa:	d1dd      	bne.n	800a3b8 <_malloc_r+0x8c>
 800a3fc:	f8c8 2000 	str.w	r2, [r8]
 800a400:	e7ec      	b.n	800a3dc <_malloc_r+0xb0>
 800a402:	4623      	mov	r3, r4
 800a404:	6864      	ldr	r4, [r4, #4]
 800a406:	e7ac      	b.n	800a362 <_malloc_r+0x36>
 800a408:	4634      	mov	r4, r6
 800a40a:	6876      	ldr	r6, [r6, #4]
 800a40c:	e7b4      	b.n	800a378 <_malloc_r+0x4c>
 800a40e:	4613      	mov	r3, r2
 800a410:	e7cc      	b.n	800a3ac <_malloc_r+0x80>
 800a412:	230c      	movs	r3, #12
 800a414:	603b      	str	r3, [r7, #0]
 800a416:	4638      	mov	r0, r7
 800a418:	f000 f80e 	bl	800a438 <__malloc_unlock>
 800a41c:	e797      	b.n	800a34e <_malloc_r+0x22>
 800a41e:	6025      	str	r5, [r4, #0]
 800a420:	e7dc      	b.n	800a3dc <_malloc_r+0xb0>
 800a422:	605b      	str	r3, [r3, #4]
 800a424:	deff      	udf	#255	; 0xff
 800a426:	bf00      	nop
 800a428:	20005368 	.word	0x20005368

0800a42c <__malloc_lock>:
 800a42c:	4801      	ldr	r0, [pc, #4]	; (800a434 <__malloc_lock+0x8>)
 800a42e:	f7ff b87e 	b.w	800952e <__retarget_lock_acquire_recursive>
 800a432:	bf00      	nop
 800a434:	20005364 	.word	0x20005364

0800a438 <__malloc_unlock>:
 800a438:	4801      	ldr	r0, [pc, #4]	; (800a440 <__malloc_unlock+0x8>)
 800a43a:	f7ff b879 	b.w	8009530 <__retarget_lock_release_recursive>
 800a43e:	bf00      	nop
 800a440:	20005364 	.word	0x20005364

0800a444 <_Balloc>:
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	69c6      	ldr	r6, [r0, #28]
 800a448:	4604      	mov	r4, r0
 800a44a:	460d      	mov	r5, r1
 800a44c:	b976      	cbnz	r6, 800a46c <_Balloc+0x28>
 800a44e:	2010      	movs	r0, #16
 800a450:	f7ff ff44 	bl	800a2dc <malloc>
 800a454:	4602      	mov	r2, r0
 800a456:	61e0      	str	r0, [r4, #28]
 800a458:	b920      	cbnz	r0, 800a464 <_Balloc+0x20>
 800a45a:	4b18      	ldr	r3, [pc, #96]	; (800a4bc <_Balloc+0x78>)
 800a45c:	4818      	ldr	r0, [pc, #96]	; (800a4c0 <_Balloc+0x7c>)
 800a45e:	216b      	movs	r1, #107	; 0x6b
 800a460:	f000 fd82 	bl	800af68 <__assert_func>
 800a464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a468:	6006      	str	r6, [r0, #0]
 800a46a:	60c6      	str	r6, [r0, #12]
 800a46c:	69e6      	ldr	r6, [r4, #28]
 800a46e:	68f3      	ldr	r3, [r6, #12]
 800a470:	b183      	cbz	r3, 800a494 <_Balloc+0x50>
 800a472:	69e3      	ldr	r3, [r4, #28]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a47a:	b9b8      	cbnz	r0, 800a4ac <_Balloc+0x68>
 800a47c:	2101      	movs	r1, #1
 800a47e:	fa01 f605 	lsl.w	r6, r1, r5
 800a482:	1d72      	adds	r2, r6, #5
 800a484:	0092      	lsls	r2, r2, #2
 800a486:	4620      	mov	r0, r4
 800a488:	f000 fd8c 	bl	800afa4 <_calloc_r>
 800a48c:	b160      	cbz	r0, 800a4a8 <_Balloc+0x64>
 800a48e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a492:	e00e      	b.n	800a4b2 <_Balloc+0x6e>
 800a494:	2221      	movs	r2, #33	; 0x21
 800a496:	2104      	movs	r1, #4
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 fd83 	bl	800afa4 <_calloc_r>
 800a49e:	69e3      	ldr	r3, [r4, #28]
 800a4a0:	60f0      	str	r0, [r6, #12]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1e4      	bne.n	800a472 <_Balloc+0x2e>
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	6802      	ldr	r2, [r0, #0]
 800a4ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4b8:	e7f7      	b.n	800a4aa <_Balloc+0x66>
 800a4ba:	bf00      	nop
 800a4bc:	0800e621 	.word	0x0800e621
 800a4c0:	0800e6a1 	.word	0x0800e6a1

0800a4c4 <_Bfree>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	69c6      	ldr	r6, [r0, #28]
 800a4c8:	4605      	mov	r5, r0
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	b976      	cbnz	r6, 800a4ec <_Bfree+0x28>
 800a4ce:	2010      	movs	r0, #16
 800a4d0:	f7ff ff04 	bl	800a2dc <malloc>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	61e8      	str	r0, [r5, #28]
 800a4d8:	b920      	cbnz	r0, 800a4e4 <_Bfree+0x20>
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <_Bfree+0x3c>)
 800a4dc:	4809      	ldr	r0, [pc, #36]	; (800a504 <_Bfree+0x40>)
 800a4de:	218f      	movs	r1, #143	; 0x8f
 800a4e0:	f000 fd42 	bl	800af68 <__assert_func>
 800a4e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4e8:	6006      	str	r6, [r0, #0]
 800a4ea:	60c6      	str	r6, [r0, #12]
 800a4ec:	b13c      	cbz	r4, 800a4fe <_Bfree+0x3a>
 800a4ee:	69eb      	ldr	r3, [r5, #28]
 800a4f0:	6862      	ldr	r2, [r4, #4]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4f8:	6021      	str	r1, [r4, #0]
 800a4fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}
 800a500:	0800e621 	.word	0x0800e621
 800a504:	0800e6a1 	.word	0x0800e6a1

0800a508 <__multadd>:
 800a508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50c:	690d      	ldr	r5, [r1, #16]
 800a50e:	4607      	mov	r7, r0
 800a510:	460c      	mov	r4, r1
 800a512:	461e      	mov	r6, r3
 800a514:	f101 0c14 	add.w	ip, r1, #20
 800a518:	2000      	movs	r0, #0
 800a51a:	f8dc 3000 	ldr.w	r3, [ip]
 800a51e:	b299      	uxth	r1, r3
 800a520:	fb02 6101 	mla	r1, r2, r1, r6
 800a524:	0c1e      	lsrs	r6, r3, #16
 800a526:	0c0b      	lsrs	r3, r1, #16
 800a528:	fb02 3306 	mla	r3, r2, r6, r3
 800a52c:	b289      	uxth	r1, r1
 800a52e:	3001      	adds	r0, #1
 800a530:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a534:	4285      	cmp	r5, r0
 800a536:	f84c 1b04 	str.w	r1, [ip], #4
 800a53a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a53e:	dcec      	bgt.n	800a51a <__multadd+0x12>
 800a540:	b30e      	cbz	r6, 800a586 <__multadd+0x7e>
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	42ab      	cmp	r3, r5
 800a546:	dc19      	bgt.n	800a57c <__multadd+0x74>
 800a548:	6861      	ldr	r1, [r4, #4]
 800a54a:	4638      	mov	r0, r7
 800a54c:	3101      	adds	r1, #1
 800a54e:	f7ff ff79 	bl	800a444 <_Balloc>
 800a552:	4680      	mov	r8, r0
 800a554:	b928      	cbnz	r0, 800a562 <__multadd+0x5a>
 800a556:	4602      	mov	r2, r0
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <__multadd+0x84>)
 800a55a:	480d      	ldr	r0, [pc, #52]	; (800a590 <__multadd+0x88>)
 800a55c:	21ba      	movs	r1, #186	; 0xba
 800a55e:	f000 fd03 	bl	800af68 <__assert_func>
 800a562:	6922      	ldr	r2, [r4, #16]
 800a564:	3202      	adds	r2, #2
 800a566:	f104 010c 	add.w	r1, r4, #12
 800a56a:	0092      	lsls	r2, r2, #2
 800a56c:	300c      	adds	r0, #12
 800a56e:	f7fe ffe0 	bl	8009532 <memcpy>
 800a572:	4621      	mov	r1, r4
 800a574:	4638      	mov	r0, r7
 800a576:	f7ff ffa5 	bl	800a4c4 <_Bfree>
 800a57a:	4644      	mov	r4, r8
 800a57c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a580:	3501      	adds	r5, #1
 800a582:	615e      	str	r6, [r3, #20]
 800a584:	6125      	str	r5, [r4, #16]
 800a586:	4620      	mov	r0, r4
 800a588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a58c:	0800e690 	.word	0x0800e690
 800a590:	0800e6a1 	.word	0x0800e6a1

0800a594 <__hi0bits>:
 800a594:	0c03      	lsrs	r3, r0, #16
 800a596:	041b      	lsls	r3, r3, #16
 800a598:	b9d3      	cbnz	r3, 800a5d0 <__hi0bits+0x3c>
 800a59a:	0400      	lsls	r0, r0, #16
 800a59c:	2310      	movs	r3, #16
 800a59e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5a2:	bf04      	itt	eq
 800a5a4:	0200      	lsleq	r0, r0, #8
 800a5a6:	3308      	addeq	r3, #8
 800a5a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5ac:	bf04      	itt	eq
 800a5ae:	0100      	lsleq	r0, r0, #4
 800a5b0:	3304      	addeq	r3, #4
 800a5b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5b6:	bf04      	itt	eq
 800a5b8:	0080      	lsleq	r0, r0, #2
 800a5ba:	3302      	addeq	r3, #2
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	db05      	blt.n	800a5cc <__hi0bits+0x38>
 800a5c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5c4:	f103 0301 	add.w	r3, r3, #1
 800a5c8:	bf08      	it	eq
 800a5ca:	2320      	moveq	r3, #32
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	4770      	bx	lr
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	e7e4      	b.n	800a59e <__hi0bits+0xa>

0800a5d4 <__lo0bits>:
 800a5d4:	6803      	ldr	r3, [r0, #0]
 800a5d6:	f013 0207 	ands.w	r2, r3, #7
 800a5da:	d00c      	beq.n	800a5f6 <__lo0bits+0x22>
 800a5dc:	07d9      	lsls	r1, r3, #31
 800a5de:	d422      	bmi.n	800a626 <__lo0bits+0x52>
 800a5e0:	079a      	lsls	r2, r3, #30
 800a5e2:	bf49      	itett	mi
 800a5e4:	085b      	lsrmi	r3, r3, #1
 800a5e6:	089b      	lsrpl	r3, r3, #2
 800a5e8:	6003      	strmi	r3, [r0, #0]
 800a5ea:	2201      	movmi	r2, #1
 800a5ec:	bf5c      	itt	pl
 800a5ee:	6003      	strpl	r3, [r0, #0]
 800a5f0:	2202      	movpl	r2, #2
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	4770      	bx	lr
 800a5f6:	b299      	uxth	r1, r3
 800a5f8:	b909      	cbnz	r1, 800a5fe <__lo0bits+0x2a>
 800a5fa:	0c1b      	lsrs	r3, r3, #16
 800a5fc:	2210      	movs	r2, #16
 800a5fe:	b2d9      	uxtb	r1, r3
 800a600:	b909      	cbnz	r1, 800a606 <__lo0bits+0x32>
 800a602:	3208      	adds	r2, #8
 800a604:	0a1b      	lsrs	r3, r3, #8
 800a606:	0719      	lsls	r1, r3, #28
 800a608:	bf04      	itt	eq
 800a60a:	091b      	lsreq	r3, r3, #4
 800a60c:	3204      	addeq	r2, #4
 800a60e:	0799      	lsls	r1, r3, #30
 800a610:	bf04      	itt	eq
 800a612:	089b      	lsreq	r3, r3, #2
 800a614:	3202      	addeq	r2, #2
 800a616:	07d9      	lsls	r1, r3, #31
 800a618:	d403      	bmi.n	800a622 <__lo0bits+0x4e>
 800a61a:	085b      	lsrs	r3, r3, #1
 800a61c:	f102 0201 	add.w	r2, r2, #1
 800a620:	d003      	beq.n	800a62a <__lo0bits+0x56>
 800a622:	6003      	str	r3, [r0, #0]
 800a624:	e7e5      	b.n	800a5f2 <__lo0bits+0x1e>
 800a626:	2200      	movs	r2, #0
 800a628:	e7e3      	b.n	800a5f2 <__lo0bits+0x1e>
 800a62a:	2220      	movs	r2, #32
 800a62c:	e7e1      	b.n	800a5f2 <__lo0bits+0x1e>
	...

0800a630 <__i2b>:
 800a630:	b510      	push	{r4, lr}
 800a632:	460c      	mov	r4, r1
 800a634:	2101      	movs	r1, #1
 800a636:	f7ff ff05 	bl	800a444 <_Balloc>
 800a63a:	4602      	mov	r2, r0
 800a63c:	b928      	cbnz	r0, 800a64a <__i2b+0x1a>
 800a63e:	4b05      	ldr	r3, [pc, #20]	; (800a654 <__i2b+0x24>)
 800a640:	4805      	ldr	r0, [pc, #20]	; (800a658 <__i2b+0x28>)
 800a642:	f240 1145 	movw	r1, #325	; 0x145
 800a646:	f000 fc8f 	bl	800af68 <__assert_func>
 800a64a:	2301      	movs	r3, #1
 800a64c:	6144      	str	r4, [r0, #20]
 800a64e:	6103      	str	r3, [r0, #16]
 800a650:	bd10      	pop	{r4, pc}
 800a652:	bf00      	nop
 800a654:	0800e690 	.word	0x0800e690
 800a658:	0800e6a1 	.word	0x0800e6a1

0800a65c <__multiply>:
 800a65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a660:	4691      	mov	r9, r2
 800a662:	690a      	ldr	r2, [r1, #16]
 800a664:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a668:	429a      	cmp	r2, r3
 800a66a:	bfb8      	it	lt
 800a66c:	460b      	movlt	r3, r1
 800a66e:	460c      	mov	r4, r1
 800a670:	bfbc      	itt	lt
 800a672:	464c      	movlt	r4, r9
 800a674:	4699      	movlt	r9, r3
 800a676:	6927      	ldr	r7, [r4, #16]
 800a678:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a67c:	68a3      	ldr	r3, [r4, #8]
 800a67e:	6861      	ldr	r1, [r4, #4]
 800a680:	eb07 060a 	add.w	r6, r7, sl
 800a684:	42b3      	cmp	r3, r6
 800a686:	b085      	sub	sp, #20
 800a688:	bfb8      	it	lt
 800a68a:	3101      	addlt	r1, #1
 800a68c:	f7ff feda 	bl	800a444 <_Balloc>
 800a690:	b930      	cbnz	r0, 800a6a0 <__multiply+0x44>
 800a692:	4602      	mov	r2, r0
 800a694:	4b44      	ldr	r3, [pc, #272]	; (800a7a8 <__multiply+0x14c>)
 800a696:	4845      	ldr	r0, [pc, #276]	; (800a7ac <__multiply+0x150>)
 800a698:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a69c:	f000 fc64 	bl	800af68 <__assert_func>
 800a6a0:	f100 0514 	add.w	r5, r0, #20
 800a6a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	4543      	cmp	r3, r8
 800a6ae:	d321      	bcc.n	800a6f4 <__multiply+0x98>
 800a6b0:	f104 0314 	add.w	r3, r4, #20
 800a6b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6b8:	f109 0314 	add.w	r3, r9, #20
 800a6bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6c0:	9202      	str	r2, [sp, #8]
 800a6c2:	1b3a      	subs	r2, r7, r4
 800a6c4:	3a15      	subs	r2, #21
 800a6c6:	f022 0203 	bic.w	r2, r2, #3
 800a6ca:	3204      	adds	r2, #4
 800a6cc:	f104 0115 	add.w	r1, r4, #21
 800a6d0:	428f      	cmp	r7, r1
 800a6d2:	bf38      	it	cc
 800a6d4:	2204      	movcc	r2, #4
 800a6d6:	9201      	str	r2, [sp, #4]
 800a6d8:	9a02      	ldr	r2, [sp, #8]
 800a6da:	9303      	str	r3, [sp, #12]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d80c      	bhi.n	800a6fa <__multiply+0x9e>
 800a6e0:	2e00      	cmp	r6, #0
 800a6e2:	dd03      	ble.n	800a6ec <__multiply+0x90>
 800a6e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d05b      	beq.n	800a7a4 <__multiply+0x148>
 800a6ec:	6106      	str	r6, [r0, #16]
 800a6ee:	b005      	add	sp, #20
 800a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	f843 2b04 	str.w	r2, [r3], #4
 800a6f8:	e7d8      	b.n	800a6ac <__multiply+0x50>
 800a6fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6fe:	f1ba 0f00 	cmp.w	sl, #0
 800a702:	d024      	beq.n	800a74e <__multiply+0xf2>
 800a704:	f104 0e14 	add.w	lr, r4, #20
 800a708:	46a9      	mov	r9, r5
 800a70a:	f04f 0c00 	mov.w	ip, #0
 800a70e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a712:	f8d9 1000 	ldr.w	r1, [r9]
 800a716:	fa1f fb82 	uxth.w	fp, r2
 800a71a:	b289      	uxth	r1, r1
 800a71c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a720:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a724:	f8d9 2000 	ldr.w	r2, [r9]
 800a728:	4461      	add	r1, ip
 800a72a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a72e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a732:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a736:	b289      	uxth	r1, r1
 800a738:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a73c:	4577      	cmp	r7, lr
 800a73e:	f849 1b04 	str.w	r1, [r9], #4
 800a742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a746:	d8e2      	bhi.n	800a70e <__multiply+0xb2>
 800a748:	9a01      	ldr	r2, [sp, #4]
 800a74a:	f845 c002 	str.w	ip, [r5, r2]
 800a74e:	9a03      	ldr	r2, [sp, #12]
 800a750:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a754:	3304      	adds	r3, #4
 800a756:	f1b9 0f00 	cmp.w	r9, #0
 800a75a:	d021      	beq.n	800a7a0 <__multiply+0x144>
 800a75c:	6829      	ldr	r1, [r5, #0]
 800a75e:	f104 0c14 	add.w	ip, r4, #20
 800a762:	46ae      	mov	lr, r5
 800a764:	f04f 0a00 	mov.w	sl, #0
 800a768:	f8bc b000 	ldrh.w	fp, [ip]
 800a76c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a770:	fb09 220b 	mla	r2, r9, fp, r2
 800a774:	4452      	add	r2, sl
 800a776:	b289      	uxth	r1, r1
 800a778:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a77c:	f84e 1b04 	str.w	r1, [lr], #4
 800a780:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a784:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a788:	f8be 1000 	ldrh.w	r1, [lr]
 800a78c:	fb09 110a 	mla	r1, r9, sl, r1
 800a790:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a794:	4567      	cmp	r7, ip
 800a796:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a79a:	d8e5      	bhi.n	800a768 <__multiply+0x10c>
 800a79c:	9a01      	ldr	r2, [sp, #4]
 800a79e:	50a9      	str	r1, [r5, r2]
 800a7a0:	3504      	adds	r5, #4
 800a7a2:	e799      	b.n	800a6d8 <__multiply+0x7c>
 800a7a4:	3e01      	subs	r6, #1
 800a7a6:	e79b      	b.n	800a6e0 <__multiply+0x84>
 800a7a8:	0800e690 	.word	0x0800e690
 800a7ac:	0800e6a1 	.word	0x0800e6a1

0800a7b0 <__pow5mult>:
 800a7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b4:	4615      	mov	r5, r2
 800a7b6:	f012 0203 	ands.w	r2, r2, #3
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460f      	mov	r7, r1
 800a7be:	d007      	beq.n	800a7d0 <__pow5mult+0x20>
 800a7c0:	4c25      	ldr	r4, [pc, #148]	; (800a858 <__pow5mult+0xa8>)
 800a7c2:	3a01      	subs	r2, #1
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7ca:	f7ff fe9d 	bl	800a508 <__multadd>
 800a7ce:	4607      	mov	r7, r0
 800a7d0:	10ad      	asrs	r5, r5, #2
 800a7d2:	d03d      	beq.n	800a850 <__pow5mult+0xa0>
 800a7d4:	69f4      	ldr	r4, [r6, #28]
 800a7d6:	b97c      	cbnz	r4, 800a7f8 <__pow5mult+0x48>
 800a7d8:	2010      	movs	r0, #16
 800a7da:	f7ff fd7f 	bl	800a2dc <malloc>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	61f0      	str	r0, [r6, #28]
 800a7e2:	b928      	cbnz	r0, 800a7f0 <__pow5mult+0x40>
 800a7e4:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <__pow5mult+0xac>)
 800a7e6:	481e      	ldr	r0, [pc, #120]	; (800a860 <__pow5mult+0xb0>)
 800a7e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a7ec:	f000 fbbc 	bl	800af68 <__assert_func>
 800a7f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7f4:	6004      	str	r4, [r0, #0]
 800a7f6:	60c4      	str	r4, [r0, #12]
 800a7f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a7fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a800:	b94c      	cbnz	r4, 800a816 <__pow5mult+0x66>
 800a802:	f240 2171 	movw	r1, #625	; 0x271
 800a806:	4630      	mov	r0, r6
 800a808:	f7ff ff12 	bl	800a630 <__i2b>
 800a80c:	2300      	movs	r3, #0
 800a80e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a812:	4604      	mov	r4, r0
 800a814:	6003      	str	r3, [r0, #0]
 800a816:	f04f 0900 	mov.w	r9, #0
 800a81a:	07eb      	lsls	r3, r5, #31
 800a81c:	d50a      	bpl.n	800a834 <__pow5mult+0x84>
 800a81e:	4639      	mov	r1, r7
 800a820:	4622      	mov	r2, r4
 800a822:	4630      	mov	r0, r6
 800a824:	f7ff ff1a 	bl	800a65c <__multiply>
 800a828:	4639      	mov	r1, r7
 800a82a:	4680      	mov	r8, r0
 800a82c:	4630      	mov	r0, r6
 800a82e:	f7ff fe49 	bl	800a4c4 <_Bfree>
 800a832:	4647      	mov	r7, r8
 800a834:	106d      	asrs	r5, r5, #1
 800a836:	d00b      	beq.n	800a850 <__pow5mult+0xa0>
 800a838:	6820      	ldr	r0, [r4, #0]
 800a83a:	b938      	cbnz	r0, 800a84c <__pow5mult+0x9c>
 800a83c:	4622      	mov	r2, r4
 800a83e:	4621      	mov	r1, r4
 800a840:	4630      	mov	r0, r6
 800a842:	f7ff ff0b 	bl	800a65c <__multiply>
 800a846:	6020      	str	r0, [r4, #0]
 800a848:	f8c0 9000 	str.w	r9, [r0]
 800a84c:	4604      	mov	r4, r0
 800a84e:	e7e4      	b.n	800a81a <__pow5mult+0x6a>
 800a850:	4638      	mov	r0, r7
 800a852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a856:	bf00      	nop
 800a858:	0800e7f0 	.word	0x0800e7f0
 800a85c:	0800e621 	.word	0x0800e621
 800a860:	0800e6a1 	.word	0x0800e6a1

0800a864 <__lshift>:
 800a864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a868:	460c      	mov	r4, r1
 800a86a:	6849      	ldr	r1, [r1, #4]
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a872:	68a3      	ldr	r3, [r4, #8]
 800a874:	4607      	mov	r7, r0
 800a876:	4691      	mov	r9, r2
 800a878:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a87c:	f108 0601 	add.w	r6, r8, #1
 800a880:	42b3      	cmp	r3, r6
 800a882:	db0b      	blt.n	800a89c <__lshift+0x38>
 800a884:	4638      	mov	r0, r7
 800a886:	f7ff fddd 	bl	800a444 <_Balloc>
 800a88a:	4605      	mov	r5, r0
 800a88c:	b948      	cbnz	r0, 800a8a2 <__lshift+0x3e>
 800a88e:	4602      	mov	r2, r0
 800a890:	4b28      	ldr	r3, [pc, #160]	; (800a934 <__lshift+0xd0>)
 800a892:	4829      	ldr	r0, [pc, #164]	; (800a938 <__lshift+0xd4>)
 800a894:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a898:	f000 fb66 	bl	800af68 <__assert_func>
 800a89c:	3101      	adds	r1, #1
 800a89e:	005b      	lsls	r3, r3, #1
 800a8a0:	e7ee      	b.n	800a880 <__lshift+0x1c>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f100 0114 	add.w	r1, r0, #20
 800a8a8:	f100 0210 	add.w	r2, r0, #16
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	4553      	cmp	r3, sl
 800a8b0:	db33      	blt.n	800a91a <__lshift+0xb6>
 800a8b2:	6920      	ldr	r0, [r4, #16]
 800a8b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8b8:	f104 0314 	add.w	r3, r4, #20
 800a8bc:	f019 091f 	ands.w	r9, r9, #31
 800a8c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8c8:	d02b      	beq.n	800a922 <__lshift+0xbe>
 800a8ca:	f1c9 0e20 	rsb	lr, r9, #32
 800a8ce:	468a      	mov	sl, r1
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	6818      	ldr	r0, [r3, #0]
 800a8d4:	fa00 f009 	lsl.w	r0, r0, r9
 800a8d8:	4310      	orrs	r0, r2
 800a8da:	f84a 0b04 	str.w	r0, [sl], #4
 800a8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e2:	459c      	cmp	ip, r3
 800a8e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8e8:	d8f3      	bhi.n	800a8d2 <__lshift+0x6e>
 800a8ea:	ebac 0304 	sub.w	r3, ip, r4
 800a8ee:	3b15      	subs	r3, #21
 800a8f0:	f023 0303 	bic.w	r3, r3, #3
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	f104 0015 	add.w	r0, r4, #21
 800a8fa:	4584      	cmp	ip, r0
 800a8fc:	bf38      	it	cc
 800a8fe:	2304      	movcc	r3, #4
 800a900:	50ca      	str	r2, [r1, r3]
 800a902:	b10a      	cbz	r2, 800a908 <__lshift+0xa4>
 800a904:	f108 0602 	add.w	r6, r8, #2
 800a908:	3e01      	subs	r6, #1
 800a90a:	4638      	mov	r0, r7
 800a90c:	612e      	str	r6, [r5, #16]
 800a90e:	4621      	mov	r1, r4
 800a910:	f7ff fdd8 	bl	800a4c4 <_Bfree>
 800a914:	4628      	mov	r0, r5
 800a916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a91e:	3301      	adds	r3, #1
 800a920:	e7c5      	b.n	800a8ae <__lshift+0x4a>
 800a922:	3904      	subs	r1, #4
 800a924:	f853 2b04 	ldr.w	r2, [r3], #4
 800a928:	f841 2f04 	str.w	r2, [r1, #4]!
 800a92c:	459c      	cmp	ip, r3
 800a92e:	d8f9      	bhi.n	800a924 <__lshift+0xc0>
 800a930:	e7ea      	b.n	800a908 <__lshift+0xa4>
 800a932:	bf00      	nop
 800a934:	0800e690 	.word	0x0800e690
 800a938:	0800e6a1 	.word	0x0800e6a1

0800a93c <__mcmp>:
 800a93c:	b530      	push	{r4, r5, lr}
 800a93e:	6902      	ldr	r2, [r0, #16]
 800a940:	690c      	ldr	r4, [r1, #16]
 800a942:	1b12      	subs	r2, r2, r4
 800a944:	d10e      	bne.n	800a964 <__mcmp+0x28>
 800a946:	f100 0314 	add.w	r3, r0, #20
 800a94a:	3114      	adds	r1, #20
 800a94c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a950:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a954:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a958:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a95c:	42a5      	cmp	r5, r4
 800a95e:	d003      	beq.n	800a968 <__mcmp+0x2c>
 800a960:	d305      	bcc.n	800a96e <__mcmp+0x32>
 800a962:	2201      	movs	r2, #1
 800a964:	4610      	mov	r0, r2
 800a966:	bd30      	pop	{r4, r5, pc}
 800a968:	4283      	cmp	r3, r0
 800a96a:	d3f3      	bcc.n	800a954 <__mcmp+0x18>
 800a96c:	e7fa      	b.n	800a964 <__mcmp+0x28>
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295
 800a972:	e7f7      	b.n	800a964 <__mcmp+0x28>

0800a974 <__mdiff>:
 800a974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a978:	460c      	mov	r4, r1
 800a97a:	4606      	mov	r6, r0
 800a97c:	4611      	mov	r1, r2
 800a97e:	4620      	mov	r0, r4
 800a980:	4690      	mov	r8, r2
 800a982:	f7ff ffdb 	bl	800a93c <__mcmp>
 800a986:	1e05      	subs	r5, r0, #0
 800a988:	d110      	bne.n	800a9ac <__mdiff+0x38>
 800a98a:	4629      	mov	r1, r5
 800a98c:	4630      	mov	r0, r6
 800a98e:	f7ff fd59 	bl	800a444 <_Balloc>
 800a992:	b930      	cbnz	r0, 800a9a2 <__mdiff+0x2e>
 800a994:	4b3a      	ldr	r3, [pc, #232]	; (800aa80 <__mdiff+0x10c>)
 800a996:	4602      	mov	r2, r0
 800a998:	f240 2137 	movw	r1, #567	; 0x237
 800a99c:	4839      	ldr	r0, [pc, #228]	; (800aa84 <__mdiff+0x110>)
 800a99e:	f000 fae3 	bl	800af68 <__assert_func>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ac:	bfa4      	itt	ge
 800a9ae:	4643      	movge	r3, r8
 800a9b0:	46a0      	movge	r8, r4
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9b8:	bfa6      	itte	ge
 800a9ba:	461c      	movge	r4, r3
 800a9bc:	2500      	movge	r5, #0
 800a9be:	2501      	movlt	r5, #1
 800a9c0:	f7ff fd40 	bl	800a444 <_Balloc>
 800a9c4:	b920      	cbnz	r0, 800a9d0 <__mdiff+0x5c>
 800a9c6:	4b2e      	ldr	r3, [pc, #184]	; (800aa80 <__mdiff+0x10c>)
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	f240 2145 	movw	r1, #581	; 0x245
 800a9ce:	e7e5      	b.n	800a99c <__mdiff+0x28>
 800a9d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9d4:	6926      	ldr	r6, [r4, #16]
 800a9d6:	60c5      	str	r5, [r0, #12]
 800a9d8:	f104 0914 	add.w	r9, r4, #20
 800a9dc:	f108 0514 	add.w	r5, r8, #20
 800a9e0:	f100 0e14 	add.w	lr, r0, #20
 800a9e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a9e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9ec:	f108 0210 	add.w	r2, r8, #16
 800a9f0:	46f2      	mov	sl, lr
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9fc:	fa11 f88b 	uxtah	r8, r1, fp
 800aa00:	b299      	uxth	r1, r3
 800aa02:	0c1b      	lsrs	r3, r3, #16
 800aa04:	eba8 0801 	sub.w	r8, r8, r1
 800aa08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa10:	fa1f f888 	uxth.w	r8, r8
 800aa14:	1419      	asrs	r1, r3, #16
 800aa16:	454e      	cmp	r6, r9
 800aa18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa1c:	f84a 3b04 	str.w	r3, [sl], #4
 800aa20:	d8e8      	bhi.n	800a9f4 <__mdiff+0x80>
 800aa22:	1b33      	subs	r3, r6, r4
 800aa24:	3b15      	subs	r3, #21
 800aa26:	f023 0303 	bic.w	r3, r3, #3
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	3415      	adds	r4, #21
 800aa2e:	42a6      	cmp	r6, r4
 800aa30:	bf38      	it	cc
 800aa32:	2304      	movcc	r3, #4
 800aa34:	441d      	add	r5, r3
 800aa36:	4473      	add	r3, lr
 800aa38:	469e      	mov	lr, r3
 800aa3a:	462e      	mov	r6, r5
 800aa3c:	4566      	cmp	r6, ip
 800aa3e:	d30e      	bcc.n	800aa5e <__mdiff+0xea>
 800aa40:	f10c 0203 	add.w	r2, ip, #3
 800aa44:	1b52      	subs	r2, r2, r5
 800aa46:	f022 0203 	bic.w	r2, r2, #3
 800aa4a:	3d03      	subs	r5, #3
 800aa4c:	45ac      	cmp	ip, r5
 800aa4e:	bf38      	it	cc
 800aa50:	2200      	movcc	r2, #0
 800aa52:	4413      	add	r3, r2
 800aa54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aa58:	b17a      	cbz	r2, 800aa7a <__mdiff+0x106>
 800aa5a:	6107      	str	r7, [r0, #16]
 800aa5c:	e7a4      	b.n	800a9a8 <__mdiff+0x34>
 800aa5e:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa62:	fa11 f288 	uxtah	r2, r1, r8
 800aa66:	1414      	asrs	r4, r2, #16
 800aa68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa6c:	b292      	uxth	r2, r2
 800aa6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa72:	f84e 2b04 	str.w	r2, [lr], #4
 800aa76:	1421      	asrs	r1, r4, #16
 800aa78:	e7e0      	b.n	800aa3c <__mdiff+0xc8>
 800aa7a:	3f01      	subs	r7, #1
 800aa7c:	e7ea      	b.n	800aa54 <__mdiff+0xe0>
 800aa7e:	bf00      	nop
 800aa80:	0800e690 	.word	0x0800e690
 800aa84:	0800e6a1 	.word	0x0800e6a1

0800aa88 <__d2b>:
 800aa88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa8c:	460f      	mov	r7, r1
 800aa8e:	2101      	movs	r1, #1
 800aa90:	ec59 8b10 	vmov	r8, r9, d0
 800aa94:	4616      	mov	r6, r2
 800aa96:	f7ff fcd5 	bl	800a444 <_Balloc>
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	b930      	cbnz	r0, 800aaac <__d2b+0x24>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	4b24      	ldr	r3, [pc, #144]	; (800ab34 <__d2b+0xac>)
 800aaa2:	4825      	ldr	r0, [pc, #148]	; (800ab38 <__d2b+0xb0>)
 800aaa4:	f240 310f 	movw	r1, #783	; 0x30f
 800aaa8:	f000 fa5e 	bl	800af68 <__assert_func>
 800aaac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aab4:	bb2d      	cbnz	r5, 800ab02 <__d2b+0x7a>
 800aab6:	9301      	str	r3, [sp, #4]
 800aab8:	f1b8 0300 	subs.w	r3, r8, #0
 800aabc:	d026      	beq.n	800ab0c <__d2b+0x84>
 800aabe:	4668      	mov	r0, sp
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	f7ff fd87 	bl	800a5d4 <__lo0bits>
 800aac6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aaca:	b1e8      	cbz	r0, 800ab08 <__d2b+0x80>
 800aacc:	f1c0 0320 	rsb	r3, r0, #32
 800aad0:	fa02 f303 	lsl.w	r3, r2, r3
 800aad4:	430b      	orrs	r3, r1
 800aad6:	40c2      	lsrs	r2, r0
 800aad8:	6163      	str	r3, [r4, #20]
 800aada:	9201      	str	r2, [sp, #4]
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	61a3      	str	r3, [r4, #24]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	bf14      	ite	ne
 800aae4:	2202      	movne	r2, #2
 800aae6:	2201      	moveq	r2, #1
 800aae8:	6122      	str	r2, [r4, #16]
 800aaea:	b1bd      	cbz	r5, 800ab1c <__d2b+0x94>
 800aaec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aaf0:	4405      	add	r5, r0
 800aaf2:	603d      	str	r5, [r7, #0]
 800aaf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aaf8:	6030      	str	r0, [r6, #0]
 800aafa:	4620      	mov	r0, r4
 800aafc:	b003      	add	sp, #12
 800aafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab06:	e7d6      	b.n	800aab6 <__d2b+0x2e>
 800ab08:	6161      	str	r1, [r4, #20]
 800ab0a:	e7e7      	b.n	800aadc <__d2b+0x54>
 800ab0c:	a801      	add	r0, sp, #4
 800ab0e:	f7ff fd61 	bl	800a5d4 <__lo0bits>
 800ab12:	9b01      	ldr	r3, [sp, #4]
 800ab14:	6163      	str	r3, [r4, #20]
 800ab16:	3020      	adds	r0, #32
 800ab18:	2201      	movs	r2, #1
 800ab1a:	e7e5      	b.n	800aae8 <__d2b+0x60>
 800ab1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab24:	6038      	str	r0, [r7, #0]
 800ab26:	6918      	ldr	r0, [r3, #16]
 800ab28:	f7ff fd34 	bl	800a594 <__hi0bits>
 800ab2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab30:	e7e2      	b.n	800aaf8 <__d2b+0x70>
 800ab32:	bf00      	nop
 800ab34:	0800e690 	.word	0x0800e690
 800ab38:	0800e6a1 	.word	0x0800e6a1

0800ab3c <__ssputs_r>:
 800ab3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab40:	688e      	ldr	r6, [r1, #8]
 800ab42:	461f      	mov	r7, r3
 800ab44:	42be      	cmp	r6, r7
 800ab46:	680b      	ldr	r3, [r1, #0]
 800ab48:	4682      	mov	sl, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	4690      	mov	r8, r2
 800ab4e:	d82c      	bhi.n	800abaa <__ssputs_r+0x6e>
 800ab50:	898a      	ldrh	r2, [r1, #12]
 800ab52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab56:	d026      	beq.n	800aba6 <__ssputs_r+0x6a>
 800ab58:	6965      	ldr	r5, [r4, #20]
 800ab5a:	6909      	ldr	r1, [r1, #16]
 800ab5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab60:	eba3 0901 	sub.w	r9, r3, r1
 800ab64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab68:	1c7b      	adds	r3, r7, #1
 800ab6a:	444b      	add	r3, r9
 800ab6c:	106d      	asrs	r5, r5, #1
 800ab6e:	429d      	cmp	r5, r3
 800ab70:	bf38      	it	cc
 800ab72:	461d      	movcc	r5, r3
 800ab74:	0553      	lsls	r3, r2, #21
 800ab76:	d527      	bpl.n	800abc8 <__ssputs_r+0x8c>
 800ab78:	4629      	mov	r1, r5
 800ab7a:	f7ff fbd7 	bl	800a32c <_malloc_r>
 800ab7e:	4606      	mov	r6, r0
 800ab80:	b360      	cbz	r0, 800abdc <__ssputs_r+0xa0>
 800ab82:	6921      	ldr	r1, [r4, #16]
 800ab84:	464a      	mov	r2, r9
 800ab86:	f7fe fcd4 	bl	8009532 <memcpy>
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab94:	81a3      	strh	r3, [r4, #12]
 800ab96:	6126      	str	r6, [r4, #16]
 800ab98:	6165      	str	r5, [r4, #20]
 800ab9a:	444e      	add	r6, r9
 800ab9c:	eba5 0509 	sub.w	r5, r5, r9
 800aba0:	6026      	str	r6, [r4, #0]
 800aba2:	60a5      	str	r5, [r4, #8]
 800aba4:	463e      	mov	r6, r7
 800aba6:	42be      	cmp	r6, r7
 800aba8:	d900      	bls.n	800abac <__ssputs_r+0x70>
 800abaa:	463e      	mov	r6, r7
 800abac:	6820      	ldr	r0, [r4, #0]
 800abae:	4632      	mov	r2, r6
 800abb0:	4641      	mov	r1, r8
 800abb2:	f7fe fbce 	bl	8009352 <memmove>
 800abb6:	68a3      	ldr	r3, [r4, #8]
 800abb8:	1b9b      	subs	r3, r3, r6
 800abba:	60a3      	str	r3, [r4, #8]
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	4433      	add	r3, r6
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	2000      	movs	r0, #0
 800abc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc8:	462a      	mov	r2, r5
 800abca:	f000 fa13 	bl	800aff4 <_realloc_r>
 800abce:	4606      	mov	r6, r0
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d1e0      	bne.n	800ab96 <__ssputs_r+0x5a>
 800abd4:	6921      	ldr	r1, [r4, #16]
 800abd6:	4650      	mov	r0, sl
 800abd8:	f7ff fb34 	bl	800a244 <_free_r>
 800abdc:	230c      	movs	r3, #12
 800abde:	f8ca 3000 	str.w	r3, [sl]
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abe8:	81a3      	strh	r3, [r4, #12]
 800abea:	f04f 30ff 	mov.w	r0, #4294967295
 800abee:	e7e9      	b.n	800abc4 <__ssputs_r+0x88>

0800abf0 <_svfiprintf_r>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	4698      	mov	r8, r3
 800abf6:	898b      	ldrh	r3, [r1, #12]
 800abf8:	061b      	lsls	r3, r3, #24
 800abfa:	b09d      	sub	sp, #116	; 0x74
 800abfc:	4607      	mov	r7, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	4614      	mov	r4, r2
 800ac02:	d50e      	bpl.n	800ac22 <_svfiprintf_r+0x32>
 800ac04:	690b      	ldr	r3, [r1, #16]
 800ac06:	b963      	cbnz	r3, 800ac22 <_svfiprintf_r+0x32>
 800ac08:	2140      	movs	r1, #64	; 0x40
 800ac0a:	f7ff fb8f 	bl	800a32c <_malloc_r>
 800ac0e:	6028      	str	r0, [r5, #0]
 800ac10:	6128      	str	r0, [r5, #16]
 800ac12:	b920      	cbnz	r0, 800ac1e <_svfiprintf_r+0x2e>
 800ac14:	230c      	movs	r3, #12
 800ac16:	603b      	str	r3, [r7, #0]
 800ac18:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1c:	e0d0      	b.n	800adc0 <_svfiprintf_r+0x1d0>
 800ac1e:	2340      	movs	r3, #64	; 0x40
 800ac20:	616b      	str	r3, [r5, #20]
 800ac22:	2300      	movs	r3, #0
 800ac24:	9309      	str	r3, [sp, #36]	; 0x24
 800ac26:	2320      	movs	r3, #32
 800ac28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac30:	2330      	movs	r3, #48	; 0x30
 800ac32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800add8 <_svfiprintf_r+0x1e8>
 800ac36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac3a:	f04f 0901 	mov.w	r9, #1
 800ac3e:	4623      	mov	r3, r4
 800ac40:	469a      	mov	sl, r3
 800ac42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac46:	b10a      	cbz	r2, 800ac4c <_svfiprintf_r+0x5c>
 800ac48:	2a25      	cmp	r2, #37	; 0x25
 800ac4a:	d1f9      	bne.n	800ac40 <_svfiprintf_r+0x50>
 800ac4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac50:	d00b      	beq.n	800ac6a <_svfiprintf_r+0x7a>
 800ac52:	465b      	mov	r3, fp
 800ac54:	4622      	mov	r2, r4
 800ac56:	4629      	mov	r1, r5
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f7ff ff6f 	bl	800ab3c <__ssputs_r>
 800ac5e:	3001      	adds	r0, #1
 800ac60:	f000 80a9 	beq.w	800adb6 <_svfiprintf_r+0x1c6>
 800ac64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac66:	445a      	add	r2, fp
 800ac68:	9209      	str	r2, [sp, #36]	; 0x24
 800ac6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f000 80a1 	beq.w	800adb6 <_svfiprintf_r+0x1c6>
 800ac74:	2300      	movs	r3, #0
 800ac76:	f04f 32ff 	mov.w	r2, #4294967295
 800ac7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac7e:	f10a 0a01 	add.w	sl, sl, #1
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	9307      	str	r3, [sp, #28]
 800ac86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac8a:	931a      	str	r3, [sp, #104]	; 0x68
 800ac8c:	4654      	mov	r4, sl
 800ac8e:	2205      	movs	r2, #5
 800ac90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac94:	4850      	ldr	r0, [pc, #320]	; (800add8 <_svfiprintf_r+0x1e8>)
 800ac96:	f7f5 faa3 	bl	80001e0 <memchr>
 800ac9a:	9a04      	ldr	r2, [sp, #16]
 800ac9c:	b9d8      	cbnz	r0, 800acd6 <_svfiprintf_r+0xe6>
 800ac9e:	06d0      	lsls	r0, r2, #27
 800aca0:	bf44      	itt	mi
 800aca2:	2320      	movmi	r3, #32
 800aca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca8:	0711      	lsls	r1, r2, #28
 800acaa:	bf44      	itt	mi
 800acac:	232b      	movmi	r3, #43	; 0x2b
 800acae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acb2:	f89a 3000 	ldrb.w	r3, [sl]
 800acb6:	2b2a      	cmp	r3, #42	; 0x2a
 800acb8:	d015      	beq.n	800ace6 <_svfiprintf_r+0xf6>
 800acba:	9a07      	ldr	r2, [sp, #28]
 800acbc:	4654      	mov	r4, sl
 800acbe:	2000      	movs	r0, #0
 800acc0:	f04f 0c0a 	mov.w	ip, #10
 800acc4:	4621      	mov	r1, r4
 800acc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acca:	3b30      	subs	r3, #48	; 0x30
 800accc:	2b09      	cmp	r3, #9
 800acce:	d94d      	bls.n	800ad6c <_svfiprintf_r+0x17c>
 800acd0:	b1b0      	cbz	r0, 800ad00 <_svfiprintf_r+0x110>
 800acd2:	9207      	str	r2, [sp, #28]
 800acd4:	e014      	b.n	800ad00 <_svfiprintf_r+0x110>
 800acd6:	eba0 0308 	sub.w	r3, r0, r8
 800acda:	fa09 f303 	lsl.w	r3, r9, r3
 800acde:	4313      	orrs	r3, r2
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	46a2      	mov	sl, r4
 800ace4:	e7d2      	b.n	800ac8c <_svfiprintf_r+0x9c>
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	1d19      	adds	r1, r3, #4
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	9103      	str	r1, [sp, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	bfbb      	ittet	lt
 800acf2:	425b      	neglt	r3, r3
 800acf4:	f042 0202 	orrlt.w	r2, r2, #2
 800acf8:	9307      	strge	r3, [sp, #28]
 800acfa:	9307      	strlt	r3, [sp, #28]
 800acfc:	bfb8      	it	lt
 800acfe:	9204      	strlt	r2, [sp, #16]
 800ad00:	7823      	ldrb	r3, [r4, #0]
 800ad02:	2b2e      	cmp	r3, #46	; 0x2e
 800ad04:	d10c      	bne.n	800ad20 <_svfiprintf_r+0x130>
 800ad06:	7863      	ldrb	r3, [r4, #1]
 800ad08:	2b2a      	cmp	r3, #42	; 0x2a
 800ad0a:	d134      	bne.n	800ad76 <_svfiprintf_r+0x186>
 800ad0c:	9b03      	ldr	r3, [sp, #12]
 800ad0e:	1d1a      	adds	r2, r3, #4
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	9203      	str	r2, [sp, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bfb8      	it	lt
 800ad18:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad1c:	3402      	adds	r4, #2
 800ad1e:	9305      	str	r3, [sp, #20]
 800ad20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ade8 <_svfiprintf_r+0x1f8>
 800ad24:	7821      	ldrb	r1, [r4, #0]
 800ad26:	2203      	movs	r2, #3
 800ad28:	4650      	mov	r0, sl
 800ad2a:	f7f5 fa59 	bl	80001e0 <memchr>
 800ad2e:	b138      	cbz	r0, 800ad40 <_svfiprintf_r+0x150>
 800ad30:	9b04      	ldr	r3, [sp, #16]
 800ad32:	eba0 000a 	sub.w	r0, r0, sl
 800ad36:	2240      	movs	r2, #64	; 0x40
 800ad38:	4082      	lsls	r2, r0
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	3401      	adds	r4, #1
 800ad3e:	9304      	str	r3, [sp, #16]
 800ad40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad44:	4825      	ldr	r0, [pc, #148]	; (800addc <_svfiprintf_r+0x1ec>)
 800ad46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad4a:	2206      	movs	r2, #6
 800ad4c:	f7f5 fa48 	bl	80001e0 <memchr>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d038      	beq.n	800adc6 <_svfiprintf_r+0x1d6>
 800ad54:	4b22      	ldr	r3, [pc, #136]	; (800ade0 <_svfiprintf_r+0x1f0>)
 800ad56:	bb1b      	cbnz	r3, 800ada0 <_svfiprintf_r+0x1b0>
 800ad58:	9b03      	ldr	r3, [sp, #12]
 800ad5a:	3307      	adds	r3, #7
 800ad5c:	f023 0307 	bic.w	r3, r3, #7
 800ad60:	3308      	adds	r3, #8
 800ad62:	9303      	str	r3, [sp, #12]
 800ad64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad66:	4433      	add	r3, r6
 800ad68:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6a:	e768      	b.n	800ac3e <_svfiprintf_r+0x4e>
 800ad6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad70:	460c      	mov	r4, r1
 800ad72:	2001      	movs	r0, #1
 800ad74:	e7a6      	b.n	800acc4 <_svfiprintf_r+0xd4>
 800ad76:	2300      	movs	r3, #0
 800ad78:	3401      	adds	r4, #1
 800ad7a:	9305      	str	r3, [sp, #20]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	f04f 0c0a 	mov.w	ip, #10
 800ad82:	4620      	mov	r0, r4
 800ad84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad88:	3a30      	subs	r2, #48	; 0x30
 800ad8a:	2a09      	cmp	r2, #9
 800ad8c:	d903      	bls.n	800ad96 <_svfiprintf_r+0x1a6>
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d0c6      	beq.n	800ad20 <_svfiprintf_r+0x130>
 800ad92:	9105      	str	r1, [sp, #20]
 800ad94:	e7c4      	b.n	800ad20 <_svfiprintf_r+0x130>
 800ad96:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e7f0      	b.n	800ad82 <_svfiprintf_r+0x192>
 800ada0:	ab03      	add	r3, sp, #12
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	462a      	mov	r2, r5
 800ada6:	4b0f      	ldr	r3, [pc, #60]	; (800ade4 <_svfiprintf_r+0x1f4>)
 800ada8:	a904      	add	r1, sp, #16
 800adaa:	4638      	mov	r0, r7
 800adac:	f7fd fde6 	bl	800897c <_printf_float>
 800adb0:	1c42      	adds	r2, r0, #1
 800adb2:	4606      	mov	r6, r0
 800adb4:	d1d6      	bne.n	800ad64 <_svfiprintf_r+0x174>
 800adb6:	89ab      	ldrh	r3, [r5, #12]
 800adb8:	065b      	lsls	r3, r3, #25
 800adba:	f53f af2d 	bmi.w	800ac18 <_svfiprintf_r+0x28>
 800adbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adc0:	b01d      	add	sp, #116	; 0x74
 800adc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc6:	ab03      	add	r3, sp, #12
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	462a      	mov	r2, r5
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <_svfiprintf_r+0x1f4>)
 800adce:	a904      	add	r1, sp, #16
 800add0:	4638      	mov	r0, r7
 800add2:	f7fe f877 	bl	8008ec4 <_printf_i>
 800add6:	e7eb      	b.n	800adb0 <_svfiprintf_r+0x1c0>
 800add8:	0800e7fc 	.word	0x0800e7fc
 800addc:	0800e806 	.word	0x0800e806
 800ade0:	0800897d 	.word	0x0800897d
 800ade4:	0800ab3d 	.word	0x0800ab3d
 800ade8:	0800e802 	.word	0x0800e802

0800adec <__sflush_r>:
 800adec:	898a      	ldrh	r2, [r1, #12]
 800adee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf2:	4605      	mov	r5, r0
 800adf4:	0710      	lsls	r0, r2, #28
 800adf6:	460c      	mov	r4, r1
 800adf8:	d458      	bmi.n	800aeac <__sflush_r+0xc0>
 800adfa:	684b      	ldr	r3, [r1, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	dc05      	bgt.n	800ae0c <__sflush_r+0x20>
 800ae00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	dc02      	bgt.n	800ae0c <__sflush_r+0x20>
 800ae06:	2000      	movs	r0, #0
 800ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae0e:	2e00      	cmp	r6, #0
 800ae10:	d0f9      	beq.n	800ae06 <__sflush_r+0x1a>
 800ae12:	2300      	movs	r3, #0
 800ae14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae18:	682f      	ldr	r7, [r5, #0]
 800ae1a:	6a21      	ldr	r1, [r4, #32]
 800ae1c:	602b      	str	r3, [r5, #0]
 800ae1e:	d032      	beq.n	800ae86 <__sflush_r+0x9a>
 800ae20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	075a      	lsls	r2, r3, #29
 800ae26:	d505      	bpl.n	800ae34 <__sflush_r+0x48>
 800ae28:	6863      	ldr	r3, [r4, #4]
 800ae2a:	1ac0      	subs	r0, r0, r3
 800ae2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae2e:	b10b      	cbz	r3, 800ae34 <__sflush_r+0x48>
 800ae30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae32:	1ac0      	subs	r0, r0, r3
 800ae34:	2300      	movs	r3, #0
 800ae36:	4602      	mov	r2, r0
 800ae38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae3a:	6a21      	ldr	r1, [r4, #32]
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	47b0      	blx	r6
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	d106      	bne.n	800ae54 <__sflush_r+0x68>
 800ae46:	6829      	ldr	r1, [r5, #0]
 800ae48:	291d      	cmp	r1, #29
 800ae4a:	d82b      	bhi.n	800aea4 <__sflush_r+0xb8>
 800ae4c:	4a29      	ldr	r2, [pc, #164]	; (800aef4 <__sflush_r+0x108>)
 800ae4e:	410a      	asrs	r2, r1
 800ae50:	07d6      	lsls	r6, r2, #31
 800ae52:	d427      	bmi.n	800aea4 <__sflush_r+0xb8>
 800ae54:	2200      	movs	r2, #0
 800ae56:	6062      	str	r2, [r4, #4]
 800ae58:	04d9      	lsls	r1, r3, #19
 800ae5a:	6922      	ldr	r2, [r4, #16]
 800ae5c:	6022      	str	r2, [r4, #0]
 800ae5e:	d504      	bpl.n	800ae6a <__sflush_r+0x7e>
 800ae60:	1c42      	adds	r2, r0, #1
 800ae62:	d101      	bne.n	800ae68 <__sflush_r+0x7c>
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	b903      	cbnz	r3, 800ae6a <__sflush_r+0x7e>
 800ae68:	6560      	str	r0, [r4, #84]	; 0x54
 800ae6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae6c:	602f      	str	r7, [r5, #0]
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	d0c9      	beq.n	800ae06 <__sflush_r+0x1a>
 800ae72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae76:	4299      	cmp	r1, r3
 800ae78:	d002      	beq.n	800ae80 <__sflush_r+0x94>
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	f7ff f9e2 	bl	800a244 <_free_r>
 800ae80:	2000      	movs	r0, #0
 800ae82:	6360      	str	r0, [r4, #52]	; 0x34
 800ae84:	e7c0      	b.n	800ae08 <__sflush_r+0x1c>
 800ae86:	2301      	movs	r3, #1
 800ae88:	4628      	mov	r0, r5
 800ae8a:	47b0      	blx	r6
 800ae8c:	1c41      	adds	r1, r0, #1
 800ae8e:	d1c8      	bne.n	800ae22 <__sflush_r+0x36>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0c5      	beq.n	800ae22 <__sflush_r+0x36>
 800ae96:	2b1d      	cmp	r3, #29
 800ae98:	d001      	beq.n	800ae9e <__sflush_r+0xb2>
 800ae9a:	2b16      	cmp	r3, #22
 800ae9c:	d101      	bne.n	800aea2 <__sflush_r+0xb6>
 800ae9e:	602f      	str	r7, [r5, #0]
 800aea0:	e7b1      	b.n	800ae06 <__sflush_r+0x1a>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	e7ad      	b.n	800ae08 <__sflush_r+0x1c>
 800aeac:	690f      	ldr	r7, [r1, #16]
 800aeae:	2f00      	cmp	r7, #0
 800aeb0:	d0a9      	beq.n	800ae06 <__sflush_r+0x1a>
 800aeb2:	0793      	lsls	r3, r2, #30
 800aeb4:	680e      	ldr	r6, [r1, #0]
 800aeb6:	bf08      	it	eq
 800aeb8:	694b      	ldreq	r3, [r1, #20]
 800aeba:	600f      	str	r7, [r1, #0]
 800aebc:	bf18      	it	ne
 800aebe:	2300      	movne	r3, #0
 800aec0:	eba6 0807 	sub.w	r8, r6, r7
 800aec4:	608b      	str	r3, [r1, #8]
 800aec6:	f1b8 0f00 	cmp.w	r8, #0
 800aeca:	dd9c      	ble.n	800ae06 <__sflush_r+0x1a>
 800aecc:	6a21      	ldr	r1, [r4, #32]
 800aece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aed0:	4643      	mov	r3, r8
 800aed2:	463a      	mov	r2, r7
 800aed4:	4628      	mov	r0, r5
 800aed6:	47b0      	blx	r6
 800aed8:	2800      	cmp	r0, #0
 800aeda:	dc06      	bgt.n	800aeea <__sflush_r+0xfe>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aee2:	81a3      	strh	r3, [r4, #12]
 800aee4:	f04f 30ff 	mov.w	r0, #4294967295
 800aee8:	e78e      	b.n	800ae08 <__sflush_r+0x1c>
 800aeea:	4407      	add	r7, r0
 800aeec:	eba8 0800 	sub.w	r8, r8, r0
 800aef0:	e7e9      	b.n	800aec6 <__sflush_r+0xda>
 800aef2:	bf00      	nop
 800aef4:	dfbffffe 	.word	0xdfbffffe

0800aef8 <_fflush_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	690b      	ldr	r3, [r1, #16]
 800aefc:	4605      	mov	r5, r0
 800aefe:	460c      	mov	r4, r1
 800af00:	b913      	cbnz	r3, 800af08 <_fflush_r+0x10>
 800af02:	2500      	movs	r5, #0
 800af04:	4628      	mov	r0, r5
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	b118      	cbz	r0, 800af12 <_fflush_r+0x1a>
 800af0a:	6a03      	ldr	r3, [r0, #32]
 800af0c:	b90b      	cbnz	r3, 800af12 <_fflush_r+0x1a>
 800af0e:	f7fe f987 	bl	8009220 <__sinit>
 800af12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0f3      	beq.n	800af02 <_fflush_r+0xa>
 800af1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af1c:	07d0      	lsls	r0, r2, #31
 800af1e:	d404      	bmi.n	800af2a <_fflush_r+0x32>
 800af20:	0599      	lsls	r1, r3, #22
 800af22:	d402      	bmi.n	800af2a <_fflush_r+0x32>
 800af24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af26:	f7fe fb02 	bl	800952e <__retarget_lock_acquire_recursive>
 800af2a:	4628      	mov	r0, r5
 800af2c:	4621      	mov	r1, r4
 800af2e:	f7ff ff5d 	bl	800adec <__sflush_r>
 800af32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af34:	07da      	lsls	r2, r3, #31
 800af36:	4605      	mov	r5, r0
 800af38:	d4e4      	bmi.n	800af04 <_fflush_r+0xc>
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	059b      	lsls	r3, r3, #22
 800af3e:	d4e1      	bmi.n	800af04 <_fflush_r+0xc>
 800af40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af42:	f7fe faf5 	bl	8009530 <__retarget_lock_release_recursive>
 800af46:	e7dd      	b.n	800af04 <_fflush_r+0xc>

0800af48 <_sbrk_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d06      	ldr	r5, [pc, #24]	; (800af64 <_sbrk_r+0x1c>)
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	f7f7 ff84 	bl	8002e60 <_sbrk>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_sbrk_r+0x1a>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_sbrk_r+0x1a>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20005360 	.word	0x20005360

0800af68 <__assert_func>:
 800af68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af6a:	4614      	mov	r4, r2
 800af6c:	461a      	mov	r2, r3
 800af6e:	4b09      	ldr	r3, [pc, #36]	; (800af94 <__assert_func+0x2c>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4605      	mov	r5, r0
 800af74:	68d8      	ldr	r0, [r3, #12]
 800af76:	b14c      	cbz	r4, 800af8c <__assert_func+0x24>
 800af78:	4b07      	ldr	r3, [pc, #28]	; (800af98 <__assert_func+0x30>)
 800af7a:	9100      	str	r1, [sp, #0]
 800af7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af80:	4906      	ldr	r1, [pc, #24]	; (800af9c <__assert_func+0x34>)
 800af82:	462b      	mov	r3, r5
 800af84:	f000 f872 	bl	800b06c <fiprintf>
 800af88:	f000 f882 	bl	800b090 <abort>
 800af8c:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <__assert_func+0x38>)
 800af8e:	461c      	mov	r4, r3
 800af90:	e7f3      	b.n	800af7a <__assert_func+0x12>
 800af92:	bf00      	nop
 800af94:	200000a4 	.word	0x200000a4
 800af98:	0800e817 	.word	0x0800e817
 800af9c:	0800e824 	.word	0x0800e824
 800afa0:	0800e852 	.word	0x0800e852

0800afa4 <_calloc_r>:
 800afa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afa6:	fba1 2402 	umull	r2, r4, r1, r2
 800afaa:	b94c      	cbnz	r4, 800afc0 <_calloc_r+0x1c>
 800afac:	4611      	mov	r1, r2
 800afae:	9201      	str	r2, [sp, #4]
 800afb0:	f7ff f9bc 	bl	800a32c <_malloc_r>
 800afb4:	9a01      	ldr	r2, [sp, #4]
 800afb6:	4605      	mov	r5, r0
 800afb8:	b930      	cbnz	r0, 800afc8 <_calloc_r+0x24>
 800afba:	4628      	mov	r0, r5
 800afbc:	b003      	add	sp, #12
 800afbe:	bd30      	pop	{r4, r5, pc}
 800afc0:	220c      	movs	r2, #12
 800afc2:	6002      	str	r2, [r0, #0]
 800afc4:	2500      	movs	r5, #0
 800afc6:	e7f8      	b.n	800afba <_calloc_r+0x16>
 800afc8:	4621      	mov	r1, r4
 800afca:	f7fe f9dc 	bl	8009386 <memset>
 800afce:	e7f4      	b.n	800afba <_calloc_r+0x16>

0800afd0 <__ascii_mbtowc>:
 800afd0:	b082      	sub	sp, #8
 800afd2:	b901      	cbnz	r1, 800afd6 <__ascii_mbtowc+0x6>
 800afd4:	a901      	add	r1, sp, #4
 800afd6:	b142      	cbz	r2, 800afea <__ascii_mbtowc+0x1a>
 800afd8:	b14b      	cbz	r3, 800afee <__ascii_mbtowc+0x1e>
 800afda:	7813      	ldrb	r3, [r2, #0]
 800afdc:	600b      	str	r3, [r1, #0]
 800afde:	7812      	ldrb	r2, [r2, #0]
 800afe0:	1e10      	subs	r0, r2, #0
 800afe2:	bf18      	it	ne
 800afe4:	2001      	movne	r0, #1
 800afe6:	b002      	add	sp, #8
 800afe8:	4770      	bx	lr
 800afea:	4610      	mov	r0, r2
 800afec:	e7fb      	b.n	800afe6 <__ascii_mbtowc+0x16>
 800afee:	f06f 0001 	mvn.w	r0, #1
 800aff2:	e7f8      	b.n	800afe6 <__ascii_mbtowc+0x16>

0800aff4 <_realloc_r>:
 800aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff8:	4680      	mov	r8, r0
 800affa:	4614      	mov	r4, r2
 800affc:	460e      	mov	r6, r1
 800affe:	b921      	cbnz	r1, 800b00a <_realloc_r+0x16>
 800b000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b004:	4611      	mov	r1, r2
 800b006:	f7ff b991 	b.w	800a32c <_malloc_r>
 800b00a:	b92a      	cbnz	r2, 800b018 <_realloc_r+0x24>
 800b00c:	f7ff f91a 	bl	800a244 <_free_r>
 800b010:	4625      	mov	r5, r4
 800b012:	4628      	mov	r0, r5
 800b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b018:	f000 f841 	bl	800b09e <_malloc_usable_size_r>
 800b01c:	4284      	cmp	r4, r0
 800b01e:	4607      	mov	r7, r0
 800b020:	d802      	bhi.n	800b028 <_realloc_r+0x34>
 800b022:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b026:	d812      	bhi.n	800b04e <_realloc_r+0x5a>
 800b028:	4621      	mov	r1, r4
 800b02a:	4640      	mov	r0, r8
 800b02c:	f7ff f97e 	bl	800a32c <_malloc_r>
 800b030:	4605      	mov	r5, r0
 800b032:	2800      	cmp	r0, #0
 800b034:	d0ed      	beq.n	800b012 <_realloc_r+0x1e>
 800b036:	42bc      	cmp	r4, r7
 800b038:	4622      	mov	r2, r4
 800b03a:	4631      	mov	r1, r6
 800b03c:	bf28      	it	cs
 800b03e:	463a      	movcs	r2, r7
 800b040:	f7fe fa77 	bl	8009532 <memcpy>
 800b044:	4631      	mov	r1, r6
 800b046:	4640      	mov	r0, r8
 800b048:	f7ff f8fc 	bl	800a244 <_free_r>
 800b04c:	e7e1      	b.n	800b012 <_realloc_r+0x1e>
 800b04e:	4635      	mov	r5, r6
 800b050:	e7df      	b.n	800b012 <_realloc_r+0x1e>

0800b052 <__ascii_wctomb>:
 800b052:	b149      	cbz	r1, 800b068 <__ascii_wctomb+0x16>
 800b054:	2aff      	cmp	r2, #255	; 0xff
 800b056:	bf85      	ittet	hi
 800b058:	238a      	movhi	r3, #138	; 0x8a
 800b05a:	6003      	strhi	r3, [r0, #0]
 800b05c:	700a      	strbls	r2, [r1, #0]
 800b05e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b062:	bf98      	it	ls
 800b064:	2001      	movls	r0, #1
 800b066:	4770      	bx	lr
 800b068:	4608      	mov	r0, r1
 800b06a:	4770      	bx	lr

0800b06c <fiprintf>:
 800b06c:	b40e      	push	{r1, r2, r3}
 800b06e:	b503      	push	{r0, r1, lr}
 800b070:	4601      	mov	r1, r0
 800b072:	ab03      	add	r3, sp, #12
 800b074:	4805      	ldr	r0, [pc, #20]	; (800b08c <fiprintf+0x20>)
 800b076:	f853 2b04 	ldr.w	r2, [r3], #4
 800b07a:	6800      	ldr	r0, [r0, #0]
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	f000 f83f 	bl	800b100 <_vfiprintf_r>
 800b082:	b002      	add	sp, #8
 800b084:	f85d eb04 	ldr.w	lr, [sp], #4
 800b088:	b003      	add	sp, #12
 800b08a:	4770      	bx	lr
 800b08c:	200000a4 	.word	0x200000a4

0800b090 <abort>:
 800b090:	b508      	push	{r3, lr}
 800b092:	2006      	movs	r0, #6
 800b094:	f000 fa0c 	bl	800b4b0 <raise>
 800b098:	2001      	movs	r0, #1
 800b09a:	f7f7 fe69 	bl	8002d70 <_exit>

0800b09e <_malloc_usable_size_r>:
 800b09e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0a2:	1f18      	subs	r0, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bfbc      	itt	lt
 800b0a8:	580b      	ldrlt	r3, [r1, r0]
 800b0aa:	18c0      	addlt	r0, r0, r3
 800b0ac:	4770      	bx	lr

0800b0ae <__sfputc_r>:
 800b0ae:	6893      	ldr	r3, [r2, #8]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	b410      	push	{r4}
 800b0b6:	6093      	str	r3, [r2, #8]
 800b0b8:	da08      	bge.n	800b0cc <__sfputc_r+0x1e>
 800b0ba:	6994      	ldr	r4, [r2, #24]
 800b0bc:	42a3      	cmp	r3, r4
 800b0be:	db01      	blt.n	800b0c4 <__sfputc_r+0x16>
 800b0c0:	290a      	cmp	r1, #10
 800b0c2:	d103      	bne.n	800b0cc <__sfputc_r+0x1e>
 800b0c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0c8:	f000 b934 	b.w	800b334 <__swbuf_r>
 800b0cc:	6813      	ldr	r3, [r2, #0]
 800b0ce:	1c58      	adds	r0, r3, #1
 800b0d0:	6010      	str	r0, [r2, #0]
 800b0d2:	7019      	strb	r1, [r3, #0]
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <__sfputs_r>:
 800b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0de:	4606      	mov	r6, r0
 800b0e0:	460f      	mov	r7, r1
 800b0e2:	4614      	mov	r4, r2
 800b0e4:	18d5      	adds	r5, r2, r3
 800b0e6:	42ac      	cmp	r4, r5
 800b0e8:	d101      	bne.n	800b0ee <__sfputs_r+0x12>
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	e007      	b.n	800b0fe <__sfputs_r+0x22>
 800b0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f2:	463a      	mov	r2, r7
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7ff ffda 	bl	800b0ae <__sfputc_r>
 800b0fa:	1c43      	adds	r3, r0, #1
 800b0fc:	d1f3      	bne.n	800b0e6 <__sfputs_r+0xa>
 800b0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b100 <_vfiprintf_r>:
 800b100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	460d      	mov	r5, r1
 800b106:	b09d      	sub	sp, #116	; 0x74
 800b108:	4614      	mov	r4, r2
 800b10a:	4698      	mov	r8, r3
 800b10c:	4606      	mov	r6, r0
 800b10e:	b118      	cbz	r0, 800b118 <_vfiprintf_r+0x18>
 800b110:	6a03      	ldr	r3, [r0, #32]
 800b112:	b90b      	cbnz	r3, 800b118 <_vfiprintf_r+0x18>
 800b114:	f7fe f884 	bl	8009220 <__sinit>
 800b118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b11a:	07d9      	lsls	r1, r3, #31
 800b11c:	d405      	bmi.n	800b12a <_vfiprintf_r+0x2a>
 800b11e:	89ab      	ldrh	r3, [r5, #12]
 800b120:	059a      	lsls	r2, r3, #22
 800b122:	d402      	bmi.n	800b12a <_vfiprintf_r+0x2a>
 800b124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b126:	f7fe fa02 	bl	800952e <__retarget_lock_acquire_recursive>
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	071b      	lsls	r3, r3, #28
 800b12e:	d501      	bpl.n	800b134 <_vfiprintf_r+0x34>
 800b130:	692b      	ldr	r3, [r5, #16]
 800b132:	b99b      	cbnz	r3, 800b15c <_vfiprintf_r+0x5c>
 800b134:	4629      	mov	r1, r5
 800b136:	4630      	mov	r0, r6
 800b138:	f000 f93a 	bl	800b3b0 <__swsetup_r>
 800b13c:	b170      	cbz	r0, 800b15c <_vfiprintf_r+0x5c>
 800b13e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b140:	07dc      	lsls	r4, r3, #31
 800b142:	d504      	bpl.n	800b14e <_vfiprintf_r+0x4e>
 800b144:	f04f 30ff 	mov.w	r0, #4294967295
 800b148:	b01d      	add	sp, #116	; 0x74
 800b14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14e:	89ab      	ldrh	r3, [r5, #12]
 800b150:	0598      	lsls	r0, r3, #22
 800b152:	d4f7      	bmi.n	800b144 <_vfiprintf_r+0x44>
 800b154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b156:	f7fe f9eb 	bl	8009530 <__retarget_lock_release_recursive>
 800b15a:	e7f3      	b.n	800b144 <_vfiprintf_r+0x44>
 800b15c:	2300      	movs	r3, #0
 800b15e:	9309      	str	r3, [sp, #36]	; 0x24
 800b160:	2320      	movs	r3, #32
 800b162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b166:	f8cd 800c 	str.w	r8, [sp, #12]
 800b16a:	2330      	movs	r3, #48	; 0x30
 800b16c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b320 <_vfiprintf_r+0x220>
 800b170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b174:	f04f 0901 	mov.w	r9, #1
 800b178:	4623      	mov	r3, r4
 800b17a:	469a      	mov	sl, r3
 800b17c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b180:	b10a      	cbz	r2, 800b186 <_vfiprintf_r+0x86>
 800b182:	2a25      	cmp	r2, #37	; 0x25
 800b184:	d1f9      	bne.n	800b17a <_vfiprintf_r+0x7a>
 800b186:	ebba 0b04 	subs.w	fp, sl, r4
 800b18a:	d00b      	beq.n	800b1a4 <_vfiprintf_r+0xa4>
 800b18c:	465b      	mov	r3, fp
 800b18e:	4622      	mov	r2, r4
 800b190:	4629      	mov	r1, r5
 800b192:	4630      	mov	r0, r6
 800b194:	f7ff ffa2 	bl	800b0dc <__sfputs_r>
 800b198:	3001      	adds	r0, #1
 800b19a:	f000 80a9 	beq.w	800b2f0 <_vfiprintf_r+0x1f0>
 800b19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1a0:	445a      	add	r2, fp
 800b1a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 80a1 	beq.w	800b2f0 <_vfiprintf_r+0x1f0>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1b8:	f10a 0a01 	add.w	sl, sl, #1
 800b1bc:	9304      	str	r3, [sp, #16]
 800b1be:	9307      	str	r3, [sp, #28]
 800b1c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1c4:	931a      	str	r3, [sp, #104]	; 0x68
 800b1c6:	4654      	mov	r4, sl
 800b1c8:	2205      	movs	r2, #5
 800b1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ce:	4854      	ldr	r0, [pc, #336]	; (800b320 <_vfiprintf_r+0x220>)
 800b1d0:	f7f5 f806 	bl	80001e0 <memchr>
 800b1d4:	9a04      	ldr	r2, [sp, #16]
 800b1d6:	b9d8      	cbnz	r0, 800b210 <_vfiprintf_r+0x110>
 800b1d8:	06d1      	lsls	r1, r2, #27
 800b1da:	bf44      	itt	mi
 800b1dc:	2320      	movmi	r3, #32
 800b1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1e2:	0713      	lsls	r3, r2, #28
 800b1e4:	bf44      	itt	mi
 800b1e6:	232b      	movmi	r3, #43	; 0x2b
 800b1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b1f2:	d015      	beq.n	800b220 <_vfiprintf_r+0x120>
 800b1f4:	9a07      	ldr	r2, [sp, #28]
 800b1f6:	4654      	mov	r4, sl
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	f04f 0c0a 	mov.w	ip, #10
 800b1fe:	4621      	mov	r1, r4
 800b200:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b204:	3b30      	subs	r3, #48	; 0x30
 800b206:	2b09      	cmp	r3, #9
 800b208:	d94d      	bls.n	800b2a6 <_vfiprintf_r+0x1a6>
 800b20a:	b1b0      	cbz	r0, 800b23a <_vfiprintf_r+0x13a>
 800b20c:	9207      	str	r2, [sp, #28]
 800b20e:	e014      	b.n	800b23a <_vfiprintf_r+0x13a>
 800b210:	eba0 0308 	sub.w	r3, r0, r8
 800b214:	fa09 f303 	lsl.w	r3, r9, r3
 800b218:	4313      	orrs	r3, r2
 800b21a:	9304      	str	r3, [sp, #16]
 800b21c:	46a2      	mov	sl, r4
 800b21e:	e7d2      	b.n	800b1c6 <_vfiprintf_r+0xc6>
 800b220:	9b03      	ldr	r3, [sp, #12]
 800b222:	1d19      	adds	r1, r3, #4
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	9103      	str	r1, [sp, #12]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	bfbb      	ittet	lt
 800b22c:	425b      	neglt	r3, r3
 800b22e:	f042 0202 	orrlt.w	r2, r2, #2
 800b232:	9307      	strge	r3, [sp, #28]
 800b234:	9307      	strlt	r3, [sp, #28]
 800b236:	bfb8      	it	lt
 800b238:	9204      	strlt	r2, [sp, #16]
 800b23a:	7823      	ldrb	r3, [r4, #0]
 800b23c:	2b2e      	cmp	r3, #46	; 0x2e
 800b23e:	d10c      	bne.n	800b25a <_vfiprintf_r+0x15a>
 800b240:	7863      	ldrb	r3, [r4, #1]
 800b242:	2b2a      	cmp	r3, #42	; 0x2a
 800b244:	d134      	bne.n	800b2b0 <_vfiprintf_r+0x1b0>
 800b246:	9b03      	ldr	r3, [sp, #12]
 800b248:	1d1a      	adds	r2, r3, #4
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	9203      	str	r2, [sp, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	bfb8      	it	lt
 800b252:	f04f 33ff 	movlt.w	r3, #4294967295
 800b256:	3402      	adds	r4, #2
 800b258:	9305      	str	r3, [sp, #20]
 800b25a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b330 <_vfiprintf_r+0x230>
 800b25e:	7821      	ldrb	r1, [r4, #0]
 800b260:	2203      	movs	r2, #3
 800b262:	4650      	mov	r0, sl
 800b264:	f7f4 ffbc 	bl	80001e0 <memchr>
 800b268:	b138      	cbz	r0, 800b27a <_vfiprintf_r+0x17a>
 800b26a:	9b04      	ldr	r3, [sp, #16]
 800b26c:	eba0 000a 	sub.w	r0, r0, sl
 800b270:	2240      	movs	r2, #64	; 0x40
 800b272:	4082      	lsls	r2, r0
 800b274:	4313      	orrs	r3, r2
 800b276:	3401      	adds	r4, #1
 800b278:	9304      	str	r3, [sp, #16]
 800b27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b27e:	4829      	ldr	r0, [pc, #164]	; (800b324 <_vfiprintf_r+0x224>)
 800b280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b284:	2206      	movs	r2, #6
 800b286:	f7f4 ffab 	bl	80001e0 <memchr>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d03f      	beq.n	800b30e <_vfiprintf_r+0x20e>
 800b28e:	4b26      	ldr	r3, [pc, #152]	; (800b328 <_vfiprintf_r+0x228>)
 800b290:	bb1b      	cbnz	r3, 800b2da <_vfiprintf_r+0x1da>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	3307      	adds	r3, #7
 800b296:	f023 0307 	bic.w	r3, r3, #7
 800b29a:	3308      	adds	r3, #8
 800b29c:	9303      	str	r3, [sp, #12]
 800b29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a0:	443b      	add	r3, r7
 800b2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2a4:	e768      	b.n	800b178 <_vfiprintf_r+0x78>
 800b2a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2aa:	460c      	mov	r4, r1
 800b2ac:	2001      	movs	r0, #1
 800b2ae:	e7a6      	b.n	800b1fe <_vfiprintf_r+0xfe>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	3401      	adds	r4, #1
 800b2b4:	9305      	str	r3, [sp, #20]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	f04f 0c0a 	mov.w	ip, #10
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2c2:	3a30      	subs	r2, #48	; 0x30
 800b2c4:	2a09      	cmp	r2, #9
 800b2c6:	d903      	bls.n	800b2d0 <_vfiprintf_r+0x1d0>
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d0c6      	beq.n	800b25a <_vfiprintf_r+0x15a>
 800b2cc:	9105      	str	r1, [sp, #20]
 800b2ce:	e7c4      	b.n	800b25a <_vfiprintf_r+0x15a>
 800b2d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e7f0      	b.n	800b2bc <_vfiprintf_r+0x1bc>
 800b2da:	ab03      	add	r3, sp, #12
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	462a      	mov	r2, r5
 800b2e0:	4b12      	ldr	r3, [pc, #72]	; (800b32c <_vfiprintf_r+0x22c>)
 800b2e2:	a904      	add	r1, sp, #16
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f7fd fb49 	bl	800897c <_printf_float>
 800b2ea:	4607      	mov	r7, r0
 800b2ec:	1c78      	adds	r0, r7, #1
 800b2ee:	d1d6      	bne.n	800b29e <_vfiprintf_r+0x19e>
 800b2f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2f2:	07d9      	lsls	r1, r3, #31
 800b2f4:	d405      	bmi.n	800b302 <_vfiprintf_r+0x202>
 800b2f6:	89ab      	ldrh	r3, [r5, #12]
 800b2f8:	059a      	lsls	r2, r3, #22
 800b2fa:	d402      	bmi.n	800b302 <_vfiprintf_r+0x202>
 800b2fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2fe:	f7fe f917 	bl	8009530 <__retarget_lock_release_recursive>
 800b302:	89ab      	ldrh	r3, [r5, #12]
 800b304:	065b      	lsls	r3, r3, #25
 800b306:	f53f af1d 	bmi.w	800b144 <_vfiprintf_r+0x44>
 800b30a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b30c:	e71c      	b.n	800b148 <_vfiprintf_r+0x48>
 800b30e:	ab03      	add	r3, sp, #12
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	462a      	mov	r2, r5
 800b314:	4b05      	ldr	r3, [pc, #20]	; (800b32c <_vfiprintf_r+0x22c>)
 800b316:	a904      	add	r1, sp, #16
 800b318:	4630      	mov	r0, r6
 800b31a:	f7fd fdd3 	bl	8008ec4 <_printf_i>
 800b31e:	e7e4      	b.n	800b2ea <_vfiprintf_r+0x1ea>
 800b320:	0800e7fc 	.word	0x0800e7fc
 800b324:	0800e806 	.word	0x0800e806
 800b328:	0800897d 	.word	0x0800897d
 800b32c:	0800b0dd 	.word	0x0800b0dd
 800b330:	0800e802 	.word	0x0800e802

0800b334 <__swbuf_r>:
 800b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b336:	460e      	mov	r6, r1
 800b338:	4614      	mov	r4, r2
 800b33a:	4605      	mov	r5, r0
 800b33c:	b118      	cbz	r0, 800b346 <__swbuf_r+0x12>
 800b33e:	6a03      	ldr	r3, [r0, #32]
 800b340:	b90b      	cbnz	r3, 800b346 <__swbuf_r+0x12>
 800b342:	f7fd ff6d 	bl	8009220 <__sinit>
 800b346:	69a3      	ldr	r3, [r4, #24]
 800b348:	60a3      	str	r3, [r4, #8]
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	071a      	lsls	r2, r3, #28
 800b34e:	d525      	bpl.n	800b39c <__swbuf_r+0x68>
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	b31b      	cbz	r3, 800b39c <__swbuf_r+0x68>
 800b354:	6823      	ldr	r3, [r4, #0]
 800b356:	6922      	ldr	r2, [r4, #16]
 800b358:	1a98      	subs	r0, r3, r2
 800b35a:	6963      	ldr	r3, [r4, #20]
 800b35c:	b2f6      	uxtb	r6, r6
 800b35e:	4283      	cmp	r3, r0
 800b360:	4637      	mov	r7, r6
 800b362:	dc04      	bgt.n	800b36e <__swbuf_r+0x3a>
 800b364:	4621      	mov	r1, r4
 800b366:	4628      	mov	r0, r5
 800b368:	f7ff fdc6 	bl	800aef8 <_fflush_r>
 800b36c:	b9e0      	cbnz	r0, 800b3a8 <__swbuf_r+0x74>
 800b36e:	68a3      	ldr	r3, [r4, #8]
 800b370:	3b01      	subs	r3, #1
 800b372:	60a3      	str	r3, [r4, #8]
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	1c5a      	adds	r2, r3, #1
 800b378:	6022      	str	r2, [r4, #0]
 800b37a:	701e      	strb	r6, [r3, #0]
 800b37c:	6962      	ldr	r2, [r4, #20]
 800b37e:	1c43      	adds	r3, r0, #1
 800b380:	429a      	cmp	r2, r3
 800b382:	d004      	beq.n	800b38e <__swbuf_r+0x5a>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	07db      	lsls	r3, r3, #31
 800b388:	d506      	bpl.n	800b398 <__swbuf_r+0x64>
 800b38a:	2e0a      	cmp	r6, #10
 800b38c:	d104      	bne.n	800b398 <__swbuf_r+0x64>
 800b38e:	4621      	mov	r1, r4
 800b390:	4628      	mov	r0, r5
 800b392:	f7ff fdb1 	bl	800aef8 <_fflush_r>
 800b396:	b938      	cbnz	r0, 800b3a8 <__swbuf_r+0x74>
 800b398:	4638      	mov	r0, r7
 800b39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b39c:	4621      	mov	r1, r4
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f000 f806 	bl	800b3b0 <__swsetup_r>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d0d5      	beq.n	800b354 <__swbuf_r+0x20>
 800b3a8:	f04f 37ff 	mov.w	r7, #4294967295
 800b3ac:	e7f4      	b.n	800b398 <__swbuf_r+0x64>
	...

0800b3b0 <__swsetup_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4b2a      	ldr	r3, [pc, #168]	; (800b45c <__swsetup_r+0xac>)
 800b3b4:	4605      	mov	r5, r0
 800b3b6:	6818      	ldr	r0, [r3, #0]
 800b3b8:	460c      	mov	r4, r1
 800b3ba:	b118      	cbz	r0, 800b3c4 <__swsetup_r+0x14>
 800b3bc:	6a03      	ldr	r3, [r0, #32]
 800b3be:	b90b      	cbnz	r3, 800b3c4 <__swsetup_r+0x14>
 800b3c0:	f7fd ff2e 	bl	8009220 <__sinit>
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3ca:	0718      	lsls	r0, r3, #28
 800b3cc:	d422      	bmi.n	800b414 <__swsetup_r+0x64>
 800b3ce:	06d9      	lsls	r1, r3, #27
 800b3d0:	d407      	bmi.n	800b3e2 <__swsetup_r+0x32>
 800b3d2:	2309      	movs	r3, #9
 800b3d4:	602b      	str	r3, [r5, #0]
 800b3d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e0:	e034      	b.n	800b44c <__swsetup_r+0x9c>
 800b3e2:	0758      	lsls	r0, r3, #29
 800b3e4:	d512      	bpl.n	800b40c <__swsetup_r+0x5c>
 800b3e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3e8:	b141      	cbz	r1, 800b3fc <__swsetup_r+0x4c>
 800b3ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3ee:	4299      	cmp	r1, r3
 800b3f0:	d002      	beq.n	800b3f8 <__swsetup_r+0x48>
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f7fe ff26 	bl	800a244 <_free_r>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	6363      	str	r3, [r4, #52]	; 0x34
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	2300      	movs	r3, #0
 800b406:	6063      	str	r3, [r4, #4]
 800b408:	6923      	ldr	r3, [r4, #16]
 800b40a:	6023      	str	r3, [r4, #0]
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	f043 0308 	orr.w	r3, r3, #8
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	b94b      	cbnz	r3, 800b42c <__swsetup_r+0x7c>
 800b418:	89a3      	ldrh	r3, [r4, #12]
 800b41a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b41e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b422:	d003      	beq.n	800b42c <__swsetup_r+0x7c>
 800b424:	4621      	mov	r1, r4
 800b426:	4628      	mov	r0, r5
 800b428:	f000 f884 	bl	800b534 <__smakebuf_r>
 800b42c:	89a0      	ldrh	r0, [r4, #12]
 800b42e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b432:	f010 0301 	ands.w	r3, r0, #1
 800b436:	d00a      	beq.n	800b44e <__swsetup_r+0x9e>
 800b438:	2300      	movs	r3, #0
 800b43a:	60a3      	str	r3, [r4, #8]
 800b43c:	6963      	ldr	r3, [r4, #20]
 800b43e:	425b      	negs	r3, r3
 800b440:	61a3      	str	r3, [r4, #24]
 800b442:	6923      	ldr	r3, [r4, #16]
 800b444:	b943      	cbnz	r3, 800b458 <__swsetup_r+0xa8>
 800b446:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b44a:	d1c4      	bne.n	800b3d6 <__swsetup_r+0x26>
 800b44c:	bd38      	pop	{r3, r4, r5, pc}
 800b44e:	0781      	lsls	r1, r0, #30
 800b450:	bf58      	it	pl
 800b452:	6963      	ldrpl	r3, [r4, #20]
 800b454:	60a3      	str	r3, [r4, #8]
 800b456:	e7f4      	b.n	800b442 <__swsetup_r+0x92>
 800b458:	2000      	movs	r0, #0
 800b45a:	e7f7      	b.n	800b44c <__swsetup_r+0x9c>
 800b45c:	200000a4 	.word	0x200000a4

0800b460 <_raise_r>:
 800b460:	291f      	cmp	r1, #31
 800b462:	b538      	push	{r3, r4, r5, lr}
 800b464:	4604      	mov	r4, r0
 800b466:	460d      	mov	r5, r1
 800b468:	d904      	bls.n	800b474 <_raise_r+0x14>
 800b46a:	2316      	movs	r3, #22
 800b46c:	6003      	str	r3, [r0, #0]
 800b46e:	f04f 30ff 	mov.w	r0, #4294967295
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b476:	b112      	cbz	r2, 800b47e <_raise_r+0x1e>
 800b478:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b47c:	b94b      	cbnz	r3, 800b492 <_raise_r+0x32>
 800b47e:	4620      	mov	r0, r4
 800b480:	f000 f830 	bl	800b4e4 <_getpid_r>
 800b484:	462a      	mov	r2, r5
 800b486:	4601      	mov	r1, r0
 800b488:	4620      	mov	r0, r4
 800b48a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b48e:	f000 b817 	b.w	800b4c0 <_kill_r>
 800b492:	2b01      	cmp	r3, #1
 800b494:	d00a      	beq.n	800b4ac <_raise_r+0x4c>
 800b496:	1c59      	adds	r1, r3, #1
 800b498:	d103      	bne.n	800b4a2 <_raise_r+0x42>
 800b49a:	2316      	movs	r3, #22
 800b49c:	6003      	str	r3, [r0, #0]
 800b49e:	2001      	movs	r0, #1
 800b4a0:	e7e7      	b.n	800b472 <_raise_r+0x12>
 800b4a2:	2400      	movs	r4, #0
 800b4a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	4798      	blx	r3
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	e7e0      	b.n	800b472 <_raise_r+0x12>

0800b4b0 <raise>:
 800b4b0:	4b02      	ldr	r3, [pc, #8]	; (800b4bc <raise+0xc>)
 800b4b2:	4601      	mov	r1, r0
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	f7ff bfd3 	b.w	800b460 <_raise_r>
 800b4ba:	bf00      	nop
 800b4bc:	200000a4 	.word	0x200000a4

0800b4c0 <_kill_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4d07      	ldr	r5, [pc, #28]	; (800b4e0 <_kill_r+0x20>)
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	602b      	str	r3, [r5, #0]
 800b4ce:	f7f7 fc3f 	bl	8002d50 <_kill>
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	d102      	bne.n	800b4dc <_kill_r+0x1c>
 800b4d6:	682b      	ldr	r3, [r5, #0]
 800b4d8:	b103      	cbz	r3, 800b4dc <_kill_r+0x1c>
 800b4da:	6023      	str	r3, [r4, #0]
 800b4dc:	bd38      	pop	{r3, r4, r5, pc}
 800b4de:	bf00      	nop
 800b4e0:	20005360 	.word	0x20005360

0800b4e4 <_getpid_r>:
 800b4e4:	f7f7 bc2c 	b.w	8002d40 <_getpid>

0800b4e8 <__swhatbuf_r>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4f0:	2900      	cmp	r1, #0
 800b4f2:	b096      	sub	sp, #88	; 0x58
 800b4f4:	4615      	mov	r5, r2
 800b4f6:	461e      	mov	r6, r3
 800b4f8:	da0d      	bge.n	800b516 <__swhatbuf_r+0x2e>
 800b4fa:	89a3      	ldrh	r3, [r4, #12]
 800b4fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b500:	f04f 0100 	mov.w	r1, #0
 800b504:	bf0c      	ite	eq
 800b506:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b50a:	2340      	movne	r3, #64	; 0x40
 800b50c:	2000      	movs	r0, #0
 800b50e:	6031      	str	r1, [r6, #0]
 800b510:	602b      	str	r3, [r5, #0]
 800b512:	b016      	add	sp, #88	; 0x58
 800b514:	bd70      	pop	{r4, r5, r6, pc}
 800b516:	466a      	mov	r2, sp
 800b518:	f000 f848 	bl	800b5ac <_fstat_r>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	dbec      	blt.n	800b4fa <__swhatbuf_r+0x12>
 800b520:	9901      	ldr	r1, [sp, #4]
 800b522:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b526:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b52a:	4259      	negs	r1, r3
 800b52c:	4159      	adcs	r1, r3
 800b52e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b532:	e7eb      	b.n	800b50c <__swhatbuf_r+0x24>

0800b534 <__smakebuf_r>:
 800b534:	898b      	ldrh	r3, [r1, #12]
 800b536:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b538:	079d      	lsls	r5, r3, #30
 800b53a:	4606      	mov	r6, r0
 800b53c:	460c      	mov	r4, r1
 800b53e:	d507      	bpl.n	800b550 <__smakebuf_r+0x1c>
 800b540:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	6123      	str	r3, [r4, #16]
 800b548:	2301      	movs	r3, #1
 800b54a:	6163      	str	r3, [r4, #20]
 800b54c:	b002      	add	sp, #8
 800b54e:	bd70      	pop	{r4, r5, r6, pc}
 800b550:	ab01      	add	r3, sp, #4
 800b552:	466a      	mov	r2, sp
 800b554:	f7ff ffc8 	bl	800b4e8 <__swhatbuf_r>
 800b558:	9900      	ldr	r1, [sp, #0]
 800b55a:	4605      	mov	r5, r0
 800b55c:	4630      	mov	r0, r6
 800b55e:	f7fe fee5 	bl	800a32c <_malloc_r>
 800b562:	b948      	cbnz	r0, 800b578 <__smakebuf_r+0x44>
 800b564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b568:	059a      	lsls	r2, r3, #22
 800b56a:	d4ef      	bmi.n	800b54c <__smakebuf_r+0x18>
 800b56c:	f023 0303 	bic.w	r3, r3, #3
 800b570:	f043 0302 	orr.w	r3, r3, #2
 800b574:	81a3      	strh	r3, [r4, #12]
 800b576:	e7e3      	b.n	800b540 <__smakebuf_r+0xc>
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	6020      	str	r0, [r4, #0]
 800b57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b580:	81a3      	strh	r3, [r4, #12]
 800b582:	9b00      	ldr	r3, [sp, #0]
 800b584:	6163      	str	r3, [r4, #20]
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	6120      	str	r0, [r4, #16]
 800b58a:	b15b      	cbz	r3, 800b5a4 <__smakebuf_r+0x70>
 800b58c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b590:	4630      	mov	r0, r6
 800b592:	f000 f81d 	bl	800b5d0 <_isatty_r>
 800b596:	b128      	cbz	r0, 800b5a4 <__smakebuf_r+0x70>
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	f023 0303 	bic.w	r3, r3, #3
 800b59e:	f043 0301 	orr.w	r3, r3, #1
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	431d      	orrs	r5, r3
 800b5a8:	81a5      	strh	r5, [r4, #12]
 800b5aa:	e7cf      	b.n	800b54c <__smakebuf_r+0x18>

0800b5ac <_fstat_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4d07      	ldr	r5, [pc, #28]	; (800b5cc <_fstat_r+0x20>)
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	602b      	str	r3, [r5, #0]
 800b5ba:	f7f7 fc28 	bl	8002e0e <_fstat>
 800b5be:	1c43      	adds	r3, r0, #1
 800b5c0:	d102      	bne.n	800b5c8 <_fstat_r+0x1c>
 800b5c2:	682b      	ldr	r3, [r5, #0]
 800b5c4:	b103      	cbz	r3, 800b5c8 <_fstat_r+0x1c>
 800b5c6:	6023      	str	r3, [r4, #0]
 800b5c8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20005360 	.word	0x20005360

0800b5d0 <_isatty_r>:
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	4d06      	ldr	r5, [pc, #24]	; (800b5ec <_isatty_r+0x1c>)
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	4608      	mov	r0, r1
 800b5da:	602b      	str	r3, [r5, #0]
 800b5dc:	f7f7 fc27 	bl	8002e2e <_isatty>
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	d102      	bne.n	800b5ea <_isatty_r+0x1a>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	b103      	cbz	r3, 800b5ea <_isatty_r+0x1a>
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
 800b5ec:	20005360 	.word	0x20005360

0800b5f0 <_init>:
 800b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f2:	bf00      	nop
 800b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f6:	bc08      	pop	{r3}
 800b5f8:	469e      	mov	lr, r3
 800b5fa:	4770      	bx	lr

0800b5fc <_fini>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr
